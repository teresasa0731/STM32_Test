
PID_F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061c0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08006390  08006390  00016390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064b4  080064b4  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  080064b4  080064b4  000164b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064bc  080064bc  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064bc  080064bc  000164bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064c0  080064c0  000164c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080064c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000410  20000060  08006524  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000470  08006524  00020470  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f616  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002230  00000000  00000000  0002f6e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e58  00000000  00000000  00031920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b43  00000000  00000000  00032778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023447  00000000  00000000  000332bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011695  00000000  00000000  00056702  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd646  00000000  00000000  00067d97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000041b0  00000000  00000000  001453e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  00149590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006378 	.word	0x08006378

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08006378 	.word	0x08006378

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <initMotor>:
uint16_t FSRValue[6];




void initMotor(void){
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
	// motor 1
	for(int i = 1;i <= 3; i++){
 80005b2:	2301      	movs	r3, #1
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	e013      	b.n	80005e0 <initMotor+0x34>
		motor[i].Speed = 0;
 80005b8:	4a16      	ldr	r2, [pc, #88]	; (8000614 <initMotor+0x68>)
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	00db      	lsls	r3, r3, #3
 80005be:	4413      	add	r3, r2
 80005c0:	2200      	movs	r2, #0
 80005c2:	809a      	strh	r2, [r3, #4]
		motor[i].TargetPulse = 0;
 80005c4:	4a13      	ldr	r2, [pc, #76]	; (8000614 <initMotor+0x68>)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	2100      	movs	r1, #0
 80005ca:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		motor[i].direc = 0;
 80005ce:	4a11      	ldr	r2, [pc, #68]	; (8000614 <initMotor+0x68>)
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	00db      	lsls	r3, r3, #3
 80005d4:	4413      	add	r3, r2
 80005d6:	2200      	movs	r2, #0
 80005d8:	80da      	strh	r2, [r3, #6]
	for(int i = 1;i <= 3; i++){
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	3301      	adds	r3, #1
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2b03      	cmp	r3, #3
 80005e4:	dde8      	ble.n	80005b8 <initMotor+0xc>
	}

	motor1A = 0;
 80005e6:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <initMotor+0x6c>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	635a      	str	r2, [r3, #52]	; 0x34
	motor1B = 0;
 80005ec:	4b0b      	ldr	r3, [pc, #44]	; (800061c <initMotor+0x70>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	635a      	str	r2, [r3, #52]	; 0x34

	HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_1 | TIM_CHANNEL_2);	// start encoderM1(timer2)
 80005f2:	2104      	movs	r1, #4
 80005f4:	480a      	ldr	r0, [pc, #40]	; (8000620 <initMotor+0x74>)
 80005f6:	f003 fc2f 	bl	8003e58 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);	// start motor1A
 80005fa:	2100      	movs	r1, #0
 80005fc:	4809      	ldr	r0, [pc, #36]	; (8000624 <initMotor+0x78>)
 80005fe:	f003 fabd 	bl	8003b7c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim14,TIM_CHANNEL_1);	// start motor1B
 8000602:	2100      	movs	r1, #0
 8000604:	4808      	ldr	r0, [pc, #32]	; (8000628 <initMotor+0x7c>)
 8000606:	f003 fab9 	bl	8003b7c <HAL_TIM_PWM_Start>
}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	200002e8 	.word	0x200002e8
 8000618:	40010000 	.word	0x40010000
 800061c:	40002000 	.word	0x40002000
 8000620:	2000010c 	.word	0x2000010c
 8000624:	200000c4 	.word	0x200000c4
 8000628:	2000019c 	.word	0x2000019c

0800062c <errorOccur>:

void errorOccur(uint16_t type,uint16_t motorNum){
 800062c:	b580      	push	{r7, lr}
 800062e:	b09c      	sub	sp, #112	; 0x70
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	460a      	mov	r2, r1
 8000636:	80fb      	strh	r3, [r7, #6]
 8000638:	4613      	mov	r3, r2
 800063a:	80bb      	strh	r3, [r7, #4]
	char uart_buf[100];
	int uart_buf_len;
	switch(type){
 800063c:	88fb      	ldrh	r3, [r7, #6]
 800063e:	2b01      	cmp	r3, #1
 8000640:	d002      	beq.n	8000648 <errorOccur+0x1c>
 8000642:	2b02      	cmp	r3, #2
 8000644:	d010      	beq.n	8000668 <errorOccur+0x3c>
	case 2:
		uart_buf_len = sprintf(uart_buf, "Can't config motor %d speed\r\n",motorNum);
		HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);

	}
}
 8000646:	e01f      	b.n	8000688 <errorOccur+0x5c>
		uart_buf_len = sprintf(uart_buf, "Can't read motor %d encoder value\r\n",motorNum);
 8000648:	88ba      	ldrh	r2, [r7, #4]
 800064a:	f107 0308 	add.w	r3, r7, #8
 800064e:	4910      	ldr	r1, [pc, #64]	; (8000690 <errorOccur+0x64>)
 8000650:	4618      	mov	r0, r3
 8000652:	f005 f9ed 	bl	8005a30 <siprintf>
 8000656:	66f8      	str	r0, [r7, #108]	; 0x6c
		HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800065a:	b29a      	uxth	r2, r3
 800065c:	f107 0108 	add.w	r1, r7, #8
 8000660:	2364      	movs	r3, #100	; 0x64
 8000662:	480c      	ldr	r0, [pc, #48]	; (8000694 <errorOccur+0x68>)
 8000664:	f004 fa1d 	bl	8004aa2 <HAL_UART_Transmit>
		uart_buf_len = sprintf(uart_buf, "Can't config motor %d speed\r\n",motorNum);
 8000668:	88ba      	ldrh	r2, [r7, #4]
 800066a:	f107 0308 	add.w	r3, r7, #8
 800066e:	490a      	ldr	r1, [pc, #40]	; (8000698 <errorOccur+0x6c>)
 8000670:	4618      	mov	r0, r3
 8000672:	f005 f9dd 	bl	8005a30 <siprintf>
 8000676:	66f8      	str	r0, [r7, #108]	; 0x6c
		HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000678:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800067a:	b29a      	uxth	r2, r3
 800067c:	f107 0108 	add.w	r1, r7, #8
 8000680:	2364      	movs	r3, #100	; 0x64
 8000682:	4804      	ldr	r0, [pc, #16]	; (8000694 <errorOccur+0x68>)
 8000684:	f004 fa0d 	bl	8004aa2 <HAL_UART_Transmit>
}
 8000688:	bf00      	nop
 800068a:	3770      	adds	r7, #112	; 0x70
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	08006390 	.word	0x08006390
 8000694:	200001e4 	.word	0x200001e4
 8000698:	080063b4 	.word	0x080063b4

0800069c <voltage2pulse>:
	uint32_t pulse_value = 16 * rpm_value + 86;
	return pulse_value;
}

// table for converting ADC voltage read from FSR,to PWM pulse value
uint32_t voltage2pulse(uint32_t FSRvoltage){
 800069c:	b480      	push	{r7}
 800069e:	b085      	sub	sp, #20
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
	uint32_t pulse_value = FSRvoltage/10 + 100;	// input speed = 0.1*FSR_value + 100
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	4a06      	ldr	r2, [pc, #24]	; (80006c0 <voltage2pulse+0x24>)
 80006a8:	fba2 2303 	umull	r2, r3, r2, r3
 80006ac:	08db      	lsrs	r3, r3, #3
 80006ae:	3364      	adds	r3, #100	; 0x64
 80006b0:	60fb      	str	r3, [r7, #12]
	return pulse_value;
 80006b2:	68fb      	ldr	r3, [r7, #12]
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	3714      	adds	r7, #20
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr
 80006c0:	cccccccd 	.word	0xcccccccd

080006c4 <getSpeed>:



// get motor real speed (named as encoder value)
short getSpeed(uint16_t motor_num){
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	80fb      	strh	r3, [r7, #6]
	short fspeed = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	81fb      	strh	r3, [r7, #14]
	switch(motor_num){
 80006d2:	88fb      	ldrh	r3, [r7, #6]
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d113      	bne.n	8000700 <getSpeed+0x3c>
	case 1:
		fspeed = (short)(encoderM1)*100/(16*4); // v = (Num/(CPR*F))/t
 80006d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006de:	b21b      	sxth	r3, r3
 80006e0:	461a      	mov	r2, r3
 80006e2:	2364      	movs	r3, #100	; 0x64
 80006e4:	fb02 f303 	mul.w	r3, r2, r3
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	da00      	bge.n	80006ee <getSpeed+0x2a>
 80006ec:	333f      	adds	r3, #63	; 0x3f
 80006ee:	119b      	asrs	r3, r3, #6
 80006f0:	81fb      	strh	r3, [r7, #14]
		encoderM1 = 0;
 80006f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006f6:	2200      	movs	r2, #0
 80006f8:	625a      	str	r2, [r3, #36]	; 0x24
		return fspeed;
 80006fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80006fe:	e005      	b.n	800070c <getSpeed+0x48>
	default:
		errorOccur(1,motor_num);
 8000700:	88fb      	ldrh	r3, [r7, #6]
 8000702:	4619      	mov	r1, r3
 8000704:	2001      	movs	r0, #1
 8000706:	f7ff ff91 	bl	800062c <errorOccur>
	}
	return 0;
 800070a:	2300      	movs	r3, #0
}
 800070c:	4618      	mov	r0, r3
 800070e:	3710      	adds	r7, #16
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <readFSRVoltage>:

// ADC Conversion processing
void readFSRVoltage(void){
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
	for(int FSRNum = 0; FSRNum < 6; FSRNum ++){
 800071a:	2300      	movs	r3, #0
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	e01b      	b.n	8000758 <readFSRVoltage+0x44>
       HAL_ADC_Start(&hadc1);
 8000720:	4811      	ldr	r0, [pc, #68]	; (8000768 <readFSRVoltage+0x54>)
 8000722:	f001 f9c1 	bl	8001aa8 <HAL_ADC_Start>
       HAL_ADC_PollForConversion(&hadc1,100);
 8000726:	2164      	movs	r1, #100	; 0x64
 8000728:	480f      	ldr	r0, [pc, #60]	; (8000768 <readFSRVoltage+0x54>)
 800072a:	f001 fa8f 	bl	8001c4c <HAL_ADC_PollForConversion>
       if(HAL_IS_BIT_SET(HAL_ADC_GetState(&hadc1),HAL_ADC_STATE_REG_EOC)){
 800072e:	480e      	ldr	r0, [pc, #56]	; (8000768 <readFSRVoltage+0x54>)
 8000730:	f001 fc56 	bl	8001fe0 <HAL_ADC_GetState>
 8000734:	4603      	mov	r3, r0
 8000736:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800073a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800073e:	d108      	bne.n	8000752 <readFSRVoltage+0x3e>
    	   FSRValue[FSRNum] = (uint16_t)HAL_ADC_GetValue(&hadc1);
 8000740:	4809      	ldr	r0, [pc, #36]	; (8000768 <readFSRVoltage+0x54>)
 8000742:	f001 fb0e 	bl	8001d62 <HAL_ADC_GetValue>
 8000746:	4603      	mov	r3, r0
 8000748:	b299      	uxth	r1, r3
 800074a:	4a08      	ldr	r2, [pc, #32]	; (800076c <readFSRVoltage+0x58>)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int FSRNum = 0; FSRNum < 6; FSRNum ++){
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	3301      	adds	r3, #1
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	2b05      	cmp	r3, #5
 800075c:	dde0      	ble.n	8000720 <readFSRVoltage+0xc>
       }
	}
}
 800075e:	bf00      	nop
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	2000007c 	.word	0x2000007c
 800076c:	20000310 	.word	0x20000310

08000770 <changeSpeed_M1>:
void changeSpeed_M1(void){
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
	switch(motor[1].direc){
 8000774:	4b1c      	ldr	r3, [pc, #112]	; (80007e8 <changeSpeed_M1+0x78>)
 8000776:	89db      	ldrh	r3, [r3, #14]
 8000778:	2b02      	cmp	r3, #2
 800077a:	d01d      	beq.n	80007b8 <changeSpeed_M1+0x48>
 800077c:	2b02      	cmp	r3, #2
 800077e:	dc2c      	bgt.n	80007da <changeSpeed_M1+0x6a>
 8000780:	2b00      	cmp	r3, #0
 8000782:	d002      	beq.n	800078a <changeSpeed_M1+0x1a>
 8000784:	2b01      	cmp	r3, #1
 8000786:	d006      	beq.n	8000796 <changeSpeed_M1+0x26>
 8000788:	e027      	b.n	80007da <changeSpeed_M1+0x6a>
		case STOP:	// STOP
			motor1A = 0;
 800078a:	4b18      	ldr	r3, [pc, #96]	; (80007ec <changeSpeed_M1+0x7c>)
 800078c:	2200      	movs	r2, #0
 800078e:	635a      	str	r2, [r3, #52]	; 0x34
			motor1B = 0;
 8000790:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <changeSpeed_M1+0x80>)
 8000792:	2200      	movs	r2, #0
 8000794:	635a      	str	r2, [r3, #52]	; 0x34
		case CW_A:
			if(motor[1].direc == CCW_B){	//inverse
 8000796:	4b14      	ldr	r3, [pc, #80]	; (80007e8 <changeSpeed_M1+0x78>)
 8000798:	89db      	ldrh	r3, [r3, #14]
 800079a:	2b02      	cmp	r3, #2
 800079c:	d108      	bne.n	80007b0 <changeSpeed_M1+0x40>
				motor1A = 0;
 800079e:	4b13      	ldr	r3, [pc, #76]	; (80007ec <changeSpeed_M1+0x7c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	635a      	str	r2, [r3, #52]	; 0x34
				motor1B = 0;
 80007a4:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <changeSpeed_M1+0x80>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(10);	// dead time
 80007aa:	200a      	movs	r0, #10
 80007ac:	f001 f914 	bl	80019d8 <HAL_Delay>
			}
			motor1A = motor[1].TargetPulse;
 80007b0:	4a0e      	ldr	r2, [pc, #56]	; (80007ec <changeSpeed_M1+0x7c>)
 80007b2:	4b0d      	ldr	r3, [pc, #52]	; (80007e8 <changeSpeed_M1+0x78>)
 80007b4:	689b      	ldr	r3, [r3, #8]
 80007b6:	6353      	str	r3, [r2, #52]	; 0x34
		case CCW_B:
			if(motor[1].direc == CW_A){	//inverse
 80007b8:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <changeSpeed_M1+0x78>)
 80007ba:	89db      	ldrh	r3, [r3, #14]
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d108      	bne.n	80007d2 <changeSpeed_M1+0x62>
				motor1A = 0;
 80007c0:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <changeSpeed_M1+0x7c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	635a      	str	r2, [r3, #52]	; 0x34
				motor1B = 0;
 80007c6:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <changeSpeed_M1+0x80>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(10);	// dead time
 80007cc:	200a      	movs	r0, #10
 80007ce:	f001 f903 	bl	80019d8 <HAL_Delay>
			}
			motor1B = motor[1].TargetPulse;
 80007d2:	4a07      	ldr	r2, [pc, #28]	; (80007f0 <changeSpeed_M1+0x80>)
 80007d4:	4b04      	ldr	r3, [pc, #16]	; (80007e8 <changeSpeed_M1+0x78>)
 80007d6:	689b      	ldr	r3, [r3, #8]
 80007d8:	6353      	str	r3, [r2, #52]	; 0x34
		default:
			errorOccur(2,1);
 80007da:	2101      	movs	r1, #1
 80007dc:	2002      	movs	r0, #2
 80007de:	f7ff ff25 	bl	800062c <errorOccur>
	}
}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	200002e8 	.word	0x200002e8
 80007ec:	40010000 	.word	0x40010000
 80007f0:	40002000 	.word	0x40002000

080007f4 <changeSpeed_M2>:

void changeSpeed_M2(void){
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
	switch(motor[2].direc){
 80007f8:	4b1c      	ldr	r3, [pc, #112]	; (800086c <changeSpeed_M2+0x78>)
 80007fa:	8adb      	ldrh	r3, [r3, #22]
 80007fc:	2b02      	cmp	r3, #2
 80007fe:	d01d      	beq.n	800083c <changeSpeed_M2+0x48>
 8000800:	2b02      	cmp	r3, #2
 8000802:	dc2c      	bgt.n	800085e <changeSpeed_M2+0x6a>
 8000804:	2b00      	cmp	r3, #0
 8000806:	d002      	beq.n	800080e <changeSpeed_M2+0x1a>
 8000808:	2b01      	cmp	r3, #1
 800080a:	d006      	beq.n	800081a <changeSpeed_M2+0x26>
 800080c:	e027      	b.n	800085e <changeSpeed_M2+0x6a>
		case STOP:	// STOP
			motor2A = 0;
 800080e:	4b18      	ldr	r3, [pc, #96]	; (8000870 <changeSpeed_M2+0x7c>)
 8000810:	2200      	movs	r2, #0
 8000812:	639a      	str	r2, [r3, #56]	; 0x38
			motor2B = 0;
 8000814:	4b17      	ldr	r3, [pc, #92]	; (8000874 <changeSpeed_M2+0x80>)
 8000816:	2200      	movs	r2, #0
 8000818:	63da      	str	r2, [r3, #60]	; 0x3c
		case CW_A:
			if(motor[2].direc == CCW_B){	//inverse
 800081a:	4b14      	ldr	r3, [pc, #80]	; (800086c <changeSpeed_M2+0x78>)
 800081c:	8adb      	ldrh	r3, [r3, #22]
 800081e:	2b02      	cmp	r3, #2
 8000820:	d108      	bne.n	8000834 <changeSpeed_M2+0x40>
				motor2A = 0;
 8000822:	4b13      	ldr	r3, [pc, #76]	; (8000870 <changeSpeed_M2+0x7c>)
 8000824:	2200      	movs	r2, #0
 8000826:	639a      	str	r2, [r3, #56]	; 0x38
				motor2B = 0;
 8000828:	4b12      	ldr	r3, [pc, #72]	; (8000874 <changeSpeed_M2+0x80>)
 800082a:	2200      	movs	r2, #0
 800082c:	63da      	str	r2, [r3, #60]	; 0x3c
				HAL_Delay(10);	// dead time
 800082e:	200a      	movs	r0, #10
 8000830:	f001 f8d2 	bl	80019d8 <HAL_Delay>
			}
			motor2A = motor[1].TargetPulse;
 8000834:	4a0e      	ldr	r2, [pc, #56]	; (8000870 <changeSpeed_M2+0x7c>)
 8000836:	4b0d      	ldr	r3, [pc, #52]	; (800086c <changeSpeed_M2+0x78>)
 8000838:	689b      	ldr	r3, [r3, #8]
 800083a:	6393      	str	r3, [r2, #56]	; 0x38
		case CCW_B:
			if(motor[2].direc == CW_A){	//inverse
 800083c:	4b0b      	ldr	r3, [pc, #44]	; (800086c <changeSpeed_M2+0x78>)
 800083e:	8adb      	ldrh	r3, [r3, #22]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d108      	bne.n	8000856 <changeSpeed_M2+0x62>
				motor2A = 0;
 8000844:	4b0a      	ldr	r3, [pc, #40]	; (8000870 <changeSpeed_M2+0x7c>)
 8000846:	2200      	movs	r2, #0
 8000848:	639a      	str	r2, [r3, #56]	; 0x38
				motor2B = 0;
 800084a:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <changeSpeed_M2+0x80>)
 800084c:	2200      	movs	r2, #0
 800084e:	63da      	str	r2, [r3, #60]	; 0x3c
				HAL_Delay(10);	// dead time
 8000850:	200a      	movs	r0, #10
 8000852:	f001 f8c1 	bl	80019d8 <HAL_Delay>
			}
			motor2B = motor[2].TargetPulse;
 8000856:	4a07      	ldr	r2, [pc, #28]	; (8000874 <changeSpeed_M2+0x80>)
 8000858:	4b04      	ldr	r3, [pc, #16]	; (800086c <changeSpeed_M2+0x78>)
 800085a:	691b      	ldr	r3, [r3, #16]
 800085c:	63d3      	str	r3, [r2, #60]	; 0x3c
		default:
			errorOccur(2,2);
 800085e:	2102      	movs	r1, #2
 8000860:	2002      	movs	r0, #2
 8000862:	f7ff fee3 	bl	800062c <errorOccur>
	}
}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	200002e8 	.word	0x200002e8
 8000870:	40010000 	.word	0x40010000
 8000874:	40000400 	.word	0x40000400

08000878 <changeSpeed_M3>:

void changeSpeed_M3(void){
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
	switch(motor[3].direc){
 800087c:	4b1c      	ldr	r3, [pc, #112]	; (80008f0 <changeSpeed_M3+0x78>)
 800087e:	8bdb      	ldrh	r3, [r3, #30]
 8000880:	2b02      	cmp	r3, #2
 8000882:	d01d      	beq.n	80008c0 <changeSpeed_M3+0x48>
 8000884:	2b02      	cmp	r3, #2
 8000886:	dc2c      	bgt.n	80008e2 <changeSpeed_M3+0x6a>
 8000888:	2b00      	cmp	r3, #0
 800088a:	d002      	beq.n	8000892 <changeSpeed_M3+0x1a>
 800088c:	2b01      	cmp	r3, #1
 800088e:	d006      	beq.n	800089e <changeSpeed_M3+0x26>
 8000890:	e027      	b.n	80008e2 <changeSpeed_M3+0x6a>
		case STOP:	// STOP
			motor3A = 0;
 8000892:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <changeSpeed_M3+0x7c>)
 8000894:	2200      	movs	r2, #0
 8000896:	639a      	str	r2, [r3, #56]	; 0x38
			motor3B = 0;
 8000898:	4b17      	ldr	r3, [pc, #92]	; (80008f8 <changeSpeed_M3+0x80>)
 800089a:	2200      	movs	r2, #0
 800089c:	635a      	str	r2, [r3, #52]	; 0x34
		case CW_A:
			if(motor[3].direc == CCW_B){	//inverse
 800089e:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <changeSpeed_M3+0x78>)
 80008a0:	8bdb      	ldrh	r3, [r3, #30]
 80008a2:	2b02      	cmp	r3, #2
 80008a4:	d108      	bne.n	80008b8 <changeSpeed_M3+0x40>
				motor3A = 0;
 80008a6:	4b13      	ldr	r3, [pc, #76]	; (80008f4 <changeSpeed_M3+0x7c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	639a      	str	r2, [r3, #56]	; 0x38
				motor3B = 0;
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <changeSpeed_M3+0x80>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(10);	// dead time
 80008b2:	200a      	movs	r0, #10
 80008b4:	f001 f890 	bl	80019d8 <HAL_Delay>
			}
			motor3A = motor[3].TargetPulse;
 80008b8:	4a0e      	ldr	r2, [pc, #56]	; (80008f4 <changeSpeed_M3+0x7c>)
 80008ba:	4b0d      	ldr	r3, [pc, #52]	; (80008f0 <changeSpeed_M3+0x78>)
 80008bc:	699b      	ldr	r3, [r3, #24]
 80008be:	6393      	str	r3, [r2, #56]	; 0x38
		case CCW_B:
			if(motor[1].direc == CW_A){	//inverse
 80008c0:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <changeSpeed_M3+0x78>)
 80008c2:	89db      	ldrh	r3, [r3, #14]
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d108      	bne.n	80008da <changeSpeed_M3+0x62>
				motor3A = 0;
 80008c8:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <changeSpeed_M3+0x7c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	639a      	str	r2, [r3, #56]	; 0x38
				motor3B = 0;
 80008ce:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <changeSpeed_M3+0x80>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(10);	// dead time
 80008d4:	200a      	movs	r0, #10
 80008d6:	f001 f87f 	bl	80019d8 <HAL_Delay>
			}
			motor3B = motor[3].TargetPulse;
 80008da:	4a07      	ldr	r2, [pc, #28]	; (80008f8 <changeSpeed_M3+0x80>)
 80008dc:	4b04      	ldr	r3, [pc, #16]	; (80008f0 <changeSpeed_M3+0x78>)
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	6353      	str	r3, [r2, #52]	; 0x34
		default:
			errorOccur(2,3);
 80008e2:	2103      	movs	r1, #3
 80008e4:	2002      	movs	r0, #2
 80008e6:	f7ff fea1 	bl	800062c <errorOccur>
	}
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	200002e8 	.word	0x200002e8
 80008f4:	40010400 	.word	0x40010400
 80008f8:	40001800 	.word	0x40001800

080008fc <changeSpeed>:

void changeSpeed(uint16_t motorNum){
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	80fb      	strh	r3, [r7, #6]
	if(motorNum == 1) changeSpeed_M1();
 8000906:	88fb      	ldrh	r3, [r7, #6]
 8000908:	2b01      	cmp	r3, #1
 800090a:	d102      	bne.n	8000912 <changeSpeed+0x16>
 800090c:	f7ff ff30 	bl	8000770 <changeSpeed_M1>
	else if(motorNum == 2) changeSpeed_M2();
	else if(motorNum == 3) changeSpeed_M3();
}
 8000910:	e00a      	b.n	8000928 <changeSpeed+0x2c>
	else if(motorNum == 2) changeSpeed_M2();
 8000912:	88fb      	ldrh	r3, [r7, #6]
 8000914:	2b02      	cmp	r3, #2
 8000916:	d102      	bne.n	800091e <changeSpeed+0x22>
 8000918:	f7ff ff6c 	bl	80007f4 <changeSpeed_M2>
}
 800091c:	e004      	b.n	8000928 <changeSpeed+0x2c>
	else if(motorNum == 3) changeSpeed_M3();
 800091e:	88fb      	ldrh	r3, [r7, #6]
 8000920:	2b03      	cmp	r3, #3
 8000922:	d101      	bne.n	8000928 <changeSpeed+0x2c>
 8000924:	f7ff ffa8 	bl	8000878 <changeSpeed_M3>
}
 8000928:	bf00      	nop
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}

08000930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000930:	b590      	push	{r4, r7, lr}
 8000932:	b09f      	sub	sp, #124	; 0x7c
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000936:	f000 ffdd 	bl	80018f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800093a:	f000 f90b 	bl	8000b54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800093e:	f000 fbb1 	bl	80010a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000942:	f000 fb87 	bl	8001054 <MX_DMA_Init>
  MX_TIM1_Init();
 8000946:	f000 f9ff 	bl	8000d48 <MX_TIM1_Init>
  MX_TIM6_Init();
 800094a:	f000 fad5 	bl	8000ef8 <MX_TIM6_Init>
  MX_TIM14_Init();
 800094e:	f000 fb09 	bl	8000f64 <MX_TIM14_Init>
  MX_TIM2_Init();
 8000952:	f000 fa7d 	bl	8000e50 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000956:	f000 fb53 	bl	8001000 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800095a:	f000 f95b 	bl	8000c14 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  uart_buf_len = sprintf(uart_buf, "Configuring...\r\n");
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	4970      	ldr	r1, [pc, #448]	; (8000b24 <main+0x1f4>)
 8000962:	4618      	mov	r0, r3
 8000964:	f005 f864 	bl	8005a30 <siprintf>
 8000968:	66f8      	str	r0, [r7, #108]	; 0x6c
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 800096a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800096c:	b29a      	uxth	r2, r3
 800096e:	1d39      	adds	r1, r7, #4
 8000970:	2364      	movs	r3, #100	; 0x64
 8000972:	486d      	ldr	r0, [pc, #436]	; (8000b28 <main+0x1f8>)
 8000974:	f004 f895 	bl	8004aa2 <HAL_UART_Transmit>
  initMotor();
 8000978:	f7ff fe18 	bl	80005ac <initMotor>
  // Start timer
  HAL_TIM_Base_Start_IT(&htim6);
 800097c:	486b      	ldr	r0, [pc, #428]	; (8000b2c <main+0x1fc>)
 800097e:	f003 f83d 	bl	80039fc <HAL_TIM_Base_Start_IT>
  uart_buf_len = sprintf(uart_buf, "Test Start!\r\n");
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	496a      	ldr	r1, [pc, #424]	; (8000b30 <main+0x200>)
 8000986:	4618      	mov	r0, r3
 8000988:	f005 f852 	bl	8005a30 <siprintf>
 800098c:	66f8      	str	r0, [r7, #108]	; 0x6c
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 800098e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000990:	b29a      	uxth	r2, r3
 8000992:	1d39      	adds	r1, r7, #4
 8000994:	2364      	movs	r3, #100	; 0x64
 8000996:	4864      	ldr	r0, [pc, #400]	; (8000b28 <main+0x1f8>)
 8000998:	f004 f883 	bl	8004aa2 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(encoderRead_flag){
 800099c:	4b65      	ldr	r3, [pc, #404]	; (8000b34 <main+0x204>)
 800099e:	881b      	ldrh	r3, [r3, #0]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d02b      	beq.n	80009fc <main+0xcc>
		  uart_buf_len = sprintf(uart_buf, "encoder read value %d \r\n",motor[currentMotor].Speed);
 80009a4:	4b64      	ldr	r3, [pc, #400]	; (8000b38 <main+0x208>)
 80009a6:	881b      	ldrh	r3, [r3, #0]
 80009a8:	4a64      	ldr	r2, [pc, #400]	; (8000b3c <main+0x20c>)
 80009aa:	00db      	lsls	r3, r3, #3
 80009ac:	4413      	add	r3, r2
 80009ae:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80009b2:	461a      	mov	r2, r3
 80009b4:	1d3b      	adds	r3, r7, #4
 80009b6:	4962      	ldr	r1, [pc, #392]	; (8000b40 <main+0x210>)
 80009b8:	4618      	mov	r0, r3
 80009ba:	f005 f839 	bl	8005a30 <siprintf>
 80009be:	66f8      	str	r0, [r7, #108]	; 0x6c
		  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 80009c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80009c2:	b29a      	uxth	r2, r3
 80009c4:	1d39      	adds	r1, r7, #4
 80009c6:	2364      	movs	r3, #100	; 0x64
 80009c8:	4857      	ldr	r0, [pc, #348]	; (8000b28 <main+0x1f8>)
 80009ca:	f004 f86a 	bl	8004aa2 <HAL_UART_Transmit>
		  uart_buf_len = sprintf(uart_buf, "pulse (from button setting) = %lu /1000, direc %d \r\n",motor[1].TargetPulse,motor[currentMotor].direc);
 80009ce:	4b5b      	ldr	r3, [pc, #364]	; (8000b3c <main+0x20c>)
 80009d0:	689a      	ldr	r2, [r3, #8]
 80009d2:	4b59      	ldr	r3, [pc, #356]	; (8000b38 <main+0x208>)
 80009d4:	881b      	ldrh	r3, [r3, #0]
 80009d6:	4959      	ldr	r1, [pc, #356]	; (8000b3c <main+0x20c>)
 80009d8:	00db      	lsls	r3, r3, #3
 80009da:	440b      	add	r3, r1
 80009dc:	88db      	ldrh	r3, [r3, #6]
 80009de:	1d38      	adds	r0, r7, #4
 80009e0:	4958      	ldr	r1, [pc, #352]	; (8000b44 <main+0x214>)
 80009e2:	f005 f825 	bl	8005a30 <siprintf>
 80009e6:	66f8      	str	r0, [r7, #108]	; 0x6c
		  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 80009e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80009ea:	b29a      	uxth	r2, r3
 80009ec:	1d39      	adds	r1, r7, #4
 80009ee:	2364      	movs	r3, #100	; 0x64
 80009f0:	484d      	ldr	r0, [pc, #308]	; (8000b28 <main+0x1f8>)
 80009f2:	f004 f856 	bl	8004aa2 <HAL_UART_Transmit>
		  encoderRead_flag = 0;
 80009f6:	4b4f      	ldr	r3, [pc, #316]	; (8000b34 <main+0x204>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	801a      	strh	r2, [r3, #0]
	  }
	  readFSRVoltage();
 80009fc:	f7ff fe8a 	bl	8000714 <readFSRVoltage>

	  if(currentMotor == 0)	// Stationary state
 8000a00:	4b4d      	ldr	r3, [pc, #308]	; (8000b38 <main+0x208>)
 8000a02:	881b      	ldrh	r3, [r3, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d128      	bne.n	8000a5a <main+0x12a>
	  {
		  for(int i = 0; i < 6; i++){
 8000a08:	2300      	movs	r3, #0
 8000a0a:	677b      	str	r3, [r7, #116]	; 0x74
 8000a0c:	e022      	b.n	8000a54 <main+0x124>
			  if(FSRValue[i] >= FSRThreshold){
 8000a0e:	4a4e      	ldr	r2, [pc, #312]	; (8000b48 <main+0x218>)
 8000a10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000a12:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000a16:	4b4d      	ldr	r3, [pc, #308]	; (8000b4c <main+0x21c>)
 8000a18:	881b      	ldrh	r3, [r3, #0]
 8000a1a:	429a      	cmp	r2, r3
 8000a1c:	d317      	bcc.n	8000a4e <main+0x11e>
				  currentMotor = (i + 2) / 2; // 0&1 for motor1, 2&3 for motor2, 4&5 for motor3
 8000a1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000a20:	3302      	adds	r3, #2
 8000a22:	0fda      	lsrs	r2, r3, #31
 8000a24:	4413      	add	r3, r2
 8000a26:	105b      	asrs	r3, r3, #1
 8000a28:	b29a      	uxth	r2, r3
 8000a2a:	4b43      	ldr	r3, [pc, #268]	; (8000b38 <main+0x208>)
 8000a2c:	801a      	strh	r2, [r3, #0]
				  motor[currentMotor].direc = (i%2)? 1 : 2;	// mod=1(1,3,5) for CW(direc code is 1); mod=0(0,2,4) for CCW(direc code is 2)
 8000a2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000a30:	f003 0301 	and.w	r3, r3, #1
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <main+0x10c>
 8000a38:	2101      	movs	r1, #1
 8000a3a:	e000      	b.n	8000a3e <main+0x10e>
 8000a3c:	2102      	movs	r1, #2
 8000a3e:	4b3e      	ldr	r3, [pc, #248]	; (8000b38 <main+0x208>)
 8000a40:	881b      	ldrh	r3, [r3, #0]
 8000a42:	4a3e      	ldr	r2, [pc, #248]	; (8000b3c <main+0x20c>)
 8000a44:	00db      	lsls	r3, r3, #3
 8000a46:	4413      	add	r3, r2
 8000a48:	460a      	mov	r2, r1
 8000a4a:	80da      	strh	r2, [r3, #6]
				  break;
 8000a4c:	e005      	b.n	8000a5a <main+0x12a>
		  for(int i = 0; i < 6; i++){
 8000a4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000a50:	3301      	adds	r3, #1
 8000a52:	677b      	str	r3, [r7, #116]	; 0x74
 8000a54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000a56:	2b05      	cmp	r3, #5
 8000a58:	ddd9      	ble.n	8000a0e <main+0xde>
			  }
		  }
	  }
	  if(currentMotor != 0) // motor{currentMotor} functioning
 8000a5a:	4b37      	ldr	r3, [pc, #220]	; (8000b38 <main+0x208>)
 8000a5c:	881b      	ldrh	r3, [r3, #0]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d040      	beq.n	8000ae4 <main+0x1b4>
	  {
		  int idx = (currentMotor-1)*2 + motor[currentMotor].direc % 2;
 8000a62:	4b35      	ldr	r3, [pc, #212]	; (8000b38 <main+0x208>)
 8000a64:	881b      	ldrh	r3, [r3, #0]
 8000a66:	3b01      	subs	r3, #1
 8000a68:	005a      	lsls	r2, r3, #1
 8000a6a:	4b33      	ldr	r3, [pc, #204]	; (8000b38 <main+0x208>)
 8000a6c:	881b      	ldrh	r3, [r3, #0]
 8000a6e:	4933      	ldr	r1, [pc, #204]	; (8000b3c <main+0x20c>)
 8000a70:	00db      	lsls	r3, r3, #3
 8000a72:	440b      	add	r3, r1
 8000a74:	88db      	ldrh	r3, [r3, #6]
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	4413      	add	r3, r2
 8000a7c:	66bb      	str	r3, [r7, #104]	; 0x68
		  if(FSRValue[idx] >= FSRThreshold)
 8000a7e:	4a32      	ldr	r2, [pc, #200]	; (8000b48 <main+0x218>)
 8000a80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000a82:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000a86:	4b31      	ldr	r3, [pc, #196]	; (8000b4c <main+0x21c>)
 8000a88:	881b      	ldrh	r3, [r3, #0]
 8000a8a:	429a      	cmp	r2, r3
 8000a8c:	d314      	bcc.n	8000ab8 <main+0x188>
		  {
			  motor[currentMotor].TargetPulse = voltage2pulse(FSRValue[idx]);
 8000a8e:	4a2e      	ldr	r2, [pc, #184]	; (8000b48 <main+0x218>)
 8000a90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000a92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a96:	461a      	mov	r2, r3
 8000a98:	4b27      	ldr	r3, [pc, #156]	; (8000b38 <main+0x208>)
 8000a9a:	881b      	ldrh	r3, [r3, #0]
 8000a9c:	461c      	mov	r4, r3
 8000a9e:	4610      	mov	r0, r2
 8000aa0:	f7ff fdfc 	bl	800069c <voltage2pulse>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	4a25      	ldr	r2, [pc, #148]	; (8000b3c <main+0x20c>)
 8000aa8:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
			  changeSpeed(currentMotor);
 8000aac:	4b22      	ldr	r3, [pc, #136]	; (8000b38 <main+0x208>)
 8000aae:	881b      	ldrh	r3, [r3, #0]
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff ff23 	bl	80008fc <changeSpeed>
 8000ab6:	e015      	b.n	8000ae4 <main+0x1b4>
		  }else{
			  motor[currentMotor].TargetPulse = 0;
 8000ab8:	4b1f      	ldr	r3, [pc, #124]	; (8000b38 <main+0x208>)
 8000aba:	881b      	ldrh	r3, [r3, #0]
 8000abc:	4619      	mov	r1, r3
 8000abe:	4b1f      	ldr	r3, [pc, #124]	; (8000b3c <main+0x20c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
			  motor[currentMotor].direc = 0;
 8000ac6:	4b1c      	ldr	r3, [pc, #112]	; (8000b38 <main+0x208>)
 8000ac8:	881b      	ldrh	r3, [r3, #0]
 8000aca:	4a1c      	ldr	r2, [pc, #112]	; (8000b3c <main+0x20c>)
 8000acc:	00db      	lsls	r3, r3, #3
 8000ace:	4413      	add	r3, r2
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	80da      	strh	r2, [r3, #6]
			  changeSpeed(currentMotor);
 8000ad4:	4b18      	ldr	r3, [pc, #96]	; (8000b38 <main+0x208>)
 8000ad6:	881b      	ldrh	r3, [r3, #0]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff ff0f 	bl	80008fc <changeSpeed>
			  currentMotor = 0;
 8000ade:	4b16      	ldr	r3, [pc, #88]	; (8000b38 <main+0x208>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	801a      	strh	r2, [r3, #0]
		  }

	  }
	  for(int FSRNum = 0; FSRNum < 6; FSRNum ++){
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	673b      	str	r3, [r7, #112]	; 0x70
 8000ae8:	e013      	b.n	8000b12 <main+0x1e2>
		  uart_buf_len = sprintf(uart_buf, "idx[%d] value[%d]\r\n",FSRNum,FSRValue[FSRNum]);
 8000aea:	4a17      	ldr	r2, [pc, #92]	; (8000b48 <main+0x218>)
 8000aec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000aee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000af2:	1d38      	adds	r0, r7, #4
 8000af4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000af6:	4916      	ldr	r1, [pc, #88]	; (8000b50 <main+0x220>)
 8000af8:	f004 ff9a 	bl	8005a30 <siprintf>
 8000afc:	66f8      	str	r0, [r7, #108]	; 0x6c
		  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000afe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000b00:	b29a      	uxth	r2, r3
 8000b02:	1d39      	adds	r1, r7, #4
 8000b04:	2364      	movs	r3, #100	; 0x64
 8000b06:	4808      	ldr	r0, [pc, #32]	; (8000b28 <main+0x1f8>)
 8000b08:	f003 ffcb 	bl	8004aa2 <HAL_UART_Transmit>
	  for(int FSRNum = 0; FSRNum < 6; FSRNum ++){
 8000b0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000b0e:	3301      	adds	r3, #1
 8000b10:	673b      	str	r3, [r7, #112]	; 0x70
 8000b12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000b14:	2b05      	cmp	r3, #5
 8000b16:	dde8      	ble.n	8000aea <main+0x1ba>
	  }
	  HAL_Delay(1000);
 8000b18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b1c:	f000 ff5c 	bl	80019d8 <HAL_Delay>
	  if(encoderRead_flag){
 8000b20:	e73c      	b.n	800099c <main+0x6c>
 8000b22:	bf00      	nop
 8000b24:	080063d4 	.word	0x080063d4
 8000b28:	200001e4 	.word	0x200001e4
 8000b2c:	20000154 	.word	0x20000154
 8000b30:	080063e8 	.word	0x080063e8
 8000b34:	2000030a 	.word	0x2000030a
 8000b38:	20000308 	.word	0x20000308
 8000b3c:	200002e8 	.word	0x200002e8
 8000b40:	080063f8 	.word	0x080063f8
 8000b44:	08006414 	.word	0x08006414
 8000b48:	20000310 	.word	0x20000310
 8000b4c:	20000000 	.word	0x20000000
 8000b50:	0800644c 	.word	0x0800644c

08000b54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b094      	sub	sp, #80	; 0x50
 8000b58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b5a:	f107 031c 	add.w	r3, r7, #28
 8000b5e:	2234      	movs	r2, #52	; 0x34
 8000b60:	2100      	movs	r1, #0
 8000b62:	4618      	mov	r0, r3
 8000b64:	f004 ff84 	bl	8005a70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b68:	f107 0308 	add.w	r3, r7, #8
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b78:	2300      	movs	r3, #0
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	4b23      	ldr	r3, [pc, #140]	; (8000c0c <SystemClock_Config+0xb8>)
 8000b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b80:	4a22      	ldr	r2, [pc, #136]	; (8000c0c <SystemClock_Config+0xb8>)
 8000b82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b86:	6413      	str	r3, [r2, #64]	; 0x40
 8000b88:	4b20      	ldr	r3, [pc, #128]	; (8000c0c <SystemClock_Config+0xb8>)
 8000b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b90:	607b      	str	r3, [r7, #4]
 8000b92:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b94:	2300      	movs	r3, #0
 8000b96:	603b      	str	r3, [r7, #0]
 8000b98:	4b1d      	ldr	r3, [pc, #116]	; (8000c10 <SystemClock_Config+0xbc>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ba0:	4a1b      	ldr	r2, [pc, #108]	; (8000c10 <SystemClock_Config+0xbc>)
 8000ba2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ba6:	6013      	str	r3, [r2, #0]
 8000ba8:	4b19      	ldr	r3, [pc, #100]	; (8000c10 <SystemClock_Config+0xbc>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bb0:	603b      	str	r3, [r7, #0]
 8000bb2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bbc:	2310      	movs	r3, #16
 8000bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc4:	f107 031c 	add.w	r3, r7, #28
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f002 fc29 	bl	8003420 <HAL_RCC_OscConfig>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000bd4:	f000 fb2c 	bl	8001230 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bd8:	230f      	movs	r3, #15
 8000bda:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be0:	2300      	movs	r3, #0
 8000be2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bec:	f107 0308 	add.w	r3, r7, #8
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f002 f950 	bl	8002e98 <HAL_RCC_ClockConfig>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000bfe:	f000 fb17 	bl	8001230 <Error_Handler>
  }
}
 8000c02:	bf00      	nop
 8000c04:	3750      	adds	r7, #80	; 0x50
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	40007000 	.word	0x40007000

08000c14 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c1a:	463b      	mov	r3, r7
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c26:	4b45      	ldr	r3, [pc, #276]	; (8000d3c <MX_ADC1_Init+0x128>)
 8000c28:	4a45      	ldr	r2, [pc, #276]	; (8000d40 <MX_ADC1_Init+0x12c>)
 8000c2a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000c2c:	4b43      	ldr	r3, [pc, #268]	; (8000d3c <MX_ADC1_Init+0x128>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c32:	4b42      	ldr	r3, [pc, #264]	; (8000d3c <MX_ADC1_Init+0x128>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000c38:	4b40      	ldr	r3, [pc, #256]	; (8000d3c <MX_ADC1_Init+0x128>)
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c3e:	4b3f      	ldr	r3, [pc, #252]	; (8000d3c <MX_ADC1_Init+0x128>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8000c44:	4b3d      	ldr	r3, [pc, #244]	; (8000d3c <MX_ADC1_Init+0x128>)
 8000c46:	2201      	movs	r2, #1
 8000c48:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000c4c:	4b3b      	ldr	r3, [pc, #236]	; (8000d3c <MX_ADC1_Init+0x128>)
 8000c4e:	2201      	movs	r2, #1
 8000c50:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c52:	4b3a      	ldr	r3, [pc, #232]	; (8000d3c <MX_ADC1_Init+0x128>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c58:	4b38      	ldr	r3, [pc, #224]	; (8000d3c <MX_ADC1_Init+0x128>)
 8000c5a:	4a3a      	ldr	r2, [pc, #232]	; (8000d44 <MX_ADC1_Init+0x130>)
 8000c5c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c5e:	4b37      	ldr	r3, [pc, #220]	; (8000d3c <MX_ADC1_Init+0x128>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8000c64:	4b35      	ldr	r3, [pc, #212]	; (8000d3c <MX_ADC1_Init+0x128>)
 8000c66:	2206      	movs	r2, #6
 8000c68:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c6a:	4b34      	ldr	r3, [pc, #208]	; (8000d3c <MX_ADC1_Init+0x128>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c72:	4b32      	ldr	r3, [pc, #200]	; (8000d3c <MX_ADC1_Init+0x128>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c78:	4830      	ldr	r0, [pc, #192]	; (8000d3c <MX_ADC1_Init+0x128>)
 8000c7a:	f000 fed1 	bl	8001a20 <HAL_ADC_Init>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000c84:	f000 fad4 	bl	8001230 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000c88:	230f      	movs	r3, #15
 8000c8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c90:	2300      	movs	r3, #0
 8000c92:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c94:	463b      	mov	r3, r7
 8000c96:	4619      	mov	r1, r3
 8000c98:	4828      	ldr	r0, [pc, #160]	; (8000d3c <MX_ADC1_Init+0x128>)
 8000c9a:	f001 f86f 	bl	8001d7c <HAL_ADC_ConfigChannel>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000ca4:	f000 fac4 	bl	8001230 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000ca8:	2309      	movs	r3, #9
 8000caa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000cac:	2302      	movs	r3, #2
 8000cae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cb0:	463b      	mov	r3, r7
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4821      	ldr	r0, [pc, #132]	; (8000d3c <MX_ADC1_Init+0x128>)
 8000cb6:	f001 f861 	bl	8001d7c <HAL_ADC_ConfigChannel>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000cc0:	f000 fab6 	bl	8001230 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000cc4:	230e      	movs	r3, #14
 8000cc6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ccc:	463b      	mov	r3, r7
 8000cce:	4619      	mov	r1, r3
 8000cd0:	481a      	ldr	r0, [pc, #104]	; (8000d3c <MX_ADC1_Init+0x128>)
 8000cd2:	f001 f853 	bl	8001d7c <HAL_ADC_ConfigChannel>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8000cdc:	f000 faa8 	bl	8001230 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000ce0:	2304      	movs	r3, #4
 8000ce2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000ce4:	2304      	movs	r3, #4
 8000ce6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ce8:	463b      	mov	r3, r7
 8000cea:	4619      	mov	r1, r3
 8000cec:	4813      	ldr	r0, [pc, #76]	; (8000d3c <MX_ADC1_Init+0x128>)
 8000cee:	f001 f845 	bl	8001d7c <HAL_ADC_ConfigChannel>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8000cf8:	f000 fa9a 	bl	8001230 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000cfc:	230d      	movs	r3, #13
 8000cfe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000d00:	2305      	movs	r3, #5
 8000d02:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d04:	463b      	mov	r3, r7
 8000d06:	4619      	mov	r1, r3
 8000d08:	480c      	ldr	r0, [pc, #48]	; (8000d3c <MX_ADC1_Init+0x128>)
 8000d0a:	f001 f837 	bl	8001d7c <HAL_ADC_ConfigChannel>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 8000d14:	f000 fa8c 	bl	8001230 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000d18:	230c      	movs	r3, #12
 8000d1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000d1c:	2306      	movs	r3, #6
 8000d1e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d20:	463b      	mov	r3, r7
 8000d22:	4619      	mov	r1, r3
 8000d24:	4805      	ldr	r0, [pc, #20]	; (8000d3c <MX_ADC1_Init+0x128>)
 8000d26:	f001 f829 	bl	8001d7c <HAL_ADC_ConfigChannel>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 8000d30:	f000 fa7e 	bl	8001230 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d34:	bf00      	nop
 8000d36:	3710      	adds	r7, #16
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	2000007c 	.word	0x2000007c
 8000d40:	40012000 	.word	0x40012000
 8000d44:	0f000001 	.word	0x0f000001

08000d48 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b092      	sub	sp, #72	; 0x48
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d4e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
 8000d68:	615a      	str	r2, [r3, #20]
 8000d6a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d6c:	1d3b      	adds	r3, r7, #4
 8000d6e:	2220      	movs	r2, #32
 8000d70:	2100      	movs	r1, #0
 8000d72:	4618      	mov	r0, r3
 8000d74:	f004 fe7c 	bl	8005a70 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d78:	4b33      	ldr	r3, [pc, #204]	; (8000e48 <MX_TIM1_Init+0x100>)
 8000d7a:	4a34      	ldr	r2, [pc, #208]	; (8000e4c <MX_TIM1_Init+0x104>)
 8000d7c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 8000d7e:	4b32      	ldr	r3, [pc, #200]	; (8000e48 <MX_TIM1_Init+0x100>)
 8000d80:	220f      	movs	r2, #15
 8000d82:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d84:	4b30      	ldr	r3, [pc, #192]	; (8000e48 <MX_TIM1_Init+0x100>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000d8a:	4b2f      	ldr	r3, [pc, #188]	; (8000e48 <MX_TIM1_Init+0x100>)
 8000d8c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d90:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d92:	4b2d      	ldr	r3, [pc, #180]	; (8000e48 <MX_TIM1_Init+0x100>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d98:	4b2b      	ldr	r3, [pc, #172]	; (8000e48 <MX_TIM1_Init+0x100>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d9e:	4b2a      	ldr	r3, [pc, #168]	; (8000e48 <MX_TIM1_Init+0x100>)
 8000da0:	2280      	movs	r2, #128	; 0x80
 8000da2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000da4:	4828      	ldr	r0, [pc, #160]	; (8000e48 <MX_TIM1_Init+0x100>)
 8000da6:	f002 fe99 	bl	8003adc <HAL_TIM_PWM_Init>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000db0:	f000 fa3e 	bl	8001230 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000db4:	2300      	movs	r3, #0
 8000db6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000db8:	2300      	movs	r3, #0
 8000dba:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000dbc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4821      	ldr	r0, [pc, #132]	; (8000e48 <MX_TIM1_Init+0x100>)
 8000dc4:	f003 fd3e 	bl	8004844 <HAL_TIMEx_MasterConfigSynchronization>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000dce:	f000 fa2f 	bl	8001230 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dd2:	2360      	movs	r3, #96	; 0x60
 8000dd4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000dde:	2300      	movs	r3, #0
 8000de0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000de2:	2300      	movs	r3, #0
 8000de4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000de6:	2300      	movs	r3, #0
 8000de8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000dea:	2300      	movs	r3, #0
 8000dec:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df2:	2200      	movs	r2, #0
 8000df4:	4619      	mov	r1, r3
 8000df6:	4814      	ldr	r0, [pc, #80]	; (8000e48 <MX_TIM1_Init+0x100>)
 8000df8:	f003 f9c4 	bl	8004184 <HAL_TIM_PWM_ConfigChannel>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000e02:	f000 fa15 	bl	8001230 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e06:	2300      	movs	r3, #0
 8000e08:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e1e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e20:	2300      	movs	r3, #0
 8000e22:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e24:	1d3b      	adds	r3, r7, #4
 8000e26:	4619      	mov	r1, r3
 8000e28:	4807      	ldr	r0, [pc, #28]	; (8000e48 <MX_TIM1_Init+0x100>)
 8000e2a:	f003 fd87 	bl	800493c <HAL_TIMEx_ConfigBreakDeadTime>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000e34:	f000 f9fc 	bl	8001230 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e38:	4803      	ldr	r0, [pc, #12]	; (8000e48 <MX_TIM1_Init+0x100>)
 8000e3a:	f000 fb71 	bl	8001520 <HAL_TIM_MspPostInit>

}
 8000e3e:	bf00      	nop
 8000e40:	3748      	adds	r7, #72	; 0x48
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	200000c4 	.word	0x200000c4
 8000e4c:	40010000 	.word	0x40010000

08000e50 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08c      	sub	sp, #48	; 0x30
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e56:	f107 030c 	add.w	r3, r7, #12
 8000e5a:	2224      	movs	r2, #36	; 0x24
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f004 fe06 	bl	8005a70 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e64:	1d3b      	adds	r3, r7, #4
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e6c:	4b21      	ldr	r3, [pc, #132]	; (8000ef4 <MX_TIM2_Init+0xa4>)
 8000e6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e72:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e74:	4b1f      	ldr	r3, [pc, #124]	; (8000ef4 <MX_TIM2_Init+0xa4>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e7a:	4b1e      	ldr	r3, [pc, #120]	; (8000ef4 <MX_TIM2_Init+0xa4>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000e80:	4b1c      	ldr	r3, [pc, #112]	; (8000ef4 <MX_TIM2_Init+0xa4>)
 8000e82:	f04f 32ff 	mov.w	r2, #4294967295
 8000e86:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e88:	4b1a      	ldr	r3, [pc, #104]	; (8000ef4 <MX_TIM2_Init+0xa4>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e8e:	4b19      	ldr	r3, [pc, #100]	; (8000ef4 <MX_TIM2_Init+0xa4>)
 8000e90:	2280      	movs	r2, #128	; 0x80
 8000e92:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000e94:	2303      	movs	r3, #3
 8000e96:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000eac:	2301      	movs	r3, #1
 8000eae:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000eb8:	f107 030c 	add.w	r3, r7, #12
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	480d      	ldr	r0, [pc, #52]	; (8000ef4 <MX_TIM2_Init+0xa4>)
 8000ec0:	f002 ff24 	bl	8003d0c <HAL_TIM_Encoder_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000eca:	f000 f9b1 	bl	8001230 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ed6:	1d3b      	adds	r3, r7, #4
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4806      	ldr	r0, [pc, #24]	; (8000ef4 <MX_TIM2_Init+0xa4>)
 8000edc:	f003 fcb2 	bl	8004844 <HAL_TIMEx_MasterConfigSynchronization>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000ee6:	f000 f9a3 	bl	8001230 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000eea:	bf00      	nop
 8000eec:	3730      	adds	r7, #48	; 0x30
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	2000010c 	.word	0x2000010c

08000ef8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000efe:	463b      	mov	r3, r7
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000f06:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <MX_TIM6_Init+0x64>)
 8000f08:	4a15      	ldr	r2, [pc, #84]	; (8000f60 <MX_TIM6_Init+0x68>)
 8000f0a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 160-1;
 8000f0c:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <MX_TIM6_Init+0x64>)
 8000f0e:	229f      	movs	r2, #159	; 0x9f
 8000f10:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f12:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <MX_TIM6_Init+0x64>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8000f18:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <MX_TIM6_Init+0x64>)
 8000f1a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f1e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f20:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <MX_TIM6_Init+0x64>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000f26:	480d      	ldr	r0, [pc, #52]	; (8000f5c <MX_TIM6_Init+0x64>)
 8000f28:	f002 fd18 	bl	800395c <HAL_TIM_Base_Init>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000f32:	f000 f97d 	bl	8001230 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f36:	2300      	movs	r3, #0
 8000f38:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000f3e:	463b      	mov	r3, r7
 8000f40:	4619      	mov	r1, r3
 8000f42:	4806      	ldr	r0, [pc, #24]	; (8000f5c <MX_TIM6_Init+0x64>)
 8000f44:	f003 fc7e 	bl	8004844 <HAL_TIMEx_MasterConfigSynchronization>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000f4e:	f000 f96f 	bl	8001230 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000154 	.word	0x20000154
 8000f60:	40001000 	.word	0x40001000

08000f64 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b088      	sub	sp, #32
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
 8000f78:	615a      	str	r2, [r3, #20]
 8000f7a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000f7c:	4b1e      	ldr	r3, [pc, #120]	; (8000ff8 <MX_TIM14_Init+0x94>)
 8000f7e:	4a1f      	ldr	r2, [pc, #124]	; (8000ffc <MX_TIM14_Init+0x98>)
 8000f80:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16-1;
 8000f82:	4b1d      	ldr	r3, [pc, #116]	; (8000ff8 <MX_TIM14_Init+0x94>)
 8000f84:	220f      	movs	r2, #15
 8000f86:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f88:	4b1b      	ldr	r3, [pc, #108]	; (8000ff8 <MX_TIM14_Init+0x94>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000-1;
 8000f8e:	4b1a      	ldr	r3, [pc, #104]	; (8000ff8 <MX_TIM14_Init+0x94>)
 8000f90:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f94:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f96:	4b18      	ldr	r3, [pc, #96]	; (8000ff8 <MX_TIM14_Init+0x94>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f9c:	4b16      	ldr	r3, [pc, #88]	; (8000ff8 <MX_TIM14_Init+0x94>)
 8000f9e:	2280      	movs	r2, #128	; 0x80
 8000fa0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000fa2:	4815      	ldr	r0, [pc, #84]	; (8000ff8 <MX_TIM14_Init+0x94>)
 8000fa4:	f002 fcda 	bl	800395c <HAL_TIM_Base_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8000fae:	f000 f93f 	bl	8001230 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8000fb2:	4811      	ldr	r0, [pc, #68]	; (8000ff8 <MX_TIM14_Init+0x94>)
 8000fb4:	f002 fd92 	bl	8003adc <HAL_TIM_PWM_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8000fbe:	f000 f937 	bl	8001230 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fc2:	2360      	movs	r3, #96	; 0x60
 8000fc4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fd2:	1d3b      	adds	r3, r7, #4
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4807      	ldr	r0, [pc, #28]	; (8000ff8 <MX_TIM14_Init+0x94>)
 8000fda:	f003 f8d3 	bl	8004184 <HAL_TIM_PWM_ConfigChannel>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8000fe4:	f000 f924 	bl	8001230 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8000fe8:	4803      	ldr	r0, [pc, #12]	; (8000ff8 <MX_TIM14_Init+0x94>)
 8000fea:	f000 fa99 	bl	8001520 <HAL_TIM_MspPostInit>

}
 8000fee:	bf00      	nop
 8000ff0:	3720      	adds	r7, #32
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	2000019c 	.word	0x2000019c
 8000ffc:	40002000 	.word	0x40002000

08001000 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001004:	4b11      	ldr	r3, [pc, #68]	; (800104c <MX_USART2_UART_Init+0x4c>)
 8001006:	4a12      	ldr	r2, [pc, #72]	; (8001050 <MX_USART2_UART_Init+0x50>)
 8001008:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800100a:	4b10      	ldr	r3, [pc, #64]	; (800104c <MX_USART2_UART_Init+0x4c>)
 800100c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001010:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001012:	4b0e      	ldr	r3, [pc, #56]	; (800104c <MX_USART2_UART_Init+0x4c>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001018:	4b0c      	ldr	r3, [pc, #48]	; (800104c <MX_USART2_UART_Init+0x4c>)
 800101a:	2200      	movs	r2, #0
 800101c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800101e:	4b0b      	ldr	r3, [pc, #44]	; (800104c <MX_USART2_UART_Init+0x4c>)
 8001020:	2200      	movs	r2, #0
 8001022:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001024:	4b09      	ldr	r3, [pc, #36]	; (800104c <MX_USART2_UART_Init+0x4c>)
 8001026:	220c      	movs	r2, #12
 8001028:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800102a:	4b08      	ldr	r3, [pc, #32]	; (800104c <MX_USART2_UART_Init+0x4c>)
 800102c:	2200      	movs	r2, #0
 800102e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <MX_USART2_UART_Init+0x4c>)
 8001032:	2200      	movs	r2, #0
 8001034:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001036:	4805      	ldr	r0, [pc, #20]	; (800104c <MX_USART2_UART_Init+0x4c>)
 8001038:	f003 fce6 	bl	8004a08 <HAL_UART_Init>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001042:	f000 f8f5 	bl	8001230 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	200001e4 	.word	0x200001e4
 8001050:	40004400 	.word	0x40004400

08001054 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	607b      	str	r3, [r7, #4]
 800105e:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <MX_DMA_Init+0x4c>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	4a0f      	ldr	r2, [pc, #60]	; (80010a0 <MX_DMA_Init+0x4c>)
 8001064:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001068:	6313      	str	r3, [r2, #48]	; 0x30
 800106a:	4b0d      	ldr	r3, [pc, #52]	; (80010a0 <MX_DMA_Init+0x4c>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001076:	2200      	movs	r2, #0
 8001078:	2100      	movs	r1, #0
 800107a:	2010      	movs	r0, #16
 800107c:	f001 f993 	bl	80023a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001080:	2010      	movs	r0, #16
 8001082:	f001 f9ac 	bl	80023de <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001086:	2200      	movs	r2, #0
 8001088:	2100      	movs	r1, #0
 800108a:	2011      	movs	r0, #17
 800108c:	f001 f98b 	bl	80023a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001090:	2011      	movs	r0, #17
 8001092:	f001 f9a4 	bl	80023de <HAL_NVIC_EnableIRQ>

}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40023800 	.word	0x40023800

080010a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b088      	sub	sp, #32
 80010a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010aa:	f107 030c 	add.w	r3, r7, #12
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	609a      	str	r2, [r3, #8]
 80010b6:	60da      	str	r2, [r3, #12]
 80010b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	60bb      	str	r3, [r7, #8]
 80010be:	4b2a      	ldr	r3, [pc, #168]	; (8001168 <MX_GPIO_Init+0xc4>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a29      	ldr	r2, [pc, #164]	; (8001168 <MX_GPIO_Init+0xc4>)
 80010c4:	f043 0304 	orr.w	r3, r3, #4
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4b27      	ldr	r3, [pc, #156]	; (8001168 <MX_GPIO_Init+0xc4>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f003 0304 	and.w	r3, r3, #4
 80010d2:	60bb      	str	r3, [r7, #8]
 80010d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	607b      	str	r3, [r7, #4]
 80010da:	4b23      	ldr	r3, [pc, #140]	; (8001168 <MX_GPIO_Init+0xc4>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	4a22      	ldr	r2, [pc, #136]	; (8001168 <MX_GPIO_Init+0xc4>)
 80010e0:	f043 0301 	orr.w	r3, r3, #1
 80010e4:	6313      	str	r3, [r2, #48]	; 0x30
 80010e6:	4b20      	ldr	r3, [pc, #128]	; (8001168 <MX_GPIO_Init+0xc4>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	603b      	str	r3, [r7, #0]
 80010f6:	4b1c      	ldr	r3, [pc, #112]	; (8001168 <MX_GPIO_Init+0xc4>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	4a1b      	ldr	r2, [pc, #108]	; (8001168 <MX_GPIO_Init+0xc4>)
 80010fc:	f043 0302 	orr.w	r3, r3, #2
 8001100:	6313      	str	r3, [r2, #48]	; 0x30
 8001102:	4b19      	ldr	r3, [pc, #100]	; (8001168 <MX_GPIO_Init+0xc4>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	603b      	str	r3, [r7, #0]
 800110c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800110e:	2200      	movs	r2, #0
 8001110:	2120      	movs	r1, #32
 8001112:	4816      	ldr	r0, [pc, #88]	; (800116c <MX_GPIO_Init+0xc8>)
 8001114:	f001 fe8e 	bl	8002e34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001118:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800111c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800111e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001122:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001128:	f107 030c 	add.w	r3, r7, #12
 800112c:	4619      	mov	r1, r3
 800112e:	4810      	ldr	r0, [pc, #64]	; (8001170 <MX_GPIO_Init+0xcc>)
 8001130:	f001 fcec 	bl	8002b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001134:	2320      	movs	r3, #32
 8001136:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001138:	2301      	movs	r3, #1
 800113a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001140:	2300      	movs	r3, #0
 8001142:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001144:	f107 030c 	add.w	r3, r7, #12
 8001148:	4619      	mov	r1, r3
 800114a:	4808      	ldr	r0, [pc, #32]	; (800116c <MX_GPIO_Init+0xc8>)
 800114c:	f001 fcde 	bl	8002b0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001150:	2200      	movs	r2, #0
 8001152:	2100      	movs	r1, #0
 8001154:	2028      	movs	r0, #40	; 0x28
 8001156:	f001 f926 	bl	80023a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800115a:	2028      	movs	r0, #40	; 0x28
 800115c:	f001 f93f 	bl	80023de <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001160:	bf00      	nop
 8001162:	3720      	adds	r7, #32
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40023800 	.word	0x40023800
 800116c:	40020000 	.word	0x40020000
 8001170:	40020800 	.word	0x40020800

08001174 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == B1_Pin) {	// blue button interrupt
 800117e:	88fb      	ldrh	r3, [r7, #6]
 8001180:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001184:	d114      	bne.n	80011b0 <HAL_GPIO_EXTI_Callback+0x3c>
	Target = (Target >= 500)?0:(Target+20);
 8001186:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800118e:	d203      	bcs.n	8001198 <HAL_GPIO_EXTI_Callback+0x24>
 8001190:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	3314      	adds	r3, #20
 8001196:	e000      	b.n	800119a <HAL_GPIO_EXTI_Callback+0x26>
 8001198:	2300      	movs	r3, #0
 800119a:	4a09      	ldr	r2, [pc, #36]	; (80011c0 <HAL_GPIO_EXTI_Callback+0x4c>)
 800119c:	6013      	str	r3, [r2, #0]
	motor[1].TargetPulse = Target;
 800119e:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <HAL_GPIO_EXTI_Callback+0x4c>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a08      	ldr	r2, [pc, #32]	; (80011c4 <HAL_GPIO_EXTI_Callback+0x50>)
 80011a4:	6093      	str	r3, [r2, #8]
	motor1A = motor[1].TargetPulse; //change pwm pulse value __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,Target);
 80011a6:	4a08      	ldr	r2, [pc, #32]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x54>)
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <HAL_GPIO_EXTI_Callback+0x50>)
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	6353      	str	r3, [r2, #52]	; 0x34
  } else {
      __NOP();
  }
}
 80011ae:	e000      	b.n	80011b2 <HAL_GPIO_EXTI_Callback+0x3e>
      __NOP();
 80011b0:	bf00      	nop
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	2000030c 	.word	0x2000030c
 80011c4:	200002e8 	.word	0x200002e8
 80011c8:	40010000 	.word	0x40010000

080011cc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
	short fspeed = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	81fb      	strh	r3, [r7, #14]
	static uint8_t i = 0;
	if (htim == &htim6)	// basic clock, 100Hz(10ms)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4a10      	ldr	r2, [pc, #64]	; (800121c <HAL_TIM_PeriodElapsedCallback+0x50>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d119      	bne.n	8001214 <HAL_TIM_PeriodElapsedCallback+0x48>
	{
		// motor 1 encoder value
		fspeed = (short)getSpeed(currentMotor);	// get motor 1 current speed from motor1's encoder
 80011e0:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80011e2:	881b      	ldrh	r3, [r3, #0]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff fa6d 	bl	80006c4 <getSpeed>
 80011ea:	4603      	mov	r3, r0
 80011ec:	81fb      	strh	r3, [r7, #14]
//		fspeed = PID_Cal(fspeed,&ERROR);	// PID configure new speed for motor 1
//		SetMotorVoltageAndDirection(speed);

		i++;
 80011ee:	4b0d      	ldr	r3, [pc, #52]	; (8001224 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	3301      	adds	r3, #1
 80011f4:	b2da      	uxtb	r2, r3
 80011f6:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80011f8:	701a      	strb	r2, [r3, #0]
		if(i >= 100)	// every 10 msec *100=1 sec
 80011fa:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	2b63      	cmp	r3, #99	; 0x63
 8001200:	d908      	bls.n	8001214 <HAL_TIM_PeriodElapsedCallback+0x48>
		{
			i = 0;
 8001202:	4b08      	ldr	r3, [pc, #32]	; (8001224 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001204:	2200      	movs	r2, #0
 8001206:	701a      	strb	r2, [r3, #0]
			motor[1].Speed = fspeed;
 8001208:	4a07      	ldr	r2, [pc, #28]	; (8001228 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800120a:	89fb      	ldrh	r3, [r7, #14]
 800120c:	8193      	strh	r3, [r2, #12]
			encoderRead_flag = 1;
 800120e:	4b07      	ldr	r3, [pc, #28]	; (800122c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001210:	2201      	movs	r2, #1
 8001212:	801a      	strh	r2, [r3, #0]
		}
	}
	if(htim == &htim2){
		// motor1 encoder counting
	}
}
 8001214:	bf00      	nop
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000154 	.word	0x20000154
 8001220:	20000308 	.word	0x20000308
 8001224:	2000031c 	.word	0x2000031c
 8001228:	200002e8 	.word	0x200002e8
 800122c:	2000030a 	.word	0x2000030a

08001230 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001234:	b672      	cpsid	i
}
 8001236:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001238:	e7fe      	b.n	8001238 <Error_Handler+0x8>
	...

0800123c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	607b      	str	r3, [r7, #4]
 8001246:	4b10      	ldr	r3, [pc, #64]	; (8001288 <HAL_MspInit+0x4c>)
 8001248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124a:	4a0f      	ldr	r2, [pc, #60]	; (8001288 <HAL_MspInit+0x4c>)
 800124c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001250:	6453      	str	r3, [r2, #68]	; 0x44
 8001252:	4b0d      	ldr	r3, [pc, #52]	; (8001288 <HAL_MspInit+0x4c>)
 8001254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001256:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	603b      	str	r3, [r7, #0]
 8001262:	4b09      	ldr	r3, [pc, #36]	; (8001288 <HAL_MspInit+0x4c>)
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	4a08      	ldr	r2, [pc, #32]	; (8001288 <HAL_MspInit+0x4c>)
 8001268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800126c:	6413      	str	r3, [r2, #64]	; 0x40
 800126e:	4b06      	ldr	r3, [pc, #24]	; (8001288 <HAL_MspInit+0x4c>)
 8001270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001276:	603b      	str	r3, [r7, #0]
 8001278:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	40023800 	.word	0x40023800

0800128c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08c      	sub	sp, #48	; 0x30
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 031c 	add.w	r3, r7, #28
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a31      	ldr	r2, [pc, #196]	; (8001370 <HAL_ADC_MspInit+0xe4>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d15b      	bne.n	8001366 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	61bb      	str	r3, [r7, #24]
 80012b2:	4b30      	ldr	r3, [pc, #192]	; (8001374 <HAL_ADC_MspInit+0xe8>)
 80012b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b6:	4a2f      	ldr	r2, [pc, #188]	; (8001374 <HAL_ADC_MspInit+0xe8>)
 80012b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012bc:	6453      	str	r3, [r2, #68]	; 0x44
 80012be:	4b2d      	ldr	r3, [pc, #180]	; (8001374 <HAL_ADC_MspInit+0xe8>)
 80012c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012c6:	61bb      	str	r3, [r7, #24]
 80012c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
 80012ce:	4b29      	ldr	r3, [pc, #164]	; (8001374 <HAL_ADC_MspInit+0xe8>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a28      	ldr	r2, [pc, #160]	; (8001374 <HAL_ADC_MspInit+0xe8>)
 80012d4:	f043 0304 	orr.w	r3, r3, #4
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b26      	ldr	r3, [pc, #152]	; (8001374 <HAL_ADC_MspInit+0xe8>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0304 	and.w	r3, r3, #4
 80012e2:	617b      	str	r3, [r7, #20]
 80012e4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	613b      	str	r3, [r7, #16]
 80012ea:	4b22      	ldr	r3, [pc, #136]	; (8001374 <HAL_ADC_MspInit+0xe8>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a21      	ldr	r2, [pc, #132]	; (8001374 <HAL_ADC_MspInit+0xe8>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b1f      	ldr	r3, [pc, #124]	; (8001374 <HAL_ADC_MspInit+0xe8>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	613b      	str	r3, [r7, #16]
 8001300:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	4b1b      	ldr	r3, [pc, #108]	; (8001374 <HAL_ADC_MspInit+0xe8>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	4a1a      	ldr	r2, [pc, #104]	; (8001374 <HAL_ADC_MspInit+0xe8>)
 800130c:	f043 0302 	orr.w	r3, r3, #2
 8001310:	6313      	str	r3, [r2, #48]	; 0x30
 8001312:	4b18      	ldr	r3, [pc, #96]	; (8001374 <HAL_ADC_MspInit+0xe8>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800131e:	233c      	movs	r3, #60	; 0x3c
 8001320:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001322:	2303      	movs	r3, #3
 8001324:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800132a:	f107 031c 	add.w	r3, r7, #28
 800132e:	4619      	mov	r1, r3
 8001330:	4811      	ldr	r0, [pc, #68]	; (8001378 <HAL_ADC_MspInit+0xec>)
 8001332:	f001 fbeb 	bl	8002b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001336:	2310      	movs	r3, #16
 8001338:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800133a:	2303      	movs	r3, #3
 800133c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001342:	f107 031c 	add.w	r3, r7, #28
 8001346:	4619      	mov	r1, r3
 8001348:	480c      	ldr	r0, [pc, #48]	; (800137c <HAL_ADC_MspInit+0xf0>)
 800134a:	f001 fbdf 	bl	8002b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800134e:	2302      	movs	r3, #2
 8001350:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001352:	2303      	movs	r3, #3
 8001354:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800135a:	f107 031c 	add.w	r3, r7, #28
 800135e:	4619      	mov	r1, r3
 8001360:	4807      	ldr	r0, [pc, #28]	; (8001380 <HAL_ADC_MspInit+0xf4>)
 8001362:	f001 fbd3 	bl	8002b0c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001366:	bf00      	nop
 8001368:	3730      	adds	r7, #48	; 0x30
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40012000 	.word	0x40012000
 8001374:	40023800 	.word	0x40023800
 8001378:	40020800 	.word	0x40020800
 800137c:	40020000 	.word	0x40020000
 8001380:	40020400 	.word	0x40020400

08001384 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a0b      	ldr	r2, [pc, #44]	; (80013c0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d10d      	bne.n	80013b2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <HAL_TIM_PWM_MspInit+0x40>)
 800139c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139e:	4a09      	ldr	r2, [pc, #36]	; (80013c4 <HAL_TIM_PWM_MspInit+0x40>)
 80013a0:	f043 0301 	orr.w	r3, r3, #1
 80013a4:	6453      	str	r3, [r2, #68]	; 0x44
 80013a6:	4b07      	ldr	r3, [pc, #28]	; (80013c4 <HAL_TIM_PWM_MspInit+0x40>)
 80013a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80013b2:	bf00      	nop
 80013b4:	3714      	adds	r7, #20
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	40010000 	.word	0x40010000
 80013c4:	40023800 	.word	0x40023800

080013c8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08a      	sub	sp, #40	; 0x28
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013e8:	d152      	bne.n	8001490 <HAL_TIM_Encoder_MspInit+0xc8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	613b      	str	r3, [r7, #16]
 80013ee:	4b2a      	ldr	r3, [pc, #168]	; (8001498 <HAL_TIM_Encoder_MspInit+0xd0>)
 80013f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f2:	4a29      	ldr	r2, [pc, #164]	; (8001498 <HAL_TIM_Encoder_MspInit+0xd0>)
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	6413      	str	r3, [r2, #64]	; 0x40
 80013fa:	4b27      	ldr	r3, [pc, #156]	; (8001498 <HAL_TIM_Encoder_MspInit+0xd0>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	613b      	str	r3, [r7, #16]
 8001404:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	4b23      	ldr	r3, [pc, #140]	; (8001498 <HAL_TIM_Encoder_MspInit+0xd0>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	4a22      	ldr	r2, [pc, #136]	; (8001498 <HAL_TIM_Encoder_MspInit+0xd0>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	6313      	str	r3, [r2, #48]	; 0x30
 8001416:	4b20      	ldr	r3, [pc, #128]	; (8001498 <HAL_TIM_Encoder_MspInit+0xd0>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	60bb      	str	r3, [r7, #8]
 8001426:	4b1c      	ldr	r3, [pc, #112]	; (8001498 <HAL_TIM_Encoder_MspInit+0xd0>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	4a1b      	ldr	r2, [pc, #108]	; (8001498 <HAL_TIM_Encoder_MspInit+0xd0>)
 800142c:	f043 0302 	orr.w	r3, r3, #2
 8001430:	6313      	str	r3, [r2, #48]	; 0x30
 8001432:	4b19      	ldr	r3, [pc, #100]	; (8001498 <HAL_TIM_Encoder_MspInit+0xd0>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	60bb      	str	r3, [r7, #8]
 800143c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = encoder1A_Pin;
 800143e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001442:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001444:	2302      	movs	r3, #2
 8001446:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144c:	2300      	movs	r3, #0
 800144e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001450:	2301      	movs	r3, #1
 8001452:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(encoder1A_GPIO_Port, &GPIO_InitStruct);
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	4619      	mov	r1, r3
 800145a:	4810      	ldr	r0, [pc, #64]	; (800149c <HAL_TIM_Encoder_MspInit+0xd4>)
 800145c:	f001 fb56 	bl	8002b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = encoder1B_Pin;
 8001460:	2308      	movs	r3, #8
 8001462:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001464:	2302      	movs	r3, #2
 8001466:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146c:	2300      	movs	r3, #0
 800146e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001470:	2301      	movs	r3, #1
 8001472:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(encoder1B_GPIO_Port, &GPIO_InitStruct);
 8001474:	f107 0314 	add.w	r3, r7, #20
 8001478:	4619      	mov	r1, r3
 800147a:	4809      	ldr	r0, [pc, #36]	; (80014a0 <HAL_TIM_Encoder_MspInit+0xd8>)
 800147c:	f001 fb46 	bl	8002b0c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001480:	2200      	movs	r2, #0
 8001482:	2101      	movs	r1, #1
 8001484:	201c      	movs	r0, #28
 8001486:	f000 ff8e 	bl	80023a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800148a:	201c      	movs	r0, #28
 800148c:	f000 ffa7 	bl	80023de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001490:	bf00      	nop
 8001492:	3728      	adds	r7, #40	; 0x28
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40023800 	.word	0x40023800
 800149c:	40020000 	.word	0x40020000
 80014a0:	40020400 	.word	0x40020400

080014a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a18      	ldr	r2, [pc, #96]	; (8001514 <HAL_TIM_Base_MspInit+0x70>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d116      	bne.n	80014e4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	4b17      	ldr	r3, [pc, #92]	; (8001518 <HAL_TIM_Base_MspInit+0x74>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	4a16      	ldr	r2, [pc, #88]	; (8001518 <HAL_TIM_Base_MspInit+0x74>)
 80014c0:	f043 0310 	orr.w	r3, r3, #16
 80014c4:	6413      	str	r3, [r2, #64]	; 0x40
 80014c6:	4b14      	ldr	r3, [pc, #80]	; (8001518 <HAL_TIM_Base_MspInit+0x74>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	f003 0310 	and.w	r3, r3, #16
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 80014d2:	2200      	movs	r2, #0
 80014d4:	2103      	movs	r1, #3
 80014d6:	2036      	movs	r0, #54	; 0x36
 80014d8:	f000 ff65 	bl	80023a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80014dc:	2036      	movs	r0, #54	; 0x36
 80014de:	f000 ff7e 	bl	80023de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80014e2:	e012      	b.n	800150a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM14)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a0c      	ldr	r2, [pc, #48]	; (800151c <HAL_TIM_Base_MspInit+0x78>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d10d      	bne.n	800150a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	4b09      	ldr	r3, [pc, #36]	; (8001518 <HAL_TIM_Base_MspInit+0x74>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	4a08      	ldr	r2, [pc, #32]	; (8001518 <HAL_TIM_Base_MspInit+0x74>)
 80014f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014fc:	6413      	str	r3, [r2, #64]	; 0x40
 80014fe:	4b06      	ldr	r3, [pc, #24]	; (8001518 <HAL_TIM_Base_MspInit+0x74>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001506:	60bb      	str	r3, [r7, #8]
 8001508:	68bb      	ldr	r3, [r7, #8]
}
 800150a:	bf00      	nop
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40001000 	.word	0x40001000
 8001518:	40023800 	.word	0x40023800
 800151c:	40002000 	.word	0x40002000

08001520 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08a      	sub	sp, #40	; 0x28
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001528:	f107 0314 	add.w	r3, r7, #20
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a24      	ldr	r2, [pc, #144]	; (80015d0 <HAL_TIM_MspPostInit+0xb0>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d11f      	bne.n	8001582 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	613b      	str	r3, [r7, #16]
 8001546:	4b23      	ldr	r3, [pc, #140]	; (80015d4 <HAL_TIM_MspPostInit+0xb4>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	4a22      	ldr	r2, [pc, #136]	; (80015d4 <HAL_TIM_MspPostInit+0xb4>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	6313      	str	r3, [r2, #48]	; 0x30
 8001552:	4b20      	ldr	r3, [pc, #128]	; (80015d4 <HAL_TIM_MspPostInit+0xb4>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	613b      	str	r3, [r7, #16]
 800155c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = motor1B_Pin;
 800155e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001562:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001564:	2302      	movs	r3, #2
 8001566:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156c:	2300      	movs	r3, #0
 800156e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001570:	2301      	movs	r3, #1
 8001572:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(motor1B_GPIO_Port, &GPIO_InitStruct);
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	4619      	mov	r1, r3
 800157a:	4817      	ldr	r0, [pc, #92]	; (80015d8 <HAL_TIM_MspPostInit+0xb8>)
 800157c:	f001 fac6 	bl	8002b0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8001580:	e022      	b.n	80015c8 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM14)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a15      	ldr	r2, [pc, #84]	; (80015dc <HAL_TIM_MspPostInit+0xbc>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d11d      	bne.n	80015c8 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800158c:	2300      	movs	r3, #0
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <HAL_TIM_MspPostInit+0xb4>)
 8001592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001594:	4a0f      	ldr	r2, [pc, #60]	; (80015d4 <HAL_TIM_MspPostInit+0xb4>)
 8001596:	f043 0301 	orr.w	r3, r3, #1
 800159a:	6313      	str	r3, [r2, #48]	; 0x30
 800159c:	4b0d      	ldr	r3, [pc, #52]	; (80015d4 <HAL_TIM_MspPostInit+0xb4>)
 800159e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = motor1A_Pin;
 80015a8:	2380      	movs	r3, #128	; 0x80
 80015aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ac:	2302      	movs	r3, #2
 80015ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b4:	2300      	movs	r3, #0
 80015b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 80015b8:	2309      	movs	r3, #9
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(motor1A_GPIO_Port, &GPIO_InitStruct);
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	4619      	mov	r1, r3
 80015c2:	4805      	ldr	r0, [pc, #20]	; (80015d8 <HAL_TIM_MspPostInit+0xb8>)
 80015c4:	f001 faa2 	bl	8002b0c <HAL_GPIO_Init>
}
 80015c8:	bf00      	nop
 80015ca:	3728      	adds	r7, #40	; 0x28
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40010000 	.word	0x40010000
 80015d4:	40023800 	.word	0x40023800
 80015d8:	40020000 	.word	0x40020000
 80015dc:	40002000 	.word	0x40002000

080015e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08a      	sub	sp, #40	; 0x28
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a4b      	ldr	r2, [pc, #300]	; (800172c <HAL_UART_MspInit+0x14c>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	f040 8090 	bne.w	8001724 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001604:	2300      	movs	r3, #0
 8001606:	613b      	str	r3, [r7, #16]
 8001608:	4b49      	ldr	r3, [pc, #292]	; (8001730 <HAL_UART_MspInit+0x150>)
 800160a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160c:	4a48      	ldr	r2, [pc, #288]	; (8001730 <HAL_UART_MspInit+0x150>)
 800160e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001612:	6413      	str	r3, [r2, #64]	; 0x40
 8001614:	4b46      	ldr	r3, [pc, #280]	; (8001730 <HAL_UART_MspInit+0x150>)
 8001616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161c:	613b      	str	r3, [r7, #16]
 800161e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001620:	2300      	movs	r3, #0
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	4b42      	ldr	r3, [pc, #264]	; (8001730 <HAL_UART_MspInit+0x150>)
 8001626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001628:	4a41      	ldr	r2, [pc, #260]	; (8001730 <HAL_UART_MspInit+0x150>)
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	6313      	str	r3, [r2, #48]	; 0x30
 8001630:	4b3f      	ldr	r3, [pc, #252]	; (8001730 <HAL_UART_MspInit+0x150>)
 8001632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800163c:	230c      	movs	r3, #12
 800163e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001640:	2302      	movs	r3, #2
 8001642:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001648:	2303      	movs	r3, #3
 800164a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800164c:	2307      	movs	r3, #7
 800164e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001650:	f107 0314 	add.w	r3, r7, #20
 8001654:	4619      	mov	r1, r3
 8001656:	4837      	ldr	r0, [pc, #220]	; (8001734 <HAL_UART_MspInit+0x154>)
 8001658:	f001 fa58 	bl	8002b0c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800165c:	4b36      	ldr	r3, [pc, #216]	; (8001738 <HAL_UART_MspInit+0x158>)
 800165e:	4a37      	ldr	r2, [pc, #220]	; (800173c <HAL_UART_MspInit+0x15c>)
 8001660:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001662:	4b35      	ldr	r3, [pc, #212]	; (8001738 <HAL_UART_MspInit+0x158>)
 8001664:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001668:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800166a:	4b33      	ldr	r3, [pc, #204]	; (8001738 <HAL_UART_MspInit+0x158>)
 800166c:	2200      	movs	r2, #0
 800166e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001670:	4b31      	ldr	r3, [pc, #196]	; (8001738 <HAL_UART_MspInit+0x158>)
 8001672:	2200      	movs	r2, #0
 8001674:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001676:	4b30      	ldr	r3, [pc, #192]	; (8001738 <HAL_UART_MspInit+0x158>)
 8001678:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800167c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800167e:	4b2e      	ldr	r3, [pc, #184]	; (8001738 <HAL_UART_MspInit+0x158>)
 8001680:	2200      	movs	r2, #0
 8001682:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001684:	4b2c      	ldr	r3, [pc, #176]	; (8001738 <HAL_UART_MspInit+0x158>)
 8001686:	2200      	movs	r2, #0
 8001688:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800168a:	4b2b      	ldr	r3, [pc, #172]	; (8001738 <HAL_UART_MspInit+0x158>)
 800168c:	2200      	movs	r2, #0
 800168e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001690:	4b29      	ldr	r3, [pc, #164]	; (8001738 <HAL_UART_MspInit+0x158>)
 8001692:	2200      	movs	r2, #0
 8001694:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001696:	4b28      	ldr	r3, [pc, #160]	; (8001738 <HAL_UART_MspInit+0x158>)
 8001698:	2200      	movs	r2, #0
 800169a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800169c:	4826      	ldr	r0, [pc, #152]	; (8001738 <HAL_UART_MspInit+0x158>)
 800169e:	f000 feb9 	bl	8002414 <HAL_DMA_Init>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80016a8:	f7ff fdc2 	bl	8001230 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4a22      	ldr	r2, [pc, #136]	; (8001738 <HAL_UART_MspInit+0x158>)
 80016b0:	639a      	str	r2, [r3, #56]	; 0x38
 80016b2:	4a21      	ldr	r2, [pc, #132]	; (8001738 <HAL_UART_MspInit+0x158>)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80016b8:	4b21      	ldr	r3, [pc, #132]	; (8001740 <HAL_UART_MspInit+0x160>)
 80016ba:	4a22      	ldr	r2, [pc, #136]	; (8001744 <HAL_UART_MspInit+0x164>)
 80016bc:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80016be:	4b20      	ldr	r3, [pc, #128]	; (8001740 <HAL_UART_MspInit+0x160>)
 80016c0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016c4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016c6:	4b1e      	ldr	r3, [pc, #120]	; (8001740 <HAL_UART_MspInit+0x160>)
 80016c8:	2240      	movs	r2, #64	; 0x40
 80016ca:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016cc:	4b1c      	ldr	r3, [pc, #112]	; (8001740 <HAL_UART_MspInit+0x160>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016d2:	4b1b      	ldr	r3, [pc, #108]	; (8001740 <HAL_UART_MspInit+0x160>)
 80016d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016d8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016da:	4b19      	ldr	r3, [pc, #100]	; (8001740 <HAL_UART_MspInit+0x160>)
 80016dc:	2200      	movs	r2, #0
 80016de:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016e0:	4b17      	ldr	r3, [pc, #92]	; (8001740 <HAL_UART_MspInit+0x160>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80016e6:	4b16      	ldr	r3, [pc, #88]	; (8001740 <HAL_UART_MspInit+0x160>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016ec:	4b14      	ldr	r3, [pc, #80]	; (8001740 <HAL_UART_MspInit+0x160>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016f2:	4b13      	ldr	r3, [pc, #76]	; (8001740 <HAL_UART_MspInit+0x160>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80016f8:	4811      	ldr	r0, [pc, #68]	; (8001740 <HAL_UART_MspInit+0x160>)
 80016fa:	f000 fe8b 	bl	8002414 <HAL_DMA_Init>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8001704:	f7ff fd94 	bl	8001230 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	4a0d      	ldr	r2, [pc, #52]	; (8001740 <HAL_UART_MspInit+0x160>)
 800170c:	635a      	str	r2, [r3, #52]	; 0x34
 800170e:	4a0c      	ldr	r2, [pc, #48]	; (8001740 <HAL_UART_MspInit+0x160>)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8001714:	2200      	movs	r2, #0
 8001716:	2102      	movs	r1, #2
 8001718:	2026      	movs	r0, #38	; 0x26
 800171a:	f000 fe44 	bl	80023a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800171e:	2026      	movs	r0, #38	; 0x26
 8001720:	f000 fe5d 	bl	80023de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001724:	bf00      	nop
 8001726:	3728      	adds	r7, #40	; 0x28
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40004400 	.word	0x40004400
 8001730:	40023800 	.word	0x40023800
 8001734:	40020000 	.word	0x40020000
 8001738:	20000228 	.word	0x20000228
 800173c:	40026088 	.word	0x40026088
 8001740:	20000288 	.word	0x20000288
 8001744:	400260a0 	.word	0x400260a0

08001748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800174c:	e7fe      	b.n	800174c <NMI_Handler+0x4>

0800174e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001752:	e7fe      	b.n	8001752 <HardFault_Handler+0x4>

08001754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001758:	e7fe      	b.n	8001758 <MemManage_Handler+0x4>

0800175a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800175e:	e7fe      	b.n	800175e <BusFault_Handler+0x4>

08001760 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001764:	e7fe      	b.n	8001764 <UsageFault_Handler+0x4>

08001766 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001794:	f000 f900 	bl	8001998 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001798:	bf00      	nop
 800179a:	bd80      	pop	{r7, pc}

0800179c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80017a0:	4802      	ldr	r0, [pc, #8]	; (80017ac <DMA1_Stream5_IRQHandler+0x10>)
 80017a2:	f000 ff77 	bl	8002694 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000228 	.word	0x20000228

080017b0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80017b4:	4802      	ldr	r0, [pc, #8]	; (80017c0 <DMA1_Stream6_IRQHandler+0x10>)
 80017b6:	f000 ff6d 	bl	8002694 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000288 	.word	0x20000288

080017c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017c8:	4802      	ldr	r0, [pc, #8]	; (80017d4 <TIM2_IRQHandler+0x10>)
 80017ca:	f002 fbd3 	bl	8003f74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	2000010c 	.word	0x2000010c

080017d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017dc:	4802      	ldr	r0, [pc, #8]	; (80017e8 <USART2_IRQHandler+0x10>)
 80017de:	f003 f9f3 	bl	8004bc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	200001e4 	.word	0x200001e4

080017ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80017f0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80017f4:	f001 fb38 	bl	8002e68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017f8:	bf00      	nop
 80017fa:	bd80      	pop	{r7, pc}

080017fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001800:	4802      	ldr	r0, [pc, #8]	; (800180c <TIM6_DAC_IRQHandler+0x10>)
 8001802:	f002 fbb7 	bl	8003f74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000154 	.word	0x20000154

08001810 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001818:	4a14      	ldr	r2, [pc, #80]	; (800186c <_sbrk+0x5c>)
 800181a:	4b15      	ldr	r3, [pc, #84]	; (8001870 <_sbrk+0x60>)
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001824:	4b13      	ldr	r3, [pc, #76]	; (8001874 <_sbrk+0x64>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d102      	bne.n	8001832 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800182c:	4b11      	ldr	r3, [pc, #68]	; (8001874 <_sbrk+0x64>)
 800182e:	4a12      	ldr	r2, [pc, #72]	; (8001878 <_sbrk+0x68>)
 8001830:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001832:	4b10      	ldr	r3, [pc, #64]	; (8001874 <_sbrk+0x64>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4413      	add	r3, r2
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	429a      	cmp	r2, r3
 800183e:	d207      	bcs.n	8001850 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001840:	f004 f91e 	bl	8005a80 <__errno>
 8001844:	4603      	mov	r3, r0
 8001846:	220c      	movs	r2, #12
 8001848:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800184a:	f04f 33ff 	mov.w	r3, #4294967295
 800184e:	e009      	b.n	8001864 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001850:	4b08      	ldr	r3, [pc, #32]	; (8001874 <_sbrk+0x64>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001856:	4b07      	ldr	r3, [pc, #28]	; (8001874 <_sbrk+0x64>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4413      	add	r3, r2
 800185e:	4a05      	ldr	r2, [pc, #20]	; (8001874 <_sbrk+0x64>)
 8001860:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001862:	68fb      	ldr	r3, [r7, #12]
}
 8001864:	4618      	mov	r0, r3
 8001866:	3718      	adds	r7, #24
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20020000 	.word	0x20020000
 8001870:	00000400 	.word	0x00000400
 8001874:	20000320 	.word	0x20000320
 8001878:	20000470 	.word	0x20000470

0800187c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001880:	4b06      	ldr	r3, [pc, #24]	; (800189c <SystemInit+0x20>)
 8001882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001886:	4a05      	ldr	r2, [pc, #20]	; (800189c <SystemInit+0x20>)
 8001888:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800188c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018a4:	480d      	ldr	r0, [pc, #52]	; (80018dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018a6:	490e      	ldr	r1, [pc, #56]	; (80018e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018a8:	4a0e      	ldr	r2, [pc, #56]	; (80018e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018ac:	e002      	b.n	80018b4 <LoopCopyDataInit>

080018ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018b2:	3304      	adds	r3, #4

080018b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018b8:	d3f9      	bcc.n	80018ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ba:	4a0b      	ldr	r2, [pc, #44]	; (80018e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018bc:	4c0b      	ldr	r4, [pc, #44]	; (80018ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80018be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018c0:	e001      	b.n	80018c6 <LoopFillZerobss>

080018c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018c4:	3204      	adds	r2, #4

080018c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018c8:	d3fb      	bcc.n	80018c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018ca:	f7ff ffd7 	bl	800187c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018ce:	f004 f8dd 	bl	8005a8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018d2:	f7ff f82d 	bl	8000930 <main>
  bx  lr    
 80018d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018e0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80018e4:	080064c4 	.word	0x080064c4
  ldr r2, =_sbss
 80018e8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80018ec:	20000470 	.word	0x20000470

080018f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018f0:	e7fe      	b.n	80018f0 <ADC_IRQHandler>
	...

080018f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018f8:	4b0e      	ldr	r3, [pc, #56]	; (8001934 <HAL_Init+0x40>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a0d      	ldr	r2, [pc, #52]	; (8001934 <HAL_Init+0x40>)
 80018fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001902:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001904:	4b0b      	ldr	r3, [pc, #44]	; (8001934 <HAL_Init+0x40>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a0a      	ldr	r2, [pc, #40]	; (8001934 <HAL_Init+0x40>)
 800190a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800190e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001910:	4b08      	ldr	r3, [pc, #32]	; (8001934 <HAL_Init+0x40>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a07      	ldr	r2, [pc, #28]	; (8001934 <HAL_Init+0x40>)
 8001916:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800191a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800191c:	2003      	movs	r0, #3
 800191e:	f000 fd37 	bl	8002390 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001922:	200f      	movs	r0, #15
 8001924:	f000 f808 	bl	8001938 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001928:	f7ff fc88 	bl	800123c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40023c00 	.word	0x40023c00

08001938 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001940:	4b12      	ldr	r3, [pc, #72]	; (800198c <HAL_InitTick+0x54>)
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	4b12      	ldr	r3, [pc, #72]	; (8001990 <HAL_InitTick+0x58>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	4619      	mov	r1, r3
 800194a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800194e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001952:	fbb2 f3f3 	udiv	r3, r2, r3
 8001956:	4618      	mov	r0, r3
 8001958:	f000 fd4f 	bl	80023fa <HAL_SYSTICK_Config>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e00e      	b.n	8001984 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2b0f      	cmp	r3, #15
 800196a:	d80a      	bhi.n	8001982 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800196c:	2200      	movs	r2, #0
 800196e:	6879      	ldr	r1, [r7, #4]
 8001970:	f04f 30ff 	mov.w	r0, #4294967295
 8001974:	f000 fd17 	bl	80023a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001978:	4a06      	ldr	r2, [pc, #24]	; (8001994 <HAL_InitTick+0x5c>)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800197e:	2300      	movs	r3, #0
 8001980:	e000      	b.n	8001984 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
}
 8001984:	4618      	mov	r0, r3
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20000004 	.word	0x20000004
 8001990:	2000000c 	.word	0x2000000c
 8001994:	20000008 	.word	0x20000008

08001998 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800199c:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <HAL_IncTick+0x20>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	461a      	mov	r2, r3
 80019a2:	4b06      	ldr	r3, [pc, #24]	; (80019bc <HAL_IncTick+0x24>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4413      	add	r3, r2
 80019a8:	4a04      	ldr	r2, [pc, #16]	; (80019bc <HAL_IncTick+0x24>)
 80019aa:	6013      	str	r3, [r2, #0]
}
 80019ac:	bf00      	nop
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	2000000c 	.word	0x2000000c
 80019bc:	20000324 	.word	0x20000324

080019c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  return uwTick;
 80019c4:	4b03      	ldr	r3, [pc, #12]	; (80019d4 <HAL_GetTick+0x14>)
 80019c6:	681b      	ldr	r3, [r3, #0]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	20000324 	.word	0x20000324

080019d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019e0:	f7ff ffee 	bl	80019c0 <HAL_GetTick>
 80019e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019f0:	d005      	beq.n	80019fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019f2:	4b0a      	ldr	r3, [pc, #40]	; (8001a1c <HAL_Delay+0x44>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	461a      	mov	r2, r3
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	4413      	add	r3, r2
 80019fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019fe:	bf00      	nop
 8001a00:	f7ff ffde 	bl	80019c0 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	68fa      	ldr	r2, [r7, #12]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d8f7      	bhi.n	8001a00 <HAL_Delay+0x28>
  {
  }
}
 8001a10:	bf00      	nop
 8001a12:	bf00      	nop
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	2000000c 	.word	0x2000000c

08001a20 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d101      	bne.n	8001a36 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e033      	b.n	8001a9e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d109      	bne.n	8001a52 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7ff fc24 	bl	800128c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	f003 0310 	and.w	r3, r3, #16
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d118      	bne.n	8001a90 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a66:	f023 0302 	bic.w	r3, r3, #2
 8001a6a:	f043 0202 	orr.w	r2, r3, #2
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 fac0 	bl	8001ff8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	f023 0303 	bic.w	r3, r3, #3
 8001a86:	f043 0201 	orr.w	r2, r3, #1
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	641a      	str	r2, [r3, #64]	; 0x40
 8001a8e:	e001      	b.n	8001a94 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
	...

08001aa8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d101      	bne.n	8001ac2 <HAL_ADC_Start+0x1a>
 8001abe:	2302      	movs	r3, #2
 8001ac0:	e0b2      	b.n	8001c28 <HAL_ADC_Start+0x180>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f003 0301 	and.w	r3, r3, #1
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d018      	beq.n	8001b0a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	689a      	ldr	r2, [r3, #8]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f042 0201 	orr.w	r2, r2, #1
 8001ae6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ae8:	4b52      	ldr	r3, [pc, #328]	; (8001c34 <HAL_ADC_Start+0x18c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a52      	ldr	r2, [pc, #328]	; (8001c38 <HAL_ADC_Start+0x190>)
 8001aee:	fba2 2303 	umull	r2, r3, r2, r3
 8001af2:	0c9a      	lsrs	r2, r3, #18
 8001af4:	4613      	mov	r3, r2
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	4413      	add	r3, r2
 8001afa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001afc:	e002      	b.n	8001b04 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	3b01      	subs	r3, #1
 8001b02:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1f9      	bne.n	8001afe <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d17a      	bne.n	8001c0e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b20:	f023 0301 	bic.w	r3, r3, #1
 8001b24:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d007      	beq.n	8001b4a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b42:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b56:	d106      	bne.n	8001b66 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5c:	f023 0206 	bic.w	r2, r3, #6
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	645a      	str	r2, [r3, #68]	; 0x44
 8001b64:	e002      	b.n	8001b6c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b74:	4b31      	ldr	r3, [pc, #196]	; (8001c3c <HAL_ADC_Start+0x194>)
 8001b76:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001b80:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f003 031f 	and.w	r3, r3, #31
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d12a      	bne.n	8001be4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a2b      	ldr	r2, [pc, #172]	; (8001c40 <HAL_ADC_Start+0x198>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d015      	beq.n	8001bc4 <HAL_ADC_Start+0x11c>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a29      	ldr	r2, [pc, #164]	; (8001c44 <HAL_ADC_Start+0x19c>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d105      	bne.n	8001bae <HAL_ADC_Start+0x106>
 8001ba2:	4b26      	ldr	r3, [pc, #152]	; (8001c3c <HAL_ADC_Start+0x194>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f003 031f 	and.w	r3, r3, #31
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d00a      	beq.n	8001bc4 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a25      	ldr	r2, [pc, #148]	; (8001c48 <HAL_ADC_Start+0x1a0>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d136      	bne.n	8001c26 <HAL_ADC_Start+0x17e>
 8001bb8:	4b20      	ldr	r3, [pc, #128]	; (8001c3c <HAL_ADC_Start+0x194>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f003 0310 	and.w	r3, r3, #16
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d130      	bne.n	8001c26 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d129      	bne.n	8001c26 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	689a      	ldr	r2, [r3, #8]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001be0:	609a      	str	r2, [r3, #8]
 8001be2:	e020      	b.n	8001c26 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a15      	ldr	r2, [pc, #84]	; (8001c40 <HAL_ADC_Start+0x198>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d11b      	bne.n	8001c26 <HAL_ADC_Start+0x17e>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d114      	bne.n	8001c26 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	689a      	ldr	r2, [r3, #8]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	e00b      	b.n	8001c26 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	f043 0210 	orr.w	r2, r3, #16
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1e:	f043 0201 	orr.w	r2, r3, #1
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	20000004 	.word	0x20000004
 8001c38:	431bde83 	.word	0x431bde83
 8001c3c:	40012300 	.word	0x40012300
 8001c40:	40012000 	.word	0x40012000
 8001c44:	40012100 	.word	0x40012100
 8001c48:	40012200 	.word	0x40012200

08001c4c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c56:	2300      	movs	r3, #0
 8001c58:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c68:	d113      	bne.n	8001c92 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001c74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c78:	d10b      	bne.n	8001c92 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	f043 0220 	orr.w	r2, r3, #32
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e063      	b.n	8001d5a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001c92:	f7ff fe95 	bl	80019c0 <HAL_GetTick>
 8001c96:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c98:	e021      	b.n	8001cde <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca0:	d01d      	beq.n	8001cde <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d007      	beq.n	8001cb8 <HAL_ADC_PollForConversion+0x6c>
 8001ca8:	f7ff fe8a 	bl	80019c0 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d212      	bcs.n	8001cde <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d00b      	beq.n	8001cde <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	f043 0204 	orr.w	r2, r3, #4
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e03d      	b.n	8001d5a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d1d6      	bne.n	8001c9a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f06f 0212 	mvn.w	r2, #18
 8001cf4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d123      	bne.n	8001d58 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d11f      	bne.n	8001d58 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d006      	beq.n	8001d34 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d111      	bne.n	8001d58 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d38:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d105      	bne.n	8001d58 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d50:	f043 0201 	orr.w	r2, r3, #1
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001d62:	b480      	push	{r7}
 8001d64:	b083      	sub	sp, #12
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d86:	2300      	movs	r3, #0
 8001d88:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d101      	bne.n	8001d98 <HAL_ADC_ConfigChannel+0x1c>
 8001d94:	2302      	movs	r3, #2
 8001d96:	e113      	b.n	8001fc0 <HAL_ADC_ConfigChannel+0x244>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2b09      	cmp	r3, #9
 8001da6:	d925      	bls.n	8001df4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68d9      	ldr	r1, [r3, #12]
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	461a      	mov	r2, r3
 8001db6:	4613      	mov	r3, r2
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	4413      	add	r3, r2
 8001dbc:	3b1e      	subs	r3, #30
 8001dbe:	2207      	movs	r2, #7
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	43da      	mvns	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	400a      	ands	r2, r1
 8001dcc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68d9      	ldr	r1, [r3, #12]
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	689a      	ldr	r2, [r3, #8]
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	4618      	mov	r0, r3
 8001de0:	4603      	mov	r3, r0
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	4403      	add	r3, r0
 8001de6:	3b1e      	subs	r3, #30
 8001de8:	409a      	lsls	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	430a      	orrs	r2, r1
 8001df0:	60da      	str	r2, [r3, #12]
 8001df2:	e022      	b.n	8001e3a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6919      	ldr	r1, [r3, #16]
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	461a      	mov	r2, r3
 8001e02:	4613      	mov	r3, r2
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	4413      	add	r3, r2
 8001e08:	2207      	movs	r2, #7
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	43da      	mvns	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	400a      	ands	r2, r1
 8001e16:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6919      	ldr	r1, [r3, #16]
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	689a      	ldr	r2, [r3, #8]
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	4618      	mov	r0, r3
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	4403      	add	r3, r0
 8001e30:	409a      	lsls	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	430a      	orrs	r2, r1
 8001e38:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	2b06      	cmp	r3, #6
 8001e40:	d824      	bhi.n	8001e8c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685a      	ldr	r2, [r3, #4]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	4413      	add	r3, r2
 8001e52:	3b05      	subs	r3, #5
 8001e54:	221f      	movs	r2, #31
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	43da      	mvns	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	400a      	ands	r2, r1
 8001e62:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	4618      	mov	r0, r3
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685a      	ldr	r2, [r3, #4]
 8001e76:	4613      	mov	r3, r2
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	4413      	add	r3, r2
 8001e7c:	3b05      	subs	r3, #5
 8001e7e:	fa00 f203 	lsl.w	r2, r0, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	430a      	orrs	r2, r1
 8001e88:	635a      	str	r2, [r3, #52]	; 0x34
 8001e8a:	e04c      	b.n	8001f26 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	2b0c      	cmp	r3, #12
 8001e92:	d824      	bhi.n	8001ede <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685a      	ldr	r2, [r3, #4]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	4413      	add	r3, r2
 8001ea4:	3b23      	subs	r3, #35	; 0x23
 8001ea6:	221f      	movs	r2, #31
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	43da      	mvns	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	400a      	ands	r2, r1
 8001eb4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685a      	ldr	r2, [r3, #4]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	4413      	add	r3, r2
 8001ece:	3b23      	subs	r3, #35	; 0x23
 8001ed0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	631a      	str	r2, [r3, #48]	; 0x30
 8001edc:	e023      	b.n	8001f26 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	4413      	add	r3, r2
 8001eee:	3b41      	subs	r3, #65	; 0x41
 8001ef0:	221f      	movs	r2, #31
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	43da      	mvns	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	400a      	ands	r2, r1
 8001efe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685a      	ldr	r2, [r3, #4]
 8001f12:	4613      	mov	r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	4413      	add	r3, r2
 8001f18:	3b41      	subs	r3, #65	; 0x41
 8001f1a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	430a      	orrs	r2, r1
 8001f24:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f26:	4b29      	ldr	r3, [pc, #164]	; (8001fcc <HAL_ADC_ConfigChannel+0x250>)
 8001f28:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a28      	ldr	r2, [pc, #160]	; (8001fd0 <HAL_ADC_ConfigChannel+0x254>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d10f      	bne.n	8001f54 <HAL_ADC_ConfigChannel+0x1d8>
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2b12      	cmp	r3, #18
 8001f3a:	d10b      	bne.n	8001f54 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a1d      	ldr	r2, [pc, #116]	; (8001fd0 <HAL_ADC_ConfigChannel+0x254>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d12b      	bne.n	8001fb6 <HAL_ADC_ConfigChannel+0x23a>
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a1c      	ldr	r2, [pc, #112]	; (8001fd4 <HAL_ADC_ConfigChannel+0x258>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d003      	beq.n	8001f70 <HAL_ADC_ConfigChannel+0x1f4>
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2b11      	cmp	r3, #17
 8001f6e:	d122      	bne.n	8001fb6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a11      	ldr	r2, [pc, #68]	; (8001fd4 <HAL_ADC_ConfigChannel+0x258>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d111      	bne.n	8001fb6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f92:	4b11      	ldr	r3, [pc, #68]	; (8001fd8 <HAL_ADC_ConfigChannel+0x25c>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a11      	ldr	r2, [pc, #68]	; (8001fdc <HAL_ADC_ConfigChannel+0x260>)
 8001f98:	fba2 2303 	umull	r2, r3, r2, r3
 8001f9c:	0c9a      	lsrs	r2, r3, #18
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	4413      	add	r3, r2
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001fa8:	e002      	b.n	8001fb0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	3b01      	subs	r3, #1
 8001fae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1f9      	bne.n	8001faa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3714      	adds	r7, #20
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	40012300 	.word	0x40012300
 8001fd0:	40012000 	.word	0x40012000
 8001fd4:	10000012 	.word	0x10000012
 8001fd8:	20000004 	.word	0x20000004
 8001fdc:	431bde83 	.word	0x431bde83

08001fe0 <HAL_ADC_GetState>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL state
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Return ADC state */
  return hadc->State;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002000:	4b79      	ldr	r3, [pc, #484]	; (80021e8 <ADC_Init+0x1f0>)
 8002002:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	431a      	orrs	r2, r3
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	685a      	ldr	r2, [r3, #4]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800202c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6859      	ldr	r1, [r3, #4]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	021a      	lsls	r2, r3, #8
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	430a      	orrs	r2, r1
 8002040:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	685a      	ldr	r2, [r3, #4]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002050:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	6859      	ldr	r1, [r3, #4]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	430a      	orrs	r2, r1
 8002062:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	689a      	ldr	r2, [r3, #8]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002072:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	6899      	ldr	r1, [r3, #8]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	68da      	ldr	r2, [r3, #12]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	430a      	orrs	r2, r1
 8002084:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208a:	4a58      	ldr	r2, [pc, #352]	; (80021ec <ADC_Init+0x1f4>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d022      	beq.n	80020d6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	689a      	ldr	r2, [r3, #8]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800209e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6899      	ldr	r1, [r3, #8]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	430a      	orrs	r2, r1
 80020b0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	689a      	ldr	r2, [r3, #8]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6899      	ldr	r1, [r3, #8]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	430a      	orrs	r2, r1
 80020d2:	609a      	str	r2, [r3, #8]
 80020d4:	e00f      	b.n	80020f6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020f4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	689a      	ldr	r2, [r3, #8]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f022 0202 	bic.w	r2, r2, #2
 8002104:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	6899      	ldr	r1, [r3, #8]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	7e1b      	ldrb	r3, [r3, #24]
 8002110:	005a      	lsls	r2, r3, #1
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	430a      	orrs	r2, r1
 8002118:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d01b      	beq.n	800215c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002132:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	685a      	ldr	r2, [r3, #4]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002142:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6859      	ldr	r1, [r3, #4]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214e:	3b01      	subs	r3, #1
 8002150:	035a      	lsls	r2, r3, #13
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	430a      	orrs	r2, r1
 8002158:	605a      	str	r2, [r3, #4]
 800215a:	e007      	b.n	800216c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	685a      	ldr	r2, [r3, #4]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800216a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800217a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	3b01      	subs	r3, #1
 8002188:	051a      	lsls	r2, r3, #20
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	430a      	orrs	r2, r1
 8002190:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80021a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	6899      	ldr	r1, [r3, #8]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021ae:	025a      	lsls	r2, r3, #9
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	430a      	orrs	r2, r1
 80021b6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	689a      	ldr	r2, [r3, #8]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6899      	ldr	r1, [r3, #8]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	029a      	lsls	r2, r3, #10
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	430a      	orrs	r2, r1
 80021da:	609a      	str	r2, [r3, #8]
}
 80021dc:	bf00      	nop
 80021de:	3714      	adds	r7, #20
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	40012300 	.word	0x40012300
 80021ec:	0f000001 	.word	0x0f000001

080021f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f003 0307 	and.w	r3, r3, #7
 80021fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002200:	4b0c      	ldr	r3, [pc, #48]	; (8002234 <__NVIC_SetPriorityGrouping+0x44>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002206:	68ba      	ldr	r2, [r7, #8]
 8002208:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800220c:	4013      	ands	r3, r2
 800220e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002218:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800221c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002220:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002222:	4a04      	ldr	r2, [pc, #16]	; (8002234 <__NVIC_SetPriorityGrouping+0x44>)
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	60d3      	str	r3, [r2, #12]
}
 8002228:	bf00      	nop
 800222a:	3714      	adds	r7, #20
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	e000ed00 	.word	0xe000ed00

08002238 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800223c:	4b04      	ldr	r3, [pc, #16]	; (8002250 <__NVIC_GetPriorityGrouping+0x18>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	0a1b      	lsrs	r3, r3, #8
 8002242:	f003 0307 	and.w	r3, r3, #7
}
 8002246:	4618      	mov	r0, r3
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr
 8002250:	e000ed00 	.word	0xe000ed00

08002254 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	4603      	mov	r3, r0
 800225c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800225e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002262:	2b00      	cmp	r3, #0
 8002264:	db0b      	blt.n	800227e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002266:	79fb      	ldrb	r3, [r7, #7]
 8002268:	f003 021f 	and.w	r2, r3, #31
 800226c:	4907      	ldr	r1, [pc, #28]	; (800228c <__NVIC_EnableIRQ+0x38>)
 800226e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002272:	095b      	lsrs	r3, r3, #5
 8002274:	2001      	movs	r0, #1
 8002276:	fa00 f202 	lsl.w	r2, r0, r2
 800227a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800227e:	bf00      	nop
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	e000e100 	.word	0xe000e100

08002290 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	6039      	str	r1, [r7, #0]
 800229a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800229c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	db0a      	blt.n	80022ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	b2da      	uxtb	r2, r3
 80022a8:	490c      	ldr	r1, [pc, #48]	; (80022dc <__NVIC_SetPriority+0x4c>)
 80022aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ae:	0112      	lsls	r2, r2, #4
 80022b0:	b2d2      	uxtb	r2, r2
 80022b2:	440b      	add	r3, r1
 80022b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022b8:	e00a      	b.n	80022d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	b2da      	uxtb	r2, r3
 80022be:	4908      	ldr	r1, [pc, #32]	; (80022e0 <__NVIC_SetPriority+0x50>)
 80022c0:	79fb      	ldrb	r3, [r7, #7]
 80022c2:	f003 030f 	and.w	r3, r3, #15
 80022c6:	3b04      	subs	r3, #4
 80022c8:	0112      	lsls	r2, r2, #4
 80022ca:	b2d2      	uxtb	r2, r2
 80022cc:	440b      	add	r3, r1
 80022ce:	761a      	strb	r2, [r3, #24]
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	e000e100 	.word	0xe000e100
 80022e0:	e000ed00 	.word	0xe000ed00

080022e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b089      	sub	sp, #36	; 0x24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	f1c3 0307 	rsb	r3, r3, #7
 80022fe:	2b04      	cmp	r3, #4
 8002300:	bf28      	it	cs
 8002302:	2304      	movcs	r3, #4
 8002304:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	3304      	adds	r3, #4
 800230a:	2b06      	cmp	r3, #6
 800230c:	d902      	bls.n	8002314 <NVIC_EncodePriority+0x30>
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	3b03      	subs	r3, #3
 8002312:	e000      	b.n	8002316 <NVIC_EncodePriority+0x32>
 8002314:	2300      	movs	r3, #0
 8002316:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002318:	f04f 32ff 	mov.w	r2, #4294967295
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43da      	mvns	r2, r3
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	401a      	ands	r2, r3
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800232c:	f04f 31ff 	mov.w	r1, #4294967295
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	fa01 f303 	lsl.w	r3, r1, r3
 8002336:	43d9      	mvns	r1, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800233c:	4313      	orrs	r3, r2
         );
}
 800233e:	4618      	mov	r0, r3
 8002340:	3724      	adds	r7, #36	; 0x24
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
	...

0800234c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3b01      	subs	r3, #1
 8002358:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800235c:	d301      	bcc.n	8002362 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800235e:	2301      	movs	r3, #1
 8002360:	e00f      	b.n	8002382 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002362:	4a0a      	ldr	r2, [pc, #40]	; (800238c <SysTick_Config+0x40>)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3b01      	subs	r3, #1
 8002368:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800236a:	210f      	movs	r1, #15
 800236c:	f04f 30ff 	mov.w	r0, #4294967295
 8002370:	f7ff ff8e 	bl	8002290 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002374:	4b05      	ldr	r3, [pc, #20]	; (800238c <SysTick_Config+0x40>)
 8002376:	2200      	movs	r2, #0
 8002378:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800237a:	4b04      	ldr	r3, [pc, #16]	; (800238c <SysTick_Config+0x40>)
 800237c:	2207      	movs	r2, #7
 800237e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	e000e010 	.word	0xe000e010

08002390 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f7ff ff29 	bl	80021f0 <__NVIC_SetPriorityGrouping>
}
 800239e:	bf00      	nop
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b086      	sub	sp, #24
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	4603      	mov	r3, r0
 80023ae:	60b9      	str	r1, [r7, #8]
 80023b0:	607a      	str	r2, [r7, #4]
 80023b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023b4:	2300      	movs	r3, #0
 80023b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023b8:	f7ff ff3e 	bl	8002238 <__NVIC_GetPriorityGrouping>
 80023bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	68b9      	ldr	r1, [r7, #8]
 80023c2:	6978      	ldr	r0, [r7, #20]
 80023c4:	f7ff ff8e 	bl	80022e4 <NVIC_EncodePriority>
 80023c8:	4602      	mov	r2, r0
 80023ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ce:	4611      	mov	r1, r2
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff ff5d 	bl	8002290 <__NVIC_SetPriority>
}
 80023d6:	bf00      	nop
 80023d8:	3718      	adds	r7, #24
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b082      	sub	sp, #8
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	4603      	mov	r3, r0
 80023e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff ff31 	bl	8002254 <__NVIC_EnableIRQ>
}
 80023f2:	bf00      	nop
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b082      	sub	sp, #8
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f7ff ffa2 	bl	800234c <SysTick_Config>
 8002408:	4603      	mov	r3, r0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
	...

08002414 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800241c:	2300      	movs	r3, #0
 800241e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002420:	f7ff face 	bl	80019c0 <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d101      	bne.n	8002430 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e099      	b.n	8002564 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2202      	movs	r2, #2
 8002434:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f022 0201 	bic.w	r2, r2, #1
 800244e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002450:	e00f      	b.n	8002472 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002452:	f7ff fab5 	bl	80019c0 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b05      	cmp	r3, #5
 800245e:	d908      	bls.n	8002472 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2220      	movs	r2, #32
 8002464:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2203      	movs	r2, #3
 800246a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e078      	b.n	8002564 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0301 	and.w	r3, r3, #1
 800247c:	2b00      	cmp	r3, #0
 800247e:	d1e8      	bne.n	8002452 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002488:	697a      	ldr	r2, [r7, #20]
 800248a:	4b38      	ldr	r3, [pc, #224]	; (800256c <HAL_DMA_Init+0x158>)
 800248c:	4013      	ands	r3, r2
 800248e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685a      	ldr	r2, [r3, #4]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800249e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c8:	2b04      	cmp	r3, #4
 80024ca:	d107      	bne.n	80024dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d4:	4313      	orrs	r3, r2
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	4313      	orrs	r3, r2
 80024da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	f023 0307 	bic.w	r3, r3, #7
 80024f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f8:	697a      	ldr	r2, [r7, #20]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002502:	2b04      	cmp	r3, #4
 8002504:	d117      	bne.n	8002536 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	4313      	orrs	r3, r2
 800250e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00e      	beq.n	8002536 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 fa7b 	bl	8002a14 <DMA_CheckFifoParam>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d008      	beq.n	8002536 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2240      	movs	r2, #64	; 0x40
 8002528:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002532:	2301      	movs	r3, #1
 8002534:	e016      	b.n	8002564 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 fa32 	bl	80029a8 <DMA_CalcBaseAndBitshift>
 8002544:	4603      	mov	r3, r0
 8002546:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800254c:	223f      	movs	r2, #63	; 0x3f
 800254e:	409a      	lsls	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2201      	movs	r2, #1
 800255e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	3718      	adds	r7, #24
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	f010803f 	.word	0xf010803f

08002570 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800257c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800257e:	f7ff fa1f 	bl	80019c0 <HAL_GetTick>
 8002582:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800258a:	b2db      	uxtb	r3, r3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d008      	beq.n	80025a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2280      	movs	r2, #128	; 0x80
 8002594:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e052      	b.n	8002648 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 0216 	bic.w	r2, r2, #22
 80025b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	695a      	ldr	r2, [r3, #20]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d103      	bne.n	80025d2 <HAL_DMA_Abort+0x62>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d007      	beq.n	80025e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 0208 	bic.w	r2, r2, #8
 80025e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 0201 	bic.w	r2, r2, #1
 80025f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025f2:	e013      	b.n	800261c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025f4:	f7ff f9e4 	bl	80019c0 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b05      	cmp	r3, #5
 8002600:	d90c      	bls.n	800261c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2220      	movs	r2, #32
 8002606:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2203      	movs	r2, #3
 800260c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e015      	b.n	8002648 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1e4      	bne.n	80025f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800262e:	223f      	movs	r2, #63	; 0x3f
 8002630:	409a      	lsls	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2201      	movs	r2, #1
 800263a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002646:	2300      	movs	r3, #0
}
 8002648:	4618      	mov	r0, r3
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800265e:	b2db      	uxtb	r3, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d004      	beq.n	800266e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2280      	movs	r2, #128	; 0x80
 8002668:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e00c      	b.n	8002688 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2205      	movs	r2, #5
 8002672:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f022 0201 	bic.w	r2, r2, #1
 8002684:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b086      	sub	sp, #24
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800269c:	2300      	movs	r3, #0
 800269e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80026a0:	4b8e      	ldr	r3, [pc, #568]	; (80028dc <HAL_DMA_IRQHandler+0x248>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a8e      	ldr	r2, [pc, #568]	; (80028e0 <HAL_DMA_IRQHandler+0x24c>)
 80026a6:	fba2 2303 	umull	r2, r3, r2, r3
 80026aa:	0a9b      	lsrs	r3, r3, #10
 80026ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026be:	2208      	movs	r2, #8
 80026c0:	409a      	lsls	r2, r3
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	4013      	ands	r3, r2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d01a      	beq.n	8002700 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0304 	and.w	r3, r3, #4
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d013      	beq.n	8002700 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f022 0204 	bic.w	r2, r2, #4
 80026e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ec:	2208      	movs	r2, #8
 80026ee:	409a      	lsls	r2, r3
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f8:	f043 0201 	orr.w	r2, r3, #1
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002704:	2201      	movs	r2, #1
 8002706:	409a      	lsls	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	4013      	ands	r3, r2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d012      	beq.n	8002736 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00b      	beq.n	8002736 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002722:	2201      	movs	r2, #1
 8002724:	409a      	lsls	r2, r3
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800272e:	f043 0202 	orr.w	r2, r3, #2
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800273a:	2204      	movs	r2, #4
 800273c:	409a      	lsls	r2, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	4013      	ands	r3, r2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d012      	beq.n	800276c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00b      	beq.n	800276c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002758:	2204      	movs	r2, #4
 800275a:	409a      	lsls	r2, r3
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002764:	f043 0204 	orr.w	r2, r3, #4
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002770:	2210      	movs	r2, #16
 8002772:	409a      	lsls	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	4013      	ands	r3, r2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d043      	beq.n	8002804 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0308 	and.w	r3, r3, #8
 8002786:	2b00      	cmp	r3, #0
 8002788:	d03c      	beq.n	8002804 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800278e:	2210      	movs	r2, #16
 8002790:	409a      	lsls	r2, r3
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d018      	beq.n	80027d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d108      	bne.n	80027c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d024      	beq.n	8002804 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	4798      	blx	r3
 80027c2:	e01f      	b.n	8002804 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d01b      	beq.n	8002804 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	4798      	blx	r3
 80027d4:	e016      	b.n	8002804 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d107      	bne.n	80027f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 0208 	bic.w	r2, r2, #8
 80027f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d003      	beq.n	8002804 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002808:	2220      	movs	r2, #32
 800280a:	409a      	lsls	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	4013      	ands	r3, r2
 8002810:	2b00      	cmp	r3, #0
 8002812:	f000 808f 	beq.w	8002934 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0310 	and.w	r3, r3, #16
 8002820:	2b00      	cmp	r3, #0
 8002822:	f000 8087 	beq.w	8002934 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800282a:	2220      	movs	r2, #32
 800282c:	409a      	lsls	r2, r3
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b05      	cmp	r3, #5
 800283c:	d136      	bne.n	80028ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f022 0216 	bic.w	r2, r2, #22
 800284c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	695a      	ldr	r2, [r3, #20]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800285c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	2b00      	cmp	r3, #0
 8002864:	d103      	bne.n	800286e <HAL_DMA_IRQHandler+0x1da>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800286a:	2b00      	cmp	r3, #0
 800286c:	d007      	beq.n	800287e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f022 0208 	bic.w	r2, r2, #8
 800287c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002882:	223f      	movs	r2, #63	; 0x3f
 8002884:	409a      	lsls	r2, r3
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d07e      	beq.n	80029a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	4798      	blx	r3
        }
        return;
 80028aa:	e079      	b.n	80029a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d01d      	beq.n	80028f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10d      	bne.n	80028e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d031      	beq.n	8002934 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	4798      	blx	r3
 80028d8:	e02c      	b.n	8002934 <HAL_DMA_IRQHandler+0x2a0>
 80028da:	bf00      	nop
 80028dc:	20000004 	.word	0x20000004
 80028e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d023      	beq.n	8002934 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	4798      	blx	r3
 80028f4:	e01e      	b.n	8002934 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002900:	2b00      	cmp	r3, #0
 8002902:	d10f      	bne.n	8002924 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 0210 	bic.w	r2, r2, #16
 8002912:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002928:	2b00      	cmp	r3, #0
 800292a:	d003      	beq.n	8002934 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002938:	2b00      	cmp	r3, #0
 800293a:	d032      	beq.n	80029a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	2b00      	cmp	r3, #0
 8002946:	d022      	beq.n	800298e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2205      	movs	r2, #5
 800294c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 0201 	bic.w	r2, r2, #1
 800295e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	3301      	adds	r3, #1
 8002964:	60bb      	str	r3, [r7, #8]
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	429a      	cmp	r2, r3
 800296a:	d307      	bcc.n	800297c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1f2      	bne.n	8002960 <HAL_DMA_IRQHandler+0x2cc>
 800297a:	e000      	b.n	800297e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800297c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2201      	movs	r2, #1
 8002982:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002992:	2b00      	cmp	r3, #0
 8002994:	d005      	beq.n	80029a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	4798      	blx	r3
 800299e:	e000      	b.n	80029a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80029a0:	bf00      	nop
    }
  }
}
 80029a2:	3718      	adds	r7, #24
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b085      	sub	sp, #20
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	3b10      	subs	r3, #16
 80029b8:	4a14      	ldr	r2, [pc, #80]	; (8002a0c <DMA_CalcBaseAndBitshift+0x64>)
 80029ba:	fba2 2303 	umull	r2, r3, r2, r3
 80029be:	091b      	lsrs	r3, r3, #4
 80029c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80029c2:	4a13      	ldr	r2, [pc, #76]	; (8002a10 <DMA_CalcBaseAndBitshift+0x68>)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	4413      	add	r3, r2
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	461a      	mov	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2b03      	cmp	r3, #3
 80029d4:	d909      	bls.n	80029ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80029de:	f023 0303 	bic.w	r3, r3, #3
 80029e2:	1d1a      	adds	r2, r3, #4
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	659a      	str	r2, [r3, #88]	; 0x58
 80029e8:	e007      	b.n	80029fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80029f2:	f023 0303 	bic.w	r3, r3, #3
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3714      	adds	r7, #20
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	aaaaaaab 	.word	0xaaaaaaab
 8002a10:	08006478 	.word	0x08006478

08002a14 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a24:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d11f      	bne.n	8002a6e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	2b03      	cmp	r3, #3
 8002a32:	d856      	bhi.n	8002ae2 <DMA_CheckFifoParam+0xce>
 8002a34:	a201      	add	r2, pc, #4	; (adr r2, 8002a3c <DMA_CheckFifoParam+0x28>)
 8002a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a3a:	bf00      	nop
 8002a3c:	08002a4d 	.word	0x08002a4d
 8002a40:	08002a5f 	.word	0x08002a5f
 8002a44:	08002a4d 	.word	0x08002a4d
 8002a48:	08002ae3 	.word	0x08002ae3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d046      	beq.n	8002ae6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a5c:	e043      	b.n	8002ae6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a62:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a66:	d140      	bne.n	8002aea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a6c:	e03d      	b.n	8002aea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a76:	d121      	bne.n	8002abc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	2b03      	cmp	r3, #3
 8002a7c:	d837      	bhi.n	8002aee <DMA_CheckFifoParam+0xda>
 8002a7e:	a201      	add	r2, pc, #4	; (adr r2, 8002a84 <DMA_CheckFifoParam+0x70>)
 8002a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a84:	08002a95 	.word	0x08002a95
 8002a88:	08002a9b 	.word	0x08002a9b
 8002a8c:	08002a95 	.word	0x08002a95
 8002a90:	08002aad 	.word	0x08002aad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	73fb      	strb	r3, [r7, #15]
      break;
 8002a98:	e030      	b.n	8002afc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d025      	beq.n	8002af2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002aaa:	e022      	b.n	8002af2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ab4:	d11f      	bne.n	8002af6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002aba:	e01c      	b.n	8002af6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d903      	bls.n	8002aca <DMA_CheckFifoParam+0xb6>
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	2b03      	cmp	r3, #3
 8002ac6:	d003      	beq.n	8002ad0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ac8:	e018      	b.n	8002afc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	73fb      	strb	r3, [r7, #15]
      break;
 8002ace:	e015      	b.n	8002afc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00e      	beq.n	8002afa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	73fb      	strb	r3, [r7, #15]
      break;
 8002ae0:	e00b      	b.n	8002afa <DMA_CheckFifoParam+0xe6>
      break;
 8002ae2:	bf00      	nop
 8002ae4:	e00a      	b.n	8002afc <DMA_CheckFifoParam+0xe8>
      break;
 8002ae6:	bf00      	nop
 8002ae8:	e008      	b.n	8002afc <DMA_CheckFifoParam+0xe8>
      break;
 8002aea:	bf00      	nop
 8002aec:	e006      	b.n	8002afc <DMA_CheckFifoParam+0xe8>
      break;
 8002aee:	bf00      	nop
 8002af0:	e004      	b.n	8002afc <DMA_CheckFifoParam+0xe8>
      break;
 8002af2:	bf00      	nop
 8002af4:	e002      	b.n	8002afc <DMA_CheckFifoParam+0xe8>
      break;   
 8002af6:	bf00      	nop
 8002af8:	e000      	b.n	8002afc <DMA_CheckFifoParam+0xe8>
      break;
 8002afa:	bf00      	nop
    }
  } 
  
  return status; 
 8002afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3714      	adds	r7, #20
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop

08002b0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b089      	sub	sp, #36	; 0x24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b16:	2300      	movs	r3, #0
 8002b18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b22:	2300      	movs	r3, #0
 8002b24:	61fb      	str	r3, [r7, #28]
 8002b26:	e165      	b.n	8002df4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b28:	2201      	movs	r2, #1
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	f040 8154 	bne.w	8002dee <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f003 0303 	and.w	r3, r3, #3
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d005      	beq.n	8002b5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d130      	bne.n	8002bc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	2203      	movs	r2, #3
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	43db      	mvns	r3, r3
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	4013      	ands	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	68da      	ldr	r2, [r3, #12]
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b94:	2201      	movs	r2, #1
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	091b      	lsrs	r3, r3, #4
 8002baa:	f003 0201 	and.w	r2, r3, #1
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f003 0303 	and.w	r3, r3, #3
 8002bc8:	2b03      	cmp	r3, #3
 8002bca:	d017      	beq.n	8002bfc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	2203      	movs	r2, #3
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	4013      	ands	r3, r2
 8002be2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f003 0303 	and.w	r3, r3, #3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d123      	bne.n	8002c50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	08da      	lsrs	r2, r3, #3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	3208      	adds	r2, #8
 8002c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	f003 0307 	and.w	r3, r3, #7
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	220f      	movs	r2, #15
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	43db      	mvns	r3, r3
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	691a      	ldr	r2, [r3, #16]
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	08da      	lsrs	r2, r3, #3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	3208      	adds	r2, #8
 8002c4a:	69b9      	ldr	r1, [r7, #24]
 8002c4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	2203      	movs	r2, #3
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	43db      	mvns	r3, r3
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	4013      	ands	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f003 0203 	and.w	r2, r3, #3
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f000 80ae 	beq.w	8002dee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c92:	2300      	movs	r3, #0
 8002c94:	60fb      	str	r3, [r7, #12]
 8002c96:	4b5d      	ldr	r3, [pc, #372]	; (8002e0c <HAL_GPIO_Init+0x300>)
 8002c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9a:	4a5c      	ldr	r2, [pc, #368]	; (8002e0c <HAL_GPIO_Init+0x300>)
 8002c9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ca0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ca2:	4b5a      	ldr	r3, [pc, #360]	; (8002e0c <HAL_GPIO_Init+0x300>)
 8002ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cae:	4a58      	ldr	r2, [pc, #352]	; (8002e10 <HAL_GPIO_Init+0x304>)
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	089b      	lsrs	r3, r3, #2
 8002cb4:	3302      	adds	r3, #2
 8002cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	f003 0303 	and.w	r3, r3, #3
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	220f      	movs	r2, #15
 8002cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cca:	43db      	mvns	r3, r3
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a4f      	ldr	r2, [pc, #316]	; (8002e14 <HAL_GPIO_Init+0x308>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d025      	beq.n	8002d26 <HAL_GPIO_Init+0x21a>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a4e      	ldr	r2, [pc, #312]	; (8002e18 <HAL_GPIO_Init+0x30c>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d01f      	beq.n	8002d22 <HAL_GPIO_Init+0x216>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a4d      	ldr	r2, [pc, #308]	; (8002e1c <HAL_GPIO_Init+0x310>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d019      	beq.n	8002d1e <HAL_GPIO_Init+0x212>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a4c      	ldr	r2, [pc, #304]	; (8002e20 <HAL_GPIO_Init+0x314>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d013      	beq.n	8002d1a <HAL_GPIO_Init+0x20e>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a4b      	ldr	r2, [pc, #300]	; (8002e24 <HAL_GPIO_Init+0x318>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d00d      	beq.n	8002d16 <HAL_GPIO_Init+0x20a>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a4a      	ldr	r2, [pc, #296]	; (8002e28 <HAL_GPIO_Init+0x31c>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d007      	beq.n	8002d12 <HAL_GPIO_Init+0x206>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a49      	ldr	r2, [pc, #292]	; (8002e2c <HAL_GPIO_Init+0x320>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d101      	bne.n	8002d0e <HAL_GPIO_Init+0x202>
 8002d0a:	2306      	movs	r3, #6
 8002d0c:	e00c      	b.n	8002d28 <HAL_GPIO_Init+0x21c>
 8002d0e:	2307      	movs	r3, #7
 8002d10:	e00a      	b.n	8002d28 <HAL_GPIO_Init+0x21c>
 8002d12:	2305      	movs	r3, #5
 8002d14:	e008      	b.n	8002d28 <HAL_GPIO_Init+0x21c>
 8002d16:	2304      	movs	r3, #4
 8002d18:	e006      	b.n	8002d28 <HAL_GPIO_Init+0x21c>
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e004      	b.n	8002d28 <HAL_GPIO_Init+0x21c>
 8002d1e:	2302      	movs	r3, #2
 8002d20:	e002      	b.n	8002d28 <HAL_GPIO_Init+0x21c>
 8002d22:	2301      	movs	r3, #1
 8002d24:	e000      	b.n	8002d28 <HAL_GPIO_Init+0x21c>
 8002d26:	2300      	movs	r3, #0
 8002d28:	69fa      	ldr	r2, [r7, #28]
 8002d2a:	f002 0203 	and.w	r2, r2, #3
 8002d2e:	0092      	lsls	r2, r2, #2
 8002d30:	4093      	lsls	r3, r2
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d38:	4935      	ldr	r1, [pc, #212]	; (8002e10 <HAL_GPIO_Init+0x304>)
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	089b      	lsrs	r3, r3, #2
 8002d3e:	3302      	adds	r3, #2
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d46:	4b3a      	ldr	r3, [pc, #232]	; (8002e30 <HAL_GPIO_Init+0x324>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	43db      	mvns	r3, r3
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	4013      	ands	r3, r2
 8002d54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d003      	beq.n	8002d6a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d6a:	4a31      	ldr	r2, [pc, #196]	; (8002e30 <HAL_GPIO_Init+0x324>)
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d70:	4b2f      	ldr	r3, [pc, #188]	; (8002e30 <HAL_GPIO_Init+0x324>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d003      	beq.n	8002d94 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d94:	4a26      	ldr	r2, [pc, #152]	; (8002e30 <HAL_GPIO_Init+0x324>)
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d9a:	4b25      	ldr	r3, [pc, #148]	; (8002e30 <HAL_GPIO_Init+0x324>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	43db      	mvns	r3, r3
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	4013      	ands	r3, r2
 8002da8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d003      	beq.n	8002dbe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dbe:	4a1c      	ldr	r2, [pc, #112]	; (8002e30 <HAL_GPIO_Init+0x324>)
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dc4:	4b1a      	ldr	r3, [pc, #104]	; (8002e30 <HAL_GPIO_Init+0x324>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d003      	beq.n	8002de8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002de8:	4a11      	ldr	r2, [pc, #68]	; (8002e30 <HAL_GPIO_Init+0x324>)
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	3301      	adds	r3, #1
 8002df2:	61fb      	str	r3, [r7, #28]
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	2b0f      	cmp	r3, #15
 8002df8:	f67f ae96 	bls.w	8002b28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dfc:	bf00      	nop
 8002dfe:	bf00      	nop
 8002e00:	3724      	adds	r7, #36	; 0x24
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	40023800 	.word	0x40023800
 8002e10:	40013800 	.word	0x40013800
 8002e14:	40020000 	.word	0x40020000
 8002e18:	40020400 	.word	0x40020400
 8002e1c:	40020800 	.word	0x40020800
 8002e20:	40020c00 	.word	0x40020c00
 8002e24:	40021000 	.word	0x40021000
 8002e28:	40021400 	.word	0x40021400
 8002e2c:	40021800 	.word	0x40021800
 8002e30:	40013c00 	.word	0x40013c00

08002e34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	807b      	strh	r3, [r7, #2]
 8002e40:	4613      	mov	r3, r2
 8002e42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e44:	787b      	ldrb	r3, [r7, #1]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d003      	beq.n	8002e52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e4a:	887a      	ldrh	r2, [r7, #2]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e50:	e003      	b.n	8002e5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e52:	887b      	ldrh	r3, [r7, #2]
 8002e54:	041a      	lsls	r2, r3, #16
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	619a      	str	r2, [r3, #24]
}
 8002e5a:	bf00      	nop
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
	...

08002e68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	4603      	mov	r3, r0
 8002e70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002e72:	4b08      	ldr	r3, [pc, #32]	; (8002e94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e74:	695a      	ldr	r2, [r3, #20]
 8002e76:	88fb      	ldrh	r3, [r7, #6]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d006      	beq.n	8002e8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e7e:	4a05      	ldr	r2, [pc, #20]	; (8002e94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e80:	88fb      	ldrh	r3, [r7, #6]
 8002e82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e84:	88fb      	ldrh	r3, [r7, #6]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7fe f974 	bl	8001174 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e8c:	bf00      	nop
 8002e8e:	3708      	adds	r7, #8
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	40013c00 	.word	0x40013c00

08002e98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d101      	bne.n	8002eac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e0cc      	b.n	8003046 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002eac:	4b68      	ldr	r3, [pc, #416]	; (8003050 <HAL_RCC_ClockConfig+0x1b8>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 030f 	and.w	r3, r3, #15
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d90c      	bls.n	8002ed4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eba:	4b65      	ldr	r3, [pc, #404]	; (8003050 <HAL_RCC_ClockConfig+0x1b8>)
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	b2d2      	uxtb	r2, r2
 8002ec0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ec2:	4b63      	ldr	r3, [pc, #396]	; (8003050 <HAL_RCC_ClockConfig+0x1b8>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 030f 	and.w	r3, r3, #15
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d001      	beq.n	8002ed4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e0b8      	b.n	8003046 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d020      	beq.n	8002f22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0304 	and.w	r3, r3, #4
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d005      	beq.n	8002ef8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002eec:	4b59      	ldr	r3, [pc, #356]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	4a58      	ldr	r2, [pc, #352]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ef6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0308 	and.w	r3, r3, #8
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d005      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f04:	4b53      	ldr	r3, [pc, #332]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	4a52      	ldr	r2, [pc, #328]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f10:	4b50      	ldr	r3, [pc, #320]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	494d      	ldr	r1, [pc, #308]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d044      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d107      	bne.n	8002f46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f36:	4b47      	ldr	r3, [pc, #284]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d119      	bne.n	8002f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e07f      	b.n	8003046 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d003      	beq.n	8002f56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f52:	2b03      	cmp	r3, #3
 8002f54:	d107      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f56:	4b3f      	ldr	r3, [pc, #252]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d109      	bne.n	8002f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e06f      	b.n	8003046 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f66:	4b3b      	ldr	r3, [pc, #236]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d101      	bne.n	8002f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e067      	b.n	8003046 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f76:	4b37      	ldr	r3, [pc, #220]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f023 0203 	bic.w	r2, r3, #3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	4934      	ldr	r1, [pc, #208]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f88:	f7fe fd1a 	bl	80019c0 <HAL_GetTick>
 8002f8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f8e:	e00a      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f90:	f7fe fd16 	bl	80019c0 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e04f      	b.n	8003046 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fa6:	4b2b      	ldr	r3, [pc, #172]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f003 020c 	and.w	r2, r3, #12
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d1eb      	bne.n	8002f90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fb8:	4b25      	ldr	r3, [pc, #148]	; (8003050 <HAL_RCC_ClockConfig+0x1b8>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 030f 	and.w	r3, r3, #15
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d20c      	bcs.n	8002fe0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fc6:	4b22      	ldr	r3, [pc, #136]	; (8003050 <HAL_RCC_ClockConfig+0x1b8>)
 8002fc8:	683a      	ldr	r2, [r7, #0]
 8002fca:	b2d2      	uxtb	r2, r2
 8002fcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fce:	4b20      	ldr	r3, [pc, #128]	; (8003050 <HAL_RCC_ClockConfig+0x1b8>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 030f 	and.w	r3, r3, #15
 8002fd6:	683a      	ldr	r2, [r7, #0]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d001      	beq.n	8002fe0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e032      	b.n	8003046 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0304 	and.w	r3, r3, #4
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d008      	beq.n	8002ffe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fec:	4b19      	ldr	r3, [pc, #100]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	4916      	ldr	r1, [pc, #88]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0308 	and.w	r3, r3, #8
 8003006:	2b00      	cmp	r3, #0
 8003008:	d009      	beq.n	800301e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800300a:	4b12      	ldr	r3, [pc, #72]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	490e      	ldr	r1, [pc, #56]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 800301a:	4313      	orrs	r3, r2
 800301c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800301e:	f000 f855 	bl	80030cc <HAL_RCC_GetSysClockFreq>
 8003022:	4602      	mov	r2, r0
 8003024:	4b0b      	ldr	r3, [pc, #44]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	091b      	lsrs	r3, r3, #4
 800302a:	f003 030f 	and.w	r3, r3, #15
 800302e:	490a      	ldr	r1, [pc, #40]	; (8003058 <HAL_RCC_ClockConfig+0x1c0>)
 8003030:	5ccb      	ldrb	r3, [r1, r3]
 8003032:	fa22 f303 	lsr.w	r3, r2, r3
 8003036:	4a09      	ldr	r2, [pc, #36]	; (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8003038:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800303a:	4b09      	ldr	r3, [pc, #36]	; (8003060 <HAL_RCC_ClockConfig+0x1c8>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4618      	mov	r0, r3
 8003040:	f7fe fc7a 	bl	8001938 <HAL_InitTick>

  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3710      	adds	r7, #16
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	40023c00 	.word	0x40023c00
 8003054:	40023800 	.word	0x40023800
 8003058:	08006460 	.word	0x08006460
 800305c:	20000004 	.word	0x20000004
 8003060:	20000008 	.word	0x20000008

08003064 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003068:	4b03      	ldr	r3, [pc, #12]	; (8003078 <HAL_RCC_GetHCLKFreq+0x14>)
 800306a:	681b      	ldr	r3, [r3, #0]
}
 800306c:	4618      	mov	r0, r3
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	20000004 	.word	0x20000004

0800307c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003080:	f7ff fff0 	bl	8003064 <HAL_RCC_GetHCLKFreq>
 8003084:	4602      	mov	r2, r0
 8003086:	4b05      	ldr	r3, [pc, #20]	; (800309c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	0a9b      	lsrs	r3, r3, #10
 800308c:	f003 0307 	and.w	r3, r3, #7
 8003090:	4903      	ldr	r1, [pc, #12]	; (80030a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003092:	5ccb      	ldrb	r3, [r1, r3]
 8003094:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003098:	4618      	mov	r0, r3
 800309a:	bd80      	pop	{r7, pc}
 800309c:	40023800 	.word	0x40023800
 80030a0:	08006470 	.word	0x08006470

080030a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80030a8:	f7ff ffdc 	bl	8003064 <HAL_RCC_GetHCLKFreq>
 80030ac:	4602      	mov	r2, r0
 80030ae:	4b05      	ldr	r3, [pc, #20]	; (80030c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	0b5b      	lsrs	r3, r3, #13
 80030b4:	f003 0307 	and.w	r3, r3, #7
 80030b8:	4903      	ldr	r1, [pc, #12]	; (80030c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030ba:	5ccb      	ldrb	r3, [r1, r3]
 80030bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	40023800 	.word	0x40023800
 80030c8:	08006470 	.word	0x08006470

080030cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030d0:	b0a6      	sub	sp, #152	; 0x98
 80030d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80030d4:	2300      	movs	r3, #0
 80030d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 80030da:	2300      	movs	r3, #0
 80030dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 80030e0:	2300      	movs	r3, #0
 80030e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 80030e6:	2300      	movs	r3, #0
 80030e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 80030ec:	2300      	movs	r3, #0
 80030ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030f2:	4bc8      	ldr	r3, [pc, #800]	; (8003414 <HAL_RCC_GetSysClockFreq+0x348>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f003 030c 	and.w	r3, r3, #12
 80030fa:	2b0c      	cmp	r3, #12
 80030fc:	f200 817e 	bhi.w	80033fc <HAL_RCC_GetSysClockFreq+0x330>
 8003100:	a201      	add	r2, pc, #4	; (adr r2, 8003108 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003106:	bf00      	nop
 8003108:	0800313d 	.word	0x0800313d
 800310c:	080033fd 	.word	0x080033fd
 8003110:	080033fd 	.word	0x080033fd
 8003114:	080033fd 	.word	0x080033fd
 8003118:	08003145 	.word	0x08003145
 800311c:	080033fd 	.word	0x080033fd
 8003120:	080033fd 	.word	0x080033fd
 8003124:	080033fd 	.word	0x080033fd
 8003128:	0800314d 	.word	0x0800314d
 800312c:	080033fd 	.word	0x080033fd
 8003130:	080033fd 	.word	0x080033fd
 8003134:	080033fd 	.word	0x080033fd
 8003138:	080032b7 	.word	0x080032b7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800313c:	4bb6      	ldr	r3, [pc, #728]	; (8003418 <HAL_RCC_GetSysClockFreq+0x34c>)
 800313e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8003142:	e15f      	b.n	8003404 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003144:	4bb5      	ldr	r3, [pc, #724]	; (800341c <HAL_RCC_GetSysClockFreq+0x350>)
 8003146:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800314a:	e15b      	b.n	8003404 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800314c:	4bb1      	ldr	r3, [pc, #708]	; (8003414 <HAL_RCC_GetSysClockFreq+0x348>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003154:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003158:	4bae      	ldr	r3, [pc, #696]	; (8003414 <HAL_RCC_GetSysClockFreq+0x348>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d031      	beq.n	80031c8 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003164:	4bab      	ldr	r3, [pc, #684]	; (8003414 <HAL_RCC_GetSysClockFreq+0x348>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	099b      	lsrs	r3, r3, #6
 800316a:	2200      	movs	r2, #0
 800316c:	66bb      	str	r3, [r7, #104]	; 0x68
 800316e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003170:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003176:	663b      	str	r3, [r7, #96]	; 0x60
 8003178:	2300      	movs	r3, #0
 800317a:	667b      	str	r3, [r7, #100]	; 0x64
 800317c:	4ba7      	ldr	r3, [pc, #668]	; (800341c <HAL_RCC_GetSysClockFreq+0x350>)
 800317e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003182:	462a      	mov	r2, r5
 8003184:	fb03 f202 	mul.w	r2, r3, r2
 8003188:	2300      	movs	r3, #0
 800318a:	4621      	mov	r1, r4
 800318c:	fb01 f303 	mul.w	r3, r1, r3
 8003190:	4413      	add	r3, r2
 8003192:	4aa2      	ldr	r2, [pc, #648]	; (800341c <HAL_RCC_GetSysClockFreq+0x350>)
 8003194:	4621      	mov	r1, r4
 8003196:	fba1 1202 	umull	r1, r2, r1, r2
 800319a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800319c:	460a      	mov	r2, r1
 800319e:	67ba      	str	r2, [r7, #120]	; 0x78
 80031a0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80031a2:	4413      	add	r3, r2
 80031a4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80031a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031aa:	2200      	movs	r2, #0
 80031ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80031ae:	65fa      	str	r2, [r7, #92]	; 0x5c
 80031b0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80031b4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80031b8:	f7fd f87a 	bl	80002b0 <__aeabi_uldivmod>
 80031bc:	4602      	mov	r2, r0
 80031be:	460b      	mov	r3, r1
 80031c0:	4613      	mov	r3, r2
 80031c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80031c6:	e064      	b.n	8003292 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031c8:	4b92      	ldr	r3, [pc, #584]	; (8003414 <HAL_RCC_GetSysClockFreq+0x348>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	099b      	lsrs	r3, r3, #6
 80031ce:	2200      	movs	r2, #0
 80031d0:	653b      	str	r3, [r7, #80]	; 0x50
 80031d2:	657a      	str	r2, [r7, #84]	; 0x54
 80031d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031da:	64bb      	str	r3, [r7, #72]	; 0x48
 80031dc:	2300      	movs	r3, #0
 80031de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031e0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80031e4:	4622      	mov	r2, r4
 80031e6:	462b      	mov	r3, r5
 80031e8:	f04f 0000 	mov.w	r0, #0
 80031ec:	f04f 0100 	mov.w	r1, #0
 80031f0:	0159      	lsls	r1, r3, #5
 80031f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031f6:	0150      	lsls	r0, r2, #5
 80031f8:	4602      	mov	r2, r0
 80031fa:	460b      	mov	r3, r1
 80031fc:	4621      	mov	r1, r4
 80031fe:	1a51      	subs	r1, r2, r1
 8003200:	6139      	str	r1, [r7, #16]
 8003202:	4629      	mov	r1, r5
 8003204:	eb63 0301 	sbc.w	r3, r3, r1
 8003208:	617b      	str	r3, [r7, #20]
 800320a:	f04f 0200 	mov.w	r2, #0
 800320e:	f04f 0300 	mov.w	r3, #0
 8003212:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003216:	4659      	mov	r1, fp
 8003218:	018b      	lsls	r3, r1, #6
 800321a:	4651      	mov	r1, sl
 800321c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003220:	4651      	mov	r1, sl
 8003222:	018a      	lsls	r2, r1, #6
 8003224:	4651      	mov	r1, sl
 8003226:	ebb2 0801 	subs.w	r8, r2, r1
 800322a:	4659      	mov	r1, fp
 800322c:	eb63 0901 	sbc.w	r9, r3, r1
 8003230:	f04f 0200 	mov.w	r2, #0
 8003234:	f04f 0300 	mov.w	r3, #0
 8003238:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800323c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003240:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003244:	4690      	mov	r8, r2
 8003246:	4699      	mov	r9, r3
 8003248:	4623      	mov	r3, r4
 800324a:	eb18 0303 	adds.w	r3, r8, r3
 800324e:	60bb      	str	r3, [r7, #8]
 8003250:	462b      	mov	r3, r5
 8003252:	eb49 0303 	adc.w	r3, r9, r3
 8003256:	60fb      	str	r3, [r7, #12]
 8003258:	f04f 0200 	mov.w	r2, #0
 800325c:	f04f 0300 	mov.w	r3, #0
 8003260:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003264:	4629      	mov	r1, r5
 8003266:	028b      	lsls	r3, r1, #10
 8003268:	4621      	mov	r1, r4
 800326a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800326e:	4621      	mov	r1, r4
 8003270:	028a      	lsls	r2, r1, #10
 8003272:	4610      	mov	r0, r2
 8003274:	4619      	mov	r1, r3
 8003276:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800327a:	2200      	movs	r2, #0
 800327c:	643b      	str	r3, [r7, #64]	; 0x40
 800327e:	647a      	str	r2, [r7, #68]	; 0x44
 8003280:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003284:	f7fd f814 	bl	80002b0 <__aeabi_uldivmod>
 8003288:	4602      	mov	r2, r0
 800328a:	460b      	mov	r3, r1
 800328c:	4613      	mov	r3, r2
 800328e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003292:	4b60      	ldr	r3, [pc, #384]	; (8003414 <HAL_RCC_GetSysClockFreq+0x348>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	0c1b      	lsrs	r3, r3, #16
 8003298:	f003 0303 	and.w	r3, r3, #3
 800329c:	3301      	adds	r3, #1
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 80032a4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80032a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80032ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80032b4:	e0a6      	b.n	8003404 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032b6:	4b57      	ldr	r3, [pc, #348]	; (8003414 <HAL_RCC_GetSysClockFreq+0x348>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032c2:	4b54      	ldr	r3, [pc, #336]	; (8003414 <HAL_RCC_GetSysClockFreq+0x348>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d02a      	beq.n	8003324 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032ce:	4b51      	ldr	r3, [pc, #324]	; (8003414 <HAL_RCC_GetSysClockFreq+0x348>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	099b      	lsrs	r3, r3, #6
 80032d4:	2200      	movs	r2, #0
 80032d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80032d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80032da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032dc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80032e0:	2100      	movs	r1, #0
 80032e2:	4b4e      	ldr	r3, [pc, #312]	; (800341c <HAL_RCC_GetSysClockFreq+0x350>)
 80032e4:	fb03 f201 	mul.w	r2, r3, r1
 80032e8:	2300      	movs	r3, #0
 80032ea:	fb00 f303 	mul.w	r3, r0, r3
 80032ee:	4413      	add	r3, r2
 80032f0:	4a4a      	ldr	r2, [pc, #296]	; (800341c <HAL_RCC_GetSysClockFreq+0x350>)
 80032f2:	fba0 1202 	umull	r1, r2, r0, r2
 80032f6:	677a      	str	r2, [r7, #116]	; 0x74
 80032f8:	460a      	mov	r2, r1
 80032fa:	673a      	str	r2, [r7, #112]	; 0x70
 80032fc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80032fe:	4413      	add	r3, r2
 8003300:	677b      	str	r3, [r7, #116]	; 0x74
 8003302:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003306:	2200      	movs	r2, #0
 8003308:	633b      	str	r3, [r7, #48]	; 0x30
 800330a:	637a      	str	r2, [r7, #52]	; 0x34
 800330c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003310:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003314:	f7fc ffcc 	bl	80002b0 <__aeabi_uldivmod>
 8003318:	4602      	mov	r2, r0
 800331a:	460b      	mov	r3, r1
 800331c:	4613      	mov	r3, r2
 800331e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003322:	e05b      	b.n	80033dc <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003324:	4b3b      	ldr	r3, [pc, #236]	; (8003414 <HAL_RCC_GetSysClockFreq+0x348>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	099b      	lsrs	r3, r3, #6
 800332a:	2200      	movs	r2, #0
 800332c:	62bb      	str	r3, [r7, #40]	; 0x28
 800332e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003336:	623b      	str	r3, [r7, #32]
 8003338:	2300      	movs	r3, #0
 800333a:	627b      	str	r3, [r7, #36]	; 0x24
 800333c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003340:	4642      	mov	r2, r8
 8003342:	464b      	mov	r3, r9
 8003344:	f04f 0000 	mov.w	r0, #0
 8003348:	f04f 0100 	mov.w	r1, #0
 800334c:	0159      	lsls	r1, r3, #5
 800334e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003352:	0150      	lsls	r0, r2, #5
 8003354:	4602      	mov	r2, r0
 8003356:	460b      	mov	r3, r1
 8003358:	4641      	mov	r1, r8
 800335a:	ebb2 0a01 	subs.w	sl, r2, r1
 800335e:	4649      	mov	r1, r9
 8003360:	eb63 0b01 	sbc.w	fp, r3, r1
 8003364:	f04f 0200 	mov.w	r2, #0
 8003368:	f04f 0300 	mov.w	r3, #0
 800336c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003370:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003374:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003378:	ebb2 040a 	subs.w	r4, r2, sl
 800337c:	eb63 050b 	sbc.w	r5, r3, fp
 8003380:	f04f 0200 	mov.w	r2, #0
 8003384:	f04f 0300 	mov.w	r3, #0
 8003388:	00eb      	lsls	r3, r5, #3
 800338a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800338e:	00e2      	lsls	r2, r4, #3
 8003390:	4614      	mov	r4, r2
 8003392:	461d      	mov	r5, r3
 8003394:	4643      	mov	r3, r8
 8003396:	18e3      	adds	r3, r4, r3
 8003398:	603b      	str	r3, [r7, #0]
 800339a:	464b      	mov	r3, r9
 800339c:	eb45 0303 	adc.w	r3, r5, r3
 80033a0:	607b      	str	r3, [r7, #4]
 80033a2:	f04f 0200 	mov.w	r2, #0
 80033a6:	f04f 0300 	mov.w	r3, #0
 80033aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033ae:	4629      	mov	r1, r5
 80033b0:	028b      	lsls	r3, r1, #10
 80033b2:	4621      	mov	r1, r4
 80033b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033b8:	4621      	mov	r1, r4
 80033ba:	028a      	lsls	r2, r1, #10
 80033bc:	4610      	mov	r0, r2
 80033be:	4619      	mov	r1, r3
 80033c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033c4:	2200      	movs	r2, #0
 80033c6:	61bb      	str	r3, [r7, #24]
 80033c8:	61fa      	str	r2, [r7, #28]
 80033ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033ce:	f7fc ff6f 	bl	80002b0 <__aeabi_uldivmod>
 80033d2:	4602      	mov	r2, r0
 80033d4:	460b      	mov	r3, r1
 80033d6:	4613      	mov	r3, r2
 80033d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80033dc:	4b0d      	ldr	r3, [pc, #52]	; (8003414 <HAL_RCC_GetSysClockFreq+0x348>)
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	0f1b      	lsrs	r3, r3, #28
 80033e2:	f003 0307 	and.w	r3, r3, #7
 80033e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 80033ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80033ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80033fa:	e003      	b.n	8003404 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033fc:	4b06      	ldr	r3, [pc, #24]	; (8003418 <HAL_RCC_GetSysClockFreq+0x34c>)
 80033fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003402:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003404:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8003408:	4618      	mov	r0, r3
 800340a:	3798      	adds	r7, #152	; 0x98
 800340c:	46bd      	mov	sp, r7
 800340e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003412:	bf00      	nop
 8003414:	40023800 	.word	0x40023800
 8003418:	00f42400 	.word	0x00f42400
 800341c:	017d7840 	.word	0x017d7840

08003420 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b086      	sub	sp, #24
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e28d      	b.n	800394e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b00      	cmp	r3, #0
 800343c:	f000 8083 	beq.w	8003546 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003440:	4b94      	ldr	r3, [pc, #592]	; (8003694 <HAL_RCC_OscConfig+0x274>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f003 030c 	and.w	r3, r3, #12
 8003448:	2b04      	cmp	r3, #4
 800344a:	d019      	beq.n	8003480 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800344c:	4b91      	ldr	r3, [pc, #580]	; (8003694 <HAL_RCC_OscConfig+0x274>)
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003454:	2b08      	cmp	r3, #8
 8003456:	d106      	bne.n	8003466 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003458:	4b8e      	ldr	r3, [pc, #568]	; (8003694 <HAL_RCC_OscConfig+0x274>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003460:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003464:	d00c      	beq.n	8003480 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003466:	4b8b      	ldr	r3, [pc, #556]	; (8003694 <HAL_RCC_OscConfig+0x274>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800346e:	2b0c      	cmp	r3, #12
 8003470:	d112      	bne.n	8003498 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003472:	4b88      	ldr	r3, [pc, #544]	; (8003694 <HAL_RCC_OscConfig+0x274>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800347a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800347e:	d10b      	bne.n	8003498 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003480:	4b84      	ldr	r3, [pc, #528]	; (8003694 <HAL_RCC_OscConfig+0x274>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d05b      	beq.n	8003544 <HAL_RCC_OscConfig+0x124>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d157      	bne.n	8003544 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e25a      	b.n	800394e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034a0:	d106      	bne.n	80034b0 <HAL_RCC_OscConfig+0x90>
 80034a2:	4b7c      	ldr	r3, [pc, #496]	; (8003694 <HAL_RCC_OscConfig+0x274>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a7b      	ldr	r2, [pc, #492]	; (8003694 <HAL_RCC_OscConfig+0x274>)
 80034a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ac:	6013      	str	r3, [r2, #0]
 80034ae:	e01d      	b.n	80034ec <HAL_RCC_OscConfig+0xcc>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034b8:	d10c      	bne.n	80034d4 <HAL_RCC_OscConfig+0xb4>
 80034ba:	4b76      	ldr	r3, [pc, #472]	; (8003694 <HAL_RCC_OscConfig+0x274>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a75      	ldr	r2, [pc, #468]	; (8003694 <HAL_RCC_OscConfig+0x274>)
 80034c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034c4:	6013      	str	r3, [r2, #0]
 80034c6:	4b73      	ldr	r3, [pc, #460]	; (8003694 <HAL_RCC_OscConfig+0x274>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a72      	ldr	r2, [pc, #456]	; (8003694 <HAL_RCC_OscConfig+0x274>)
 80034cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034d0:	6013      	str	r3, [r2, #0]
 80034d2:	e00b      	b.n	80034ec <HAL_RCC_OscConfig+0xcc>
 80034d4:	4b6f      	ldr	r3, [pc, #444]	; (8003694 <HAL_RCC_OscConfig+0x274>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a6e      	ldr	r2, [pc, #440]	; (8003694 <HAL_RCC_OscConfig+0x274>)
 80034da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034de:	6013      	str	r3, [r2, #0]
 80034e0:	4b6c      	ldr	r3, [pc, #432]	; (8003694 <HAL_RCC_OscConfig+0x274>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a6b      	ldr	r2, [pc, #428]	; (8003694 <HAL_RCC_OscConfig+0x274>)
 80034e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d013      	beq.n	800351c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f4:	f7fe fa64 	bl	80019c0 <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034fc:	f7fe fa60 	bl	80019c0 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b64      	cmp	r3, #100	; 0x64
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e21f      	b.n	800394e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800350e:	4b61      	ldr	r3, [pc, #388]	; (8003694 <HAL_RCC_OscConfig+0x274>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d0f0      	beq.n	80034fc <HAL_RCC_OscConfig+0xdc>
 800351a:	e014      	b.n	8003546 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800351c:	f7fe fa50 	bl	80019c0 <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003522:	e008      	b.n	8003536 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003524:	f7fe fa4c 	bl	80019c0 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b64      	cmp	r3, #100	; 0x64
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e20b      	b.n	800394e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003536:	4b57      	ldr	r3, [pc, #348]	; (8003694 <HAL_RCC_OscConfig+0x274>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1f0      	bne.n	8003524 <HAL_RCC_OscConfig+0x104>
 8003542:	e000      	b.n	8003546 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003544:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d06f      	beq.n	8003632 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003552:	4b50      	ldr	r3, [pc, #320]	; (8003694 <HAL_RCC_OscConfig+0x274>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f003 030c 	and.w	r3, r3, #12
 800355a:	2b00      	cmp	r3, #0
 800355c:	d017      	beq.n	800358e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800355e:	4b4d      	ldr	r3, [pc, #308]	; (8003694 <HAL_RCC_OscConfig+0x274>)
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003566:	2b08      	cmp	r3, #8
 8003568:	d105      	bne.n	8003576 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800356a:	4b4a      	ldr	r3, [pc, #296]	; (8003694 <HAL_RCC_OscConfig+0x274>)
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00b      	beq.n	800358e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003576:	4b47      	ldr	r3, [pc, #284]	; (8003694 <HAL_RCC_OscConfig+0x274>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800357e:	2b0c      	cmp	r3, #12
 8003580:	d11c      	bne.n	80035bc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003582:	4b44      	ldr	r3, [pc, #272]	; (8003694 <HAL_RCC_OscConfig+0x274>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d116      	bne.n	80035bc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800358e:	4b41      	ldr	r3, [pc, #260]	; (8003694 <HAL_RCC_OscConfig+0x274>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d005      	beq.n	80035a6 <HAL_RCC_OscConfig+0x186>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d001      	beq.n	80035a6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e1d3      	b.n	800394e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035a6:	4b3b      	ldr	r3, [pc, #236]	; (8003694 <HAL_RCC_OscConfig+0x274>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	4937      	ldr	r1, [pc, #220]	; (8003694 <HAL_RCC_OscConfig+0x274>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ba:	e03a      	b.n	8003632 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d020      	beq.n	8003606 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035c4:	4b34      	ldr	r3, [pc, #208]	; (8003698 <HAL_RCC_OscConfig+0x278>)
 80035c6:	2201      	movs	r2, #1
 80035c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ca:	f7fe f9f9 	bl	80019c0 <HAL_GetTick>
 80035ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035d0:	e008      	b.n	80035e4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035d2:	f7fe f9f5 	bl	80019c0 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d901      	bls.n	80035e4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e1b4      	b.n	800394e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035e4:	4b2b      	ldr	r3, [pc, #172]	; (8003694 <HAL_RCC_OscConfig+0x274>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d0f0      	beq.n	80035d2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035f0:	4b28      	ldr	r3, [pc, #160]	; (8003694 <HAL_RCC_OscConfig+0x274>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	00db      	lsls	r3, r3, #3
 80035fe:	4925      	ldr	r1, [pc, #148]	; (8003694 <HAL_RCC_OscConfig+0x274>)
 8003600:	4313      	orrs	r3, r2
 8003602:	600b      	str	r3, [r1, #0]
 8003604:	e015      	b.n	8003632 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003606:	4b24      	ldr	r3, [pc, #144]	; (8003698 <HAL_RCC_OscConfig+0x278>)
 8003608:	2200      	movs	r2, #0
 800360a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800360c:	f7fe f9d8 	bl	80019c0 <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003612:	e008      	b.n	8003626 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003614:	f7fe f9d4 	bl	80019c0 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b02      	cmp	r3, #2
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e193      	b.n	800394e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003626:	4b1b      	ldr	r3, [pc, #108]	; (8003694 <HAL_RCC_OscConfig+0x274>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1f0      	bne.n	8003614 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0308 	and.w	r3, r3, #8
 800363a:	2b00      	cmp	r3, #0
 800363c:	d036      	beq.n	80036ac <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d016      	beq.n	8003674 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003646:	4b15      	ldr	r3, [pc, #84]	; (800369c <HAL_RCC_OscConfig+0x27c>)
 8003648:	2201      	movs	r2, #1
 800364a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800364c:	f7fe f9b8 	bl	80019c0 <HAL_GetTick>
 8003650:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003652:	e008      	b.n	8003666 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003654:	f7fe f9b4 	bl	80019c0 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	2b02      	cmp	r3, #2
 8003660:	d901      	bls.n	8003666 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e173      	b.n	800394e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003666:	4b0b      	ldr	r3, [pc, #44]	; (8003694 <HAL_RCC_OscConfig+0x274>)
 8003668:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d0f0      	beq.n	8003654 <HAL_RCC_OscConfig+0x234>
 8003672:	e01b      	b.n	80036ac <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003674:	4b09      	ldr	r3, [pc, #36]	; (800369c <HAL_RCC_OscConfig+0x27c>)
 8003676:	2200      	movs	r2, #0
 8003678:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800367a:	f7fe f9a1 	bl	80019c0 <HAL_GetTick>
 800367e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003680:	e00e      	b.n	80036a0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003682:	f7fe f99d 	bl	80019c0 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	2b02      	cmp	r3, #2
 800368e:	d907      	bls.n	80036a0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e15c      	b.n	800394e <HAL_RCC_OscConfig+0x52e>
 8003694:	40023800 	.word	0x40023800
 8003698:	42470000 	.word	0x42470000
 800369c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036a0:	4b8a      	ldr	r3, [pc, #552]	; (80038cc <HAL_RCC_OscConfig+0x4ac>)
 80036a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036a4:	f003 0302 	and.w	r3, r3, #2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1ea      	bne.n	8003682 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0304 	and.w	r3, r3, #4
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f000 8097 	beq.w	80037e8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036ba:	2300      	movs	r3, #0
 80036bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036be:	4b83      	ldr	r3, [pc, #524]	; (80038cc <HAL_RCC_OscConfig+0x4ac>)
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10f      	bne.n	80036ea <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036ca:	2300      	movs	r3, #0
 80036cc:	60bb      	str	r3, [r7, #8]
 80036ce:	4b7f      	ldr	r3, [pc, #508]	; (80038cc <HAL_RCC_OscConfig+0x4ac>)
 80036d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d2:	4a7e      	ldr	r2, [pc, #504]	; (80038cc <HAL_RCC_OscConfig+0x4ac>)
 80036d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036d8:	6413      	str	r3, [r2, #64]	; 0x40
 80036da:	4b7c      	ldr	r3, [pc, #496]	; (80038cc <HAL_RCC_OscConfig+0x4ac>)
 80036dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e2:	60bb      	str	r3, [r7, #8]
 80036e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036e6:	2301      	movs	r3, #1
 80036e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ea:	4b79      	ldr	r3, [pc, #484]	; (80038d0 <HAL_RCC_OscConfig+0x4b0>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d118      	bne.n	8003728 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036f6:	4b76      	ldr	r3, [pc, #472]	; (80038d0 <HAL_RCC_OscConfig+0x4b0>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a75      	ldr	r2, [pc, #468]	; (80038d0 <HAL_RCC_OscConfig+0x4b0>)
 80036fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003700:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003702:	f7fe f95d 	bl	80019c0 <HAL_GetTick>
 8003706:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003708:	e008      	b.n	800371c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800370a:	f7fe f959 	bl	80019c0 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	2b02      	cmp	r3, #2
 8003716:	d901      	bls.n	800371c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e118      	b.n	800394e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800371c:	4b6c      	ldr	r3, [pc, #432]	; (80038d0 <HAL_RCC_OscConfig+0x4b0>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003724:	2b00      	cmp	r3, #0
 8003726:	d0f0      	beq.n	800370a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d106      	bne.n	800373e <HAL_RCC_OscConfig+0x31e>
 8003730:	4b66      	ldr	r3, [pc, #408]	; (80038cc <HAL_RCC_OscConfig+0x4ac>)
 8003732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003734:	4a65      	ldr	r2, [pc, #404]	; (80038cc <HAL_RCC_OscConfig+0x4ac>)
 8003736:	f043 0301 	orr.w	r3, r3, #1
 800373a:	6713      	str	r3, [r2, #112]	; 0x70
 800373c:	e01c      	b.n	8003778 <HAL_RCC_OscConfig+0x358>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	2b05      	cmp	r3, #5
 8003744:	d10c      	bne.n	8003760 <HAL_RCC_OscConfig+0x340>
 8003746:	4b61      	ldr	r3, [pc, #388]	; (80038cc <HAL_RCC_OscConfig+0x4ac>)
 8003748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800374a:	4a60      	ldr	r2, [pc, #384]	; (80038cc <HAL_RCC_OscConfig+0x4ac>)
 800374c:	f043 0304 	orr.w	r3, r3, #4
 8003750:	6713      	str	r3, [r2, #112]	; 0x70
 8003752:	4b5e      	ldr	r3, [pc, #376]	; (80038cc <HAL_RCC_OscConfig+0x4ac>)
 8003754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003756:	4a5d      	ldr	r2, [pc, #372]	; (80038cc <HAL_RCC_OscConfig+0x4ac>)
 8003758:	f043 0301 	orr.w	r3, r3, #1
 800375c:	6713      	str	r3, [r2, #112]	; 0x70
 800375e:	e00b      	b.n	8003778 <HAL_RCC_OscConfig+0x358>
 8003760:	4b5a      	ldr	r3, [pc, #360]	; (80038cc <HAL_RCC_OscConfig+0x4ac>)
 8003762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003764:	4a59      	ldr	r2, [pc, #356]	; (80038cc <HAL_RCC_OscConfig+0x4ac>)
 8003766:	f023 0301 	bic.w	r3, r3, #1
 800376a:	6713      	str	r3, [r2, #112]	; 0x70
 800376c:	4b57      	ldr	r3, [pc, #348]	; (80038cc <HAL_RCC_OscConfig+0x4ac>)
 800376e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003770:	4a56      	ldr	r2, [pc, #344]	; (80038cc <HAL_RCC_OscConfig+0x4ac>)
 8003772:	f023 0304 	bic.w	r3, r3, #4
 8003776:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d015      	beq.n	80037ac <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003780:	f7fe f91e 	bl	80019c0 <HAL_GetTick>
 8003784:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003786:	e00a      	b.n	800379e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003788:	f7fe f91a 	bl	80019c0 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	f241 3288 	movw	r2, #5000	; 0x1388
 8003796:	4293      	cmp	r3, r2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e0d7      	b.n	800394e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800379e:	4b4b      	ldr	r3, [pc, #300]	; (80038cc <HAL_RCC_OscConfig+0x4ac>)
 80037a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d0ee      	beq.n	8003788 <HAL_RCC_OscConfig+0x368>
 80037aa:	e014      	b.n	80037d6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ac:	f7fe f908 	bl	80019c0 <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037b2:	e00a      	b.n	80037ca <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037b4:	f7fe f904 	bl	80019c0 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	f241 3288 	movw	r2, #5000	; 0x1388
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e0c1      	b.n	800394e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037ca:	4b40      	ldr	r3, [pc, #256]	; (80038cc <HAL_RCC_OscConfig+0x4ac>)
 80037cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1ee      	bne.n	80037b4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037d6:	7dfb      	ldrb	r3, [r7, #23]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d105      	bne.n	80037e8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037dc:	4b3b      	ldr	r3, [pc, #236]	; (80038cc <HAL_RCC_OscConfig+0x4ac>)
 80037de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e0:	4a3a      	ldr	r2, [pc, #232]	; (80038cc <HAL_RCC_OscConfig+0x4ac>)
 80037e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f000 80ad 	beq.w	800394c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037f2:	4b36      	ldr	r3, [pc, #216]	; (80038cc <HAL_RCC_OscConfig+0x4ac>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f003 030c 	and.w	r3, r3, #12
 80037fa:	2b08      	cmp	r3, #8
 80037fc:	d060      	beq.n	80038c0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	2b02      	cmp	r3, #2
 8003804:	d145      	bne.n	8003892 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003806:	4b33      	ldr	r3, [pc, #204]	; (80038d4 <HAL_RCC_OscConfig+0x4b4>)
 8003808:	2200      	movs	r2, #0
 800380a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800380c:	f7fe f8d8 	bl	80019c0 <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003814:	f7fe f8d4 	bl	80019c0 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e093      	b.n	800394e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003826:	4b29      	ldr	r3, [pc, #164]	; (80038cc <HAL_RCC_OscConfig+0x4ac>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1f0      	bne.n	8003814 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	69da      	ldr	r2, [r3, #28]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	431a      	orrs	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003840:	019b      	lsls	r3, r3, #6
 8003842:	431a      	orrs	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003848:	085b      	lsrs	r3, r3, #1
 800384a:	3b01      	subs	r3, #1
 800384c:	041b      	lsls	r3, r3, #16
 800384e:	431a      	orrs	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003854:	061b      	lsls	r3, r3, #24
 8003856:	431a      	orrs	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385c:	071b      	lsls	r3, r3, #28
 800385e:	491b      	ldr	r1, [pc, #108]	; (80038cc <HAL_RCC_OscConfig+0x4ac>)
 8003860:	4313      	orrs	r3, r2
 8003862:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003864:	4b1b      	ldr	r3, [pc, #108]	; (80038d4 <HAL_RCC_OscConfig+0x4b4>)
 8003866:	2201      	movs	r2, #1
 8003868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800386a:	f7fe f8a9 	bl	80019c0 <HAL_GetTick>
 800386e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003870:	e008      	b.n	8003884 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003872:	f7fe f8a5 	bl	80019c0 <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b02      	cmp	r3, #2
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e064      	b.n	800394e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003884:	4b11      	ldr	r3, [pc, #68]	; (80038cc <HAL_RCC_OscConfig+0x4ac>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d0f0      	beq.n	8003872 <HAL_RCC_OscConfig+0x452>
 8003890:	e05c      	b.n	800394c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003892:	4b10      	ldr	r3, [pc, #64]	; (80038d4 <HAL_RCC_OscConfig+0x4b4>)
 8003894:	2200      	movs	r2, #0
 8003896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003898:	f7fe f892 	bl	80019c0 <HAL_GetTick>
 800389c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800389e:	e008      	b.n	80038b2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038a0:	f7fe f88e 	bl	80019c0 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e04d      	b.n	800394e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038b2:	4b06      	ldr	r3, [pc, #24]	; (80038cc <HAL_RCC_OscConfig+0x4ac>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1f0      	bne.n	80038a0 <HAL_RCC_OscConfig+0x480>
 80038be:	e045      	b.n	800394c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d107      	bne.n	80038d8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e040      	b.n	800394e <HAL_RCC_OscConfig+0x52e>
 80038cc:	40023800 	.word	0x40023800
 80038d0:	40007000 	.word	0x40007000
 80038d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038d8:	4b1f      	ldr	r3, [pc, #124]	; (8003958 <HAL_RCC_OscConfig+0x538>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d030      	beq.n	8003948 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d129      	bne.n	8003948 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038fe:	429a      	cmp	r2, r3
 8003900:	d122      	bne.n	8003948 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003908:	4013      	ands	r3, r2
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800390e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003910:	4293      	cmp	r3, r2
 8003912:	d119      	bne.n	8003948 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391e:	085b      	lsrs	r3, r3, #1
 8003920:	3b01      	subs	r3, #1
 8003922:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003924:	429a      	cmp	r2, r3
 8003926:	d10f      	bne.n	8003948 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003932:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003934:	429a      	cmp	r2, r3
 8003936:	d107      	bne.n	8003948 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003942:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003944:	429a      	cmp	r2, r3
 8003946:	d001      	beq.n	800394c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e000      	b.n	800394e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3718      	adds	r7, #24
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	40023800 	.word	0x40023800

0800395c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e041      	b.n	80039f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d106      	bne.n	8003988 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7fd fd8e 	bl	80014a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2202      	movs	r2, #2
 800398c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	3304      	adds	r3, #4
 8003998:	4619      	mov	r1, r3
 800399a:	4610      	mov	r0, r2
 800399c:	f000 fcdc 	bl	8004358 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3708      	adds	r7, #8
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
	...

080039fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d001      	beq.n	8003a14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e04e      	b.n	8003ab2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2202      	movs	r2, #2
 8003a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68da      	ldr	r2, [r3, #12]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f042 0201 	orr.w	r2, r2, #1
 8003a2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a23      	ldr	r2, [pc, #140]	; (8003ac0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d022      	beq.n	8003a7c <HAL_TIM_Base_Start_IT+0x80>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a3e:	d01d      	beq.n	8003a7c <HAL_TIM_Base_Start_IT+0x80>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a1f      	ldr	r2, [pc, #124]	; (8003ac4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d018      	beq.n	8003a7c <HAL_TIM_Base_Start_IT+0x80>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a1e      	ldr	r2, [pc, #120]	; (8003ac8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d013      	beq.n	8003a7c <HAL_TIM_Base_Start_IT+0x80>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a1c      	ldr	r2, [pc, #112]	; (8003acc <HAL_TIM_Base_Start_IT+0xd0>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d00e      	beq.n	8003a7c <HAL_TIM_Base_Start_IT+0x80>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a1b      	ldr	r2, [pc, #108]	; (8003ad0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d009      	beq.n	8003a7c <HAL_TIM_Base_Start_IT+0x80>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a19      	ldr	r2, [pc, #100]	; (8003ad4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d004      	beq.n	8003a7c <HAL_TIM_Base_Start_IT+0x80>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a18      	ldr	r2, [pc, #96]	; (8003ad8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d111      	bne.n	8003aa0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f003 0307 	and.w	r3, r3, #7
 8003a86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2b06      	cmp	r3, #6
 8003a8c:	d010      	beq.n	8003ab0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f042 0201 	orr.w	r2, r2, #1
 8003a9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a9e:	e007      	b.n	8003ab0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f042 0201 	orr.w	r2, r2, #1
 8003aae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3714      	adds	r7, #20
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	40010000 	.word	0x40010000
 8003ac4:	40000400 	.word	0x40000400
 8003ac8:	40000800 	.word	0x40000800
 8003acc:	40000c00 	.word	0x40000c00
 8003ad0:	40010400 	.word	0x40010400
 8003ad4:	40014000 	.word	0x40014000
 8003ad8:	40001800 	.word	0x40001800

08003adc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e041      	b.n	8003b72 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d106      	bne.n	8003b08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f7fd fc3e 	bl	8001384 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	3304      	adds	r3, #4
 8003b18:	4619      	mov	r1, r3
 8003b1a:	4610      	mov	r0, r2
 8003b1c:	f000 fc1c 	bl	8004358 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
	...

08003b7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d109      	bne.n	8003ba0 <HAL_TIM_PWM_Start+0x24>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	bf14      	ite	ne
 8003b98:	2301      	movne	r3, #1
 8003b9a:	2300      	moveq	r3, #0
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	e022      	b.n	8003be6 <HAL_TIM_PWM_Start+0x6a>
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	2b04      	cmp	r3, #4
 8003ba4:	d109      	bne.n	8003bba <HAL_TIM_PWM_Start+0x3e>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	bf14      	ite	ne
 8003bb2:	2301      	movne	r3, #1
 8003bb4:	2300      	moveq	r3, #0
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	e015      	b.n	8003be6 <HAL_TIM_PWM_Start+0x6a>
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	2b08      	cmp	r3, #8
 8003bbe:	d109      	bne.n	8003bd4 <HAL_TIM_PWM_Start+0x58>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	bf14      	ite	ne
 8003bcc:	2301      	movne	r3, #1
 8003bce:	2300      	moveq	r3, #0
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	e008      	b.n	8003be6 <HAL_TIM_PWM_Start+0x6a>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	bf14      	ite	ne
 8003be0:	2301      	movne	r3, #1
 8003be2:	2300      	moveq	r3, #0
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e07c      	b.n	8003ce8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d104      	bne.n	8003bfe <HAL_TIM_PWM_Start+0x82>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2202      	movs	r2, #2
 8003bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bfc:	e013      	b.n	8003c26 <HAL_TIM_PWM_Start+0xaa>
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	2b04      	cmp	r3, #4
 8003c02:	d104      	bne.n	8003c0e <HAL_TIM_PWM_Start+0x92>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2202      	movs	r2, #2
 8003c08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c0c:	e00b      	b.n	8003c26 <HAL_TIM_PWM_Start+0xaa>
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	2b08      	cmp	r3, #8
 8003c12:	d104      	bne.n	8003c1e <HAL_TIM_PWM_Start+0xa2>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2202      	movs	r2, #2
 8003c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c1c:	e003      	b.n	8003c26 <HAL_TIM_PWM_Start+0xaa>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2202      	movs	r2, #2
 8003c22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	6839      	ldr	r1, [r7, #0]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 fde2 	bl	80047f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a2d      	ldr	r2, [pc, #180]	; (8003cf0 <HAL_TIM_PWM_Start+0x174>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d004      	beq.n	8003c48 <HAL_TIM_PWM_Start+0xcc>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a2c      	ldr	r2, [pc, #176]	; (8003cf4 <HAL_TIM_PWM_Start+0x178>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d101      	bne.n	8003c4c <HAL_TIM_PWM_Start+0xd0>
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e000      	b.n	8003c4e <HAL_TIM_PWM_Start+0xd2>
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d007      	beq.n	8003c62 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c60:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a22      	ldr	r2, [pc, #136]	; (8003cf0 <HAL_TIM_PWM_Start+0x174>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d022      	beq.n	8003cb2 <HAL_TIM_PWM_Start+0x136>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c74:	d01d      	beq.n	8003cb2 <HAL_TIM_PWM_Start+0x136>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a1f      	ldr	r2, [pc, #124]	; (8003cf8 <HAL_TIM_PWM_Start+0x17c>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d018      	beq.n	8003cb2 <HAL_TIM_PWM_Start+0x136>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a1d      	ldr	r2, [pc, #116]	; (8003cfc <HAL_TIM_PWM_Start+0x180>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d013      	beq.n	8003cb2 <HAL_TIM_PWM_Start+0x136>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a1c      	ldr	r2, [pc, #112]	; (8003d00 <HAL_TIM_PWM_Start+0x184>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d00e      	beq.n	8003cb2 <HAL_TIM_PWM_Start+0x136>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a16      	ldr	r2, [pc, #88]	; (8003cf4 <HAL_TIM_PWM_Start+0x178>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d009      	beq.n	8003cb2 <HAL_TIM_PWM_Start+0x136>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a18      	ldr	r2, [pc, #96]	; (8003d04 <HAL_TIM_PWM_Start+0x188>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d004      	beq.n	8003cb2 <HAL_TIM_PWM_Start+0x136>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a16      	ldr	r2, [pc, #88]	; (8003d08 <HAL_TIM_PWM_Start+0x18c>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d111      	bne.n	8003cd6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f003 0307 	and.w	r3, r3, #7
 8003cbc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2b06      	cmp	r3, #6
 8003cc2:	d010      	beq.n	8003ce6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f042 0201 	orr.w	r2, r2, #1
 8003cd2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cd4:	e007      	b.n	8003ce6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f042 0201 	orr.w	r2, r2, #1
 8003ce4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3710      	adds	r7, #16
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	40010000 	.word	0x40010000
 8003cf4:	40010400 	.word	0x40010400
 8003cf8:	40000400 	.word	0x40000400
 8003cfc:	40000800 	.word	0x40000800
 8003d00:	40000c00 	.word	0x40000c00
 8003d04:	40014000 	.word	0x40014000
 8003d08:	40001800 	.word	0x40001800

08003d0c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b086      	sub	sp, #24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d101      	bne.n	8003d20 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e097      	b.n	8003e50 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d106      	bne.n	8003d3a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f7fd fb47 	bl	80013c8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2202      	movs	r2, #2
 8003d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	6812      	ldr	r2, [r2, #0]
 8003d4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d50:	f023 0307 	bic.w	r3, r3, #7
 8003d54:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	3304      	adds	r3, #4
 8003d5e:	4619      	mov	r1, r3
 8003d60:	4610      	mov	r0, r2
 8003d62:	f000 faf9 	bl	8004358 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	6a1b      	ldr	r3, [r3, #32]
 8003d7c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d8e:	f023 0303 	bic.w	r3, r3, #3
 8003d92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	689a      	ldr	r2, [r3, #8]
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	021b      	lsls	r3, r3, #8
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003dac:	f023 030c 	bic.w	r3, r3, #12
 8003db0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003db8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003dbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	68da      	ldr	r2, [r3, #12]
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	69db      	ldr	r3, [r3, #28]
 8003dc6:	021b      	lsls	r3, r3, #8
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	011a      	lsls	r2, r3, #4
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
 8003dda:	031b      	lsls	r3, r3, #12
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003dea:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003df2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685a      	ldr	r2, [r3, #4]
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	695b      	ldr	r3, [r3, #20]
 8003dfc:	011b      	lsls	r3, r3, #4
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	697a      	ldr	r2, [r7, #20]
 8003e0c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2201      	movs	r2, #1
 8003e32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3718      	adds	r7, #24
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e68:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e70:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e78:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003e80:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d110      	bne.n	8003eaa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e88:	7bfb      	ldrb	r3, [r7, #15]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d102      	bne.n	8003e94 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003e8e:	7b7b      	ldrb	r3, [r7, #13]
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d001      	beq.n	8003e98 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e069      	b.n	8003f6c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ea8:	e031      	b.n	8003f0e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	2b04      	cmp	r3, #4
 8003eae:	d110      	bne.n	8003ed2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003eb0:	7bbb      	ldrb	r3, [r7, #14]
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d102      	bne.n	8003ebc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003eb6:	7b3b      	ldrb	r3, [r7, #12]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d001      	beq.n	8003ec0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e055      	b.n	8003f6c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2202      	movs	r2, #2
 8003ec4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2202      	movs	r2, #2
 8003ecc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ed0:	e01d      	b.n	8003f0e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ed2:	7bfb      	ldrb	r3, [r7, #15]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d108      	bne.n	8003eea <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ed8:	7bbb      	ldrb	r3, [r7, #14]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d105      	bne.n	8003eea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ede:	7b7b      	ldrb	r3, [r7, #13]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d102      	bne.n	8003eea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ee4:	7b3b      	ldrb	r3, [r7, #12]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d001      	beq.n	8003eee <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e03e      	b.n	8003f6c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2202      	movs	r2, #2
 8003ef2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2202      	movs	r2, #2
 8003efa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2202      	movs	r2, #2
 8003f02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2202      	movs	r2, #2
 8003f0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d003      	beq.n	8003f1c <HAL_TIM_Encoder_Start+0xc4>
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	2b04      	cmp	r3, #4
 8003f18:	d008      	beq.n	8003f2c <HAL_TIM_Encoder_Start+0xd4>
 8003f1a:	e00f      	b.n	8003f3c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2201      	movs	r2, #1
 8003f22:	2100      	movs	r1, #0
 8003f24:	4618      	mov	r0, r3
 8003f26:	f000 fc67 	bl	80047f8 <TIM_CCxChannelCmd>
      break;
 8003f2a:	e016      	b.n	8003f5a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2201      	movs	r2, #1
 8003f32:	2104      	movs	r1, #4
 8003f34:	4618      	mov	r0, r3
 8003f36:	f000 fc5f 	bl	80047f8 <TIM_CCxChannelCmd>
      break;
 8003f3a:	e00e      	b.n	8003f5a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2201      	movs	r2, #1
 8003f42:	2100      	movs	r1, #0
 8003f44:	4618      	mov	r0, r3
 8003f46:	f000 fc57 	bl	80047f8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	2104      	movs	r1, #4
 8003f52:	4618      	mov	r0, r3
 8003f54:	f000 fc50 	bl	80047f8 <TIM_CCxChannelCmd>
      break;
 8003f58:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f042 0201 	orr.w	r2, r2, #1
 8003f68:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	f003 0302 	and.w	r3, r3, #2
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d122      	bne.n	8003fd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	f003 0302 	and.w	r3, r3, #2
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d11b      	bne.n	8003fd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f06f 0202 	mvn.w	r2, #2
 8003fa0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	f003 0303 	and.w	r3, r3, #3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 f9b0 	bl	800431c <HAL_TIM_IC_CaptureCallback>
 8003fbc:	e005      	b.n	8003fca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 f9a2 	bl	8004308 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 f9b3 	bl	8004330 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	f003 0304 	and.w	r3, r3, #4
 8003fda:	2b04      	cmp	r3, #4
 8003fdc:	d122      	bne.n	8004024 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	f003 0304 	and.w	r3, r3, #4
 8003fe8:	2b04      	cmp	r3, #4
 8003fea:	d11b      	bne.n	8004024 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f06f 0204 	mvn.w	r2, #4
 8003ff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2202      	movs	r2, #2
 8003ffa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004006:	2b00      	cmp	r3, #0
 8004008:	d003      	beq.n	8004012 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 f986 	bl	800431c <HAL_TIM_IC_CaptureCallback>
 8004010:	e005      	b.n	800401e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f978 	bl	8004308 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 f989 	bl	8004330 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	f003 0308 	and.w	r3, r3, #8
 800402e:	2b08      	cmp	r3, #8
 8004030:	d122      	bne.n	8004078 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	f003 0308 	and.w	r3, r3, #8
 800403c:	2b08      	cmp	r3, #8
 800403e:	d11b      	bne.n	8004078 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f06f 0208 	mvn.w	r2, #8
 8004048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2204      	movs	r2, #4
 800404e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	69db      	ldr	r3, [r3, #28]
 8004056:	f003 0303 	and.w	r3, r3, #3
 800405a:	2b00      	cmp	r3, #0
 800405c:	d003      	beq.n	8004066 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f95c 	bl	800431c <HAL_TIM_IC_CaptureCallback>
 8004064:	e005      	b.n	8004072 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 f94e 	bl	8004308 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 f95f 	bl	8004330 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	f003 0310 	and.w	r3, r3, #16
 8004082:	2b10      	cmp	r3, #16
 8004084:	d122      	bne.n	80040cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	f003 0310 	and.w	r3, r3, #16
 8004090:	2b10      	cmp	r3, #16
 8004092:	d11b      	bne.n	80040cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f06f 0210 	mvn.w	r2, #16
 800409c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2208      	movs	r2, #8
 80040a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	69db      	ldr	r3, [r3, #28]
 80040aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d003      	beq.n	80040ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 f932 	bl	800431c <HAL_TIM_IC_CaptureCallback>
 80040b8:	e005      	b.n	80040c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 f924 	bl	8004308 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 f935 	bl	8004330 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d10e      	bne.n	80040f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	f003 0301 	and.w	r3, r3, #1
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d107      	bne.n	80040f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f06f 0201 	mvn.w	r2, #1
 80040f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f7fd f86a 	bl	80011cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004102:	2b80      	cmp	r3, #128	; 0x80
 8004104:	d10e      	bne.n	8004124 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004110:	2b80      	cmp	r3, #128	; 0x80
 8004112:	d107      	bne.n	8004124 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800411c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 fc68 	bl	80049f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800412e:	2b40      	cmp	r3, #64	; 0x40
 8004130:	d10e      	bne.n	8004150 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800413c:	2b40      	cmp	r3, #64	; 0x40
 800413e:	d107      	bne.n	8004150 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 f8fa 	bl	8004344 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	f003 0320 	and.w	r3, r3, #32
 800415a:	2b20      	cmp	r3, #32
 800415c:	d10e      	bne.n	800417c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	f003 0320 	and.w	r3, r3, #32
 8004168:	2b20      	cmp	r3, #32
 800416a:	d107      	bne.n	800417c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f06f 0220 	mvn.w	r2, #32
 8004174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 fc32 	bl	80049e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800417c:	bf00      	nop
 800417e:	3708      	adds	r7, #8
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004190:	2300      	movs	r3, #0
 8004192:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800419a:	2b01      	cmp	r3, #1
 800419c:	d101      	bne.n	80041a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800419e:	2302      	movs	r3, #2
 80041a0:	e0ae      	b.n	8004300 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2201      	movs	r2, #1
 80041a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2b0c      	cmp	r3, #12
 80041ae:	f200 809f 	bhi.w	80042f0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80041b2:	a201      	add	r2, pc, #4	; (adr r2, 80041b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80041b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b8:	080041ed 	.word	0x080041ed
 80041bc:	080042f1 	.word	0x080042f1
 80041c0:	080042f1 	.word	0x080042f1
 80041c4:	080042f1 	.word	0x080042f1
 80041c8:	0800422d 	.word	0x0800422d
 80041cc:	080042f1 	.word	0x080042f1
 80041d0:	080042f1 	.word	0x080042f1
 80041d4:	080042f1 	.word	0x080042f1
 80041d8:	0800426f 	.word	0x0800426f
 80041dc:	080042f1 	.word	0x080042f1
 80041e0:	080042f1 	.word	0x080042f1
 80041e4:	080042f1 	.word	0x080042f1
 80041e8:	080042af 	.word	0x080042af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68b9      	ldr	r1, [r7, #8]
 80041f2:	4618      	mov	r0, r3
 80041f4:	f000 f950 	bl	8004498 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	699a      	ldr	r2, [r3, #24]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f042 0208 	orr.w	r2, r2, #8
 8004206:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	699a      	ldr	r2, [r3, #24]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 0204 	bic.w	r2, r2, #4
 8004216:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6999      	ldr	r1, [r3, #24]
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	691a      	ldr	r2, [r3, #16]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	430a      	orrs	r2, r1
 8004228:	619a      	str	r2, [r3, #24]
      break;
 800422a:	e064      	b.n	80042f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68b9      	ldr	r1, [r7, #8]
 8004232:	4618      	mov	r0, r3
 8004234:	f000 f9a0 	bl	8004578 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	699a      	ldr	r2, [r3, #24]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004246:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	699a      	ldr	r2, [r3, #24]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004256:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	6999      	ldr	r1, [r3, #24]
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	021a      	lsls	r2, r3, #8
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	430a      	orrs	r2, r1
 800426a:	619a      	str	r2, [r3, #24]
      break;
 800426c:	e043      	b.n	80042f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68b9      	ldr	r1, [r7, #8]
 8004274:	4618      	mov	r0, r3
 8004276:	f000 f9f5 	bl	8004664 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	69da      	ldr	r2, [r3, #28]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f042 0208 	orr.w	r2, r2, #8
 8004288:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	69da      	ldr	r2, [r3, #28]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f022 0204 	bic.w	r2, r2, #4
 8004298:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	69d9      	ldr	r1, [r3, #28]
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	691a      	ldr	r2, [r3, #16]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	430a      	orrs	r2, r1
 80042aa:	61da      	str	r2, [r3, #28]
      break;
 80042ac:	e023      	b.n	80042f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68b9      	ldr	r1, [r7, #8]
 80042b4:	4618      	mov	r0, r3
 80042b6:	f000 fa49 	bl	800474c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	69da      	ldr	r2, [r3, #28]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	69da      	ldr	r2, [r3, #28]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	69d9      	ldr	r1, [r3, #28]
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	021a      	lsls	r2, r3, #8
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	430a      	orrs	r2, r1
 80042ec:	61da      	str	r2, [r3, #28]
      break;
 80042ee:	e002      	b.n	80042f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	75fb      	strb	r3, [r7, #23]
      break;
 80042f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80042fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004300:	4618      	mov	r0, r3
 8004302:	3718      	adds	r7, #24
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004358:	b480      	push	{r7}
 800435a:	b085      	sub	sp, #20
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a40      	ldr	r2, [pc, #256]	; (800446c <TIM_Base_SetConfig+0x114>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d013      	beq.n	8004398 <TIM_Base_SetConfig+0x40>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004376:	d00f      	beq.n	8004398 <TIM_Base_SetConfig+0x40>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a3d      	ldr	r2, [pc, #244]	; (8004470 <TIM_Base_SetConfig+0x118>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d00b      	beq.n	8004398 <TIM_Base_SetConfig+0x40>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4a3c      	ldr	r2, [pc, #240]	; (8004474 <TIM_Base_SetConfig+0x11c>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d007      	beq.n	8004398 <TIM_Base_SetConfig+0x40>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a3b      	ldr	r2, [pc, #236]	; (8004478 <TIM_Base_SetConfig+0x120>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d003      	beq.n	8004398 <TIM_Base_SetConfig+0x40>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4a3a      	ldr	r2, [pc, #232]	; (800447c <TIM_Base_SetConfig+0x124>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d108      	bne.n	80043aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800439e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	68fa      	ldr	r2, [r7, #12]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a2f      	ldr	r2, [pc, #188]	; (800446c <TIM_Base_SetConfig+0x114>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d02b      	beq.n	800440a <TIM_Base_SetConfig+0xb2>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043b8:	d027      	beq.n	800440a <TIM_Base_SetConfig+0xb2>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a2c      	ldr	r2, [pc, #176]	; (8004470 <TIM_Base_SetConfig+0x118>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d023      	beq.n	800440a <TIM_Base_SetConfig+0xb2>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a2b      	ldr	r2, [pc, #172]	; (8004474 <TIM_Base_SetConfig+0x11c>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d01f      	beq.n	800440a <TIM_Base_SetConfig+0xb2>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a2a      	ldr	r2, [pc, #168]	; (8004478 <TIM_Base_SetConfig+0x120>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d01b      	beq.n	800440a <TIM_Base_SetConfig+0xb2>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a29      	ldr	r2, [pc, #164]	; (800447c <TIM_Base_SetConfig+0x124>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d017      	beq.n	800440a <TIM_Base_SetConfig+0xb2>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a28      	ldr	r2, [pc, #160]	; (8004480 <TIM_Base_SetConfig+0x128>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d013      	beq.n	800440a <TIM_Base_SetConfig+0xb2>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a27      	ldr	r2, [pc, #156]	; (8004484 <TIM_Base_SetConfig+0x12c>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d00f      	beq.n	800440a <TIM_Base_SetConfig+0xb2>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a26      	ldr	r2, [pc, #152]	; (8004488 <TIM_Base_SetConfig+0x130>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d00b      	beq.n	800440a <TIM_Base_SetConfig+0xb2>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a25      	ldr	r2, [pc, #148]	; (800448c <TIM_Base_SetConfig+0x134>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d007      	beq.n	800440a <TIM_Base_SetConfig+0xb2>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a24      	ldr	r2, [pc, #144]	; (8004490 <TIM_Base_SetConfig+0x138>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d003      	beq.n	800440a <TIM_Base_SetConfig+0xb2>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a23      	ldr	r2, [pc, #140]	; (8004494 <TIM_Base_SetConfig+0x13c>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d108      	bne.n	800441c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004410:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	4313      	orrs	r3, r2
 800441a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	4313      	orrs	r3, r2
 8004428:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	689a      	ldr	r2, [r3, #8]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a0a      	ldr	r2, [pc, #40]	; (800446c <TIM_Base_SetConfig+0x114>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d003      	beq.n	8004450 <TIM_Base_SetConfig+0xf8>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a0c      	ldr	r2, [pc, #48]	; (800447c <TIM_Base_SetConfig+0x124>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d103      	bne.n	8004458 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	691a      	ldr	r2, [r3, #16]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	615a      	str	r2, [r3, #20]
}
 800445e:	bf00      	nop
 8004460:	3714      	adds	r7, #20
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	40010000 	.word	0x40010000
 8004470:	40000400 	.word	0x40000400
 8004474:	40000800 	.word	0x40000800
 8004478:	40000c00 	.word	0x40000c00
 800447c:	40010400 	.word	0x40010400
 8004480:	40014000 	.word	0x40014000
 8004484:	40014400 	.word	0x40014400
 8004488:	40014800 	.word	0x40014800
 800448c:	40001800 	.word	0x40001800
 8004490:	40001c00 	.word	0x40001c00
 8004494:	40002000 	.word	0x40002000

08004498 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004498:	b480      	push	{r7}
 800449a:	b087      	sub	sp, #28
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a1b      	ldr	r3, [r3, #32]
 80044a6:	f023 0201 	bic.w	r2, r3, #1
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	699b      	ldr	r3, [r3, #24]
 80044be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f023 0303 	bic.w	r3, r3, #3
 80044ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	f023 0302 	bic.w	r3, r3, #2
 80044e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	697a      	ldr	r2, [r7, #20]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a20      	ldr	r2, [pc, #128]	; (8004570 <TIM_OC1_SetConfig+0xd8>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d003      	beq.n	80044fc <TIM_OC1_SetConfig+0x64>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a1f      	ldr	r2, [pc, #124]	; (8004574 <TIM_OC1_SetConfig+0xdc>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d10c      	bne.n	8004516 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	f023 0308 	bic.w	r3, r3, #8
 8004502:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	697a      	ldr	r2, [r7, #20]
 800450a:	4313      	orrs	r3, r2
 800450c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	f023 0304 	bic.w	r3, r3, #4
 8004514:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a15      	ldr	r2, [pc, #84]	; (8004570 <TIM_OC1_SetConfig+0xd8>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d003      	beq.n	8004526 <TIM_OC1_SetConfig+0x8e>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a14      	ldr	r2, [pc, #80]	; (8004574 <TIM_OC1_SetConfig+0xdc>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d111      	bne.n	800454a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800452c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004534:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	4313      	orrs	r3, r2
 800453e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	4313      	orrs	r3, r2
 8004548:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	685a      	ldr	r2, [r3, #4]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	621a      	str	r2, [r3, #32]
}
 8004564:	bf00      	nop
 8004566:	371c      	adds	r7, #28
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr
 8004570:	40010000 	.word	0x40010000
 8004574:	40010400 	.word	0x40010400

08004578 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004578:	b480      	push	{r7}
 800457a:	b087      	sub	sp, #28
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	f023 0210 	bic.w	r2, r3, #16
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	021b      	lsls	r3, r3, #8
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	f023 0320 	bic.w	r3, r3, #32
 80045c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	011b      	lsls	r3, r3, #4
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a22      	ldr	r2, [pc, #136]	; (800465c <TIM_OC2_SetConfig+0xe4>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d003      	beq.n	80045e0 <TIM_OC2_SetConfig+0x68>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a21      	ldr	r2, [pc, #132]	; (8004660 <TIM_OC2_SetConfig+0xe8>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d10d      	bne.n	80045fc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	011b      	lsls	r3, r3, #4
 80045ee:	697a      	ldr	r2, [r7, #20]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a17      	ldr	r2, [pc, #92]	; (800465c <TIM_OC2_SetConfig+0xe4>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d003      	beq.n	800460c <TIM_OC2_SetConfig+0x94>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a16      	ldr	r2, [pc, #88]	; (8004660 <TIM_OC2_SetConfig+0xe8>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d113      	bne.n	8004634 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004612:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800461a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	695b      	ldr	r3, [r3, #20]
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	4313      	orrs	r3, r2
 8004626:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	693a      	ldr	r2, [r7, #16]
 8004630:	4313      	orrs	r3, r2
 8004632:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	685a      	ldr	r2, [r3, #4]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	697a      	ldr	r2, [r7, #20]
 800464c:	621a      	str	r2, [r3, #32]
}
 800464e:	bf00      	nop
 8004650:	371c      	adds	r7, #28
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	40010000 	.word	0x40010000
 8004660:	40010400 	.word	0x40010400

08004664 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004664:	b480      	push	{r7}
 8004666:	b087      	sub	sp, #28
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a1b      	ldr	r3, [r3, #32]
 800467e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	69db      	ldr	r3, [r3, #28]
 800468a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004692:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f023 0303 	bic.w	r3, r3, #3
 800469a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	021b      	lsls	r3, r3, #8
 80046b4:	697a      	ldr	r2, [r7, #20]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a21      	ldr	r2, [pc, #132]	; (8004744 <TIM_OC3_SetConfig+0xe0>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d003      	beq.n	80046ca <TIM_OC3_SetConfig+0x66>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a20      	ldr	r2, [pc, #128]	; (8004748 <TIM_OC3_SetConfig+0xe4>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d10d      	bne.n	80046e6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	021b      	lsls	r3, r3, #8
 80046d8:	697a      	ldr	r2, [r7, #20]
 80046da:	4313      	orrs	r3, r2
 80046dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a16      	ldr	r2, [pc, #88]	; (8004744 <TIM_OC3_SetConfig+0xe0>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d003      	beq.n	80046f6 <TIM_OC3_SetConfig+0x92>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a15      	ldr	r2, [pc, #84]	; (8004748 <TIM_OC3_SetConfig+0xe4>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d113      	bne.n	800471e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004704:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	011b      	lsls	r3, r3, #4
 800470c:	693a      	ldr	r2, [r7, #16]
 800470e:	4313      	orrs	r3, r2
 8004710:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	011b      	lsls	r3, r3, #4
 8004718:	693a      	ldr	r2, [r7, #16]
 800471a:	4313      	orrs	r3, r2
 800471c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	685a      	ldr	r2, [r3, #4]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	621a      	str	r2, [r3, #32]
}
 8004738:	bf00      	nop
 800473a:	371c      	adds	r7, #28
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr
 8004744:	40010000 	.word	0x40010000
 8004748:	40010400 	.word	0x40010400

0800474c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800474c:	b480      	push	{r7}
 800474e:	b087      	sub	sp, #28
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a1b      	ldr	r3, [r3, #32]
 800475a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a1b      	ldr	r3, [r3, #32]
 8004766:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	69db      	ldr	r3, [r3, #28]
 8004772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800477a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004782:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	021b      	lsls	r3, r3, #8
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	4313      	orrs	r3, r2
 800478e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004796:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	031b      	lsls	r3, r3, #12
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a12      	ldr	r2, [pc, #72]	; (80047f0 <TIM_OC4_SetConfig+0xa4>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d003      	beq.n	80047b4 <TIM_OC4_SetConfig+0x68>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a11      	ldr	r2, [pc, #68]	; (80047f4 <TIM_OC4_SetConfig+0xa8>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d109      	bne.n	80047c8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	695b      	ldr	r3, [r3, #20]
 80047c0:	019b      	lsls	r3, r3, #6
 80047c2:	697a      	ldr	r2, [r7, #20]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	697a      	ldr	r2, [r7, #20]
 80047cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	685a      	ldr	r2, [r3, #4]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	693a      	ldr	r2, [r7, #16]
 80047e0:	621a      	str	r2, [r3, #32]
}
 80047e2:	bf00      	nop
 80047e4:	371c      	adds	r7, #28
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	40010000 	.word	0x40010000
 80047f4:	40010400 	.word	0x40010400

080047f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b087      	sub	sp, #28
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	f003 031f 	and.w	r3, r3, #31
 800480a:	2201      	movs	r2, #1
 800480c:	fa02 f303 	lsl.w	r3, r2, r3
 8004810:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6a1a      	ldr	r2, [r3, #32]
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	43db      	mvns	r3, r3
 800481a:	401a      	ands	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6a1a      	ldr	r2, [r3, #32]
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	f003 031f 	and.w	r3, r3, #31
 800482a:	6879      	ldr	r1, [r7, #4]
 800482c:	fa01 f303 	lsl.w	r3, r1, r3
 8004830:	431a      	orrs	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	621a      	str	r2, [r3, #32]
}
 8004836:	bf00      	nop
 8004838:	371c      	adds	r7, #28
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
	...

08004844 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004854:	2b01      	cmp	r3, #1
 8004856:	d101      	bne.n	800485c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004858:	2302      	movs	r3, #2
 800485a:	e05a      	b.n	8004912 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2202      	movs	r2, #2
 8004868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004882:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	4313      	orrs	r3, r2
 800488c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a21      	ldr	r2, [pc, #132]	; (8004920 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d022      	beq.n	80048e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048a8:	d01d      	beq.n	80048e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a1d      	ldr	r2, [pc, #116]	; (8004924 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d018      	beq.n	80048e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a1b      	ldr	r2, [pc, #108]	; (8004928 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d013      	beq.n	80048e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a1a      	ldr	r2, [pc, #104]	; (800492c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d00e      	beq.n	80048e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a18      	ldr	r2, [pc, #96]	; (8004930 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d009      	beq.n	80048e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a17      	ldr	r2, [pc, #92]	; (8004934 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d004      	beq.n	80048e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a15      	ldr	r2, [pc, #84]	; (8004938 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d10c      	bne.n	8004900 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	68ba      	ldr	r2, [r7, #8]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68ba      	ldr	r2, [r7, #8]
 80048fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3714      	adds	r7, #20
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	40010000 	.word	0x40010000
 8004924:	40000400 	.word	0x40000400
 8004928:	40000800 	.word	0x40000800
 800492c:	40000c00 	.word	0x40000c00
 8004930:	40010400 	.word	0x40010400
 8004934:	40014000 	.word	0x40014000
 8004938:	40001800 	.word	0x40001800

0800493c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800493c:	b480      	push	{r7}
 800493e:	b085      	sub	sp, #20
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004946:	2300      	movs	r3, #0
 8004948:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004950:	2b01      	cmp	r3, #1
 8004952:	d101      	bne.n	8004958 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004954:	2302      	movs	r3, #2
 8004956:	e03d      	b.n	80049d4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	4313      	orrs	r3, r2
 800496c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	4313      	orrs	r3, r2
 800497a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	4313      	orrs	r3, r2
 8004988:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4313      	orrs	r3, r2
 8004996:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	695b      	ldr	r3, [r3, #20]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	69db      	ldr	r3, [r3, #28]
 80049be:	4313      	orrs	r3, r2
 80049c0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	68fa      	ldr	r2, [r7, #12]
 80049c8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3714      	adds	r7, #20
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049e8:	bf00      	nop
 80049ea:	370c      	adds	r7, #12
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049fc:	bf00      	nop
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e03f      	b.n	8004a9a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d106      	bne.n	8004a34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f7fc fdd6 	bl	80015e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2224      	movs	r2, #36	; 0x24
 8004a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68da      	ldr	r2, [r3, #12]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 fd7b 	bl	8005548 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	691a      	ldr	r2, [r3, #16]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	695a      	ldr	r2, [r3, #20]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68da      	ldr	r2, [r3, #12]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2220      	movs	r2, #32
 8004a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2220      	movs	r2, #32
 8004a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3708      	adds	r7, #8
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}

08004aa2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004aa2:	b580      	push	{r7, lr}
 8004aa4:	b08a      	sub	sp, #40	; 0x28
 8004aa6:	af02      	add	r7, sp, #8
 8004aa8:	60f8      	str	r0, [r7, #12]
 8004aaa:	60b9      	str	r1, [r7, #8]
 8004aac:	603b      	str	r3, [r7, #0]
 8004aae:	4613      	mov	r3, r2
 8004ab0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	2b20      	cmp	r3, #32
 8004ac0:	d17c      	bne.n	8004bbc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d002      	beq.n	8004ace <HAL_UART_Transmit+0x2c>
 8004ac8:	88fb      	ldrh	r3, [r7, #6]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d101      	bne.n	8004ad2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e075      	b.n	8004bbe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d101      	bne.n	8004ae0 <HAL_UART_Transmit+0x3e>
 8004adc:	2302      	movs	r3, #2
 8004ade:	e06e      	b.n	8004bbe <HAL_UART_Transmit+0x11c>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2221      	movs	r2, #33	; 0x21
 8004af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004af6:	f7fc ff63 	bl	80019c0 <HAL_GetTick>
 8004afa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	88fa      	ldrh	r2, [r7, #6]
 8004b00:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	88fa      	ldrh	r2, [r7, #6]
 8004b06:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b10:	d108      	bne.n	8004b24 <HAL_UART_Transmit+0x82>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d104      	bne.n	8004b24 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	61bb      	str	r3, [r7, #24]
 8004b22:	e003      	b.n	8004b2c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004b34:	e02a      	b.n	8004b8c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	9300      	str	r3, [sp, #0]
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	2180      	movs	r1, #128	; 0x80
 8004b40:	68f8      	ldr	r0, [r7, #12]
 8004b42:	f000 faf9 	bl	8005138 <UART_WaitOnFlagUntilTimeout>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d001      	beq.n	8004b50 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e036      	b.n	8004bbe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d10b      	bne.n	8004b6e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	881b      	ldrh	r3, [r3, #0]
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b64:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	3302      	adds	r3, #2
 8004b6a:	61bb      	str	r3, [r7, #24]
 8004b6c:	e007      	b.n	8004b7e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	781a      	ldrb	r2, [r3, #0]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	3b01      	subs	r3, #1
 8004b86:	b29a      	uxth	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d1cf      	bne.n	8004b36 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	9300      	str	r3, [sp, #0]
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	2140      	movs	r1, #64	; 0x40
 8004ba0:	68f8      	ldr	r0, [r7, #12]
 8004ba2:	f000 fac9 	bl	8005138 <UART_WaitOnFlagUntilTimeout>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d001      	beq.n	8004bb0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	e006      	b.n	8004bbe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2220      	movs	r2, #32
 8004bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	e000      	b.n	8004bbe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004bbc:	2302      	movs	r3, #2
  }
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3720      	adds	r7, #32
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
	...

08004bc8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b0ba      	sub	sp, #232	; 0xe8
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004bfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bfe:	f003 030f 	and.w	r3, r3, #15
 8004c02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004c06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d10f      	bne.n	8004c2e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c12:	f003 0320 	and.w	r3, r3, #32
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d009      	beq.n	8004c2e <HAL_UART_IRQHandler+0x66>
 8004c1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c1e:	f003 0320 	and.w	r3, r3, #32
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d003      	beq.n	8004c2e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 fbd3 	bl	80053d2 <UART_Receive_IT>
      return;
 8004c2c:	e256      	b.n	80050dc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004c2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	f000 80de 	beq.w	8004df4 <HAL_UART_IRQHandler+0x22c>
 8004c38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c3c:	f003 0301 	and.w	r3, r3, #1
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d106      	bne.n	8004c52 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004c44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c48:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f000 80d1 	beq.w	8004df4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00b      	beq.n	8004c76 <HAL_UART_IRQHandler+0xae>
 8004c5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d005      	beq.n	8004c76 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6e:	f043 0201 	orr.w	r2, r3, #1
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c7a:	f003 0304 	and.w	r3, r3, #4
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00b      	beq.n	8004c9a <HAL_UART_IRQHandler+0xd2>
 8004c82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c86:	f003 0301 	and.w	r3, r3, #1
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d005      	beq.n	8004c9a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c92:	f043 0202 	orr.w	r2, r3, #2
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c9e:	f003 0302 	and.w	r3, r3, #2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00b      	beq.n	8004cbe <HAL_UART_IRQHandler+0xf6>
 8004ca6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d005      	beq.n	8004cbe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb6:	f043 0204 	orr.w	r2, r3, #4
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cc2:	f003 0308 	and.w	r3, r3, #8
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d011      	beq.n	8004cee <HAL_UART_IRQHandler+0x126>
 8004cca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cce:	f003 0320 	and.w	r3, r3, #32
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d105      	bne.n	8004ce2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004cd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cda:	f003 0301 	and.w	r3, r3, #1
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d005      	beq.n	8004cee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce6:	f043 0208 	orr.w	r2, r3, #8
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	f000 81ed 	beq.w	80050d2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cfc:	f003 0320 	and.w	r3, r3, #32
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d008      	beq.n	8004d16 <HAL_UART_IRQHandler+0x14e>
 8004d04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d08:	f003 0320 	and.w	r3, r3, #32
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d002      	beq.n	8004d16 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f000 fb5e 	bl	80053d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	695b      	ldr	r3, [r3, #20]
 8004d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d20:	2b40      	cmp	r3, #64	; 0x40
 8004d22:	bf0c      	ite	eq
 8004d24:	2301      	moveq	r3, #1
 8004d26:	2300      	movne	r3, #0
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d32:	f003 0308 	and.w	r3, r3, #8
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d103      	bne.n	8004d42 <HAL_UART_IRQHandler+0x17a>
 8004d3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d04f      	beq.n	8004de2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 fa66 	bl	8005214 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d52:	2b40      	cmp	r3, #64	; 0x40
 8004d54:	d141      	bne.n	8004dda <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	3314      	adds	r3, #20
 8004d5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d64:	e853 3f00 	ldrex	r3, [r3]
 8004d68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004d6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	3314      	adds	r3, #20
 8004d7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004d82:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004d86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004d8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004d92:	e841 2300 	strex	r3, r2, [r1]
 8004d96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004d9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1d9      	bne.n	8004d56 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d013      	beq.n	8004dd2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dae:	4a7d      	ldr	r2, [pc, #500]	; (8004fa4 <HAL_UART_IRQHandler+0x3dc>)
 8004db0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7fd fc4a 	bl	8002650 <HAL_DMA_Abort_IT>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d016      	beq.n	8004df0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004dcc:	4610      	mov	r0, r2
 8004dce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dd0:	e00e      	b.n	8004df0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 f99a 	bl	800510c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dd8:	e00a      	b.n	8004df0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 f996 	bl	800510c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004de0:	e006      	b.n	8004df0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 f992 	bl	800510c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004dee:	e170      	b.n	80050d2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004df0:	bf00      	nop
    return;
 8004df2:	e16e      	b.n	80050d2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	f040 814a 	bne.w	8005092 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e02:	f003 0310 	and.w	r3, r3, #16
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	f000 8143 	beq.w	8005092 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004e0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e10:	f003 0310 	and.w	r3, r3, #16
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	f000 813c 	beq.w	8005092 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	60bb      	str	r3, [r7, #8]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	60bb      	str	r3, [r7, #8]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	60bb      	str	r3, [r7, #8]
 8004e2e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e3a:	2b40      	cmp	r3, #64	; 0x40
 8004e3c:	f040 80b4 	bne.w	8004fa8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004e4c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	f000 8140 	beq.w	80050d6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	f080 8139 	bcs.w	80050d6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e6a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e70:	69db      	ldr	r3, [r3, #28]
 8004e72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e76:	f000 8088 	beq.w	8004f8a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	330c      	adds	r3, #12
 8004e80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e88:	e853 3f00 	ldrex	r3, [r3]
 8004e8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004e90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	330c      	adds	r3, #12
 8004ea2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004ea6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004eaa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004eb2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004eb6:	e841 2300 	strex	r3, r2, [r1]
 8004eba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004ebe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1d9      	bne.n	8004e7a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	3314      	adds	r3, #20
 8004ecc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ece:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ed0:	e853 3f00 	ldrex	r3, [r3]
 8004ed4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004ed6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ed8:	f023 0301 	bic.w	r3, r3, #1
 8004edc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	3314      	adds	r3, #20
 8004ee6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004eea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004eee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004ef2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004ef6:	e841 2300 	strex	r3, r2, [r1]
 8004efa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004efc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d1e1      	bne.n	8004ec6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	3314      	adds	r3, #20
 8004f08:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f0c:	e853 3f00 	ldrex	r3, [r3]
 8004f10:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004f12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	3314      	adds	r3, #20
 8004f22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004f26:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004f28:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004f2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004f2e:	e841 2300 	strex	r3, r2, [r1]
 8004f32:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004f34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d1e3      	bne.n	8004f02 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2220      	movs	r2, #32
 8004f3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	330c      	adds	r3, #12
 8004f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f52:	e853 3f00 	ldrex	r3, [r3]
 8004f56:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004f58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f5a:	f023 0310 	bic.w	r3, r3, #16
 8004f5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	330c      	adds	r3, #12
 8004f68:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004f6c:	65ba      	str	r2, [r7, #88]	; 0x58
 8004f6e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f70:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004f72:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f74:	e841 2300 	strex	r3, r2, [r1]
 8004f78:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004f7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d1e3      	bne.n	8004f48 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f84:	4618      	mov	r0, r3
 8004f86:	f7fd faf3 	bl	8002570 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	4619      	mov	r1, r3
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 f8c0 	bl	8005120 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004fa0:	e099      	b.n	80050d6 <HAL_UART_IRQHandler+0x50e>
 8004fa2:	bf00      	nop
 8004fa4:	080052db 	.word	0x080052db
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	f000 808b 	beq.w	80050da <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004fc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	f000 8086 	beq.w	80050da <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	330c      	adds	r3, #12
 8004fd4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd8:	e853 3f00 	ldrex	r3, [r3]
 8004fdc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fe0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004fe4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	330c      	adds	r3, #12
 8004fee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004ff2:	647a      	str	r2, [r7, #68]	; 0x44
 8004ff4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ff8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ffa:	e841 2300 	strex	r3, r2, [r1]
 8004ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005002:	2b00      	cmp	r3, #0
 8005004:	d1e3      	bne.n	8004fce <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	3314      	adds	r3, #20
 800500c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800500e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005010:	e853 3f00 	ldrex	r3, [r3]
 8005014:	623b      	str	r3, [r7, #32]
   return(result);
 8005016:	6a3b      	ldr	r3, [r7, #32]
 8005018:	f023 0301 	bic.w	r3, r3, #1
 800501c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	3314      	adds	r3, #20
 8005026:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800502a:	633a      	str	r2, [r7, #48]	; 0x30
 800502c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005030:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005032:	e841 2300 	strex	r3, r2, [r1]
 8005036:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1e3      	bne.n	8005006 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2220      	movs	r2, #32
 8005042:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	330c      	adds	r3, #12
 8005052:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	e853 3f00 	ldrex	r3, [r3]
 800505a:	60fb      	str	r3, [r7, #12]
   return(result);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f023 0310 	bic.w	r3, r3, #16
 8005062:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	330c      	adds	r3, #12
 800506c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005070:	61fa      	str	r2, [r7, #28]
 8005072:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005074:	69b9      	ldr	r1, [r7, #24]
 8005076:	69fa      	ldr	r2, [r7, #28]
 8005078:	e841 2300 	strex	r3, r2, [r1]
 800507c:	617b      	str	r3, [r7, #20]
   return(result);
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d1e3      	bne.n	800504c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005084:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005088:	4619      	mov	r1, r3
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 f848 	bl	8005120 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005090:	e023      	b.n	80050da <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800509a:	2b00      	cmp	r3, #0
 800509c:	d009      	beq.n	80050b2 <HAL_UART_IRQHandler+0x4ea>
 800509e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d003      	beq.n	80050b2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 f929 	bl	8005302 <UART_Transmit_IT>
    return;
 80050b0:	e014      	b.n	80050dc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80050b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00e      	beq.n	80050dc <HAL_UART_IRQHandler+0x514>
 80050be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d008      	beq.n	80050dc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 f969 	bl	80053a2 <UART_EndTransmit_IT>
    return;
 80050d0:	e004      	b.n	80050dc <HAL_UART_IRQHandler+0x514>
    return;
 80050d2:	bf00      	nop
 80050d4:	e002      	b.n	80050dc <HAL_UART_IRQHandler+0x514>
      return;
 80050d6:	bf00      	nop
 80050d8:	e000      	b.n	80050dc <HAL_UART_IRQHandler+0x514>
      return;
 80050da:	bf00      	nop
  }
}
 80050dc:	37e8      	adds	r7, #232	; 0xe8
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop

080050e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80050ec:	bf00      	nop
 80050ee:	370c      	adds	r7, #12
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005100:	bf00      	nop
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	460b      	mov	r3, r1
 800512a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800512c:	bf00      	nop
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b090      	sub	sp, #64	; 0x40
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	603b      	str	r3, [r7, #0]
 8005144:	4613      	mov	r3, r2
 8005146:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005148:	e050      	b.n	80051ec <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800514a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800514c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005150:	d04c      	beq.n	80051ec <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005152:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005154:	2b00      	cmp	r3, #0
 8005156:	d007      	beq.n	8005168 <UART_WaitOnFlagUntilTimeout+0x30>
 8005158:	f7fc fc32 	bl	80019c0 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005164:	429a      	cmp	r2, r3
 8005166:	d241      	bcs.n	80051ec <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	330c      	adds	r3, #12
 800516e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005172:	e853 3f00 	ldrex	r3, [r3]
 8005176:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800517e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	330c      	adds	r3, #12
 8005186:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005188:	637a      	str	r2, [r7, #52]	; 0x34
 800518a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800518c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800518e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005190:	e841 2300 	strex	r3, r2, [r1]
 8005194:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005198:	2b00      	cmp	r3, #0
 800519a:	d1e5      	bne.n	8005168 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	3314      	adds	r3, #20
 80051a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	e853 3f00 	ldrex	r3, [r3]
 80051aa:	613b      	str	r3, [r7, #16]
   return(result);
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	f023 0301 	bic.w	r3, r3, #1
 80051b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	3314      	adds	r3, #20
 80051ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051bc:	623a      	str	r2, [r7, #32]
 80051be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c0:	69f9      	ldr	r1, [r7, #28]
 80051c2:	6a3a      	ldr	r2, [r7, #32]
 80051c4:	e841 2300 	strex	r3, r2, [r1]
 80051c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d1e5      	bne.n	800519c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2220      	movs	r2, #32
 80051d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2220      	movs	r2, #32
 80051dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e00f      	b.n	800520c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	4013      	ands	r3, r2
 80051f6:	68ba      	ldr	r2, [r7, #8]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	bf0c      	ite	eq
 80051fc:	2301      	moveq	r3, #1
 80051fe:	2300      	movne	r3, #0
 8005200:	b2db      	uxtb	r3, r3
 8005202:	461a      	mov	r2, r3
 8005204:	79fb      	ldrb	r3, [r7, #7]
 8005206:	429a      	cmp	r2, r3
 8005208:	d09f      	beq.n	800514a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800520a:	2300      	movs	r3, #0
}
 800520c:	4618      	mov	r0, r3
 800520e:	3740      	adds	r7, #64	; 0x40
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005214:	b480      	push	{r7}
 8005216:	b095      	sub	sp, #84	; 0x54
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	330c      	adds	r3, #12
 8005222:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005226:	e853 3f00 	ldrex	r3, [r3]
 800522a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800522c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005232:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	330c      	adds	r3, #12
 800523a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800523c:	643a      	str	r2, [r7, #64]	; 0x40
 800523e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005240:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005242:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005244:	e841 2300 	strex	r3, r2, [r1]
 8005248:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800524a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800524c:	2b00      	cmp	r3, #0
 800524e:	d1e5      	bne.n	800521c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	3314      	adds	r3, #20
 8005256:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005258:	6a3b      	ldr	r3, [r7, #32]
 800525a:	e853 3f00 	ldrex	r3, [r3]
 800525e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	f023 0301 	bic.w	r3, r3, #1
 8005266:	64bb      	str	r3, [r7, #72]	; 0x48
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	3314      	adds	r3, #20
 800526e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005270:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005272:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005274:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005276:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005278:	e841 2300 	strex	r3, r2, [r1]
 800527c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800527e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005280:	2b00      	cmp	r3, #0
 8005282:	d1e5      	bne.n	8005250 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005288:	2b01      	cmp	r3, #1
 800528a:	d119      	bne.n	80052c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	330c      	adds	r3, #12
 8005292:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	e853 3f00 	ldrex	r3, [r3]
 800529a:	60bb      	str	r3, [r7, #8]
   return(result);
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	f023 0310 	bic.w	r3, r3, #16
 80052a2:	647b      	str	r3, [r7, #68]	; 0x44
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	330c      	adds	r3, #12
 80052aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052ac:	61ba      	str	r2, [r7, #24]
 80052ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b0:	6979      	ldr	r1, [r7, #20]
 80052b2:	69ba      	ldr	r2, [r7, #24]
 80052b4:	e841 2300 	strex	r3, r2, [r1]
 80052b8:	613b      	str	r3, [r7, #16]
   return(result);
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d1e5      	bne.n	800528c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2220      	movs	r2, #32
 80052c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80052ce:	bf00      	nop
 80052d0:	3754      	adds	r7, #84	; 0x54
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr

080052da <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80052da:	b580      	push	{r7, lr}
 80052dc:	b084      	sub	sp, #16
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2200      	movs	r2, #0
 80052ec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80052f4:	68f8      	ldr	r0, [r7, #12]
 80052f6:	f7ff ff09 	bl	800510c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052fa:	bf00      	nop
 80052fc:	3710      	adds	r7, #16
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}

08005302 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005302:	b480      	push	{r7}
 8005304:	b085      	sub	sp, #20
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005310:	b2db      	uxtb	r3, r3
 8005312:	2b21      	cmp	r3, #33	; 0x21
 8005314:	d13e      	bne.n	8005394 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800531e:	d114      	bne.n	800534a <UART_Transmit_IT+0x48>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d110      	bne.n	800534a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a1b      	ldr	r3, [r3, #32]
 800532c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	881b      	ldrh	r3, [r3, #0]
 8005332:	461a      	mov	r2, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800533c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a1b      	ldr	r3, [r3, #32]
 8005342:	1c9a      	adds	r2, r3, #2
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	621a      	str	r2, [r3, #32]
 8005348:	e008      	b.n	800535c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a1b      	ldr	r3, [r3, #32]
 800534e:	1c59      	adds	r1, r3, #1
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	6211      	str	r1, [r2, #32]
 8005354:	781a      	ldrb	r2, [r3, #0]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005360:	b29b      	uxth	r3, r3
 8005362:	3b01      	subs	r3, #1
 8005364:	b29b      	uxth	r3, r3
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	4619      	mov	r1, r3
 800536a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800536c:	2b00      	cmp	r3, #0
 800536e:	d10f      	bne.n	8005390 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68da      	ldr	r2, [r3, #12]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800537e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68da      	ldr	r2, [r3, #12]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800538e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005390:	2300      	movs	r3, #0
 8005392:	e000      	b.n	8005396 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005394:	2302      	movs	r3, #2
  }
}
 8005396:	4618      	mov	r0, r3
 8005398:	3714      	adds	r7, #20
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr

080053a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053a2:	b580      	push	{r7, lr}
 80053a4:	b082      	sub	sp, #8
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68da      	ldr	r2, [r3, #12]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2220      	movs	r2, #32
 80053be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f7ff fe8e 	bl	80050e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3708      	adds	r7, #8
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}

080053d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80053d2:	b580      	push	{r7, lr}
 80053d4:	b08c      	sub	sp, #48	; 0x30
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	2b22      	cmp	r3, #34	; 0x22
 80053e4:	f040 80ab 	bne.w	800553e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053f0:	d117      	bne.n	8005422 <UART_Receive_IT+0x50>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d113      	bne.n	8005422 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80053fa:	2300      	movs	r3, #0
 80053fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005402:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	b29b      	uxth	r3, r3
 800540c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005410:	b29a      	uxth	r2, r3
 8005412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005414:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800541a:	1c9a      	adds	r2, r3, #2
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	629a      	str	r2, [r3, #40]	; 0x28
 8005420:	e026      	b.n	8005470 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005426:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005428:	2300      	movs	r3, #0
 800542a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005434:	d007      	beq.n	8005446 <UART_Receive_IT+0x74>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d10a      	bne.n	8005454 <UART_Receive_IT+0x82>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d106      	bne.n	8005454 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	b2da      	uxtb	r2, r3
 800544e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005450:	701a      	strb	r2, [r3, #0]
 8005452:	e008      	b.n	8005466 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	b2db      	uxtb	r3, r3
 800545c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005460:	b2da      	uxtb	r2, r3
 8005462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005464:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800546a:	1c5a      	adds	r2, r3, #1
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005474:	b29b      	uxth	r3, r3
 8005476:	3b01      	subs	r3, #1
 8005478:	b29b      	uxth	r3, r3
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	4619      	mov	r1, r3
 800547e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005480:	2b00      	cmp	r3, #0
 8005482:	d15a      	bne.n	800553a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68da      	ldr	r2, [r3, #12]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f022 0220 	bic.w	r2, r2, #32
 8005492:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68da      	ldr	r2, [r3, #12]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	695a      	ldr	r2, [r3, #20]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f022 0201 	bic.w	r2, r2, #1
 80054b2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2220      	movs	r2, #32
 80054b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d135      	bne.n	8005530 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	330c      	adds	r3, #12
 80054d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	e853 3f00 	ldrex	r3, [r3]
 80054d8:	613b      	str	r3, [r7, #16]
   return(result);
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	f023 0310 	bic.w	r3, r3, #16
 80054e0:	627b      	str	r3, [r7, #36]	; 0x24
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	330c      	adds	r3, #12
 80054e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ea:	623a      	str	r2, [r7, #32]
 80054ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ee:	69f9      	ldr	r1, [r7, #28]
 80054f0:	6a3a      	ldr	r2, [r7, #32]
 80054f2:	e841 2300 	strex	r3, r2, [r1]
 80054f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d1e5      	bne.n	80054ca <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0310 	and.w	r3, r3, #16
 8005508:	2b10      	cmp	r3, #16
 800550a:	d10a      	bne.n	8005522 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800550c:	2300      	movs	r3, #0
 800550e:	60fb      	str	r3, [r7, #12]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	60fb      	str	r3, [r7, #12]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	60fb      	str	r3, [r7, #12]
 8005520:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005526:	4619      	mov	r1, r3
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f7ff fdf9 	bl	8005120 <HAL_UARTEx_RxEventCallback>
 800552e:	e002      	b.n	8005536 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f7ff fde1 	bl	80050f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005536:	2300      	movs	r3, #0
 8005538:	e002      	b.n	8005540 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800553a:	2300      	movs	r3, #0
 800553c:	e000      	b.n	8005540 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800553e:	2302      	movs	r3, #2
  }
}
 8005540:	4618      	mov	r0, r3
 8005542:	3730      	adds	r7, #48	; 0x30
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005548:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800554c:	b0c0      	sub	sp, #256	; 0x100
 800554e:	af00      	add	r7, sp, #0
 8005550:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005564:	68d9      	ldr	r1, [r3, #12]
 8005566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	ea40 0301 	orr.w	r3, r0, r1
 8005570:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005576:	689a      	ldr	r2, [r3, #8]
 8005578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	431a      	orrs	r2, r3
 8005580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005584:	695b      	ldr	r3, [r3, #20]
 8005586:	431a      	orrs	r2, r3
 8005588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800558c:	69db      	ldr	r3, [r3, #28]
 800558e:	4313      	orrs	r3, r2
 8005590:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80055a0:	f021 010c 	bic.w	r1, r1, #12
 80055a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80055ae:	430b      	orrs	r3, r1
 80055b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	695b      	ldr	r3, [r3, #20]
 80055ba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80055be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055c2:	6999      	ldr	r1, [r3, #24]
 80055c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	ea40 0301 	orr.w	r3, r0, r1
 80055ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80055d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	4b8f      	ldr	r3, [pc, #572]	; (8005814 <UART_SetConfig+0x2cc>)
 80055d8:	429a      	cmp	r2, r3
 80055da:	d005      	beq.n	80055e8 <UART_SetConfig+0xa0>
 80055dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	4b8d      	ldr	r3, [pc, #564]	; (8005818 <UART_SetConfig+0x2d0>)
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d104      	bne.n	80055f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80055e8:	f7fd fd5c 	bl	80030a4 <HAL_RCC_GetPCLK2Freq>
 80055ec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80055f0:	e003      	b.n	80055fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80055f2:	f7fd fd43 	bl	800307c <HAL_RCC_GetPCLK1Freq>
 80055f6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055fe:	69db      	ldr	r3, [r3, #28]
 8005600:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005604:	f040 810c 	bne.w	8005820 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005608:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800560c:	2200      	movs	r2, #0
 800560e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005612:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005616:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800561a:	4622      	mov	r2, r4
 800561c:	462b      	mov	r3, r5
 800561e:	1891      	adds	r1, r2, r2
 8005620:	65b9      	str	r1, [r7, #88]	; 0x58
 8005622:	415b      	adcs	r3, r3
 8005624:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005626:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800562a:	4621      	mov	r1, r4
 800562c:	eb12 0801 	adds.w	r8, r2, r1
 8005630:	4629      	mov	r1, r5
 8005632:	eb43 0901 	adc.w	r9, r3, r1
 8005636:	f04f 0200 	mov.w	r2, #0
 800563a:	f04f 0300 	mov.w	r3, #0
 800563e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005642:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005646:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800564a:	4690      	mov	r8, r2
 800564c:	4699      	mov	r9, r3
 800564e:	4623      	mov	r3, r4
 8005650:	eb18 0303 	adds.w	r3, r8, r3
 8005654:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005658:	462b      	mov	r3, r5
 800565a:	eb49 0303 	adc.w	r3, r9, r3
 800565e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800566e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005672:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005676:	460b      	mov	r3, r1
 8005678:	18db      	adds	r3, r3, r3
 800567a:	653b      	str	r3, [r7, #80]	; 0x50
 800567c:	4613      	mov	r3, r2
 800567e:	eb42 0303 	adc.w	r3, r2, r3
 8005682:	657b      	str	r3, [r7, #84]	; 0x54
 8005684:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005688:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800568c:	f7fa fe10 	bl	80002b0 <__aeabi_uldivmod>
 8005690:	4602      	mov	r2, r0
 8005692:	460b      	mov	r3, r1
 8005694:	4b61      	ldr	r3, [pc, #388]	; (800581c <UART_SetConfig+0x2d4>)
 8005696:	fba3 2302 	umull	r2, r3, r3, r2
 800569a:	095b      	lsrs	r3, r3, #5
 800569c:	011c      	lsls	r4, r3, #4
 800569e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056a2:	2200      	movs	r2, #0
 80056a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80056a8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80056ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80056b0:	4642      	mov	r2, r8
 80056b2:	464b      	mov	r3, r9
 80056b4:	1891      	adds	r1, r2, r2
 80056b6:	64b9      	str	r1, [r7, #72]	; 0x48
 80056b8:	415b      	adcs	r3, r3
 80056ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80056c0:	4641      	mov	r1, r8
 80056c2:	eb12 0a01 	adds.w	sl, r2, r1
 80056c6:	4649      	mov	r1, r9
 80056c8:	eb43 0b01 	adc.w	fp, r3, r1
 80056cc:	f04f 0200 	mov.w	r2, #0
 80056d0:	f04f 0300 	mov.w	r3, #0
 80056d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80056d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80056dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056e0:	4692      	mov	sl, r2
 80056e2:	469b      	mov	fp, r3
 80056e4:	4643      	mov	r3, r8
 80056e6:	eb1a 0303 	adds.w	r3, sl, r3
 80056ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80056ee:	464b      	mov	r3, r9
 80056f0:	eb4b 0303 	adc.w	r3, fp, r3
 80056f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80056f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005704:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005708:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800570c:	460b      	mov	r3, r1
 800570e:	18db      	adds	r3, r3, r3
 8005710:	643b      	str	r3, [r7, #64]	; 0x40
 8005712:	4613      	mov	r3, r2
 8005714:	eb42 0303 	adc.w	r3, r2, r3
 8005718:	647b      	str	r3, [r7, #68]	; 0x44
 800571a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800571e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005722:	f7fa fdc5 	bl	80002b0 <__aeabi_uldivmod>
 8005726:	4602      	mov	r2, r0
 8005728:	460b      	mov	r3, r1
 800572a:	4611      	mov	r1, r2
 800572c:	4b3b      	ldr	r3, [pc, #236]	; (800581c <UART_SetConfig+0x2d4>)
 800572e:	fba3 2301 	umull	r2, r3, r3, r1
 8005732:	095b      	lsrs	r3, r3, #5
 8005734:	2264      	movs	r2, #100	; 0x64
 8005736:	fb02 f303 	mul.w	r3, r2, r3
 800573a:	1acb      	subs	r3, r1, r3
 800573c:	00db      	lsls	r3, r3, #3
 800573e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005742:	4b36      	ldr	r3, [pc, #216]	; (800581c <UART_SetConfig+0x2d4>)
 8005744:	fba3 2302 	umull	r2, r3, r3, r2
 8005748:	095b      	lsrs	r3, r3, #5
 800574a:	005b      	lsls	r3, r3, #1
 800574c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005750:	441c      	add	r4, r3
 8005752:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005756:	2200      	movs	r2, #0
 8005758:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800575c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005760:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005764:	4642      	mov	r2, r8
 8005766:	464b      	mov	r3, r9
 8005768:	1891      	adds	r1, r2, r2
 800576a:	63b9      	str	r1, [r7, #56]	; 0x38
 800576c:	415b      	adcs	r3, r3
 800576e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005770:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005774:	4641      	mov	r1, r8
 8005776:	1851      	adds	r1, r2, r1
 8005778:	6339      	str	r1, [r7, #48]	; 0x30
 800577a:	4649      	mov	r1, r9
 800577c:	414b      	adcs	r3, r1
 800577e:	637b      	str	r3, [r7, #52]	; 0x34
 8005780:	f04f 0200 	mov.w	r2, #0
 8005784:	f04f 0300 	mov.w	r3, #0
 8005788:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800578c:	4659      	mov	r1, fp
 800578e:	00cb      	lsls	r3, r1, #3
 8005790:	4651      	mov	r1, sl
 8005792:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005796:	4651      	mov	r1, sl
 8005798:	00ca      	lsls	r2, r1, #3
 800579a:	4610      	mov	r0, r2
 800579c:	4619      	mov	r1, r3
 800579e:	4603      	mov	r3, r0
 80057a0:	4642      	mov	r2, r8
 80057a2:	189b      	adds	r3, r3, r2
 80057a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80057a8:	464b      	mov	r3, r9
 80057aa:	460a      	mov	r2, r1
 80057ac:	eb42 0303 	adc.w	r3, r2, r3
 80057b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80057b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80057c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80057c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80057c8:	460b      	mov	r3, r1
 80057ca:	18db      	adds	r3, r3, r3
 80057cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80057ce:	4613      	mov	r3, r2
 80057d0:	eb42 0303 	adc.w	r3, r2, r3
 80057d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80057da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80057de:	f7fa fd67 	bl	80002b0 <__aeabi_uldivmod>
 80057e2:	4602      	mov	r2, r0
 80057e4:	460b      	mov	r3, r1
 80057e6:	4b0d      	ldr	r3, [pc, #52]	; (800581c <UART_SetConfig+0x2d4>)
 80057e8:	fba3 1302 	umull	r1, r3, r3, r2
 80057ec:	095b      	lsrs	r3, r3, #5
 80057ee:	2164      	movs	r1, #100	; 0x64
 80057f0:	fb01 f303 	mul.w	r3, r1, r3
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	00db      	lsls	r3, r3, #3
 80057f8:	3332      	adds	r3, #50	; 0x32
 80057fa:	4a08      	ldr	r2, [pc, #32]	; (800581c <UART_SetConfig+0x2d4>)
 80057fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005800:	095b      	lsrs	r3, r3, #5
 8005802:	f003 0207 	and.w	r2, r3, #7
 8005806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4422      	add	r2, r4
 800580e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005810:	e106      	b.n	8005a20 <UART_SetConfig+0x4d8>
 8005812:	bf00      	nop
 8005814:	40011000 	.word	0x40011000
 8005818:	40011400 	.word	0x40011400
 800581c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005820:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005824:	2200      	movs	r2, #0
 8005826:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800582a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800582e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005832:	4642      	mov	r2, r8
 8005834:	464b      	mov	r3, r9
 8005836:	1891      	adds	r1, r2, r2
 8005838:	6239      	str	r1, [r7, #32]
 800583a:	415b      	adcs	r3, r3
 800583c:	627b      	str	r3, [r7, #36]	; 0x24
 800583e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005842:	4641      	mov	r1, r8
 8005844:	1854      	adds	r4, r2, r1
 8005846:	4649      	mov	r1, r9
 8005848:	eb43 0501 	adc.w	r5, r3, r1
 800584c:	f04f 0200 	mov.w	r2, #0
 8005850:	f04f 0300 	mov.w	r3, #0
 8005854:	00eb      	lsls	r3, r5, #3
 8005856:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800585a:	00e2      	lsls	r2, r4, #3
 800585c:	4614      	mov	r4, r2
 800585e:	461d      	mov	r5, r3
 8005860:	4643      	mov	r3, r8
 8005862:	18e3      	adds	r3, r4, r3
 8005864:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005868:	464b      	mov	r3, r9
 800586a:	eb45 0303 	adc.w	r3, r5, r3
 800586e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800587e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005882:	f04f 0200 	mov.w	r2, #0
 8005886:	f04f 0300 	mov.w	r3, #0
 800588a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800588e:	4629      	mov	r1, r5
 8005890:	008b      	lsls	r3, r1, #2
 8005892:	4621      	mov	r1, r4
 8005894:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005898:	4621      	mov	r1, r4
 800589a:	008a      	lsls	r2, r1, #2
 800589c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80058a0:	f7fa fd06 	bl	80002b0 <__aeabi_uldivmod>
 80058a4:	4602      	mov	r2, r0
 80058a6:	460b      	mov	r3, r1
 80058a8:	4b60      	ldr	r3, [pc, #384]	; (8005a2c <UART_SetConfig+0x4e4>)
 80058aa:	fba3 2302 	umull	r2, r3, r3, r2
 80058ae:	095b      	lsrs	r3, r3, #5
 80058b0:	011c      	lsls	r4, r3, #4
 80058b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058b6:	2200      	movs	r2, #0
 80058b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80058bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80058c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80058c4:	4642      	mov	r2, r8
 80058c6:	464b      	mov	r3, r9
 80058c8:	1891      	adds	r1, r2, r2
 80058ca:	61b9      	str	r1, [r7, #24]
 80058cc:	415b      	adcs	r3, r3
 80058ce:	61fb      	str	r3, [r7, #28]
 80058d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058d4:	4641      	mov	r1, r8
 80058d6:	1851      	adds	r1, r2, r1
 80058d8:	6139      	str	r1, [r7, #16]
 80058da:	4649      	mov	r1, r9
 80058dc:	414b      	adcs	r3, r1
 80058de:	617b      	str	r3, [r7, #20]
 80058e0:	f04f 0200 	mov.w	r2, #0
 80058e4:	f04f 0300 	mov.w	r3, #0
 80058e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80058ec:	4659      	mov	r1, fp
 80058ee:	00cb      	lsls	r3, r1, #3
 80058f0:	4651      	mov	r1, sl
 80058f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058f6:	4651      	mov	r1, sl
 80058f8:	00ca      	lsls	r2, r1, #3
 80058fa:	4610      	mov	r0, r2
 80058fc:	4619      	mov	r1, r3
 80058fe:	4603      	mov	r3, r0
 8005900:	4642      	mov	r2, r8
 8005902:	189b      	adds	r3, r3, r2
 8005904:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005908:	464b      	mov	r3, r9
 800590a:	460a      	mov	r2, r1
 800590c:	eb42 0303 	adc.w	r3, r2, r3
 8005910:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	67bb      	str	r3, [r7, #120]	; 0x78
 800591e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005920:	f04f 0200 	mov.w	r2, #0
 8005924:	f04f 0300 	mov.w	r3, #0
 8005928:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800592c:	4649      	mov	r1, r9
 800592e:	008b      	lsls	r3, r1, #2
 8005930:	4641      	mov	r1, r8
 8005932:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005936:	4641      	mov	r1, r8
 8005938:	008a      	lsls	r2, r1, #2
 800593a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800593e:	f7fa fcb7 	bl	80002b0 <__aeabi_uldivmod>
 8005942:	4602      	mov	r2, r0
 8005944:	460b      	mov	r3, r1
 8005946:	4611      	mov	r1, r2
 8005948:	4b38      	ldr	r3, [pc, #224]	; (8005a2c <UART_SetConfig+0x4e4>)
 800594a:	fba3 2301 	umull	r2, r3, r3, r1
 800594e:	095b      	lsrs	r3, r3, #5
 8005950:	2264      	movs	r2, #100	; 0x64
 8005952:	fb02 f303 	mul.w	r3, r2, r3
 8005956:	1acb      	subs	r3, r1, r3
 8005958:	011b      	lsls	r3, r3, #4
 800595a:	3332      	adds	r3, #50	; 0x32
 800595c:	4a33      	ldr	r2, [pc, #204]	; (8005a2c <UART_SetConfig+0x4e4>)
 800595e:	fba2 2303 	umull	r2, r3, r2, r3
 8005962:	095b      	lsrs	r3, r3, #5
 8005964:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005968:	441c      	add	r4, r3
 800596a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800596e:	2200      	movs	r2, #0
 8005970:	673b      	str	r3, [r7, #112]	; 0x70
 8005972:	677a      	str	r2, [r7, #116]	; 0x74
 8005974:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005978:	4642      	mov	r2, r8
 800597a:	464b      	mov	r3, r9
 800597c:	1891      	adds	r1, r2, r2
 800597e:	60b9      	str	r1, [r7, #8]
 8005980:	415b      	adcs	r3, r3
 8005982:	60fb      	str	r3, [r7, #12]
 8005984:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005988:	4641      	mov	r1, r8
 800598a:	1851      	adds	r1, r2, r1
 800598c:	6039      	str	r1, [r7, #0]
 800598e:	4649      	mov	r1, r9
 8005990:	414b      	adcs	r3, r1
 8005992:	607b      	str	r3, [r7, #4]
 8005994:	f04f 0200 	mov.w	r2, #0
 8005998:	f04f 0300 	mov.w	r3, #0
 800599c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80059a0:	4659      	mov	r1, fp
 80059a2:	00cb      	lsls	r3, r1, #3
 80059a4:	4651      	mov	r1, sl
 80059a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059aa:	4651      	mov	r1, sl
 80059ac:	00ca      	lsls	r2, r1, #3
 80059ae:	4610      	mov	r0, r2
 80059b0:	4619      	mov	r1, r3
 80059b2:	4603      	mov	r3, r0
 80059b4:	4642      	mov	r2, r8
 80059b6:	189b      	adds	r3, r3, r2
 80059b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80059ba:	464b      	mov	r3, r9
 80059bc:	460a      	mov	r2, r1
 80059be:	eb42 0303 	adc.w	r3, r2, r3
 80059c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80059c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	663b      	str	r3, [r7, #96]	; 0x60
 80059ce:	667a      	str	r2, [r7, #100]	; 0x64
 80059d0:	f04f 0200 	mov.w	r2, #0
 80059d4:	f04f 0300 	mov.w	r3, #0
 80059d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80059dc:	4649      	mov	r1, r9
 80059de:	008b      	lsls	r3, r1, #2
 80059e0:	4641      	mov	r1, r8
 80059e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059e6:	4641      	mov	r1, r8
 80059e8:	008a      	lsls	r2, r1, #2
 80059ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80059ee:	f7fa fc5f 	bl	80002b0 <__aeabi_uldivmod>
 80059f2:	4602      	mov	r2, r0
 80059f4:	460b      	mov	r3, r1
 80059f6:	4b0d      	ldr	r3, [pc, #52]	; (8005a2c <UART_SetConfig+0x4e4>)
 80059f8:	fba3 1302 	umull	r1, r3, r3, r2
 80059fc:	095b      	lsrs	r3, r3, #5
 80059fe:	2164      	movs	r1, #100	; 0x64
 8005a00:	fb01 f303 	mul.w	r3, r1, r3
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	011b      	lsls	r3, r3, #4
 8005a08:	3332      	adds	r3, #50	; 0x32
 8005a0a:	4a08      	ldr	r2, [pc, #32]	; (8005a2c <UART_SetConfig+0x4e4>)
 8005a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a10:	095b      	lsrs	r3, r3, #5
 8005a12:	f003 020f 	and.w	r2, r3, #15
 8005a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4422      	add	r2, r4
 8005a1e:	609a      	str	r2, [r3, #8]
}
 8005a20:	bf00      	nop
 8005a22:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005a26:	46bd      	mov	sp, r7
 8005a28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a2c:	51eb851f 	.word	0x51eb851f

08005a30 <siprintf>:
 8005a30:	b40e      	push	{r1, r2, r3}
 8005a32:	b500      	push	{lr}
 8005a34:	b09c      	sub	sp, #112	; 0x70
 8005a36:	ab1d      	add	r3, sp, #116	; 0x74
 8005a38:	9002      	str	r0, [sp, #8]
 8005a3a:	9006      	str	r0, [sp, #24]
 8005a3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005a40:	4809      	ldr	r0, [pc, #36]	; (8005a68 <siprintf+0x38>)
 8005a42:	9107      	str	r1, [sp, #28]
 8005a44:	9104      	str	r1, [sp, #16]
 8005a46:	4909      	ldr	r1, [pc, #36]	; (8005a6c <siprintf+0x3c>)
 8005a48:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a4c:	9105      	str	r1, [sp, #20]
 8005a4e:	6800      	ldr	r0, [r0, #0]
 8005a50:	9301      	str	r3, [sp, #4]
 8005a52:	a902      	add	r1, sp, #8
 8005a54:	f000 f992 	bl	8005d7c <_svfiprintf_r>
 8005a58:	9b02      	ldr	r3, [sp, #8]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	701a      	strb	r2, [r3, #0]
 8005a5e:	b01c      	add	sp, #112	; 0x70
 8005a60:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a64:	b003      	add	sp, #12
 8005a66:	4770      	bx	lr
 8005a68:	2000005c 	.word	0x2000005c
 8005a6c:	ffff0208 	.word	0xffff0208

08005a70 <memset>:
 8005a70:	4402      	add	r2, r0
 8005a72:	4603      	mov	r3, r0
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d100      	bne.n	8005a7a <memset+0xa>
 8005a78:	4770      	bx	lr
 8005a7a:	f803 1b01 	strb.w	r1, [r3], #1
 8005a7e:	e7f9      	b.n	8005a74 <memset+0x4>

08005a80 <__errno>:
 8005a80:	4b01      	ldr	r3, [pc, #4]	; (8005a88 <__errno+0x8>)
 8005a82:	6818      	ldr	r0, [r3, #0]
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop
 8005a88:	2000005c 	.word	0x2000005c

08005a8c <__libc_init_array>:
 8005a8c:	b570      	push	{r4, r5, r6, lr}
 8005a8e:	4d0d      	ldr	r5, [pc, #52]	; (8005ac4 <__libc_init_array+0x38>)
 8005a90:	4c0d      	ldr	r4, [pc, #52]	; (8005ac8 <__libc_init_array+0x3c>)
 8005a92:	1b64      	subs	r4, r4, r5
 8005a94:	10a4      	asrs	r4, r4, #2
 8005a96:	2600      	movs	r6, #0
 8005a98:	42a6      	cmp	r6, r4
 8005a9a:	d109      	bne.n	8005ab0 <__libc_init_array+0x24>
 8005a9c:	4d0b      	ldr	r5, [pc, #44]	; (8005acc <__libc_init_array+0x40>)
 8005a9e:	4c0c      	ldr	r4, [pc, #48]	; (8005ad0 <__libc_init_array+0x44>)
 8005aa0:	f000 fc6a 	bl	8006378 <_init>
 8005aa4:	1b64      	subs	r4, r4, r5
 8005aa6:	10a4      	asrs	r4, r4, #2
 8005aa8:	2600      	movs	r6, #0
 8005aaa:	42a6      	cmp	r6, r4
 8005aac:	d105      	bne.n	8005aba <__libc_init_array+0x2e>
 8005aae:	bd70      	pop	{r4, r5, r6, pc}
 8005ab0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ab4:	4798      	blx	r3
 8005ab6:	3601      	adds	r6, #1
 8005ab8:	e7ee      	b.n	8005a98 <__libc_init_array+0xc>
 8005aba:	f855 3b04 	ldr.w	r3, [r5], #4
 8005abe:	4798      	blx	r3
 8005ac0:	3601      	adds	r6, #1
 8005ac2:	e7f2      	b.n	8005aaa <__libc_init_array+0x1e>
 8005ac4:	080064bc 	.word	0x080064bc
 8005ac8:	080064bc 	.word	0x080064bc
 8005acc:	080064bc 	.word	0x080064bc
 8005ad0:	080064c0 	.word	0x080064c0

08005ad4 <__retarget_lock_acquire_recursive>:
 8005ad4:	4770      	bx	lr

08005ad6 <__retarget_lock_release_recursive>:
 8005ad6:	4770      	bx	lr

08005ad8 <_free_r>:
 8005ad8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005ada:	2900      	cmp	r1, #0
 8005adc:	d044      	beq.n	8005b68 <_free_r+0x90>
 8005ade:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ae2:	9001      	str	r0, [sp, #4]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	f1a1 0404 	sub.w	r4, r1, #4
 8005aea:	bfb8      	it	lt
 8005aec:	18e4      	addlt	r4, r4, r3
 8005aee:	f000 f8df 	bl	8005cb0 <__malloc_lock>
 8005af2:	4a1e      	ldr	r2, [pc, #120]	; (8005b6c <_free_r+0x94>)
 8005af4:	9801      	ldr	r0, [sp, #4]
 8005af6:	6813      	ldr	r3, [r2, #0]
 8005af8:	b933      	cbnz	r3, 8005b08 <_free_r+0x30>
 8005afa:	6063      	str	r3, [r4, #4]
 8005afc:	6014      	str	r4, [r2, #0]
 8005afe:	b003      	add	sp, #12
 8005b00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b04:	f000 b8da 	b.w	8005cbc <__malloc_unlock>
 8005b08:	42a3      	cmp	r3, r4
 8005b0a:	d908      	bls.n	8005b1e <_free_r+0x46>
 8005b0c:	6825      	ldr	r5, [r4, #0]
 8005b0e:	1961      	adds	r1, r4, r5
 8005b10:	428b      	cmp	r3, r1
 8005b12:	bf01      	itttt	eq
 8005b14:	6819      	ldreq	r1, [r3, #0]
 8005b16:	685b      	ldreq	r3, [r3, #4]
 8005b18:	1949      	addeq	r1, r1, r5
 8005b1a:	6021      	streq	r1, [r4, #0]
 8005b1c:	e7ed      	b.n	8005afa <_free_r+0x22>
 8005b1e:	461a      	mov	r2, r3
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	b10b      	cbz	r3, 8005b28 <_free_r+0x50>
 8005b24:	42a3      	cmp	r3, r4
 8005b26:	d9fa      	bls.n	8005b1e <_free_r+0x46>
 8005b28:	6811      	ldr	r1, [r2, #0]
 8005b2a:	1855      	adds	r5, r2, r1
 8005b2c:	42a5      	cmp	r5, r4
 8005b2e:	d10b      	bne.n	8005b48 <_free_r+0x70>
 8005b30:	6824      	ldr	r4, [r4, #0]
 8005b32:	4421      	add	r1, r4
 8005b34:	1854      	adds	r4, r2, r1
 8005b36:	42a3      	cmp	r3, r4
 8005b38:	6011      	str	r1, [r2, #0]
 8005b3a:	d1e0      	bne.n	8005afe <_free_r+0x26>
 8005b3c:	681c      	ldr	r4, [r3, #0]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	6053      	str	r3, [r2, #4]
 8005b42:	440c      	add	r4, r1
 8005b44:	6014      	str	r4, [r2, #0]
 8005b46:	e7da      	b.n	8005afe <_free_r+0x26>
 8005b48:	d902      	bls.n	8005b50 <_free_r+0x78>
 8005b4a:	230c      	movs	r3, #12
 8005b4c:	6003      	str	r3, [r0, #0]
 8005b4e:	e7d6      	b.n	8005afe <_free_r+0x26>
 8005b50:	6825      	ldr	r5, [r4, #0]
 8005b52:	1961      	adds	r1, r4, r5
 8005b54:	428b      	cmp	r3, r1
 8005b56:	bf04      	itt	eq
 8005b58:	6819      	ldreq	r1, [r3, #0]
 8005b5a:	685b      	ldreq	r3, [r3, #4]
 8005b5c:	6063      	str	r3, [r4, #4]
 8005b5e:	bf04      	itt	eq
 8005b60:	1949      	addeq	r1, r1, r5
 8005b62:	6021      	streq	r1, [r4, #0]
 8005b64:	6054      	str	r4, [r2, #4]
 8005b66:	e7ca      	b.n	8005afe <_free_r+0x26>
 8005b68:	b003      	add	sp, #12
 8005b6a:	bd30      	pop	{r4, r5, pc}
 8005b6c:	20000468 	.word	0x20000468

08005b70 <sbrk_aligned>:
 8005b70:	b570      	push	{r4, r5, r6, lr}
 8005b72:	4e0e      	ldr	r6, [pc, #56]	; (8005bac <sbrk_aligned+0x3c>)
 8005b74:	460c      	mov	r4, r1
 8005b76:	6831      	ldr	r1, [r6, #0]
 8005b78:	4605      	mov	r5, r0
 8005b7a:	b911      	cbnz	r1, 8005b82 <sbrk_aligned+0x12>
 8005b7c:	f000 fba6 	bl	80062cc <_sbrk_r>
 8005b80:	6030      	str	r0, [r6, #0]
 8005b82:	4621      	mov	r1, r4
 8005b84:	4628      	mov	r0, r5
 8005b86:	f000 fba1 	bl	80062cc <_sbrk_r>
 8005b8a:	1c43      	adds	r3, r0, #1
 8005b8c:	d00a      	beq.n	8005ba4 <sbrk_aligned+0x34>
 8005b8e:	1cc4      	adds	r4, r0, #3
 8005b90:	f024 0403 	bic.w	r4, r4, #3
 8005b94:	42a0      	cmp	r0, r4
 8005b96:	d007      	beq.n	8005ba8 <sbrk_aligned+0x38>
 8005b98:	1a21      	subs	r1, r4, r0
 8005b9a:	4628      	mov	r0, r5
 8005b9c:	f000 fb96 	bl	80062cc <_sbrk_r>
 8005ba0:	3001      	adds	r0, #1
 8005ba2:	d101      	bne.n	8005ba8 <sbrk_aligned+0x38>
 8005ba4:	f04f 34ff 	mov.w	r4, #4294967295
 8005ba8:	4620      	mov	r0, r4
 8005baa:	bd70      	pop	{r4, r5, r6, pc}
 8005bac:	2000046c 	.word	0x2000046c

08005bb0 <_malloc_r>:
 8005bb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bb4:	1ccd      	adds	r5, r1, #3
 8005bb6:	f025 0503 	bic.w	r5, r5, #3
 8005bba:	3508      	adds	r5, #8
 8005bbc:	2d0c      	cmp	r5, #12
 8005bbe:	bf38      	it	cc
 8005bc0:	250c      	movcc	r5, #12
 8005bc2:	2d00      	cmp	r5, #0
 8005bc4:	4607      	mov	r7, r0
 8005bc6:	db01      	blt.n	8005bcc <_malloc_r+0x1c>
 8005bc8:	42a9      	cmp	r1, r5
 8005bca:	d905      	bls.n	8005bd8 <_malloc_r+0x28>
 8005bcc:	230c      	movs	r3, #12
 8005bce:	603b      	str	r3, [r7, #0]
 8005bd0:	2600      	movs	r6, #0
 8005bd2:	4630      	mov	r0, r6
 8005bd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bd8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005cac <_malloc_r+0xfc>
 8005bdc:	f000 f868 	bl	8005cb0 <__malloc_lock>
 8005be0:	f8d8 3000 	ldr.w	r3, [r8]
 8005be4:	461c      	mov	r4, r3
 8005be6:	bb5c      	cbnz	r4, 8005c40 <_malloc_r+0x90>
 8005be8:	4629      	mov	r1, r5
 8005bea:	4638      	mov	r0, r7
 8005bec:	f7ff ffc0 	bl	8005b70 <sbrk_aligned>
 8005bf0:	1c43      	adds	r3, r0, #1
 8005bf2:	4604      	mov	r4, r0
 8005bf4:	d155      	bne.n	8005ca2 <_malloc_r+0xf2>
 8005bf6:	f8d8 4000 	ldr.w	r4, [r8]
 8005bfa:	4626      	mov	r6, r4
 8005bfc:	2e00      	cmp	r6, #0
 8005bfe:	d145      	bne.n	8005c8c <_malloc_r+0xdc>
 8005c00:	2c00      	cmp	r4, #0
 8005c02:	d048      	beq.n	8005c96 <_malloc_r+0xe6>
 8005c04:	6823      	ldr	r3, [r4, #0]
 8005c06:	4631      	mov	r1, r6
 8005c08:	4638      	mov	r0, r7
 8005c0a:	eb04 0903 	add.w	r9, r4, r3
 8005c0e:	f000 fb5d 	bl	80062cc <_sbrk_r>
 8005c12:	4581      	cmp	r9, r0
 8005c14:	d13f      	bne.n	8005c96 <_malloc_r+0xe6>
 8005c16:	6821      	ldr	r1, [r4, #0]
 8005c18:	1a6d      	subs	r5, r5, r1
 8005c1a:	4629      	mov	r1, r5
 8005c1c:	4638      	mov	r0, r7
 8005c1e:	f7ff ffa7 	bl	8005b70 <sbrk_aligned>
 8005c22:	3001      	adds	r0, #1
 8005c24:	d037      	beq.n	8005c96 <_malloc_r+0xe6>
 8005c26:	6823      	ldr	r3, [r4, #0]
 8005c28:	442b      	add	r3, r5
 8005c2a:	6023      	str	r3, [r4, #0]
 8005c2c:	f8d8 3000 	ldr.w	r3, [r8]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d038      	beq.n	8005ca6 <_malloc_r+0xf6>
 8005c34:	685a      	ldr	r2, [r3, #4]
 8005c36:	42a2      	cmp	r2, r4
 8005c38:	d12b      	bne.n	8005c92 <_malloc_r+0xe2>
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	605a      	str	r2, [r3, #4]
 8005c3e:	e00f      	b.n	8005c60 <_malloc_r+0xb0>
 8005c40:	6822      	ldr	r2, [r4, #0]
 8005c42:	1b52      	subs	r2, r2, r5
 8005c44:	d41f      	bmi.n	8005c86 <_malloc_r+0xd6>
 8005c46:	2a0b      	cmp	r2, #11
 8005c48:	d917      	bls.n	8005c7a <_malloc_r+0xca>
 8005c4a:	1961      	adds	r1, r4, r5
 8005c4c:	42a3      	cmp	r3, r4
 8005c4e:	6025      	str	r5, [r4, #0]
 8005c50:	bf18      	it	ne
 8005c52:	6059      	strne	r1, [r3, #4]
 8005c54:	6863      	ldr	r3, [r4, #4]
 8005c56:	bf08      	it	eq
 8005c58:	f8c8 1000 	streq.w	r1, [r8]
 8005c5c:	5162      	str	r2, [r4, r5]
 8005c5e:	604b      	str	r3, [r1, #4]
 8005c60:	4638      	mov	r0, r7
 8005c62:	f104 060b 	add.w	r6, r4, #11
 8005c66:	f000 f829 	bl	8005cbc <__malloc_unlock>
 8005c6a:	f026 0607 	bic.w	r6, r6, #7
 8005c6e:	1d23      	adds	r3, r4, #4
 8005c70:	1af2      	subs	r2, r6, r3
 8005c72:	d0ae      	beq.n	8005bd2 <_malloc_r+0x22>
 8005c74:	1b9b      	subs	r3, r3, r6
 8005c76:	50a3      	str	r3, [r4, r2]
 8005c78:	e7ab      	b.n	8005bd2 <_malloc_r+0x22>
 8005c7a:	42a3      	cmp	r3, r4
 8005c7c:	6862      	ldr	r2, [r4, #4]
 8005c7e:	d1dd      	bne.n	8005c3c <_malloc_r+0x8c>
 8005c80:	f8c8 2000 	str.w	r2, [r8]
 8005c84:	e7ec      	b.n	8005c60 <_malloc_r+0xb0>
 8005c86:	4623      	mov	r3, r4
 8005c88:	6864      	ldr	r4, [r4, #4]
 8005c8a:	e7ac      	b.n	8005be6 <_malloc_r+0x36>
 8005c8c:	4634      	mov	r4, r6
 8005c8e:	6876      	ldr	r6, [r6, #4]
 8005c90:	e7b4      	b.n	8005bfc <_malloc_r+0x4c>
 8005c92:	4613      	mov	r3, r2
 8005c94:	e7cc      	b.n	8005c30 <_malloc_r+0x80>
 8005c96:	230c      	movs	r3, #12
 8005c98:	603b      	str	r3, [r7, #0]
 8005c9a:	4638      	mov	r0, r7
 8005c9c:	f000 f80e 	bl	8005cbc <__malloc_unlock>
 8005ca0:	e797      	b.n	8005bd2 <_malloc_r+0x22>
 8005ca2:	6025      	str	r5, [r4, #0]
 8005ca4:	e7dc      	b.n	8005c60 <_malloc_r+0xb0>
 8005ca6:	605b      	str	r3, [r3, #4]
 8005ca8:	deff      	udf	#255	; 0xff
 8005caa:	bf00      	nop
 8005cac:	20000468 	.word	0x20000468

08005cb0 <__malloc_lock>:
 8005cb0:	4801      	ldr	r0, [pc, #4]	; (8005cb8 <__malloc_lock+0x8>)
 8005cb2:	f7ff bf0f 	b.w	8005ad4 <__retarget_lock_acquire_recursive>
 8005cb6:	bf00      	nop
 8005cb8:	20000464 	.word	0x20000464

08005cbc <__malloc_unlock>:
 8005cbc:	4801      	ldr	r0, [pc, #4]	; (8005cc4 <__malloc_unlock+0x8>)
 8005cbe:	f7ff bf0a 	b.w	8005ad6 <__retarget_lock_release_recursive>
 8005cc2:	bf00      	nop
 8005cc4:	20000464 	.word	0x20000464

08005cc8 <__ssputs_r>:
 8005cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ccc:	688e      	ldr	r6, [r1, #8]
 8005cce:	461f      	mov	r7, r3
 8005cd0:	42be      	cmp	r6, r7
 8005cd2:	680b      	ldr	r3, [r1, #0]
 8005cd4:	4682      	mov	sl, r0
 8005cd6:	460c      	mov	r4, r1
 8005cd8:	4690      	mov	r8, r2
 8005cda:	d82c      	bhi.n	8005d36 <__ssputs_r+0x6e>
 8005cdc:	898a      	ldrh	r2, [r1, #12]
 8005cde:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005ce2:	d026      	beq.n	8005d32 <__ssputs_r+0x6a>
 8005ce4:	6965      	ldr	r5, [r4, #20]
 8005ce6:	6909      	ldr	r1, [r1, #16]
 8005ce8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005cec:	eba3 0901 	sub.w	r9, r3, r1
 8005cf0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005cf4:	1c7b      	adds	r3, r7, #1
 8005cf6:	444b      	add	r3, r9
 8005cf8:	106d      	asrs	r5, r5, #1
 8005cfa:	429d      	cmp	r5, r3
 8005cfc:	bf38      	it	cc
 8005cfe:	461d      	movcc	r5, r3
 8005d00:	0553      	lsls	r3, r2, #21
 8005d02:	d527      	bpl.n	8005d54 <__ssputs_r+0x8c>
 8005d04:	4629      	mov	r1, r5
 8005d06:	f7ff ff53 	bl	8005bb0 <_malloc_r>
 8005d0a:	4606      	mov	r6, r0
 8005d0c:	b360      	cbz	r0, 8005d68 <__ssputs_r+0xa0>
 8005d0e:	6921      	ldr	r1, [r4, #16]
 8005d10:	464a      	mov	r2, r9
 8005d12:	f000 faeb 	bl	80062ec <memcpy>
 8005d16:	89a3      	ldrh	r3, [r4, #12]
 8005d18:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d20:	81a3      	strh	r3, [r4, #12]
 8005d22:	6126      	str	r6, [r4, #16]
 8005d24:	6165      	str	r5, [r4, #20]
 8005d26:	444e      	add	r6, r9
 8005d28:	eba5 0509 	sub.w	r5, r5, r9
 8005d2c:	6026      	str	r6, [r4, #0]
 8005d2e:	60a5      	str	r5, [r4, #8]
 8005d30:	463e      	mov	r6, r7
 8005d32:	42be      	cmp	r6, r7
 8005d34:	d900      	bls.n	8005d38 <__ssputs_r+0x70>
 8005d36:	463e      	mov	r6, r7
 8005d38:	6820      	ldr	r0, [r4, #0]
 8005d3a:	4632      	mov	r2, r6
 8005d3c:	4641      	mov	r1, r8
 8005d3e:	f000 faab 	bl	8006298 <memmove>
 8005d42:	68a3      	ldr	r3, [r4, #8]
 8005d44:	1b9b      	subs	r3, r3, r6
 8005d46:	60a3      	str	r3, [r4, #8]
 8005d48:	6823      	ldr	r3, [r4, #0]
 8005d4a:	4433      	add	r3, r6
 8005d4c:	6023      	str	r3, [r4, #0]
 8005d4e:	2000      	movs	r0, #0
 8005d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d54:	462a      	mov	r2, r5
 8005d56:	f000 fad7 	bl	8006308 <_realloc_r>
 8005d5a:	4606      	mov	r6, r0
 8005d5c:	2800      	cmp	r0, #0
 8005d5e:	d1e0      	bne.n	8005d22 <__ssputs_r+0x5a>
 8005d60:	6921      	ldr	r1, [r4, #16]
 8005d62:	4650      	mov	r0, sl
 8005d64:	f7ff feb8 	bl	8005ad8 <_free_r>
 8005d68:	230c      	movs	r3, #12
 8005d6a:	f8ca 3000 	str.w	r3, [sl]
 8005d6e:	89a3      	ldrh	r3, [r4, #12]
 8005d70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d74:	81a3      	strh	r3, [r4, #12]
 8005d76:	f04f 30ff 	mov.w	r0, #4294967295
 8005d7a:	e7e9      	b.n	8005d50 <__ssputs_r+0x88>

08005d7c <_svfiprintf_r>:
 8005d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d80:	4698      	mov	r8, r3
 8005d82:	898b      	ldrh	r3, [r1, #12]
 8005d84:	061b      	lsls	r3, r3, #24
 8005d86:	b09d      	sub	sp, #116	; 0x74
 8005d88:	4607      	mov	r7, r0
 8005d8a:	460d      	mov	r5, r1
 8005d8c:	4614      	mov	r4, r2
 8005d8e:	d50e      	bpl.n	8005dae <_svfiprintf_r+0x32>
 8005d90:	690b      	ldr	r3, [r1, #16]
 8005d92:	b963      	cbnz	r3, 8005dae <_svfiprintf_r+0x32>
 8005d94:	2140      	movs	r1, #64	; 0x40
 8005d96:	f7ff ff0b 	bl	8005bb0 <_malloc_r>
 8005d9a:	6028      	str	r0, [r5, #0]
 8005d9c:	6128      	str	r0, [r5, #16]
 8005d9e:	b920      	cbnz	r0, 8005daa <_svfiprintf_r+0x2e>
 8005da0:	230c      	movs	r3, #12
 8005da2:	603b      	str	r3, [r7, #0]
 8005da4:	f04f 30ff 	mov.w	r0, #4294967295
 8005da8:	e0d0      	b.n	8005f4c <_svfiprintf_r+0x1d0>
 8005daa:	2340      	movs	r3, #64	; 0x40
 8005dac:	616b      	str	r3, [r5, #20]
 8005dae:	2300      	movs	r3, #0
 8005db0:	9309      	str	r3, [sp, #36]	; 0x24
 8005db2:	2320      	movs	r3, #32
 8005db4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005db8:	f8cd 800c 	str.w	r8, [sp, #12]
 8005dbc:	2330      	movs	r3, #48	; 0x30
 8005dbe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005f64 <_svfiprintf_r+0x1e8>
 8005dc2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005dc6:	f04f 0901 	mov.w	r9, #1
 8005dca:	4623      	mov	r3, r4
 8005dcc:	469a      	mov	sl, r3
 8005dce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005dd2:	b10a      	cbz	r2, 8005dd8 <_svfiprintf_r+0x5c>
 8005dd4:	2a25      	cmp	r2, #37	; 0x25
 8005dd6:	d1f9      	bne.n	8005dcc <_svfiprintf_r+0x50>
 8005dd8:	ebba 0b04 	subs.w	fp, sl, r4
 8005ddc:	d00b      	beq.n	8005df6 <_svfiprintf_r+0x7a>
 8005dde:	465b      	mov	r3, fp
 8005de0:	4622      	mov	r2, r4
 8005de2:	4629      	mov	r1, r5
 8005de4:	4638      	mov	r0, r7
 8005de6:	f7ff ff6f 	bl	8005cc8 <__ssputs_r>
 8005dea:	3001      	adds	r0, #1
 8005dec:	f000 80a9 	beq.w	8005f42 <_svfiprintf_r+0x1c6>
 8005df0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005df2:	445a      	add	r2, fp
 8005df4:	9209      	str	r2, [sp, #36]	; 0x24
 8005df6:	f89a 3000 	ldrb.w	r3, [sl]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	f000 80a1 	beq.w	8005f42 <_svfiprintf_r+0x1c6>
 8005e00:	2300      	movs	r3, #0
 8005e02:	f04f 32ff 	mov.w	r2, #4294967295
 8005e06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e0a:	f10a 0a01 	add.w	sl, sl, #1
 8005e0e:	9304      	str	r3, [sp, #16]
 8005e10:	9307      	str	r3, [sp, #28]
 8005e12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e16:	931a      	str	r3, [sp, #104]	; 0x68
 8005e18:	4654      	mov	r4, sl
 8005e1a:	2205      	movs	r2, #5
 8005e1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e20:	4850      	ldr	r0, [pc, #320]	; (8005f64 <_svfiprintf_r+0x1e8>)
 8005e22:	f7fa f9f5 	bl	8000210 <memchr>
 8005e26:	9a04      	ldr	r2, [sp, #16]
 8005e28:	b9d8      	cbnz	r0, 8005e62 <_svfiprintf_r+0xe6>
 8005e2a:	06d0      	lsls	r0, r2, #27
 8005e2c:	bf44      	itt	mi
 8005e2e:	2320      	movmi	r3, #32
 8005e30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e34:	0711      	lsls	r1, r2, #28
 8005e36:	bf44      	itt	mi
 8005e38:	232b      	movmi	r3, #43	; 0x2b
 8005e3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e3e:	f89a 3000 	ldrb.w	r3, [sl]
 8005e42:	2b2a      	cmp	r3, #42	; 0x2a
 8005e44:	d015      	beq.n	8005e72 <_svfiprintf_r+0xf6>
 8005e46:	9a07      	ldr	r2, [sp, #28]
 8005e48:	4654      	mov	r4, sl
 8005e4a:	2000      	movs	r0, #0
 8005e4c:	f04f 0c0a 	mov.w	ip, #10
 8005e50:	4621      	mov	r1, r4
 8005e52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e56:	3b30      	subs	r3, #48	; 0x30
 8005e58:	2b09      	cmp	r3, #9
 8005e5a:	d94d      	bls.n	8005ef8 <_svfiprintf_r+0x17c>
 8005e5c:	b1b0      	cbz	r0, 8005e8c <_svfiprintf_r+0x110>
 8005e5e:	9207      	str	r2, [sp, #28]
 8005e60:	e014      	b.n	8005e8c <_svfiprintf_r+0x110>
 8005e62:	eba0 0308 	sub.w	r3, r0, r8
 8005e66:	fa09 f303 	lsl.w	r3, r9, r3
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	9304      	str	r3, [sp, #16]
 8005e6e:	46a2      	mov	sl, r4
 8005e70:	e7d2      	b.n	8005e18 <_svfiprintf_r+0x9c>
 8005e72:	9b03      	ldr	r3, [sp, #12]
 8005e74:	1d19      	adds	r1, r3, #4
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	9103      	str	r1, [sp, #12]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	bfbb      	ittet	lt
 8005e7e:	425b      	neglt	r3, r3
 8005e80:	f042 0202 	orrlt.w	r2, r2, #2
 8005e84:	9307      	strge	r3, [sp, #28]
 8005e86:	9307      	strlt	r3, [sp, #28]
 8005e88:	bfb8      	it	lt
 8005e8a:	9204      	strlt	r2, [sp, #16]
 8005e8c:	7823      	ldrb	r3, [r4, #0]
 8005e8e:	2b2e      	cmp	r3, #46	; 0x2e
 8005e90:	d10c      	bne.n	8005eac <_svfiprintf_r+0x130>
 8005e92:	7863      	ldrb	r3, [r4, #1]
 8005e94:	2b2a      	cmp	r3, #42	; 0x2a
 8005e96:	d134      	bne.n	8005f02 <_svfiprintf_r+0x186>
 8005e98:	9b03      	ldr	r3, [sp, #12]
 8005e9a:	1d1a      	adds	r2, r3, #4
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	9203      	str	r2, [sp, #12]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	bfb8      	it	lt
 8005ea4:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ea8:	3402      	adds	r4, #2
 8005eaa:	9305      	str	r3, [sp, #20]
 8005eac:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005f74 <_svfiprintf_r+0x1f8>
 8005eb0:	7821      	ldrb	r1, [r4, #0]
 8005eb2:	2203      	movs	r2, #3
 8005eb4:	4650      	mov	r0, sl
 8005eb6:	f7fa f9ab 	bl	8000210 <memchr>
 8005eba:	b138      	cbz	r0, 8005ecc <_svfiprintf_r+0x150>
 8005ebc:	9b04      	ldr	r3, [sp, #16]
 8005ebe:	eba0 000a 	sub.w	r0, r0, sl
 8005ec2:	2240      	movs	r2, #64	; 0x40
 8005ec4:	4082      	lsls	r2, r0
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	3401      	adds	r4, #1
 8005eca:	9304      	str	r3, [sp, #16]
 8005ecc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ed0:	4825      	ldr	r0, [pc, #148]	; (8005f68 <_svfiprintf_r+0x1ec>)
 8005ed2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ed6:	2206      	movs	r2, #6
 8005ed8:	f7fa f99a 	bl	8000210 <memchr>
 8005edc:	2800      	cmp	r0, #0
 8005ede:	d038      	beq.n	8005f52 <_svfiprintf_r+0x1d6>
 8005ee0:	4b22      	ldr	r3, [pc, #136]	; (8005f6c <_svfiprintf_r+0x1f0>)
 8005ee2:	bb1b      	cbnz	r3, 8005f2c <_svfiprintf_r+0x1b0>
 8005ee4:	9b03      	ldr	r3, [sp, #12]
 8005ee6:	3307      	adds	r3, #7
 8005ee8:	f023 0307 	bic.w	r3, r3, #7
 8005eec:	3308      	adds	r3, #8
 8005eee:	9303      	str	r3, [sp, #12]
 8005ef0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ef2:	4433      	add	r3, r6
 8005ef4:	9309      	str	r3, [sp, #36]	; 0x24
 8005ef6:	e768      	b.n	8005dca <_svfiprintf_r+0x4e>
 8005ef8:	fb0c 3202 	mla	r2, ip, r2, r3
 8005efc:	460c      	mov	r4, r1
 8005efe:	2001      	movs	r0, #1
 8005f00:	e7a6      	b.n	8005e50 <_svfiprintf_r+0xd4>
 8005f02:	2300      	movs	r3, #0
 8005f04:	3401      	adds	r4, #1
 8005f06:	9305      	str	r3, [sp, #20]
 8005f08:	4619      	mov	r1, r3
 8005f0a:	f04f 0c0a 	mov.w	ip, #10
 8005f0e:	4620      	mov	r0, r4
 8005f10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f14:	3a30      	subs	r2, #48	; 0x30
 8005f16:	2a09      	cmp	r2, #9
 8005f18:	d903      	bls.n	8005f22 <_svfiprintf_r+0x1a6>
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d0c6      	beq.n	8005eac <_svfiprintf_r+0x130>
 8005f1e:	9105      	str	r1, [sp, #20]
 8005f20:	e7c4      	b.n	8005eac <_svfiprintf_r+0x130>
 8005f22:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f26:	4604      	mov	r4, r0
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e7f0      	b.n	8005f0e <_svfiprintf_r+0x192>
 8005f2c:	ab03      	add	r3, sp, #12
 8005f2e:	9300      	str	r3, [sp, #0]
 8005f30:	462a      	mov	r2, r5
 8005f32:	4b0f      	ldr	r3, [pc, #60]	; (8005f70 <_svfiprintf_r+0x1f4>)
 8005f34:	a904      	add	r1, sp, #16
 8005f36:	4638      	mov	r0, r7
 8005f38:	f3af 8000 	nop.w
 8005f3c:	1c42      	adds	r2, r0, #1
 8005f3e:	4606      	mov	r6, r0
 8005f40:	d1d6      	bne.n	8005ef0 <_svfiprintf_r+0x174>
 8005f42:	89ab      	ldrh	r3, [r5, #12]
 8005f44:	065b      	lsls	r3, r3, #25
 8005f46:	f53f af2d 	bmi.w	8005da4 <_svfiprintf_r+0x28>
 8005f4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f4c:	b01d      	add	sp, #116	; 0x74
 8005f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f52:	ab03      	add	r3, sp, #12
 8005f54:	9300      	str	r3, [sp, #0]
 8005f56:	462a      	mov	r2, r5
 8005f58:	4b05      	ldr	r3, [pc, #20]	; (8005f70 <_svfiprintf_r+0x1f4>)
 8005f5a:	a904      	add	r1, sp, #16
 8005f5c:	4638      	mov	r0, r7
 8005f5e:	f000 f879 	bl	8006054 <_printf_i>
 8005f62:	e7eb      	b.n	8005f3c <_svfiprintf_r+0x1c0>
 8005f64:	08006480 	.word	0x08006480
 8005f68:	0800648a 	.word	0x0800648a
 8005f6c:	00000000 	.word	0x00000000
 8005f70:	08005cc9 	.word	0x08005cc9
 8005f74:	08006486 	.word	0x08006486

08005f78 <_printf_common>:
 8005f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f7c:	4616      	mov	r6, r2
 8005f7e:	4699      	mov	r9, r3
 8005f80:	688a      	ldr	r2, [r1, #8]
 8005f82:	690b      	ldr	r3, [r1, #16]
 8005f84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	bfb8      	it	lt
 8005f8c:	4613      	movlt	r3, r2
 8005f8e:	6033      	str	r3, [r6, #0]
 8005f90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f94:	4607      	mov	r7, r0
 8005f96:	460c      	mov	r4, r1
 8005f98:	b10a      	cbz	r2, 8005f9e <_printf_common+0x26>
 8005f9a:	3301      	adds	r3, #1
 8005f9c:	6033      	str	r3, [r6, #0]
 8005f9e:	6823      	ldr	r3, [r4, #0]
 8005fa0:	0699      	lsls	r1, r3, #26
 8005fa2:	bf42      	ittt	mi
 8005fa4:	6833      	ldrmi	r3, [r6, #0]
 8005fa6:	3302      	addmi	r3, #2
 8005fa8:	6033      	strmi	r3, [r6, #0]
 8005faa:	6825      	ldr	r5, [r4, #0]
 8005fac:	f015 0506 	ands.w	r5, r5, #6
 8005fb0:	d106      	bne.n	8005fc0 <_printf_common+0x48>
 8005fb2:	f104 0a19 	add.w	sl, r4, #25
 8005fb6:	68e3      	ldr	r3, [r4, #12]
 8005fb8:	6832      	ldr	r2, [r6, #0]
 8005fba:	1a9b      	subs	r3, r3, r2
 8005fbc:	42ab      	cmp	r3, r5
 8005fbe:	dc26      	bgt.n	800600e <_printf_common+0x96>
 8005fc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005fc4:	1e13      	subs	r3, r2, #0
 8005fc6:	6822      	ldr	r2, [r4, #0]
 8005fc8:	bf18      	it	ne
 8005fca:	2301      	movne	r3, #1
 8005fcc:	0692      	lsls	r2, r2, #26
 8005fce:	d42b      	bmi.n	8006028 <_printf_common+0xb0>
 8005fd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005fd4:	4649      	mov	r1, r9
 8005fd6:	4638      	mov	r0, r7
 8005fd8:	47c0      	blx	r8
 8005fda:	3001      	adds	r0, #1
 8005fdc:	d01e      	beq.n	800601c <_printf_common+0xa4>
 8005fde:	6823      	ldr	r3, [r4, #0]
 8005fe0:	6922      	ldr	r2, [r4, #16]
 8005fe2:	f003 0306 	and.w	r3, r3, #6
 8005fe6:	2b04      	cmp	r3, #4
 8005fe8:	bf02      	ittt	eq
 8005fea:	68e5      	ldreq	r5, [r4, #12]
 8005fec:	6833      	ldreq	r3, [r6, #0]
 8005fee:	1aed      	subeq	r5, r5, r3
 8005ff0:	68a3      	ldr	r3, [r4, #8]
 8005ff2:	bf0c      	ite	eq
 8005ff4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ff8:	2500      	movne	r5, #0
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	bfc4      	itt	gt
 8005ffe:	1a9b      	subgt	r3, r3, r2
 8006000:	18ed      	addgt	r5, r5, r3
 8006002:	2600      	movs	r6, #0
 8006004:	341a      	adds	r4, #26
 8006006:	42b5      	cmp	r5, r6
 8006008:	d11a      	bne.n	8006040 <_printf_common+0xc8>
 800600a:	2000      	movs	r0, #0
 800600c:	e008      	b.n	8006020 <_printf_common+0xa8>
 800600e:	2301      	movs	r3, #1
 8006010:	4652      	mov	r2, sl
 8006012:	4649      	mov	r1, r9
 8006014:	4638      	mov	r0, r7
 8006016:	47c0      	blx	r8
 8006018:	3001      	adds	r0, #1
 800601a:	d103      	bne.n	8006024 <_printf_common+0xac>
 800601c:	f04f 30ff 	mov.w	r0, #4294967295
 8006020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006024:	3501      	adds	r5, #1
 8006026:	e7c6      	b.n	8005fb6 <_printf_common+0x3e>
 8006028:	18e1      	adds	r1, r4, r3
 800602a:	1c5a      	adds	r2, r3, #1
 800602c:	2030      	movs	r0, #48	; 0x30
 800602e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006032:	4422      	add	r2, r4
 8006034:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006038:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800603c:	3302      	adds	r3, #2
 800603e:	e7c7      	b.n	8005fd0 <_printf_common+0x58>
 8006040:	2301      	movs	r3, #1
 8006042:	4622      	mov	r2, r4
 8006044:	4649      	mov	r1, r9
 8006046:	4638      	mov	r0, r7
 8006048:	47c0      	blx	r8
 800604a:	3001      	adds	r0, #1
 800604c:	d0e6      	beq.n	800601c <_printf_common+0xa4>
 800604e:	3601      	adds	r6, #1
 8006050:	e7d9      	b.n	8006006 <_printf_common+0x8e>
	...

08006054 <_printf_i>:
 8006054:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006058:	7e0f      	ldrb	r7, [r1, #24]
 800605a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800605c:	2f78      	cmp	r7, #120	; 0x78
 800605e:	4691      	mov	r9, r2
 8006060:	4680      	mov	r8, r0
 8006062:	460c      	mov	r4, r1
 8006064:	469a      	mov	sl, r3
 8006066:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800606a:	d807      	bhi.n	800607c <_printf_i+0x28>
 800606c:	2f62      	cmp	r7, #98	; 0x62
 800606e:	d80a      	bhi.n	8006086 <_printf_i+0x32>
 8006070:	2f00      	cmp	r7, #0
 8006072:	f000 80d4 	beq.w	800621e <_printf_i+0x1ca>
 8006076:	2f58      	cmp	r7, #88	; 0x58
 8006078:	f000 80c0 	beq.w	80061fc <_printf_i+0x1a8>
 800607c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006080:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006084:	e03a      	b.n	80060fc <_printf_i+0xa8>
 8006086:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800608a:	2b15      	cmp	r3, #21
 800608c:	d8f6      	bhi.n	800607c <_printf_i+0x28>
 800608e:	a101      	add	r1, pc, #4	; (adr r1, 8006094 <_printf_i+0x40>)
 8006090:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006094:	080060ed 	.word	0x080060ed
 8006098:	08006101 	.word	0x08006101
 800609c:	0800607d 	.word	0x0800607d
 80060a0:	0800607d 	.word	0x0800607d
 80060a4:	0800607d 	.word	0x0800607d
 80060a8:	0800607d 	.word	0x0800607d
 80060ac:	08006101 	.word	0x08006101
 80060b0:	0800607d 	.word	0x0800607d
 80060b4:	0800607d 	.word	0x0800607d
 80060b8:	0800607d 	.word	0x0800607d
 80060bc:	0800607d 	.word	0x0800607d
 80060c0:	08006205 	.word	0x08006205
 80060c4:	0800612d 	.word	0x0800612d
 80060c8:	080061bf 	.word	0x080061bf
 80060cc:	0800607d 	.word	0x0800607d
 80060d0:	0800607d 	.word	0x0800607d
 80060d4:	08006227 	.word	0x08006227
 80060d8:	0800607d 	.word	0x0800607d
 80060dc:	0800612d 	.word	0x0800612d
 80060e0:	0800607d 	.word	0x0800607d
 80060e4:	0800607d 	.word	0x0800607d
 80060e8:	080061c7 	.word	0x080061c7
 80060ec:	682b      	ldr	r3, [r5, #0]
 80060ee:	1d1a      	adds	r2, r3, #4
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	602a      	str	r2, [r5, #0]
 80060f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80060fc:	2301      	movs	r3, #1
 80060fe:	e09f      	b.n	8006240 <_printf_i+0x1ec>
 8006100:	6820      	ldr	r0, [r4, #0]
 8006102:	682b      	ldr	r3, [r5, #0]
 8006104:	0607      	lsls	r7, r0, #24
 8006106:	f103 0104 	add.w	r1, r3, #4
 800610a:	6029      	str	r1, [r5, #0]
 800610c:	d501      	bpl.n	8006112 <_printf_i+0xbe>
 800610e:	681e      	ldr	r6, [r3, #0]
 8006110:	e003      	b.n	800611a <_printf_i+0xc6>
 8006112:	0646      	lsls	r6, r0, #25
 8006114:	d5fb      	bpl.n	800610e <_printf_i+0xba>
 8006116:	f9b3 6000 	ldrsh.w	r6, [r3]
 800611a:	2e00      	cmp	r6, #0
 800611c:	da03      	bge.n	8006126 <_printf_i+0xd2>
 800611e:	232d      	movs	r3, #45	; 0x2d
 8006120:	4276      	negs	r6, r6
 8006122:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006126:	485a      	ldr	r0, [pc, #360]	; (8006290 <_printf_i+0x23c>)
 8006128:	230a      	movs	r3, #10
 800612a:	e012      	b.n	8006152 <_printf_i+0xfe>
 800612c:	682b      	ldr	r3, [r5, #0]
 800612e:	6820      	ldr	r0, [r4, #0]
 8006130:	1d19      	adds	r1, r3, #4
 8006132:	6029      	str	r1, [r5, #0]
 8006134:	0605      	lsls	r5, r0, #24
 8006136:	d501      	bpl.n	800613c <_printf_i+0xe8>
 8006138:	681e      	ldr	r6, [r3, #0]
 800613a:	e002      	b.n	8006142 <_printf_i+0xee>
 800613c:	0641      	lsls	r1, r0, #25
 800613e:	d5fb      	bpl.n	8006138 <_printf_i+0xe4>
 8006140:	881e      	ldrh	r6, [r3, #0]
 8006142:	4853      	ldr	r0, [pc, #332]	; (8006290 <_printf_i+0x23c>)
 8006144:	2f6f      	cmp	r7, #111	; 0x6f
 8006146:	bf0c      	ite	eq
 8006148:	2308      	moveq	r3, #8
 800614a:	230a      	movne	r3, #10
 800614c:	2100      	movs	r1, #0
 800614e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006152:	6865      	ldr	r5, [r4, #4]
 8006154:	60a5      	str	r5, [r4, #8]
 8006156:	2d00      	cmp	r5, #0
 8006158:	bfa2      	ittt	ge
 800615a:	6821      	ldrge	r1, [r4, #0]
 800615c:	f021 0104 	bicge.w	r1, r1, #4
 8006160:	6021      	strge	r1, [r4, #0]
 8006162:	b90e      	cbnz	r6, 8006168 <_printf_i+0x114>
 8006164:	2d00      	cmp	r5, #0
 8006166:	d04b      	beq.n	8006200 <_printf_i+0x1ac>
 8006168:	4615      	mov	r5, r2
 800616a:	fbb6 f1f3 	udiv	r1, r6, r3
 800616e:	fb03 6711 	mls	r7, r3, r1, r6
 8006172:	5dc7      	ldrb	r7, [r0, r7]
 8006174:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006178:	4637      	mov	r7, r6
 800617a:	42bb      	cmp	r3, r7
 800617c:	460e      	mov	r6, r1
 800617e:	d9f4      	bls.n	800616a <_printf_i+0x116>
 8006180:	2b08      	cmp	r3, #8
 8006182:	d10b      	bne.n	800619c <_printf_i+0x148>
 8006184:	6823      	ldr	r3, [r4, #0]
 8006186:	07de      	lsls	r6, r3, #31
 8006188:	d508      	bpl.n	800619c <_printf_i+0x148>
 800618a:	6923      	ldr	r3, [r4, #16]
 800618c:	6861      	ldr	r1, [r4, #4]
 800618e:	4299      	cmp	r1, r3
 8006190:	bfde      	ittt	le
 8006192:	2330      	movle	r3, #48	; 0x30
 8006194:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006198:	f105 35ff 	addle.w	r5, r5, #4294967295
 800619c:	1b52      	subs	r2, r2, r5
 800619e:	6122      	str	r2, [r4, #16]
 80061a0:	f8cd a000 	str.w	sl, [sp]
 80061a4:	464b      	mov	r3, r9
 80061a6:	aa03      	add	r2, sp, #12
 80061a8:	4621      	mov	r1, r4
 80061aa:	4640      	mov	r0, r8
 80061ac:	f7ff fee4 	bl	8005f78 <_printf_common>
 80061b0:	3001      	adds	r0, #1
 80061b2:	d14a      	bne.n	800624a <_printf_i+0x1f6>
 80061b4:	f04f 30ff 	mov.w	r0, #4294967295
 80061b8:	b004      	add	sp, #16
 80061ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061be:	6823      	ldr	r3, [r4, #0]
 80061c0:	f043 0320 	orr.w	r3, r3, #32
 80061c4:	6023      	str	r3, [r4, #0]
 80061c6:	4833      	ldr	r0, [pc, #204]	; (8006294 <_printf_i+0x240>)
 80061c8:	2778      	movs	r7, #120	; 0x78
 80061ca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80061ce:	6823      	ldr	r3, [r4, #0]
 80061d0:	6829      	ldr	r1, [r5, #0]
 80061d2:	061f      	lsls	r7, r3, #24
 80061d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80061d8:	d402      	bmi.n	80061e0 <_printf_i+0x18c>
 80061da:	065f      	lsls	r7, r3, #25
 80061dc:	bf48      	it	mi
 80061de:	b2b6      	uxthmi	r6, r6
 80061e0:	07df      	lsls	r7, r3, #31
 80061e2:	bf48      	it	mi
 80061e4:	f043 0320 	orrmi.w	r3, r3, #32
 80061e8:	6029      	str	r1, [r5, #0]
 80061ea:	bf48      	it	mi
 80061ec:	6023      	strmi	r3, [r4, #0]
 80061ee:	b91e      	cbnz	r6, 80061f8 <_printf_i+0x1a4>
 80061f0:	6823      	ldr	r3, [r4, #0]
 80061f2:	f023 0320 	bic.w	r3, r3, #32
 80061f6:	6023      	str	r3, [r4, #0]
 80061f8:	2310      	movs	r3, #16
 80061fa:	e7a7      	b.n	800614c <_printf_i+0xf8>
 80061fc:	4824      	ldr	r0, [pc, #144]	; (8006290 <_printf_i+0x23c>)
 80061fe:	e7e4      	b.n	80061ca <_printf_i+0x176>
 8006200:	4615      	mov	r5, r2
 8006202:	e7bd      	b.n	8006180 <_printf_i+0x12c>
 8006204:	682b      	ldr	r3, [r5, #0]
 8006206:	6826      	ldr	r6, [r4, #0]
 8006208:	6961      	ldr	r1, [r4, #20]
 800620a:	1d18      	adds	r0, r3, #4
 800620c:	6028      	str	r0, [r5, #0]
 800620e:	0635      	lsls	r5, r6, #24
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	d501      	bpl.n	8006218 <_printf_i+0x1c4>
 8006214:	6019      	str	r1, [r3, #0]
 8006216:	e002      	b.n	800621e <_printf_i+0x1ca>
 8006218:	0670      	lsls	r0, r6, #25
 800621a:	d5fb      	bpl.n	8006214 <_printf_i+0x1c0>
 800621c:	8019      	strh	r1, [r3, #0]
 800621e:	2300      	movs	r3, #0
 8006220:	6123      	str	r3, [r4, #16]
 8006222:	4615      	mov	r5, r2
 8006224:	e7bc      	b.n	80061a0 <_printf_i+0x14c>
 8006226:	682b      	ldr	r3, [r5, #0]
 8006228:	1d1a      	adds	r2, r3, #4
 800622a:	602a      	str	r2, [r5, #0]
 800622c:	681d      	ldr	r5, [r3, #0]
 800622e:	6862      	ldr	r2, [r4, #4]
 8006230:	2100      	movs	r1, #0
 8006232:	4628      	mov	r0, r5
 8006234:	f7f9 ffec 	bl	8000210 <memchr>
 8006238:	b108      	cbz	r0, 800623e <_printf_i+0x1ea>
 800623a:	1b40      	subs	r0, r0, r5
 800623c:	6060      	str	r0, [r4, #4]
 800623e:	6863      	ldr	r3, [r4, #4]
 8006240:	6123      	str	r3, [r4, #16]
 8006242:	2300      	movs	r3, #0
 8006244:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006248:	e7aa      	b.n	80061a0 <_printf_i+0x14c>
 800624a:	6923      	ldr	r3, [r4, #16]
 800624c:	462a      	mov	r2, r5
 800624e:	4649      	mov	r1, r9
 8006250:	4640      	mov	r0, r8
 8006252:	47d0      	blx	sl
 8006254:	3001      	adds	r0, #1
 8006256:	d0ad      	beq.n	80061b4 <_printf_i+0x160>
 8006258:	6823      	ldr	r3, [r4, #0]
 800625a:	079b      	lsls	r3, r3, #30
 800625c:	d413      	bmi.n	8006286 <_printf_i+0x232>
 800625e:	68e0      	ldr	r0, [r4, #12]
 8006260:	9b03      	ldr	r3, [sp, #12]
 8006262:	4298      	cmp	r0, r3
 8006264:	bfb8      	it	lt
 8006266:	4618      	movlt	r0, r3
 8006268:	e7a6      	b.n	80061b8 <_printf_i+0x164>
 800626a:	2301      	movs	r3, #1
 800626c:	4632      	mov	r2, r6
 800626e:	4649      	mov	r1, r9
 8006270:	4640      	mov	r0, r8
 8006272:	47d0      	blx	sl
 8006274:	3001      	adds	r0, #1
 8006276:	d09d      	beq.n	80061b4 <_printf_i+0x160>
 8006278:	3501      	adds	r5, #1
 800627a:	68e3      	ldr	r3, [r4, #12]
 800627c:	9903      	ldr	r1, [sp, #12]
 800627e:	1a5b      	subs	r3, r3, r1
 8006280:	42ab      	cmp	r3, r5
 8006282:	dcf2      	bgt.n	800626a <_printf_i+0x216>
 8006284:	e7eb      	b.n	800625e <_printf_i+0x20a>
 8006286:	2500      	movs	r5, #0
 8006288:	f104 0619 	add.w	r6, r4, #25
 800628c:	e7f5      	b.n	800627a <_printf_i+0x226>
 800628e:	bf00      	nop
 8006290:	08006491 	.word	0x08006491
 8006294:	080064a2 	.word	0x080064a2

08006298 <memmove>:
 8006298:	4288      	cmp	r0, r1
 800629a:	b510      	push	{r4, lr}
 800629c:	eb01 0402 	add.w	r4, r1, r2
 80062a0:	d902      	bls.n	80062a8 <memmove+0x10>
 80062a2:	4284      	cmp	r4, r0
 80062a4:	4623      	mov	r3, r4
 80062a6:	d807      	bhi.n	80062b8 <memmove+0x20>
 80062a8:	1e43      	subs	r3, r0, #1
 80062aa:	42a1      	cmp	r1, r4
 80062ac:	d008      	beq.n	80062c0 <memmove+0x28>
 80062ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80062b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80062b6:	e7f8      	b.n	80062aa <memmove+0x12>
 80062b8:	4402      	add	r2, r0
 80062ba:	4601      	mov	r1, r0
 80062bc:	428a      	cmp	r2, r1
 80062be:	d100      	bne.n	80062c2 <memmove+0x2a>
 80062c0:	bd10      	pop	{r4, pc}
 80062c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80062c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80062ca:	e7f7      	b.n	80062bc <memmove+0x24>

080062cc <_sbrk_r>:
 80062cc:	b538      	push	{r3, r4, r5, lr}
 80062ce:	4d06      	ldr	r5, [pc, #24]	; (80062e8 <_sbrk_r+0x1c>)
 80062d0:	2300      	movs	r3, #0
 80062d2:	4604      	mov	r4, r0
 80062d4:	4608      	mov	r0, r1
 80062d6:	602b      	str	r3, [r5, #0]
 80062d8:	f7fb fa9a 	bl	8001810 <_sbrk>
 80062dc:	1c43      	adds	r3, r0, #1
 80062de:	d102      	bne.n	80062e6 <_sbrk_r+0x1a>
 80062e0:	682b      	ldr	r3, [r5, #0]
 80062e2:	b103      	cbz	r3, 80062e6 <_sbrk_r+0x1a>
 80062e4:	6023      	str	r3, [r4, #0]
 80062e6:	bd38      	pop	{r3, r4, r5, pc}
 80062e8:	20000460 	.word	0x20000460

080062ec <memcpy>:
 80062ec:	440a      	add	r2, r1
 80062ee:	4291      	cmp	r1, r2
 80062f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80062f4:	d100      	bne.n	80062f8 <memcpy+0xc>
 80062f6:	4770      	bx	lr
 80062f8:	b510      	push	{r4, lr}
 80062fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006302:	4291      	cmp	r1, r2
 8006304:	d1f9      	bne.n	80062fa <memcpy+0xe>
 8006306:	bd10      	pop	{r4, pc}

08006308 <_realloc_r>:
 8006308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800630c:	4680      	mov	r8, r0
 800630e:	4614      	mov	r4, r2
 8006310:	460e      	mov	r6, r1
 8006312:	b921      	cbnz	r1, 800631e <_realloc_r+0x16>
 8006314:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006318:	4611      	mov	r1, r2
 800631a:	f7ff bc49 	b.w	8005bb0 <_malloc_r>
 800631e:	b92a      	cbnz	r2, 800632c <_realloc_r+0x24>
 8006320:	f7ff fbda 	bl	8005ad8 <_free_r>
 8006324:	4625      	mov	r5, r4
 8006326:	4628      	mov	r0, r5
 8006328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800632c:	f000 f81b 	bl	8006366 <_malloc_usable_size_r>
 8006330:	4284      	cmp	r4, r0
 8006332:	4607      	mov	r7, r0
 8006334:	d802      	bhi.n	800633c <_realloc_r+0x34>
 8006336:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800633a:	d812      	bhi.n	8006362 <_realloc_r+0x5a>
 800633c:	4621      	mov	r1, r4
 800633e:	4640      	mov	r0, r8
 8006340:	f7ff fc36 	bl	8005bb0 <_malloc_r>
 8006344:	4605      	mov	r5, r0
 8006346:	2800      	cmp	r0, #0
 8006348:	d0ed      	beq.n	8006326 <_realloc_r+0x1e>
 800634a:	42bc      	cmp	r4, r7
 800634c:	4622      	mov	r2, r4
 800634e:	4631      	mov	r1, r6
 8006350:	bf28      	it	cs
 8006352:	463a      	movcs	r2, r7
 8006354:	f7ff ffca 	bl	80062ec <memcpy>
 8006358:	4631      	mov	r1, r6
 800635a:	4640      	mov	r0, r8
 800635c:	f7ff fbbc 	bl	8005ad8 <_free_r>
 8006360:	e7e1      	b.n	8006326 <_realloc_r+0x1e>
 8006362:	4635      	mov	r5, r6
 8006364:	e7df      	b.n	8006326 <_realloc_r+0x1e>

08006366 <_malloc_usable_size_r>:
 8006366:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800636a:	1f18      	subs	r0, r3, #4
 800636c:	2b00      	cmp	r3, #0
 800636e:	bfbc      	itt	lt
 8006370:	580b      	ldrlt	r3, [r1, r0]
 8006372:	18c0      	addlt	r0, r0, r3
 8006374:	4770      	bx	lr
	...

08006378 <_init>:
 8006378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800637a:	bf00      	nop
 800637c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800637e:	bc08      	pop	{r3}
 8006380:	469e      	mov	lr, r3
 8006382:	4770      	bx	lr

08006384 <_fini>:
 8006384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006386:	bf00      	nop
 8006388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800638a:	bc08      	pop	{r3}
 800638c:	469e      	mov	lr, r3
 800638e:	4770      	bx	lr
