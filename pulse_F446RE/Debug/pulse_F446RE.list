
pulse_F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000542c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  080055fc  080055fc  000155fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056b8  080056b8  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  080056b8  080056b8  000156b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056c0  080056c0  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056c0  080056c0  000156c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056c4  080056c4  000156c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080056c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  20000060  08005728  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  08005728  00020348  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e09a  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f48  00000000  00000000  0002e16d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d18  00000000  00000000  000300b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a49  00000000  00000000  00030dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021e9e  00000000  00000000  00031819  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fc28  00000000  00000000  000536b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0ac5  00000000  00000000  000632df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003d44  00000000  00000000  00133da4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00137ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080055e4 	.word	0x080055e4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	080055e4 	.word	0x080055e4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_dmul>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002be:	bf1d      	ittte	ne
 80002c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002c4:	ea94 0f0c 	teqne	r4, ip
 80002c8:	ea95 0f0c 	teqne	r5, ip
 80002cc:	f000 f8de 	bleq	800048c <__aeabi_dmul+0x1dc>
 80002d0:	442c      	add	r4, r5
 80002d2:	ea81 0603 	eor.w	r6, r1, r3
 80002d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002e2:	bf18      	it	ne
 80002e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002f0:	d038      	beq.n	8000364 <__aeabi_dmul+0xb4>
 80002f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002f6:	f04f 0500 	mov.w	r5, #0
 80002fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000302:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000306:	f04f 0600 	mov.w	r6, #0
 800030a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800030e:	f09c 0f00 	teq	ip, #0
 8000312:	bf18      	it	ne
 8000314:	f04e 0e01 	orrne.w	lr, lr, #1
 8000318:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800031c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000320:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000324:	d204      	bcs.n	8000330 <__aeabi_dmul+0x80>
 8000326:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800032a:	416d      	adcs	r5, r5
 800032c:	eb46 0606 	adc.w	r6, r6, r6
 8000330:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000334:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000338:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800033c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000340:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000344:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000348:	bf88      	it	hi
 800034a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800034e:	d81e      	bhi.n	800038e <__aeabi_dmul+0xde>
 8000350:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000368:	ea46 0101 	orr.w	r1, r6, r1
 800036c:	ea40 0002 	orr.w	r0, r0, r2
 8000370:	ea81 0103 	eor.w	r1, r1, r3
 8000374:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000378:	bfc2      	ittt	gt
 800037a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800037e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000382:	bd70      	popgt	{r4, r5, r6, pc}
 8000384:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000388:	f04f 0e00 	mov.w	lr, #0
 800038c:	3c01      	subs	r4, #1
 800038e:	f300 80ab 	bgt.w	80004e8 <__aeabi_dmul+0x238>
 8000392:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000396:	bfde      	ittt	le
 8000398:	2000      	movle	r0, #0
 800039a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800039e:	bd70      	pople	{r4, r5, r6, pc}
 80003a0:	f1c4 0400 	rsb	r4, r4, #0
 80003a4:	3c20      	subs	r4, #32
 80003a6:	da35      	bge.n	8000414 <__aeabi_dmul+0x164>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc1b      	bgt.n	80003e4 <__aeabi_dmul+0x134>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0520 	rsb	r5, r4, #32
 80003b4:	fa00 f305 	lsl.w	r3, r0, r5
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f205 	lsl.w	r2, r1, r5
 80003c0:	ea40 0002 	orr.w	r0, r0, r2
 80003c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d0:	fa21 f604 	lsr.w	r6, r1, r4
 80003d4:	eb42 0106 	adc.w	r1, r2, r6
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 040c 	rsb	r4, r4, #12
 80003e8:	f1c4 0520 	rsb	r5, r4, #32
 80003ec:	fa00 f304 	lsl.w	r3, r0, r4
 80003f0:	fa20 f005 	lsr.w	r0, r0, r5
 80003f4:	fa01 f204 	lsl.w	r2, r1, r4
 80003f8:	ea40 0002 	orr.w	r0, r0, r2
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000400:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000404:	f141 0100 	adc.w	r1, r1, #0
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 0520 	rsb	r5, r4, #32
 8000418:	fa00 f205 	lsl.w	r2, r0, r5
 800041c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000420:	fa20 f304 	lsr.w	r3, r0, r4
 8000424:	fa01 f205 	lsl.w	r2, r1, r5
 8000428:	ea43 0302 	orr.w	r3, r3, r2
 800042c:	fa21 f004 	lsr.w	r0, r1, r4
 8000430:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000434:	fa21 f204 	lsr.w	r2, r1, r4
 8000438:	ea20 0002 	bic.w	r0, r0, r2
 800043c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000440:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000444:	bf08      	it	eq
 8000446:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f094 0f00 	teq	r4, #0
 8000450:	d10f      	bne.n	8000472 <__aeabi_dmul+0x1c2>
 8000452:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000456:	0040      	lsls	r0, r0, #1
 8000458:	eb41 0101 	adc.w	r1, r1, r1
 800045c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3c01      	subeq	r4, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1a6>
 8000466:	ea41 0106 	orr.w	r1, r1, r6
 800046a:	f095 0f00 	teq	r5, #0
 800046e:	bf18      	it	ne
 8000470:	4770      	bxne	lr
 8000472:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	eb43 0303 	adc.w	r3, r3, r3
 800047c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000480:	bf08      	it	eq
 8000482:	3d01      	subeq	r5, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1c6>
 8000486:	ea43 0306 	orr.w	r3, r3, r6
 800048a:	4770      	bx	lr
 800048c:	ea94 0f0c 	teq	r4, ip
 8000490:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000494:	bf18      	it	ne
 8000496:	ea95 0f0c 	teqne	r5, ip
 800049a:	d00c      	beq.n	80004b6 <__aeabi_dmul+0x206>
 800049c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004a0:	bf18      	it	ne
 80004a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a6:	d1d1      	bne.n	800044c <__aeabi_dmul+0x19c>
 80004a8:	ea81 0103 	eor.w	r1, r1, r3
 80004ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004b0:	f04f 0000 	mov.w	r0, #0
 80004b4:	bd70      	pop	{r4, r5, r6, pc}
 80004b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ba:	bf06      	itte	eq
 80004bc:	4610      	moveq	r0, r2
 80004be:	4619      	moveq	r1, r3
 80004c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c4:	d019      	beq.n	80004fa <__aeabi_dmul+0x24a>
 80004c6:	ea94 0f0c 	teq	r4, ip
 80004ca:	d102      	bne.n	80004d2 <__aeabi_dmul+0x222>
 80004cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004d0:	d113      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004d2:	ea95 0f0c 	teq	r5, ip
 80004d6:	d105      	bne.n	80004e4 <__aeabi_dmul+0x234>
 80004d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004dc:	bf1c      	itt	ne
 80004de:	4610      	movne	r0, r2
 80004e0:	4619      	movne	r1, r3
 80004e2:	d10a      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004e4:	ea81 0103 	eor.w	r1, r1, r3
 80004e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd70      	pop	{r4, r5, r6, pc}
 80004fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000502:	bd70      	pop	{r4, r5, r6, pc}

08000504 <__aeabi_drsub>:
 8000504:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e002      	b.n	8000510 <__adddf3>
 800050a:	bf00      	nop

0800050c <__aeabi_dsub>:
 800050c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000510 <__adddf3>:
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000516:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800051a:	ea94 0f05 	teq	r4, r5
 800051e:	bf08      	it	eq
 8000520:	ea90 0f02 	teqeq	r0, r2
 8000524:	bf1f      	itttt	ne
 8000526:	ea54 0c00 	orrsne.w	ip, r4, r0
 800052a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800052e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000532:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000536:	f000 80e2 	beq.w	80006fe <__adddf3+0x1ee>
 800053a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800053e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000542:	bfb8      	it	lt
 8000544:	426d      	neglt	r5, r5
 8000546:	dd0c      	ble.n	8000562 <__adddf3+0x52>
 8000548:	442c      	add	r4, r5
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	ea82 0000 	eor.w	r0, r2, r0
 8000556:	ea83 0101 	eor.w	r1, r3, r1
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	2d36      	cmp	r5, #54	; 0x36
 8000564:	bf88      	it	hi
 8000566:	bd30      	pophi	{r4, r5, pc}
 8000568:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800056c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000570:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000574:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000578:	d002      	beq.n	8000580 <__adddf3+0x70>
 800057a:	4240      	negs	r0, r0
 800057c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000580:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000584:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000588:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800058c:	d002      	beq.n	8000594 <__adddf3+0x84>
 800058e:	4252      	negs	r2, r2
 8000590:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000594:	ea94 0f05 	teq	r4, r5
 8000598:	f000 80a7 	beq.w	80006ea <__adddf3+0x1da>
 800059c:	f1a4 0401 	sub.w	r4, r4, #1
 80005a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005a4:	db0d      	blt.n	80005c2 <__adddf3+0xb2>
 80005a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005aa:	fa22 f205 	lsr.w	r2, r2, r5
 80005ae:	1880      	adds	r0, r0, r2
 80005b0:	f141 0100 	adc.w	r1, r1, #0
 80005b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005b8:	1880      	adds	r0, r0, r2
 80005ba:	fa43 f305 	asr.w	r3, r3, r5
 80005be:	4159      	adcs	r1, r3
 80005c0:	e00e      	b.n	80005e0 <__adddf3+0xd0>
 80005c2:	f1a5 0520 	sub.w	r5, r5, #32
 80005c6:	f10e 0e20 	add.w	lr, lr, #32
 80005ca:	2a01      	cmp	r2, #1
 80005cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d0:	bf28      	it	cs
 80005d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005d6:	fa43 f305 	asr.w	r3, r3, r5
 80005da:	18c0      	adds	r0, r0, r3
 80005dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	d507      	bpl.n	80005f6 <__adddf3+0xe6>
 80005e6:	f04f 0e00 	mov.w	lr, #0
 80005ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005fa:	d31b      	bcc.n	8000634 <__adddf3+0x124>
 80005fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000600:	d30c      	bcc.n	800061c <__adddf3+0x10c>
 8000602:	0849      	lsrs	r1, r1, #1
 8000604:	ea5f 0030 	movs.w	r0, r0, rrx
 8000608:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800060c:	f104 0401 	add.w	r4, r4, #1
 8000610:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000614:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000618:	f080 809a 	bcs.w	8000750 <__adddf3+0x240>
 800061c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	ea41 0105 	orr.w	r1, r1, r5
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000638:	4140      	adcs	r0, r0
 800063a:	eb41 0101 	adc.w	r1, r1, r1
 800063e:	3c01      	subs	r4, #1
 8000640:	bf28      	it	cs
 8000642:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000646:	d2e9      	bcs.n	800061c <__adddf3+0x10c>
 8000648:	f091 0f00 	teq	r1, #0
 800064c:	bf04      	itt	eq
 800064e:	4601      	moveq	r1, r0
 8000650:	2000      	moveq	r0, #0
 8000652:	fab1 f381 	clz	r3, r1
 8000656:	bf08      	it	eq
 8000658:	3320      	addeq	r3, #32
 800065a:	f1a3 030b 	sub.w	r3, r3, #11
 800065e:	f1b3 0220 	subs.w	r2, r3, #32
 8000662:	da0c      	bge.n	800067e <__adddf3+0x16e>
 8000664:	320c      	adds	r2, #12
 8000666:	dd08      	ble.n	800067a <__adddf3+0x16a>
 8000668:	f102 0c14 	add.w	ip, r2, #20
 800066c:	f1c2 020c 	rsb	r2, r2, #12
 8000670:	fa01 f00c 	lsl.w	r0, r1, ip
 8000674:	fa21 f102 	lsr.w	r1, r1, r2
 8000678:	e00c      	b.n	8000694 <__adddf3+0x184>
 800067a:	f102 0214 	add.w	r2, r2, #20
 800067e:	bfd8      	it	le
 8000680:	f1c2 0c20 	rsble	ip, r2, #32
 8000684:	fa01 f102 	lsl.w	r1, r1, r2
 8000688:	fa20 fc0c 	lsr.w	ip, r0, ip
 800068c:	bfdc      	itt	le
 800068e:	ea41 010c 	orrle.w	r1, r1, ip
 8000692:	4090      	lslle	r0, r2
 8000694:	1ae4      	subs	r4, r4, r3
 8000696:	bfa2      	ittt	ge
 8000698:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800069c:	4329      	orrge	r1, r5
 800069e:	bd30      	popge	{r4, r5, pc}
 80006a0:	ea6f 0404 	mvn.w	r4, r4
 80006a4:	3c1f      	subs	r4, #31
 80006a6:	da1c      	bge.n	80006e2 <__adddf3+0x1d2>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc0e      	bgt.n	80006ca <__adddf3+0x1ba>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0220 	rsb	r2, r4, #32
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f302 	lsl.w	r3, r1, r2
 80006bc:	ea40 0003 	orr.w	r0, r0, r3
 80006c0:	fa21 f304 	lsr.w	r3, r1, r4
 80006c4:	ea45 0103 	orr.w	r1, r5, r3
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f1c4 040c 	rsb	r4, r4, #12
 80006ce:	f1c4 0220 	rsb	r2, r4, #32
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 f304 	lsl.w	r3, r1, r4
 80006da:	ea40 0003 	orr.w	r0, r0, r3
 80006de:	4629      	mov	r1, r5
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	fa21 f004 	lsr.w	r0, r1, r4
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f094 0f00 	teq	r4, #0
 80006ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006f2:	bf06      	itte	eq
 80006f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006f8:	3401      	addeq	r4, #1
 80006fa:	3d01      	subne	r5, #1
 80006fc:	e74e      	b.n	800059c <__adddf3+0x8c>
 80006fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000702:	bf18      	it	ne
 8000704:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000708:	d029      	beq.n	800075e <__adddf3+0x24e>
 800070a:	ea94 0f05 	teq	r4, r5
 800070e:	bf08      	it	eq
 8000710:	ea90 0f02 	teqeq	r0, r2
 8000714:	d005      	beq.n	8000722 <__adddf3+0x212>
 8000716:	ea54 0c00 	orrs.w	ip, r4, r0
 800071a:	bf04      	itt	eq
 800071c:	4619      	moveq	r1, r3
 800071e:	4610      	moveq	r0, r2
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	ea91 0f03 	teq	r1, r3
 8000726:	bf1e      	ittt	ne
 8000728:	2100      	movne	r1, #0
 800072a:	2000      	movne	r0, #0
 800072c:	bd30      	popne	{r4, r5, pc}
 800072e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000732:	d105      	bne.n	8000740 <__adddf3+0x230>
 8000734:	0040      	lsls	r0, r0, #1
 8000736:	4149      	adcs	r1, r1
 8000738:	bf28      	it	cs
 800073a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800073e:	bd30      	pop	{r4, r5, pc}
 8000740:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000744:	bf3c      	itt	cc
 8000746:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800074a:	bd30      	popcc	{r4, r5, pc}
 800074c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000750:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000754:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000762:	bf1a      	itte	ne
 8000764:	4619      	movne	r1, r3
 8000766:	4610      	movne	r0, r2
 8000768:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800076c:	bf1c      	itt	ne
 800076e:	460b      	movne	r3, r1
 8000770:	4602      	movne	r2, r0
 8000772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000776:	bf06      	itte	eq
 8000778:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800077c:	ea91 0f03 	teqeq	r1, r3
 8000780:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000784:	bd30      	pop	{r4, r5, pc}
 8000786:	bf00      	nop

08000788 <__aeabi_ui2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f04f 0500 	mov.w	r5, #0
 80007a0:	f04f 0100 	mov.w	r1, #0
 80007a4:	e750      	b.n	8000648 <__adddf3+0x138>
 80007a6:	bf00      	nop

080007a8 <__aeabi_i2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007c0:	bf48      	it	mi
 80007c2:	4240      	negmi	r0, r0
 80007c4:	f04f 0100 	mov.w	r1, #0
 80007c8:	e73e      	b.n	8000648 <__adddf3+0x138>
 80007ca:	bf00      	nop

080007cc <__aeabi_f2d>:
 80007cc:	0042      	lsls	r2, r0, #1
 80007ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007da:	bf1f      	itttt	ne
 80007dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007e8:	4770      	bxne	lr
 80007ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ee:	bf08      	it	eq
 80007f0:	4770      	bxeq	lr
 80007f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007f6:	bf04      	itt	eq
 80007f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007fc:	4770      	bxeq	lr
 80007fe:	b530      	push	{r4, r5, lr}
 8000800:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000804:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000808:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800080c:	e71c      	b.n	8000648 <__adddf3+0x138>
 800080e:	bf00      	nop

08000810 <__aeabi_ul2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f04f 0500 	mov.w	r5, #0
 800081e:	e00a      	b.n	8000836 <__aeabi_l2d+0x16>

08000820 <__aeabi_l2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800082e:	d502      	bpl.n	8000836 <__aeabi_l2d+0x16>
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800083a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800083e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000842:	f43f aed8 	beq.w	80005f6 <__adddf3+0xe6>
 8000846:	f04f 0203 	mov.w	r2, #3
 800084a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800084e:	bf18      	it	ne
 8000850:	3203      	addne	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800085e:	f1c2 0320 	rsb	r3, r2, #32
 8000862:	fa00 fc03 	lsl.w	ip, r0, r3
 8000866:	fa20 f002 	lsr.w	r0, r0, r2
 800086a:	fa01 fe03 	lsl.w	lr, r1, r3
 800086e:	ea40 000e 	orr.w	r0, r0, lr
 8000872:	fa21 f102 	lsr.w	r1, r1, r2
 8000876:	4414      	add	r4, r2
 8000878:	e6bd      	b.n	80005f6 <__adddf3+0xe6>
 800087a:	bf00      	nop

0800087c <__aeabi_d2iz>:
 800087c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000880:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000884:	d215      	bcs.n	80008b2 <__aeabi_d2iz+0x36>
 8000886:	d511      	bpl.n	80008ac <__aeabi_d2iz+0x30>
 8000888:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800088c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000890:	d912      	bls.n	80008b8 <__aeabi_d2iz+0x3c>
 8000892:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000896:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800089a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800089e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80008a2:	fa23 f002 	lsr.w	r0, r3, r2
 80008a6:	bf18      	it	ne
 80008a8:	4240      	negne	r0, r0
 80008aa:	4770      	bx	lr
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	4770      	bx	lr
 80008b2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008b6:	d105      	bne.n	80008c4 <__aeabi_d2iz+0x48>
 80008b8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80008bc:	bf08      	it	eq
 80008be:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80008c2:	4770      	bx	lr
 80008c4:	f04f 0000 	mov.w	r0, #0
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop

080008cc <__aeabi_uldivmod>:
 80008cc:	b953      	cbnz	r3, 80008e4 <__aeabi_uldivmod+0x18>
 80008ce:	b94a      	cbnz	r2, 80008e4 <__aeabi_uldivmod+0x18>
 80008d0:	2900      	cmp	r1, #0
 80008d2:	bf08      	it	eq
 80008d4:	2800      	cmpeq	r0, #0
 80008d6:	bf1c      	itt	ne
 80008d8:	f04f 31ff 	movne.w	r1, #4294967295
 80008dc:	f04f 30ff 	movne.w	r0, #4294967295
 80008e0:	f000 b970 	b.w	8000bc4 <__aeabi_idiv0>
 80008e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ec:	f000 f806 	bl	80008fc <__udivmoddi4>
 80008f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008f8:	b004      	add	sp, #16
 80008fa:	4770      	bx	lr

080008fc <__udivmoddi4>:
 80008fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000900:	9e08      	ldr	r6, [sp, #32]
 8000902:	460d      	mov	r5, r1
 8000904:	4604      	mov	r4, r0
 8000906:	460f      	mov	r7, r1
 8000908:	2b00      	cmp	r3, #0
 800090a:	d14a      	bne.n	80009a2 <__udivmoddi4+0xa6>
 800090c:	428a      	cmp	r2, r1
 800090e:	4694      	mov	ip, r2
 8000910:	d965      	bls.n	80009de <__udivmoddi4+0xe2>
 8000912:	fab2 f382 	clz	r3, r2
 8000916:	b143      	cbz	r3, 800092a <__udivmoddi4+0x2e>
 8000918:	fa02 fc03 	lsl.w	ip, r2, r3
 800091c:	f1c3 0220 	rsb	r2, r3, #32
 8000920:	409f      	lsls	r7, r3
 8000922:	fa20 f202 	lsr.w	r2, r0, r2
 8000926:	4317      	orrs	r7, r2
 8000928:	409c      	lsls	r4, r3
 800092a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800092e:	fa1f f58c 	uxth.w	r5, ip
 8000932:	fbb7 f1fe 	udiv	r1, r7, lr
 8000936:	0c22      	lsrs	r2, r4, #16
 8000938:	fb0e 7711 	mls	r7, lr, r1, r7
 800093c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000940:	fb01 f005 	mul.w	r0, r1, r5
 8000944:	4290      	cmp	r0, r2
 8000946:	d90a      	bls.n	800095e <__udivmoddi4+0x62>
 8000948:	eb1c 0202 	adds.w	r2, ip, r2
 800094c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000950:	f080 811c 	bcs.w	8000b8c <__udivmoddi4+0x290>
 8000954:	4290      	cmp	r0, r2
 8000956:	f240 8119 	bls.w	8000b8c <__udivmoddi4+0x290>
 800095a:	3902      	subs	r1, #2
 800095c:	4462      	add	r2, ip
 800095e:	1a12      	subs	r2, r2, r0
 8000960:	b2a4      	uxth	r4, r4
 8000962:	fbb2 f0fe 	udiv	r0, r2, lr
 8000966:	fb0e 2210 	mls	r2, lr, r0, r2
 800096a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800096e:	fb00 f505 	mul.w	r5, r0, r5
 8000972:	42a5      	cmp	r5, r4
 8000974:	d90a      	bls.n	800098c <__udivmoddi4+0x90>
 8000976:	eb1c 0404 	adds.w	r4, ip, r4
 800097a:	f100 32ff 	add.w	r2, r0, #4294967295
 800097e:	f080 8107 	bcs.w	8000b90 <__udivmoddi4+0x294>
 8000982:	42a5      	cmp	r5, r4
 8000984:	f240 8104 	bls.w	8000b90 <__udivmoddi4+0x294>
 8000988:	4464      	add	r4, ip
 800098a:	3802      	subs	r0, #2
 800098c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000990:	1b64      	subs	r4, r4, r5
 8000992:	2100      	movs	r1, #0
 8000994:	b11e      	cbz	r6, 800099e <__udivmoddi4+0xa2>
 8000996:	40dc      	lsrs	r4, r3
 8000998:	2300      	movs	r3, #0
 800099a:	e9c6 4300 	strd	r4, r3, [r6]
 800099e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009a2:	428b      	cmp	r3, r1
 80009a4:	d908      	bls.n	80009b8 <__udivmoddi4+0xbc>
 80009a6:	2e00      	cmp	r6, #0
 80009a8:	f000 80ed 	beq.w	8000b86 <__udivmoddi4+0x28a>
 80009ac:	2100      	movs	r1, #0
 80009ae:	e9c6 0500 	strd	r0, r5, [r6]
 80009b2:	4608      	mov	r0, r1
 80009b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b8:	fab3 f183 	clz	r1, r3
 80009bc:	2900      	cmp	r1, #0
 80009be:	d149      	bne.n	8000a54 <__udivmoddi4+0x158>
 80009c0:	42ab      	cmp	r3, r5
 80009c2:	d302      	bcc.n	80009ca <__udivmoddi4+0xce>
 80009c4:	4282      	cmp	r2, r0
 80009c6:	f200 80f8 	bhi.w	8000bba <__udivmoddi4+0x2be>
 80009ca:	1a84      	subs	r4, r0, r2
 80009cc:	eb65 0203 	sbc.w	r2, r5, r3
 80009d0:	2001      	movs	r0, #1
 80009d2:	4617      	mov	r7, r2
 80009d4:	2e00      	cmp	r6, #0
 80009d6:	d0e2      	beq.n	800099e <__udivmoddi4+0xa2>
 80009d8:	e9c6 4700 	strd	r4, r7, [r6]
 80009dc:	e7df      	b.n	800099e <__udivmoddi4+0xa2>
 80009de:	b902      	cbnz	r2, 80009e2 <__udivmoddi4+0xe6>
 80009e0:	deff      	udf	#255	; 0xff
 80009e2:	fab2 f382 	clz	r3, r2
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	f040 8090 	bne.w	8000b0c <__udivmoddi4+0x210>
 80009ec:	1a8a      	subs	r2, r1, r2
 80009ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009f2:	fa1f fe8c 	uxth.w	lr, ip
 80009f6:	2101      	movs	r1, #1
 80009f8:	fbb2 f5f7 	udiv	r5, r2, r7
 80009fc:	fb07 2015 	mls	r0, r7, r5, r2
 8000a00:	0c22      	lsrs	r2, r4, #16
 8000a02:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000a06:	fb0e f005 	mul.w	r0, lr, r5
 8000a0a:	4290      	cmp	r0, r2
 8000a0c:	d908      	bls.n	8000a20 <__udivmoddi4+0x124>
 8000a0e:	eb1c 0202 	adds.w	r2, ip, r2
 8000a12:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a16:	d202      	bcs.n	8000a1e <__udivmoddi4+0x122>
 8000a18:	4290      	cmp	r0, r2
 8000a1a:	f200 80cb 	bhi.w	8000bb4 <__udivmoddi4+0x2b8>
 8000a1e:	4645      	mov	r5, r8
 8000a20:	1a12      	subs	r2, r2, r0
 8000a22:	b2a4      	uxth	r4, r4
 8000a24:	fbb2 f0f7 	udiv	r0, r2, r7
 8000a28:	fb07 2210 	mls	r2, r7, r0, r2
 8000a2c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a30:	fb0e fe00 	mul.w	lr, lr, r0
 8000a34:	45a6      	cmp	lr, r4
 8000a36:	d908      	bls.n	8000a4a <__udivmoddi4+0x14e>
 8000a38:	eb1c 0404 	adds.w	r4, ip, r4
 8000a3c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a40:	d202      	bcs.n	8000a48 <__udivmoddi4+0x14c>
 8000a42:	45a6      	cmp	lr, r4
 8000a44:	f200 80bb 	bhi.w	8000bbe <__udivmoddi4+0x2c2>
 8000a48:	4610      	mov	r0, r2
 8000a4a:	eba4 040e 	sub.w	r4, r4, lr
 8000a4e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a52:	e79f      	b.n	8000994 <__udivmoddi4+0x98>
 8000a54:	f1c1 0720 	rsb	r7, r1, #32
 8000a58:	408b      	lsls	r3, r1
 8000a5a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a5e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a62:	fa05 f401 	lsl.w	r4, r5, r1
 8000a66:	fa20 f307 	lsr.w	r3, r0, r7
 8000a6a:	40fd      	lsrs	r5, r7
 8000a6c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a70:	4323      	orrs	r3, r4
 8000a72:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a76:	fa1f fe8c 	uxth.w	lr, ip
 8000a7a:	fb09 5518 	mls	r5, r9, r8, r5
 8000a7e:	0c1c      	lsrs	r4, r3, #16
 8000a80:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a84:	fb08 f50e 	mul.w	r5, r8, lr
 8000a88:	42a5      	cmp	r5, r4
 8000a8a:	fa02 f201 	lsl.w	r2, r2, r1
 8000a8e:	fa00 f001 	lsl.w	r0, r0, r1
 8000a92:	d90b      	bls.n	8000aac <__udivmoddi4+0x1b0>
 8000a94:	eb1c 0404 	adds.w	r4, ip, r4
 8000a98:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a9c:	f080 8088 	bcs.w	8000bb0 <__udivmoddi4+0x2b4>
 8000aa0:	42a5      	cmp	r5, r4
 8000aa2:	f240 8085 	bls.w	8000bb0 <__udivmoddi4+0x2b4>
 8000aa6:	f1a8 0802 	sub.w	r8, r8, #2
 8000aaa:	4464      	add	r4, ip
 8000aac:	1b64      	subs	r4, r4, r5
 8000aae:	b29d      	uxth	r5, r3
 8000ab0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ab4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ab8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000abc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ac0:	45a6      	cmp	lr, r4
 8000ac2:	d908      	bls.n	8000ad6 <__udivmoddi4+0x1da>
 8000ac4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ac8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000acc:	d26c      	bcs.n	8000ba8 <__udivmoddi4+0x2ac>
 8000ace:	45a6      	cmp	lr, r4
 8000ad0:	d96a      	bls.n	8000ba8 <__udivmoddi4+0x2ac>
 8000ad2:	3b02      	subs	r3, #2
 8000ad4:	4464      	add	r4, ip
 8000ad6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ada:	fba3 9502 	umull	r9, r5, r3, r2
 8000ade:	eba4 040e 	sub.w	r4, r4, lr
 8000ae2:	42ac      	cmp	r4, r5
 8000ae4:	46c8      	mov	r8, r9
 8000ae6:	46ae      	mov	lr, r5
 8000ae8:	d356      	bcc.n	8000b98 <__udivmoddi4+0x29c>
 8000aea:	d053      	beq.n	8000b94 <__udivmoddi4+0x298>
 8000aec:	b156      	cbz	r6, 8000b04 <__udivmoddi4+0x208>
 8000aee:	ebb0 0208 	subs.w	r2, r0, r8
 8000af2:	eb64 040e 	sbc.w	r4, r4, lr
 8000af6:	fa04 f707 	lsl.w	r7, r4, r7
 8000afa:	40ca      	lsrs	r2, r1
 8000afc:	40cc      	lsrs	r4, r1
 8000afe:	4317      	orrs	r7, r2
 8000b00:	e9c6 7400 	strd	r7, r4, [r6]
 8000b04:	4618      	mov	r0, r3
 8000b06:	2100      	movs	r1, #0
 8000b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b0c:	f1c3 0120 	rsb	r1, r3, #32
 8000b10:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b14:	fa20 f201 	lsr.w	r2, r0, r1
 8000b18:	fa25 f101 	lsr.w	r1, r5, r1
 8000b1c:	409d      	lsls	r5, r3
 8000b1e:	432a      	orrs	r2, r5
 8000b20:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b24:	fa1f fe8c 	uxth.w	lr, ip
 8000b28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b2c:	fb07 1510 	mls	r5, r7, r0, r1
 8000b30:	0c11      	lsrs	r1, r2, #16
 8000b32:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000b36:	fb00 f50e 	mul.w	r5, r0, lr
 8000b3a:	428d      	cmp	r5, r1
 8000b3c:	fa04 f403 	lsl.w	r4, r4, r3
 8000b40:	d908      	bls.n	8000b54 <__udivmoddi4+0x258>
 8000b42:	eb1c 0101 	adds.w	r1, ip, r1
 8000b46:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b4a:	d22f      	bcs.n	8000bac <__udivmoddi4+0x2b0>
 8000b4c:	428d      	cmp	r5, r1
 8000b4e:	d92d      	bls.n	8000bac <__udivmoddi4+0x2b0>
 8000b50:	3802      	subs	r0, #2
 8000b52:	4461      	add	r1, ip
 8000b54:	1b49      	subs	r1, r1, r5
 8000b56:	b292      	uxth	r2, r2
 8000b58:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b5c:	fb07 1115 	mls	r1, r7, r5, r1
 8000b60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b64:	fb05 f10e 	mul.w	r1, r5, lr
 8000b68:	4291      	cmp	r1, r2
 8000b6a:	d908      	bls.n	8000b7e <__udivmoddi4+0x282>
 8000b6c:	eb1c 0202 	adds.w	r2, ip, r2
 8000b70:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b74:	d216      	bcs.n	8000ba4 <__udivmoddi4+0x2a8>
 8000b76:	4291      	cmp	r1, r2
 8000b78:	d914      	bls.n	8000ba4 <__udivmoddi4+0x2a8>
 8000b7a:	3d02      	subs	r5, #2
 8000b7c:	4462      	add	r2, ip
 8000b7e:	1a52      	subs	r2, r2, r1
 8000b80:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b84:	e738      	b.n	80009f8 <__udivmoddi4+0xfc>
 8000b86:	4631      	mov	r1, r6
 8000b88:	4630      	mov	r0, r6
 8000b8a:	e708      	b.n	800099e <__udivmoddi4+0xa2>
 8000b8c:	4639      	mov	r1, r7
 8000b8e:	e6e6      	b.n	800095e <__udivmoddi4+0x62>
 8000b90:	4610      	mov	r0, r2
 8000b92:	e6fb      	b.n	800098c <__udivmoddi4+0x90>
 8000b94:	4548      	cmp	r0, r9
 8000b96:	d2a9      	bcs.n	8000aec <__udivmoddi4+0x1f0>
 8000b98:	ebb9 0802 	subs.w	r8, r9, r2
 8000b9c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ba0:	3b01      	subs	r3, #1
 8000ba2:	e7a3      	b.n	8000aec <__udivmoddi4+0x1f0>
 8000ba4:	4645      	mov	r5, r8
 8000ba6:	e7ea      	b.n	8000b7e <__udivmoddi4+0x282>
 8000ba8:	462b      	mov	r3, r5
 8000baa:	e794      	b.n	8000ad6 <__udivmoddi4+0x1da>
 8000bac:	4640      	mov	r0, r8
 8000bae:	e7d1      	b.n	8000b54 <__udivmoddi4+0x258>
 8000bb0:	46d0      	mov	r8, sl
 8000bb2:	e77b      	b.n	8000aac <__udivmoddi4+0x1b0>
 8000bb4:	3d02      	subs	r5, #2
 8000bb6:	4462      	add	r2, ip
 8000bb8:	e732      	b.n	8000a20 <__udivmoddi4+0x124>
 8000bba:	4608      	mov	r0, r1
 8000bbc:	e70a      	b.n	80009d4 <__udivmoddi4+0xd8>
 8000bbe:	4464      	add	r4, ip
 8000bc0:	3802      	subs	r0, #2
 8000bc2:	e742      	b.n	8000a4a <__udivmoddi4+0x14e>

08000bc4 <__aeabi_idiv0>:
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <initMotor>:

uint16_t encoderRead_flag = 0;



void initMotor(void){
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
	// motor 1
	motor1.speed = 0;
 8000bcc:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <initMotor+0x40>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	809a      	strh	r2, [r3, #4]
	motor1.target = 0;
 8000bd2:	4b0d      	ldr	r3, [pc, #52]	; (8000c08 <initMotor+0x40>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
	motor1.direc = 0;
 8000bd8:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <initMotor+0x40>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	80da      	strh	r2, [r3, #6]
	TIM14 -> CCR1 = 0;
 8000bde:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <initMotor+0x44>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1 -> CCR1 = 0;
 8000be4:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <initMotor+0x48>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	635a      	str	r2, [r3, #52]	; 0x34

	HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_1 | TIM_CHANNEL_2);	// start encoder1(timer2)
 8000bea:	2104      	movs	r1, #4
 8000bec:	4809      	ldr	r0, [pc, #36]	; (8000c14 <initMotor+0x4c>)
 8000bee:	f002 fa69 	bl	80030c4 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4808      	ldr	r0, [pc, #32]	; (8000c18 <initMotor+0x50>)
 8000bf6:	f002 f8f7 	bl	8002de8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim14,TIM_CHANNEL_1);
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	4807      	ldr	r0, [pc, #28]	; (8000c1c <initMotor+0x54>)
 8000bfe:	f002 f8f3 	bl	8002de8 <HAL_TIM_PWM_Start>

}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	200001e0 	.word	0x200001e0
 8000c0c:	40002000 	.word	0x40002000
 8000c10:	40010000 	.word	0x40010000
 8000c14:	200000c4 	.word	0x200000c4
 8000c18:	2000007c 	.word	0x2000007c
 8000c1c:	20000154 	.word	0x20000154

08000c20 <speed2pulse>:

// table for converting FSR voltage(named as RPM),to PWM pulse value
uint32_t speed2pulse(int rpm_value){
 8000c20:	b480      	push	{r7}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
	uint32_t pulse_value = rpm_value;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	60fb      	str	r3, [r7, #12]
	return pulse_value;
 8000c2c:	68fb      	ldr	r3, [r7, #12]
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3714      	adds	r7, #20
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
	...

08000c3c <changeSpeed>:

void changeSpeed(uint16_t d,MOTOR *motor){
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	6039      	str	r1, [r7, #0]
 8000c46:	80fb      	strh	r3, [r7, #6]
	uint32_t pulse = speed2pulse(motor->speed);
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff ffe6 	bl	8000c20 <speed2pulse>
 8000c54:	60f8      	str	r0, [r7, #12]
	if(motor->direc == d){	// no inverse
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	88db      	ldrh	r3, [r3, #6]
 8000c5a:	88fa      	ldrh	r2, [r7, #6]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d10d      	bne.n	8000c7c <changeSpeed+0x40>
		if(d == 0) TIM14 -> CCR1 = pulse;
 8000c60:	88fb      	ldrh	r3, [r7, #6]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d103      	bne.n	8000c6e <changeSpeed+0x32>
 8000c66:	4a19      	ldr	r2, [pc, #100]	; (8000ccc <changeSpeed+0x90>)
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	6353      	str	r3, [r2, #52]	; 0x34
 8000c6c:	e026      	b.n	8000cbc <changeSpeed+0x80>
		else if(d == 1) TIM1 -> CCR1 = pulse;
 8000c6e:	88fb      	ldrh	r3, [r7, #6]
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d123      	bne.n	8000cbc <changeSpeed+0x80>
 8000c74:	4a16      	ldr	r2, [pc, #88]	; (8000cd0 <changeSpeed+0x94>)
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	6353      	str	r3, [r2, #52]	; 0x34
 8000c7a:	e01f      	b.n	8000cbc <changeSpeed+0x80>
//		uart_buf_len = sprintf(uart_buf, "change motor TIM pulse to %d \r\n",pulse);
//		HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
	}else if(motor->direc != d){
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	88db      	ldrh	r3, [r3, #6]
 8000c80:	88fa      	ldrh	r2, [r7, #6]
 8000c82:	429a      	cmp	r2, r3
 8000c84:	d016      	beq.n	8000cb4 <changeSpeed+0x78>
		TIM14 -> CCR1 = 0;
 8000c86:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <changeSpeed+0x90>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1 -> CCR1 = 0;
 8000c8c:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <changeSpeed+0x94>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(10);
 8000c92:	200a      	movs	r0, #10
 8000c94:	f000 fe8e 	bl	80019b4 <HAL_Delay>
		if(d == 0) TIM14 -> CCR1 = pulse;
 8000c98:	88fb      	ldrh	r3, [r7, #6]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d103      	bne.n	8000ca6 <changeSpeed+0x6a>
 8000c9e:	4a0b      	ldr	r2, [pc, #44]	; (8000ccc <changeSpeed+0x90>)
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	6353      	str	r3, [r2, #52]	; 0x34
 8000ca4:	e00a      	b.n	8000cbc <changeSpeed+0x80>
		else if(d == 1) TIM1 -> CCR1 = pulse;
 8000ca6:	88fb      	ldrh	r3, [r7, #6]
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d107      	bne.n	8000cbc <changeSpeed+0x80>
 8000cac:	4a08      	ldr	r2, [pc, #32]	; (8000cd0 <changeSpeed+0x94>)
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	6353      	str	r3, [r2, #52]	; 0x34
 8000cb2:	e003      	b.n	8000cbc <changeSpeed+0x80>
//		uart_buf_len = sprintf(uart_buf, "change motor TIM pulse to %d,direc %d \r\n",pulse,d);
//		HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
	}else{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000cb4:	2120      	movs	r1, #32
 8000cb6:	4807      	ldr	r0, [pc, #28]	; (8000cd4 <changeSpeed+0x98>)
 8000cb8:	f001 f9f1 	bl	800209e <HAL_GPIO_TogglePin>
	}
	motor->direc = d;
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	88fa      	ldrh	r2, [r7, #6]
 8000cc0:	80da      	strh	r2, [r3, #6]
}
 8000cc2:	bf00      	nop
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40002000 	.word	0x40002000
 8000cd0:	40010000 	.word	0x40010000
 8000cd4:	40020000 	.word	0x40020000

08000cd8 <getSpeed>:

// get motor real speed named as encoder value
short getSpeed(uint16_t motor_num){
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	80fb      	strh	r3, [r7, #6]
	switch(motor_num){
 8000ce2:	88fb      	ldrh	r3, [r7, #6]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d117      	bne.n	8000d18 <getSpeed+0x40>
	case 1:
		fspeed = (short)((TIM2 -> CNT)*200/(4*16))*10;	// SPEED = ((TIM_counter)/(CPR*F))/t
 8000ce8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cee:	22c8      	movs	r2, #200	; 0xc8
 8000cf0:	fb02 f303 	mul.w	r3, r2, r3
 8000cf4:	099b      	lsrs	r3, r3, #6
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	0092      	lsls	r2, r2, #2
 8000cfc:	4413      	add	r3, r2
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	b21a      	sxth	r2, r3
 8000d04:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <getSpeed+0x50>)
 8000d06:	801a      	strh	r2, [r3, #0]
		TIM2 -> CNT = 0;
 8000d08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	625a      	str	r2, [r3, #36]	; 0x24
		return fspeed;
 8000d10:	4b05      	ldr	r3, [pc, #20]	; (8000d28 <getSpeed+0x50>)
 8000d12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d16:	e003      	b.n	8000d20 <getSpeed+0x48>
	default:
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000d18:	2120      	movs	r1, #32
 8000d1a:	4804      	ldr	r0, [pc, #16]	; (8000d2c <getSpeed+0x54>)
 8000d1c:	f001 f9bf 	bl	800209e <HAL_GPIO_TogglePin>
	}
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	200001ec 	.word	0x200001ec
 8000d2c:	40020000 	.word	0x40020000

08000d30 <PID_Cal>:

short PID_Cal(short fspeed,short *error)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	6039      	str	r1, [r7, #0]
 8000d3a:	80fb      	strh	r3, [r7, #6]
	short Error = motor1.target - fspeed;
 8000d3c:	4b1a      	ldr	r3, [pc, #104]	; (8000da8 <PID_Cal+0x78>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	b29a      	uxth	r2, r3
 8000d42:	88fb      	ldrh	r3, [r7, #6]
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	81fb      	strh	r3, [r7, #14]
	static short Error_last = 0,Error_prev = 0;
	short pwm_add=0;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	81bb      	strh	r3, [r7, #12]
	*error = Error;
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	89fa      	ldrh	r2, [r7, #14]
 8000d52:	801a      	strh	r2, [r3, #0]
	pwm_add = kp*(Error - Error_last);
 8000d54:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d58:	4a14      	ldr	r2, [pc, #80]	; (8000dac <PID_Cal+0x7c>)
 8000d5a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000d5e:	1a9b      	subs	r3, r3, r2
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff fd21 	bl	80007a8 <__aeabi_i2d>
 8000d66:	a30e      	add	r3, pc, #56	; (adr r3, 8000da0 <PID_Cal+0x70>)
 8000d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d6c:	f7ff faa0 	bl	80002b0 <__aeabi_dmul>
 8000d70:	4602      	mov	r2, r0
 8000d72:	460b      	mov	r3, r1
 8000d74:	4610      	mov	r0, r2
 8000d76:	4619      	mov	r1, r3
 8000d78:	f7ff fd80 	bl	800087c <__aeabi_d2iz>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	81bb      	strh	r3, [r7, #12]
//	pwm_add = kp*(Error - Error_last) + ki*Error + kd*(Error-2.0f*Error_last+Error_prev);

	Error_prev = Error_last;
 8000d80:	4b0a      	ldr	r3, [pc, #40]	; (8000dac <PID_Cal+0x7c>)
 8000d82:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000d86:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <PID_Cal+0x80>)
 8000d88:	801a      	strh	r2, [r3, #0]
	Error_last = Error;
 8000d8a:	4a08      	ldr	r2, [pc, #32]	; (8000dac <PID_Cal+0x7c>)
 8000d8c:	89fb      	ldrh	r3, [r7, #14]
 8000d8e:	8013      	strh	r3, [r2, #0]

	return pwm_add;
 8000d90:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3710      	adds	r7, #16
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	f3af 8000 	nop.w
 8000da0:	b851eb85 	.word	0xb851eb85
 8000da4:	3feb851e 	.word	0x3feb851e
 8000da8:	200001e0 	.word	0x200001e0
 8000dac:	200001f0 	.word	0x200001f0
 8000db0:	200001f2 	.word	0x200001f2

08000db4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b09a      	sub	sp, #104	; 0x68
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dba:	f000 fd89 	bl	80018d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dbe:	f000 f859 	bl	8000e74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dc2:	f000 fa3d 	bl	8001240 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000dc6:	f000 f939 	bl	800103c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000dca:	f000 fa0f 	bl	80011ec <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000dce:	f000 f8b1 	bl	8000f34 <MX_TIM1_Init>
  MX_TIM6_Init();
 8000dd2:	f000 f987 	bl	80010e4 <MX_TIM6_Init>
  MX_TIM14_Init();
 8000dd6:	f000 f9bb 	bl	8001150 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  initMotor();
 8000dda:	f7ff fef5 	bl	8000bc8 <initMotor>
  // Start timer
  HAL_TIM_Base_Start_IT(&htim6);
 8000dde:	481d      	ldr	r0, [pc, #116]	; (8000e54 <main+0xa0>)
 8000de0:	f001 ff42 	bl	8002c68 <HAL_TIM_Base_Start_IT>
  uart_buf_len = sprintf(uart_buf, "Motor combination Test\r\n");
 8000de4:	463b      	mov	r3, r7
 8000de6:	491c      	ldr	r1, [pc, #112]	; (8000e58 <main+0xa4>)
 8000de8:	4618      	mov	r0, r3
 8000dea:	f003 ff57 	bl	8004c9c <siprintf>
 8000dee:	6678      	str	r0, [r7, #100]	; 0x64
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000df0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000df2:	b29a      	uxth	r2, r3
 8000df4:	4639      	mov	r1, r7
 8000df6:	2364      	movs	r3, #100	; 0x64
 8000df8:	4818      	ldr	r0, [pc, #96]	; (8000e5c <main+0xa8>)
 8000dfa:	f002 ff88 	bl	8003d0e <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(encoderRead_flag){
 8000dfe:	4b18      	ldr	r3, [pc, #96]	; (8000e60 <main+0xac>)
 8000e00:	881b      	ldrh	r3, [r3, #0]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d0fb      	beq.n	8000dfe <main+0x4a>
		  uart_buf_len = sprintf(uart_buf, "current speed (from encoder) = %d \r\n",fspeed);
 8000e06:	4b17      	ldr	r3, [pc, #92]	; (8000e64 <main+0xb0>)
 8000e08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	463b      	mov	r3, r7
 8000e10:	4915      	ldr	r1, [pc, #84]	; (8000e68 <main+0xb4>)
 8000e12:	4618      	mov	r0, r3
 8000e14:	f003 ff42 	bl	8004c9c <siprintf>
 8000e18:	6678      	str	r0, [r7, #100]	; 0x64
		  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000e1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000e1c:	b29a      	uxth	r2, r3
 8000e1e:	4639      	mov	r1, r7
 8000e20:	2364      	movs	r3, #100	; 0x64
 8000e22:	480e      	ldr	r0, [pc, #56]	; (8000e5c <main+0xa8>)
 8000e24:	f002 ff73 	bl	8003d0e <HAL_UART_Transmit>
		  HAL_Delay(50);
 8000e28:	2032      	movs	r0, #50	; 0x32
 8000e2a:	f000 fdc3 	bl	80019b4 <HAL_Delay>
		  uart_buf_len = sprintf(uart_buf, "target speed (from button setting) = %d \r\n",motor1.target);
 8000e2e:	4b0f      	ldr	r3, [pc, #60]	; (8000e6c <main+0xb8>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	463b      	mov	r3, r7
 8000e34:	490e      	ldr	r1, [pc, #56]	; (8000e70 <main+0xbc>)
 8000e36:	4618      	mov	r0, r3
 8000e38:	f003 ff30 	bl	8004c9c <siprintf>
 8000e3c:	6678      	str	r0, [r7, #100]	; 0x64
		  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000e3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000e40:	b29a      	uxth	r2, r3
 8000e42:	4639      	mov	r1, r7
 8000e44:	2364      	movs	r3, #100	; 0x64
 8000e46:	4805      	ldr	r0, [pc, #20]	; (8000e5c <main+0xa8>)
 8000e48:	f002 ff61 	bl	8003d0e <HAL_UART_Transmit>
		  encoderRead_flag = 0;
 8000e4c:	4b04      	ldr	r3, [pc, #16]	; (8000e60 <main+0xac>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	801a      	strh	r2, [r3, #0]
	  if(encoderRead_flag){
 8000e52:	e7d4      	b.n	8000dfe <main+0x4a>
 8000e54:	2000010c 	.word	0x2000010c
 8000e58:	080055fc 	.word	0x080055fc
 8000e5c:	2000019c 	.word	0x2000019c
 8000e60:	200001ee 	.word	0x200001ee
 8000e64:	200001ec 	.word	0x200001ec
 8000e68:	08005618 	.word	0x08005618
 8000e6c:	200001e0 	.word	0x200001e0
 8000e70:	08005640 	.word	0x08005640

08000e74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b094      	sub	sp, #80	; 0x50
 8000e78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e7a:	f107 031c 	add.w	r3, r7, #28
 8000e7e:	2234      	movs	r2, #52	; 0x34
 8000e80:	2100      	movs	r1, #0
 8000e82:	4618      	mov	r0, r3
 8000e84:	f003 ff2a 	bl	8004cdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e88:	f107 0308 	add.w	r3, r7, #8
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
 8000e96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e98:	2300      	movs	r3, #0
 8000e9a:	607b      	str	r3, [r7, #4]
 8000e9c:	4b23      	ldr	r3, [pc, #140]	; (8000f2c <SystemClock_Config+0xb8>)
 8000e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea0:	4a22      	ldr	r2, [pc, #136]	; (8000f2c <SystemClock_Config+0xb8>)
 8000ea2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ea8:	4b20      	ldr	r3, [pc, #128]	; (8000f2c <SystemClock_Config+0xb8>)
 8000eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb0:	607b      	str	r3, [r7, #4]
 8000eb2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	603b      	str	r3, [r7, #0]
 8000eb8:	4b1d      	ldr	r3, [pc, #116]	; (8000f30 <SystemClock_Config+0xbc>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ec0:	4a1b      	ldr	r2, [pc, #108]	; (8000f30 <SystemClock_Config+0xbc>)
 8000ec2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ec6:	6013      	str	r3, [r2, #0]
 8000ec8:	4b19      	ldr	r3, [pc, #100]	; (8000f30 <SystemClock_Config+0xbc>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ed0:	603b      	str	r3, [r7, #0]
 8000ed2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000edc:	2310      	movs	r3, #16
 8000ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ee4:	f107 031c 	add.w	r3, r7, #28
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f001 fbcf 	bl	800268c <HAL_RCC_OscConfig>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000ef4:	f000 fa7e 	bl	80013f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ef8:	230f      	movs	r3, #15
 8000efa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000efc:	2300      	movs	r3, #0
 8000efe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f00:	2300      	movs	r3, #0
 8000f02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f0c:	f107 0308 	add.w	r3, r7, #8
 8000f10:	2100      	movs	r1, #0
 8000f12:	4618      	mov	r0, r3
 8000f14:	f001 f8f6 	bl	8002104 <HAL_RCC_ClockConfig>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000f1e:	f000 fa69 	bl	80013f4 <Error_Handler>
  }
}
 8000f22:	bf00      	nop
 8000f24:	3750      	adds	r7, #80	; 0x50
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40023800 	.word	0x40023800
 8000f30:	40007000 	.word	0x40007000

08000f34 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b092      	sub	sp, #72	; 0x48
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f3a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]
 8000f54:	615a      	str	r2, [r3, #20]
 8000f56:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f58:	1d3b      	adds	r3, r7, #4
 8000f5a:	2220      	movs	r2, #32
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f003 febc 	bl	8004cdc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f64:	4b33      	ldr	r3, [pc, #204]	; (8001034 <MX_TIM1_Init+0x100>)
 8000f66:	4a34      	ldr	r2, [pc, #208]	; (8001038 <MX_TIM1_Init+0x104>)
 8000f68:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 8000f6a:	4b32      	ldr	r3, [pc, #200]	; (8001034 <MX_TIM1_Init+0x100>)
 8000f6c:	220f      	movs	r2, #15
 8000f6e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f70:	4b30      	ldr	r3, [pc, #192]	; (8001034 <MX_TIM1_Init+0x100>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000f76:	4b2f      	ldr	r3, [pc, #188]	; (8001034 <MX_TIM1_Init+0x100>)
 8000f78:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f7c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f7e:	4b2d      	ldr	r3, [pc, #180]	; (8001034 <MX_TIM1_Init+0x100>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f84:	4b2b      	ldr	r3, [pc, #172]	; (8001034 <MX_TIM1_Init+0x100>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f8a:	4b2a      	ldr	r3, [pc, #168]	; (8001034 <MX_TIM1_Init+0x100>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f90:	4828      	ldr	r0, [pc, #160]	; (8001034 <MX_TIM1_Init+0x100>)
 8000f92:	f001 fed9 	bl	8002d48 <HAL_TIM_PWM_Init>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000f9c:	f000 fa2a 	bl	80013f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fa8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000fac:	4619      	mov	r1, r3
 8000fae:	4821      	ldr	r0, [pc, #132]	; (8001034 <MX_TIM1_Init+0x100>)
 8000fb0:	f002 fd7e 	bl	8003ab0 <HAL_TIMEx_MasterConfigSynchronization>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000fba:	f000 fa1b 	bl	80013f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fbe:	2360      	movs	r3, #96	; 0x60
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fde:	2200      	movs	r2, #0
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4814      	ldr	r0, [pc, #80]	; (8001034 <MX_TIM1_Init+0x100>)
 8000fe4:	f002 fa04 	bl	80033f0 <HAL_TIM_PWM_ConfigChannel>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000fee:	f000 fa01 	bl	80013f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001002:	2300      	movs	r3, #0
 8001004:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001006:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800100a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800100c:	2300      	movs	r3, #0
 800100e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001010:	1d3b      	adds	r3, r7, #4
 8001012:	4619      	mov	r1, r3
 8001014:	4807      	ldr	r0, [pc, #28]	; (8001034 <MX_TIM1_Init+0x100>)
 8001016:	f002 fdc7 	bl	8003ba8 <HAL_TIMEx_ConfigBreakDeadTime>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8001020:	f000 f9e8 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001024:	4803      	ldr	r0, [pc, #12]	; (8001034 <MX_TIM1_Init+0x100>)
 8001026:	f000 fae1 	bl	80015ec <HAL_TIM_MspPostInit>

}
 800102a:	bf00      	nop
 800102c:	3748      	adds	r7, #72	; 0x48
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	2000007c 	.word	0x2000007c
 8001038:	40010000 	.word	0x40010000

0800103c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08c      	sub	sp, #48	; 0x30
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001042:	f107 030c 	add.w	r3, r7, #12
 8001046:	2224      	movs	r2, #36	; 0x24
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f003 fe46 	bl	8004cdc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001058:	4b21      	ldr	r3, [pc, #132]	; (80010e0 <MX_TIM2_Init+0xa4>)
 800105a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800105e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001060:	4b1f      	ldr	r3, [pc, #124]	; (80010e0 <MX_TIM2_Init+0xa4>)
 8001062:	2200      	movs	r2, #0
 8001064:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001066:	4b1e      	ldr	r3, [pc, #120]	; (80010e0 <MX_TIM2_Init+0xa4>)
 8001068:	2200      	movs	r2, #0
 800106a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800106c:	4b1c      	ldr	r3, [pc, #112]	; (80010e0 <MX_TIM2_Init+0xa4>)
 800106e:	f04f 32ff 	mov.w	r2, #4294967295
 8001072:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001074:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <MX_TIM2_Init+0xa4>)
 8001076:	2200      	movs	r2, #0
 8001078:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800107a:	4b19      	ldr	r3, [pc, #100]	; (80010e0 <MX_TIM2_Init+0xa4>)
 800107c:	2280      	movs	r2, #128	; 0x80
 800107e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001080:	2301      	movs	r3, #1
 8001082:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001084:	2300      	movs	r3, #0
 8001086:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001088:	2301      	movs	r3, #1
 800108a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800108c:	2300      	movs	r3, #0
 800108e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001094:	2300      	movs	r3, #0
 8001096:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001098:	2301      	movs	r3, #1
 800109a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800109c:	2300      	movs	r3, #0
 800109e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80010a4:	f107 030c 	add.w	r3, r7, #12
 80010a8:	4619      	mov	r1, r3
 80010aa:	480d      	ldr	r0, [pc, #52]	; (80010e0 <MX_TIM2_Init+0xa4>)
 80010ac:	f001 ff64 	bl	8002f78 <HAL_TIM_Encoder_Init>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80010b6:	f000 f99d 	bl	80013f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ba:	2300      	movs	r3, #0
 80010bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010be:	2300      	movs	r3, #0
 80010c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	4619      	mov	r1, r3
 80010c6:	4806      	ldr	r0, [pc, #24]	; (80010e0 <MX_TIM2_Init+0xa4>)
 80010c8:	f002 fcf2 	bl	8003ab0 <HAL_TIMEx_MasterConfigSynchronization>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80010d2:	f000 f98f 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010d6:	bf00      	nop
 80010d8:	3730      	adds	r7, #48	; 0x30
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	200000c4 	.word	0x200000c4

080010e4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ea:	463b      	mov	r3, r7
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80010f2:	4b15      	ldr	r3, [pc, #84]	; (8001148 <MX_TIM6_Init+0x64>)
 80010f4:	4a15      	ldr	r2, [pc, #84]	; (800114c <MX_TIM6_Init+0x68>)
 80010f6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 160-1;
 80010f8:	4b13      	ldr	r3, [pc, #76]	; (8001148 <MX_TIM6_Init+0x64>)
 80010fa:	229f      	movs	r2, #159	; 0x9f
 80010fc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010fe:	4b12      	ldr	r3, [pc, #72]	; (8001148 <MX_TIM6_Init+0x64>)
 8001100:	2200      	movs	r2, #0
 8001102:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 5000-1;
 8001104:	4b10      	ldr	r3, [pc, #64]	; (8001148 <MX_TIM6_Init+0x64>)
 8001106:	f241 3287 	movw	r2, #4999	; 0x1387
 800110a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800110c:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <MX_TIM6_Init+0x64>)
 800110e:	2280      	movs	r2, #128	; 0x80
 8001110:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001112:	480d      	ldr	r0, [pc, #52]	; (8001148 <MX_TIM6_Init+0x64>)
 8001114:	f001 fd58 	bl	8002bc8 <HAL_TIM_Base_Init>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800111e:	f000 f969 	bl	80013f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001122:	2300      	movs	r3, #0
 8001124:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001126:	2300      	movs	r3, #0
 8001128:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800112a:	463b      	mov	r3, r7
 800112c:	4619      	mov	r1, r3
 800112e:	4806      	ldr	r0, [pc, #24]	; (8001148 <MX_TIM6_Init+0x64>)
 8001130:	f002 fcbe 	bl	8003ab0 <HAL_TIMEx_MasterConfigSynchronization>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800113a:	f000 f95b 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	2000010c 	.word	0x2000010c
 800114c:	40001000 	.word	0x40001000

08001150 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b088      	sub	sp, #32
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
 8001164:	615a      	str	r2, [r3, #20]
 8001166:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001168:	4b1e      	ldr	r3, [pc, #120]	; (80011e4 <MX_TIM14_Init+0x94>)
 800116a:	4a1f      	ldr	r2, [pc, #124]	; (80011e8 <MX_TIM14_Init+0x98>)
 800116c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16-1;
 800116e:	4b1d      	ldr	r3, [pc, #116]	; (80011e4 <MX_TIM14_Init+0x94>)
 8001170:	220f      	movs	r2, #15
 8001172:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001174:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <MX_TIM14_Init+0x94>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000-1;
 800117a:	4b1a      	ldr	r3, [pc, #104]	; (80011e4 <MX_TIM14_Init+0x94>)
 800117c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001180:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001182:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <MX_TIM14_Init+0x94>)
 8001184:	2200      	movs	r2, #0
 8001186:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001188:	4b16      	ldr	r3, [pc, #88]	; (80011e4 <MX_TIM14_Init+0x94>)
 800118a:	2200      	movs	r2, #0
 800118c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800118e:	4815      	ldr	r0, [pc, #84]	; (80011e4 <MX_TIM14_Init+0x94>)
 8001190:	f001 fd1a 	bl	8002bc8 <HAL_TIM_Base_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 800119a:	f000 f92b 	bl	80013f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 800119e:	4811      	ldr	r0, [pc, #68]	; (80011e4 <MX_TIM14_Init+0x94>)
 80011a0:	f001 fdd2 	bl	8002d48 <HAL_TIM_PWM_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 80011aa:	f000 f923 	bl	80013f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011ae:	2360      	movs	r3, #96	; 0x60
 80011b0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011be:	1d3b      	adds	r3, r7, #4
 80011c0:	2200      	movs	r2, #0
 80011c2:	4619      	mov	r1, r3
 80011c4:	4807      	ldr	r0, [pc, #28]	; (80011e4 <MX_TIM14_Init+0x94>)
 80011c6:	f002 f913 	bl	80033f0 <HAL_TIM_PWM_ConfigChannel>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 80011d0:	f000 f910 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80011d4:	4803      	ldr	r0, [pc, #12]	; (80011e4 <MX_TIM14_Init+0x94>)
 80011d6:	f000 fa09 	bl	80015ec <HAL_TIM_MspPostInit>

}
 80011da:	bf00      	nop
 80011dc:	3720      	adds	r7, #32
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000154 	.word	0x20000154
 80011e8:	40002000 	.word	0x40002000

080011ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011f0:	4b11      	ldr	r3, [pc, #68]	; (8001238 <MX_USART2_UART_Init+0x4c>)
 80011f2:	4a12      	ldr	r2, [pc, #72]	; (800123c <MX_USART2_UART_Init+0x50>)
 80011f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011f6:	4b10      	ldr	r3, [pc, #64]	; (8001238 <MX_USART2_UART_Init+0x4c>)
 80011f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011fe:	4b0e      	ldr	r3, [pc, #56]	; (8001238 <MX_USART2_UART_Init+0x4c>)
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001204:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <MX_USART2_UART_Init+0x4c>)
 8001206:	2200      	movs	r2, #0
 8001208:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800120a:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <MX_USART2_UART_Init+0x4c>)
 800120c:	2200      	movs	r2, #0
 800120e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001210:	4b09      	ldr	r3, [pc, #36]	; (8001238 <MX_USART2_UART_Init+0x4c>)
 8001212:	220c      	movs	r2, #12
 8001214:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001216:	4b08      	ldr	r3, [pc, #32]	; (8001238 <MX_USART2_UART_Init+0x4c>)
 8001218:	2200      	movs	r2, #0
 800121a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800121c:	4b06      	ldr	r3, [pc, #24]	; (8001238 <MX_USART2_UART_Init+0x4c>)
 800121e:	2200      	movs	r2, #0
 8001220:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001222:	4805      	ldr	r0, [pc, #20]	; (8001238 <MX_USART2_UART_Init+0x4c>)
 8001224:	f002 fd26 	bl	8003c74 <HAL_UART_Init>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800122e:	f000 f8e1 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	2000019c 	.word	0x2000019c
 800123c:	40004400 	.word	0x40004400

08001240 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b088      	sub	sp, #32
 8001244:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001246:	f107 030c 	add.w	r3, r7, #12
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]
 8001252:	60da      	str	r2, [r3, #12]
 8001254:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60bb      	str	r3, [r7, #8]
 800125a:	4b2a      	ldr	r3, [pc, #168]	; (8001304 <MX_GPIO_Init+0xc4>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a29      	ldr	r2, [pc, #164]	; (8001304 <MX_GPIO_Init+0xc4>)
 8001260:	f043 0304 	orr.w	r3, r3, #4
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b27      	ldr	r3, [pc, #156]	; (8001304 <MX_GPIO_Init+0xc4>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0304 	and.w	r3, r3, #4
 800126e:	60bb      	str	r3, [r7, #8]
 8001270:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	607b      	str	r3, [r7, #4]
 8001276:	4b23      	ldr	r3, [pc, #140]	; (8001304 <MX_GPIO_Init+0xc4>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a22      	ldr	r2, [pc, #136]	; (8001304 <MX_GPIO_Init+0xc4>)
 800127c:	f043 0301 	orr.w	r3, r3, #1
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b20      	ldr	r3, [pc, #128]	; (8001304 <MX_GPIO_Init+0xc4>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	607b      	str	r3, [r7, #4]
 800128c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	603b      	str	r3, [r7, #0]
 8001292:	4b1c      	ldr	r3, [pc, #112]	; (8001304 <MX_GPIO_Init+0xc4>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a1b      	ldr	r2, [pc, #108]	; (8001304 <MX_GPIO_Init+0xc4>)
 8001298:	f043 0302 	orr.w	r3, r3, #2
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b19      	ldr	r3, [pc, #100]	; (8001304 <MX_GPIO_Init+0xc4>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	603b      	str	r3, [r7, #0]
 80012a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2120      	movs	r1, #32
 80012ae:	4816      	ldr	r0, [pc, #88]	; (8001308 <MX_GPIO_Init+0xc8>)
 80012b0:	f000 fedc 	bl	800206c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012ba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012c0:	2301      	movs	r3, #1
 80012c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012c4:	f107 030c 	add.w	r3, r7, #12
 80012c8:	4619      	mov	r1, r3
 80012ca:	4810      	ldr	r0, [pc, #64]	; (800130c <MX_GPIO_Init+0xcc>)
 80012cc:	f000 fd3a 	bl	8001d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80012d0:	2320      	movs	r3, #32
 80012d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d4:	2301      	movs	r3, #1
 80012d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012dc:	2300      	movs	r3, #0
 80012de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012e0:	f107 030c 	add.w	r3, r7, #12
 80012e4:	4619      	mov	r1, r3
 80012e6:	4808      	ldr	r0, [pc, #32]	; (8001308 <MX_GPIO_Init+0xc8>)
 80012e8:	f000 fd2c 	bl	8001d44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80012ec:	2200      	movs	r2, #0
 80012ee:	2100      	movs	r1, #0
 80012f0:	2028      	movs	r0, #40	; 0x28
 80012f2:	f000 fc5e 	bl	8001bb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012f6:	2028      	movs	r0, #40	; 0x28
 80012f8:	f000 fc77 	bl	8001bea <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012fc:	bf00      	nop
 80012fe:	3720      	adds	r7, #32
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40023800 	.word	0x40023800
 8001308:	40020000 	.word	0x40020000
 800130c:	40020800 	.word	0x40020800

08001310 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == B1_Pin) {
 800131a:	88fb      	ldrh	r3, [r7, #6]
 800131c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001320:	d110      	bne.n	8001344 <HAL_GPIO_EXTI_Callback+0x34>
//	HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
	Target = (Target >= 500)?0:(Target+20);
 8001322:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <HAL_GPIO_EXTI_Callback+0x44>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800132a:	d203      	bcs.n	8001334 <HAL_GPIO_EXTI_Callback+0x24>
 800132c:	4b09      	ldr	r3, [pc, #36]	; (8001354 <HAL_GPIO_EXTI_Callback+0x44>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	3314      	adds	r3, #20
 8001332:	e000      	b.n	8001336 <HAL_GPIO_EXTI_Callback+0x26>
 8001334:	2300      	movs	r3, #0
 8001336:	4a07      	ldr	r2, [pc, #28]	; (8001354 <HAL_GPIO_EXTI_Callback+0x44>)
 8001338:	6013      	str	r3, [r2, #0]
	motor1.target = Target;
 800133a:	4b06      	ldr	r3, [pc, #24]	; (8001354 <HAL_GPIO_EXTI_Callback+0x44>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a06      	ldr	r2, [pc, #24]	; (8001358 <HAL_GPIO_EXTI_Callback+0x48>)
 8001340:	6013      	str	r3, [r2, #0]
//	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,Target);
  } else {
      __NOP();
  }
}
 8001342:	e000      	b.n	8001346 <HAL_GPIO_EXTI_Callback+0x36>
      __NOP();
 8001344:	bf00      	nop
}
 8001346:	bf00      	nop
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	200001e8 	.word	0x200001e8
 8001358:	200001e0 	.word	0x200001e0

0800135c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
	short fspeed;
	short ERROR;
	static uint8_t i = 0;
	  if (htim == &htim6)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4a1d      	ldr	r2, [pc, #116]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d132      	bne.n	80013d2 <HAL_TIM_PeriodElapsedCallback+0x76>
	  {
	    fspeed = getSpeed(currentMotor);
 800136c:	4b1c      	ldr	r3, [pc, #112]	; (80013e0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800136e:	881b      	ldrh	r3, [r3, #0]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff fcb1 	bl	8000cd8 <getSpeed>
 8001376:	4603      	mov	r3, r0
 8001378:	81fb      	strh	r3, [r7, #14]
	    motor1.speed += PID_Cal(fspeed,&ERROR);
 800137a:	f107 020c 	add.w	r2, r7, #12
 800137e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001382:	4611      	mov	r1, r2
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff fcd3 	bl	8000d30 <PID_Cal>
 800138a:	4603      	mov	r3, r0
 800138c:	4619      	mov	r1, r3
 800138e:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001390:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001394:	b29a      	uxth	r2, r3
 8001396:	b28b      	uxth	r3, r1
 8001398:	4413      	add	r3, r2
 800139a:	b29b      	uxth	r3, r3
 800139c:	b21a      	sxth	r2, r3
 800139e:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80013a0:	809a      	strh	r2, [r3, #4]
		changeSpeed(0,&motor1);
 80013a2:	4910      	ldr	r1, [pc, #64]	; (80013e4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80013a4:	2000      	movs	r0, #0
 80013a6:	f7ff fc49 	bl	8000c3c <changeSpeed>

		i++;
 80013aa:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	3301      	adds	r3, #1
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	4b0d      	ldr	r3, [pc, #52]	; (80013e8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80013b4:	701a      	strb	r2, [r3, #0]
		if(i >= 100)	// every 5msec *100=0.5 sec
 80013b6:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b63      	cmp	r3, #99	; 0x63
 80013bc:	d909      	bls.n	80013d2 <HAL_TIM_PeriodElapsedCallback+0x76>
		{
			i = 0;
 80013be:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80013c4:	2120      	movs	r1, #32
 80013c6:	4809      	ldr	r0, [pc, #36]	; (80013ec <HAL_TIM_PeriodElapsedCallback+0x90>)
 80013c8:	f000 fe69 	bl	800209e <HAL_GPIO_TogglePin>
			encoderRead_flag = 1;
 80013cc:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	801a      	strh	r2, [r3, #0]

	if(htim->Instance == TIM3)
	{

	}
}
 80013d2:	bf00      	nop
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	2000010c 	.word	0x2000010c
 80013e0:	20000000 	.word	0x20000000
 80013e4:	200001e0 	.word	0x200001e0
 80013e8:	200001f4 	.word	0x200001f4
 80013ec:	40020000 	.word	0x40020000
 80013f0:	200001ee 	.word	0x200001ee

080013f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013f8:	b672      	cpsid	i
}
 80013fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013fc:	e7fe      	b.n	80013fc <Error_Handler+0x8>
	...

08001400 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	607b      	str	r3, [r7, #4]
 800140a:	4b10      	ldr	r3, [pc, #64]	; (800144c <HAL_MspInit+0x4c>)
 800140c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140e:	4a0f      	ldr	r2, [pc, #60]	; (800144c <HAL_MspInit+0x4c>)
 8001410:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001414:	6453      	str	r3, [r2, #68]	; 0x44
 8001416:	4b0d      	ldr	r3, [pc, #52]	; (800144c <HAL_MspInit+0x4c>)
 8001418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	603b      	str	r3, [r7, #0]
 8001426:	4b09      	ldr	r3, [pc, #36]	; (800144c <HAL_MspInit+0x4c>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	4a08      	ldr	r2, [pc, #32]	; (800144c <HAL_MspInit+0x4c>)
 800142c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001430:	6413      	str	r3, [r2, #64]	; 0x40
 8001432:	4b06      	ldr	r3, [pc, #24]	; (800144c <HAL_MspInit+0x4c>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143a:	603b      	str	r3, [r7, #0]
 800143c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	40023800 	.word	0x40023800

08001450 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a0b      	ldr	r2, [pc, #44]	; (800148c <HAL_TIM_PWM_MspInit+0x3c>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d10d      	bne.n	800147e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	4b0a      	ldr	r3, [pc, #40]	; (8001490 <HAL_TIM_PWM_MspInit+0x40>)
 8001468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146a:	4a09      	ldr	r2, [pc, #36]	; (8001490 <HAL_TIM_PWM_MspInit+0x40>)
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	6453      	str	r3, [r2, #68]	; 0x44
 8001472:	4b07      	ldr	r3, [pc, #28]	; (8001490 <HAL_TIM_PWM_MspInit+0x40>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800147e:	bf00      	nop
 8001480:	3714      	adds	r7, #20
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	40010000 	.word	0x40010000
 8001490:	40023800 	.word	0x40023800

08001494 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08a      	sub	sp, #40	; 0x28
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014b4:	d152      	bne.n	800155c <HAL_TIM_Encoder_MspInit+0xc8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	4b2a      	ldr	r3, [pc, #168]	; (8001564 <HAL_TIM_Encoder_MspInit+0xd0>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	4a29      	ldr	r2, [pc, #164]	; (8001564 <HAL_TIM_Encoder_MspInit+0xd0>)
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	6413      	str	r3, [r2, #64]	; 0x40
 80014c6:	4b27      	ldr	r3, [pc, #156]	; (8001564 <HAL_TIM_Encoder_MspInit+0xd0>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	613b      	str	r3, [r7, #16]
 80014d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	4b23      	ldr	r3, [pc, #140]	; (8001564 <HAL_TIM_Encoder_MspInit+0xd0>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a22      	ldr	r2, [pc, #136]	; (8001564 <HAL_TIM_Encoder_MspInit+0xd0>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b20      	ldr	r3, [pc, #128]	; (8001564 <HAL_TIM_Encoder_MspInit+0xd0>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	4b1c      	ldr	r3, [pc, #112]	; (8001564 <HAL_TIM_Encoder_MspInit+0xd0>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	4a1b      	ldr	r2, [pc, #108]	; (8001564 <HAL_TIM_Encoder_MspInit+0xd0>)
 80014f8:	f043 0302 	orr.w	r3, r3, #2
 80014fc:	6313      	str	r3, [r2, #48]	; 0x30
 80014fe:	4b19      	ldr	r3, [pc, #100]	; (8001564 <HAL_TIM_Encoder_MspInit+0xd0>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	60bb      	str	r3, [r7, #8]
 8001508:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = encoder1A_Pin;
 800150a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800150e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001510:	2302      	movs	r3, #2
 8001512:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001514:	2301      	movs	r3, #1
 8001516:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001518:	2300      	movs	r3, #0
 800151a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800151c:	2301      	movs	r3, #1
 800151e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(encoder1A_GPIO_Port, &GPIO_InitStruct);
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	4619      	mov	r1, r3
 8001526:	4810      	ldr	r0, [pc, #64]	; (8001568 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001528:	f000 fc0c 	bl	8001d44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = encoder1B_Pin;
 800152c:	2308      	movs	r3, #8
 800152e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001530:	2302      	movs	r3, #2
 8001532:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001534:	2301      	movs	r3, #1
 8001536:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001538:	2300      	movs	r3, #0
 800153a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800153c:	2301      	movs	r3, #1
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(encoder1B_GPIO_Port, &GPIO_InitStruct);
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	4619      	mov	r1, r3
 8001546:	4809      	ldr	r0, [pc, #36]	; (800156c <HAL_TIM_Encoder_MspInit+0xd8>)
 8001548:	f000 fbfc 	bl	8001d44 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800154c:	2200      	movs	r2, #0
 800154e:	2101      	movs	r1, #1
 8001550:	201c      	movs	r0, #28
 8001552:	f000 fb2e 	bl	8001bb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001556:	201c      	movs	r0, #28
 8001558:	f000 fb47 	bl	8001bea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800155c:	bf00      	nop
 800155e:	3728      	adds	r7, #40	; 0x28
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40023800 	.word	0x40023800
 8001568:	40020000 	.word	0x40020000
 800156c:	40020400 	.word	0x40020400

08001570 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a18      	ldr	r2, [pc, #96]	; (80015e0 <HAL_TIM_Base_MspInit+0x70>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d116      	bne.n	80015b0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	4b17      	ldr	r3, [pc, #92]	; (80015e4 <HAL_TIM_Base_MspInit+0x74>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	4a16      	ldr	r2, [pc, #88]	; (80015e4 <HAL_TIM_Base_MspInit+0x74>)
 800158c:	f043 0310 	orr.w	r3, r3, #16
 8001590:	6413      	str	r3, [r2, #64]	; 0x40
 8001592:	4b14      	ldr	r3, [pc, #80]	; (80015e4 <HAL_TIM_Base_MspInit+0x74>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	f003 0310 	and.w	r3, r3, #16
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 800159e:	2200      	movs	r2, #0
 80015a0:	2103      	movs	r1, #3
 80015a2:	2036      	movs	r0, #54	; 0x36
 80015a4:	f000 fb05 	bl	8001bb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015a8:	2036      	movs	r0, #54	; 0x36
 80015aa:	f000 fb1e 	bl	8001bea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80015ae:	e012      	b.n	80015d6 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM14)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a0c      	ldr	r2, [pc, #48]	; (80015e8 <HAL_TIM_Base_MspInit+0x78>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d10d      	bne.n	80015d6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <HAL_TIM_Base_MspInit+0x74>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	4a08      	ldr	r2, [pc, #32]	; (80015e4 <HAL_TIM_Base_MspInit+0x74>)
 80015c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015c8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ca:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <HAL_TIM_Base_MspInit+0x74>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d2:	60bb      	str	r3, [r7, #8]
 80015d4:	68bb      	ldr	r3, [r7, #8]
}
 80015d6:	bf00      	nop
 80015d8:	3710      	adds	r7, #16
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40001000 	.word	0x40001000
 80015e4:	40023800 	.word	0x40023800
 80015e8:	40002000 	.word	0x40002000

080015ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b08a      	sub	sp, #40	; 0x28
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f4:	f107 0314 	add.w	r3, r7, #20
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a24      	ldr	r2, [pc, #144]	; (800169c <HAL_TIM_MspPostInit+0xb0>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d11f      	bne.n	800164e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	613b      	str	r3, [r7, #16]
 8001612:	4b23      	ldr	r3, [pc, #140]	; (80016a0 <HAL_TIM_MspPostInit+0xb4>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	4a22      	ldr	r2, [pc, #136]	; (80016a0 <HAL_TIM_MspPostInit+0xb4>)
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	6313      	str	r3, [r2, #48]	; 0x30
 800161e:	4b20      	ldr	r3, [pc, #128]	; (80016a0 <HAL_TIM_MspPostInit+0xb4>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	613b      	str	r3, [r7, #16]
 8001628:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM1N_Pin;
 800162a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800162e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001630:	2302      	movs	r3, #2
 8001632:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001638:	2300      	movs	r3, #0
 800163a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800163c:	2301      	movs	r3, #1
 800163e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM1N_GPIO_Port, &GPIO_InitStruct);
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	4619      	mov	r1, r3
 8001646:	4817      	ldr	r0, [pc, #92]	; (80016a4 <HAL_TIM_MspPostInit+0xb8>)
 8001648:	f000 fb7c 	bl	8001d44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 800164c:	e022      	b.n	8001694 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM14)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a15      	ldr	r2, [pc, #84]	; (80016a8 <HAL_TIM_MspPostInit+0xbc>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d11d      	bne.n	8001694 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001658:	2300      	movs	r3, #0
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	4b10      	ldr	r3, [pc, #64]	; (80016a0 <HAL_TIM_MspPostInit+0xb4>)
 800165e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001660:	4a0f      	ldr	r2, [pc, #60]	; (80016a0 <HAL_TIM_MspPostInit+0xb4>)
 8001662:	f043 0301 	orr.w	r3, r3, #1
 8001666:	6313      	str	r3, [r2, #48]	; 0x30
 8001668:	4b0d      	ldr	r3, [pc, #52]	; (80016a0 <HAL_TIM_MspPostInit+0xb4>)
 800166a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM1_Pin;
 8001674:	2380      	movs	r3, #128	; 0x80
 8001676:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001678:	2302      	movs	r3, #2
 800167a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001680:	2300      	movs	r3, #0
 8001682:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8001684:	2309      	movs	r3, #9
 8001686:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM1_GPIO_Port, &GPIO_InitStruct);
 8001688:	f107 0314 	add.w	r3, r7, #20
 800168c:	4619      	mov	r1, r3
 800168e:	4805      	ldr	r0, [pc, #20]	; (80016a4 <HAL_TIM_MspPostInit+0xb8>)
 8001690:	f000 fb58 	bl	8001d44 <HAL_GPIO_Init>
}
 8001694:	bf00      	nop
 8001696:	3728      	adds	r7, #40	; 0x28
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40010000 	.word	0x40010000
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40020000 	.word	0x40020000
 80016a8:	40002000 	.word	0x40002000

080016ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08a      	sub	sp, #40	; 0x28
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b4:	f107 0314 	add.w	r3, r7, #20
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a1d      	ldr	r2, [pc, #116]	; (8001740 <HAL_UART_MspInit+0x94>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d133      	bne.n	8001736 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	613b      	str	r3, [r7, #16]
 80016d2:	4b1c      	ldr	r3, [pc, #112]	; (8001744 <HAL_UART_MspInit+0x98>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	4a1b      	ldr	r2, [pc, #108]	; (8001744 <HAL_UART_MspInit+0x98>)
 80016d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016dc:	6413      	str	r3, [r2, #64]	; 0x40
 80016de:	4b19      	ldr	r3, [pc, #100]	; (8001744 <HAL_UART_MspInit+0x98>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e6:	613b      	str	r3, [r7, #16]
 80016e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	4b15      	ldr	r3, [pc, #84]	; (8001744 <HAL_UART_MspInit+0x98>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4a14      	ldr	r2, [pc, #80]	; (8001744 <HAL_UART_MspInit+0x98>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4b12      	ldr	r3, [pc, #72]	; (8001744 <HAL_UART_MspInit+0x98>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001706:	230c      	movs	r3, #12
 8001708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170a:	2302      	movs	r3, #2
 800170c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001712:	2303      	movs	r3, #3
 8001714:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001716:	2307      	movs	r3, #7
 8001718:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171a:	f107 0314 	add.w	r3, r7, #20
 800171e:	4619      	mov	r1, r3
 8001720:	4809      	ldr	r0, [pc, #36]	; (8001748 <HAL_UART_MspInit+0x9c>)
 8001722:	f000 fb0f 	bl	8001d44 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8001726:	2200      	movs	r2, #0
 8001728:	2102      	movs	r1, #2
 800172a:	2026      	movs	r0, #38	; 0x26
 800172c:	f000 fa41 	bl	8001bb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001730:	2026      	movs	r0, #38	; 0x26
 8001732:	f000 fa5a 	bl	8001bea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001736:	bf00      	nop
 8001738:	3728      	adds	r7, #40	; 0x28
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40004400 	.word	0x40004400
 8001744:	40023800 	.word	0x40023800
 8001748:	40020000 	.word	0x40020000

0800174c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001750:	e7fe      	b.n	8001750 <NMI_Handler+0x4>

08001752 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001756:	e7fe      	b.n	8001756 <HardFault_Handler+0x4>

08001758 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800175c:	e7fe      	b.n	800175c <MemManage_Handler+0x4>

0800175e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001762:	e7fe      	b.n	8001762 <BusFault_Handler+0x4>

08001764 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001768:	e7fe      	b.n	8001768 <UsageFault_Handler+0x4>

0800176a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800176a:	b480      	push	{r7}
 800176c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001786:	b480      	push	{r7}
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001798:	f000 f8ec 	bl	8001974 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800179c:	bf00      	nop
 800179e:	bd80      	pop	{r7, pc}

080017a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017a4:	4802      	ldr	r0, [pc, #8]	; (80017b0 <TIM2_IRQHandler+0x10>)
 80017a6:	f001 fd1b 	bl	80031e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	200000c4 	.word	0x200000c4

080017b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017b8:	4802      	ldr	r0, [pc, #8]	; (80017c4 <USART2_IRQHandler+0x10>)
 80017ba:	f002 fb3b 	bl	8003e34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	2000019c 	.word	0x2000019c

080017c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80017cc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80017d0:	f000 fc80 	bl	80020d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017d4:	bf00      	nop
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80017dc:	4802      	ldr	r0, [pc, #8]	; (80017e8 <TIM6_DAC_IRQHandler+0x10>)
 80017de:	f001 fcff 	bl	80031e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	2000010c 	.word	0x2000010c

080017ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017f4:	4a14      	ldr	r2, [pc, #80]	; (8001848 <_sbrk+0x5c>)
 80017f6:	4b15      	ldr	r3, [pc, #84]	; (800184c <_sbrk+0x60>)
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001800:	4b13      	ldr	r3, [pc, #76]	; (8001850 <_sbrk+0x64>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d102      	bne.n	800180e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001808:	4b11      	ldr	r3, [pc, #68]	; (8001850 <_sbrk+0x64>)
 800180a:	4a12      	ldr	r2, [pc, #72]	; (8001854 <_sbrk+0x68>)
 800180c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800180e:	4b10      	ldr	r3, [pc, #64]	; (8001850 <_sbrk+0x64>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4413      	add	r3, r2
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	429a      	cmp	r2, r3
 800181a:	d207      	bcs.n	800182c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800181c:	f003 fa66 	bl	8004cec <__errno>
 8001820:	4603      	mov	r3, r0
 8001822:	220c      	movs	r2, #12
 8001824:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001826:	f04f 33ff 	mov.w	r3, #4294967295
 800182a:	e009      	b.n	8001840 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800182c:	4b08      	ldr	r3, [pc, #32]	; (8001850 <_sbrk+0x64>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001832:	4b07      	ldr	r3, [pc, #28]	; (8001850 <_sbrk+0x64>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4413      	add	r3, r2
 800183a:	4a05      	ldr	r2, [pc, #20]	; (8001850 <_sbrk+0x64>)
 800183c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800183e:	68fb      	ldr	r3, [r7, #12]
}
 8001840:	4618      	mov	r0, r3
 8001842:	3718      	adds	r7, #24
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20020000 	.word	0x20020000
 800184c:	00000400 	.word	0x00000400
 8001850:	200001f8 	.word	0x200001f8
 8001854:	20000348 	.word	0x20000348

08001858 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <SystemInit+0x20>)
 800185e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001862:	4a05      	ldr	r2, [pc, #20]	; (8001878 <SystemInit+0x20>)
 8001864:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001868:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800187c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001880:	480d      	ldr	r0, [pc, #52]	; (80018b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001882:	490e      	ldr	r1, [pc, #56]	; (80018bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001884:	4a0e      	ldr	r2, [pc, #56]	; (80018c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001886:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001888:	e002      	b.n	8001890 <LoopCopyDataInit>

0800188a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800188a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800188c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800188e:	3304      	adds	r3, #4

08001890 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001890:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001892:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001894:	d3f9      	bcc.n	800188a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001896:	4a0b      	ldr	r2, [pc, #44]	; (80018c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001898:	4c0b      	ldr	r4, [pc, #44]	; (80018c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800189a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800189c:	e001      	b.n	80018a2 <LoopFillZerobss>

0800189e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800189e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018a0:	3204      	adds	r2, #4

080018a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018a4:	d3fb      	bcc.n	800189e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018a6:	f7ff ffd7 	bl	8001858 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018aa:	f003 fa25 	bl	8004cf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018ae:	f7ff fa81 	bl	8000db4 <main>
  bx  lr    
 80018b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018bc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80018c0:	080056c8 	.word	0x080056c8
  ldr r2, =_sbss
 80018c4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80018c8:	20000348 	.word	0x20000348

080018cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018cc:	e7fe      	b.n	80018cc <ADC_IRQHandler>
	...

080018d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018d4:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <HAL_Init+0x40>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a0d      	ldr	r2, [pc, #52]	; (8001910 <HAL_Init+0x40>)
 80018da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018e0:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <HAL_Init+0x40>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a0a      	ldr	r2, [pc, #40]	; (8001910 <HAL_Init+0x40>)
 80018e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018ec:	4b08      	ldr	r3, [pc, #32]	; (8001910 <HAL_Init+0x40>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a07      	ldr	r2, [pc, #28]	; (8001910 <HAL_Init+0x40>)
 80018f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018f8:	2003      	movs	r0, #3
 80018fa:	f000 f94f 	bl	8001b9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018fe:	200f      	movs	r0, #15
 8001900:	f000 f808 	bl	8001914 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001904:	f7ff fd7c 	bl	8001400 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40023c00 	.word	0x40023c00

08001914 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800191c:	4b12      	ldr	r3, [pc, #72]	; (8001968 <HAL_InitTick+0x54>)
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	4b12      	ldr	r3, [pc, #72]	; (800196c <HAL_InitTick+0x58>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	4619      	mov	r1, r3
 8001926:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800192a:	fbb3 f3f1 	udiv	r3, r3, r1
 800192e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001932:	4618      	mov	r0, r3
 8001934:	f000 f967 	bl	8001c06 <HAL_SYSTICK_Config>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e00e      	b.n	8001960 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2b0f      	cmp	r3, #15
 8001946:	d80a      	bhi.n	800195e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001948:	2200      	movs	r2, #0
 800194a:	6879      	ldr	r1, [r7, #4]
 800194c:	f04f 30ff 	mov.w	r0, #4294967295
 8001950:	f000 f92f 	bl	8001bb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001954:	4a06      	ldr	r2, [pc, #24]	; (8001970 <HAL_InitTick+0x5c>)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800195a:	2300      	movs	r3, #0
 800195c:	e000      	b.n	8001960 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
}
 8001960:	4618      	mov	r0, r3
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	20000004 	.word	0x20000004
 800196c:	2000000c 	.word	0x2000000c
 8001970:	20000008 	.word	0x20000008

08001974 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001978:	4b06      	ldr	r3, [pc, #24]	; (8001994 <HAL_IncTick+0x20>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	461a      	mov	r2, r3
 800197e:	4b06      	ldr	r3, [pc, #24]	; (8001998 <HAL_IncTick+0x24>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4413      	add	r3, r2
 8001984:	4a04      	ldr	r2, [pc, #16]	; (8001998 <HAL_IncTick+0x24>)
 8001986:	6013      	str	r3, [r2, #0]
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	2000000c 	.word	0x2000000c
 8001998:	200001fc 	.word	0x200001fc

0800199c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  return uwTick;
 80019a0:	4b03      	ldr	r3, [pc, #12]	; (80019b0 <HAL_GetTick+0x14>)
 80019a2:	681b      	ldr	r3, [r3, #0]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	200001fc 	.word	0x200001fc

080019b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019bc:	f7ff ffee 	bl	800199c <HAL_GetTick>
 80019c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019cc:	d005      	beq.n	80019da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019ce:	4b0a      	ldr	r3, [pc, #40]	; (80019f8 <HAL_Delay+0x44>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	461a      	mov	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	4413      	add	r3, r2
 80019d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019da:	bf00      	nop
 80019dc:	f7ff ffde 	bl	800199c <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	68fa      	ldr	r2, [r7, #12]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d8f7      	bhi.n	80019dc <HAL_Delay+0x28>
  {
  }
}
 80019ec:	bf00      	nop
 80019ee:	bf00      	nop
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	2000000c 	.word	0x2000000c

080019fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f003 0307 	and.w	r3, r3, #7
 8001a0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a0c:	4b0c      	ldr	r3, [pc, #48]	; (8001a40 <__NVIC_SetPriorityGrouping+0x44>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a12:	68ba      	ldr	r2, [r7, #8]
 8001a14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a18:	4013      	ands	r3, r2
 8001a1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a2e:	4a04      	ldr	r2, [pc, #16]	; (8001a40 <__NVIC_SetPriorityGrouping+0x44>)
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	60d3      	str	r3, [r2, #12]
}
 8001a34:	bf00      	nop
 8001a36:	3714      	adds	r7, #20
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a48:	4b04      	ldr	r3, [pc, #16]	; (8001a5c <__NVIC_GetPriorityGrouping+0x18>)
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	0a1b      	lsrs	r3, r3, #8
 8001a4e:	f003 0307 	and.w	r3, r3, #7
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	e000ed00 	.word	0xe000ed00

08001a60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	db0b      	blt.n	8001a8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	f003 021f 	and.w	r2, r3, #31
 8001a78:	4907      	ldr	r1, [pc, #28]	; (8001a98 <__NVIC_EnableIRQ+0x38>)
 8001a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7e:	095b      	lsrs	r3, r3, #5
 8001a80:	2001      	movs	r0, #1
 8001a82:	fa00 f202 	lsl.w	r2, r0, r2
 8001a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a8a:	bf00      	nop
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	e000e100 	.word	0xe000e100

08001a9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	6039      	str	r1, [r7, #0]
 8001aa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	db0a      	blt.n	8001ac6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	b2da      	uxtb	r2, r3
 8001ab4:	490c      	ldr	r1, [pc, #48]	; (8001ae8 <__NVIC_SetPriority+0x4c>)
 8001ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aba:	0112      	lsls	r2, r2, #4
 8001abc:	b2d2      	uxtb	r2, r2
 8001abe:	440b      	add	r3, r1
 8001ac0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ac4:	e00a      	b.n	8001adc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	b2da      	uxtb	r2, r3
 8001aca:	4908      	ldr	r1, [pc, #32]	; (8001aec <__NVIC_SetPriority+0x50>)
 8001acc:	79fb      	ldrb	r3, [r7, #7]
 8001ace:	f003 030f 	and.w	r3, r3, #15
 8001ad2:	3b04      	subs	r3, #4
 8001ad4:	0112      	lsls	r2, r2, #4
 8001ad6:	b2d2      	uxtb	r2, r2
 8001ad8:	440b      	add	r3, r1
 8001ada:	761a      	strb	r2, [r3, #24]
}
 8001adc:	bf00      	nop
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr
 8001ae8:	e000e100 	.word	0xe000e100
 8001aec:	e000ed00 	.word	0xe000ed00

08001af0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b089      	sub	sp, #36	; 0x24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	f1c3 0307 	rsb	r3, r3, #7
 8001b0a:	2b04      	cmp	r3, #4
 8001b0c:	bf28      	it	cs
 8001b0e:	2304      	movcs	r3, #4
 8001b10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	3304      	adds	r3, #4
 8001b16:	2b06      	cmp	r3, #6
 8001b18:	d902      	bls.n	8001b20 <NVIC_EncodePriority+0x30>
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	3b03      	subs	r3, #3
 8001b1e:	e000      	b.n	8001b22 <NVIC_EncodePriority+0x32>
 8001b20:	2300      	movs	r3, #0
 8001b22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b24:	f04f 32ff 	mov.w	r2, #4294967295
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	43da      	mvns	r2, r3
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	401a      	ands	r2, r3
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b38:	f04f 31ff 	mov.w	r1, #4294967295
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b42:	43d9      	mvns	r1, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b48:	4313      	orrs	r3, r2
         );
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3724      	adds	r7, #36	; 0x24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
	...

08001b58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	3b01      	subs	r3, #1
 8001b64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b68:	d301      	bcc.n	8001b6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e00f      	b.n	8001b8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b6e:	4a0a      	ldr	r2, [pc, #40]	; (8001b98 <SysTick_Config+0x40>)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	3b01      	subs	r3, #1
 8001b74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b76:	210f      	movs	r1, #15
 8001b78:	f04f 30ff 	mov.w	r0, #4294967295
 8001b7c:	f7ff ff8e 	bl	8001a9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b80:	4b05      	ldr	r3, [pc, #20]	; (8001b98 <SysTick_Config+0x40>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b86:	4b04      	ldr	r3, [pc, #16]	; (8001b98 <SysTick_Config+0x40>)
 8001b88:	2207      	movs	r2, #7
 8001b8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	e000e010 	.word	0xe000e010

08001b9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f7ff ff29 	bl	80019fc <__NVIC_SetPriorityGrouping>
}
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b086      	sub	sp, #24
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	4603      	mov	r3, r0
 8001bba:	60b9      	str	r1, [r7, #8]
 8001bbc:	607a      	str	r2, [r7, #4]
 8001bbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bc4:	f7ff ff3e 	bl	8001a44 <__NVIC_GetPriorityGrouping>
 8001bc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	68b9      	ldr	r1, [r7, #8]
 8001bce:	6978      	ldr	r0, [r7, #20]
 8001bd0:	f7ff ff8e 	bl	8001af0 <NVIC_EncodePriority>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bda:	4611      	mov	r1, r2
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff ff5d 	bl	8001a9c <__NVIC_SetPriority>
}
 8001be2:	bf00      	nop
 8001be4:	3718      	adds	r7, #24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b082      	sub	sp, #8
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff ff31 	bl	8001a60 <__NVIC_EnableIRQ>
}
 8001bfe:	bf00      	nop
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b082      	sub	sp, #8
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f7ff ffa2 	bl	8001b58 <SysTick_Config>
 8001c14:	4603      	mov	r3, r0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b084      	sub	sp, #16
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c2a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c2c:	f7ff feb6 	bl	800199c <HAL_GetTick>
 8001c30:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d008      	beq.n	8001c50 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2280      	movs	r2, #128	; 0x80
 8001c42:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e052      	b.n	8001cf6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f022 0216 	bic.w	r2, r2, #22
 8001c5e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	695a      	ldr	r2, [r3, #20]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c6e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d103      	bne.n	8001c80 <HAL_DMA_Abort+0x62>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d007      	beq.n	8001c90 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f022 0208 	bic.w	r2, r2, #8
 8001c8e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f022 0201 	bic.w	r2, r2, #1
 8001c9e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ca0:	e013      	b.n	8001cca <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ca2:	f7ff fe7b 	bl	800199c <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b05      	cmp	r3, #5
 8001cae:	d90c      	bls.n	8001cca <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2220      	movs	r2, #32
 8001cb4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2203      	movs	r2, #3
 8001cba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e015      	b.n	8001cf6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d1e4      	bne.n	8001ca2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cdc:	223f      	movs	r2, #63	; 0x3f
 8001cde:	409a      	lsls	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	b083      	sub	sp, #12
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d004      	beq.n	8001d1c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2280      	movs	r2, #128	; 0x80
 8001d16:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e00c      	b.n	8001d36 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2205      	movs	r2, #5
 8001d20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f022 0201 	bic.w	r2, r2, #1
 8001d32:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
	...

08001d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b089      	sub	sp, #36	; 0x24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d52:	2300      	movs	r3, #0
 8001d54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d56:	2300      	movs	r3, #0
 8001d58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61fb      	str	r3, [r7, #28]
 8001d5e:	e165      	b.n	800202c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d60:	2201      	movs	r2, #1
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	697a      	ldr	r2, [r7, #20]
 8001d70:	4013      	ands	r3, r2
 8001d72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	f040 8154 	bne.w	8002026 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f003 0303 	and.w	r3, r3, #3
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d005      	beq.n	8001d96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d130      	bne.n	8001df8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	2203      	movs	r2, #3
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	43db      	mvns	r3, r3
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	4013      	ands	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	68da      	ldr	r2, [r3, #12]
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dcc:	2201      	movs	r2, #1
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	091b      	lsrs	r3, r3, #4
 8001de2:	f003 0201 	and.w	r2, r3, #1
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f003 0303 	and.w	r3, r3, #3
 8001e00:	2b03      	cmp	r3, #3
 8001e02:	d017      	beq.n	8001e34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	2203      	movs	r2, #3
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	43db      	mvns	r3, r3
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f003 0303 	and.w	r3, r3, #3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d123      	bne.n	8001e88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	08da      	lsrs	r2, r3, #3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3208      	adds	r2, #8
 8001e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	f003 0307 	and.w	r3, r3, #7
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	220f      	movs	r2, #15
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	4013      	ands	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	691a      	ldr	r2, [r3, #16]
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	08da      	lsrs	r2, r3, #3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	3208      	adds	r2, #8
 8001e82:	69b9      	ldr	r1, [r7, #24]
 8001e84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	2203      	movs	r2, #3
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f003 0203 	and.w	r2, r3, #3
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	f000 80ae 	beq.w	8002026 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	4b5d      	ldr	r3, [pc, #372]	; (8002044 <HAL_GPIO_Init+0x300>)
 8001ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed2:	4a5c      	ldr	r2, [pc, #368]	; (8002044 <HAL_GPIO_Init+0x300>)
 8001ed4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ed8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eda:	4b5a      	ldr	r3, [pc, #360]	; (8002044 <HAL_GPIO_Init+0x300>)
 8001edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ee6:	4a58      	ldr	r2, [pc, #352]	; (8002048 <HAL_GPIO_Init+0x304>)
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	089b      	lsrs	r3, r3, #2
 8001eec:	3302      	adds	r3, #2
 8001eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	f003 0303 	and.w	r3, r3, #3
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	220f      	movs	r2, #15
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43db      	mvns	r3, r3
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	4013      	ands	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a4f      	ldr	r2, [pc, #316]	; (800204c <HAL_GPIO_Init+0x308>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d025      	beq.n	8001f5e <HAL_GPIO_Init+0x21a>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a4e      	ldr	r2, [pc, #312]	; (8002050 <HAL_GPIO_Init+0x30c>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d01f      	beq.n	8001f5a <HAL_GPIO_Init+0x216>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a4d      	ldr	r2, [pc, #308]	; (8002054 <HAL_GPIO_Init+0x310>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d019      	beq.n	8001f56 <HAL_GPIO_Init+0x212>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a4c      	ldr	r2, [pc, #304]	; (8002058 <HAL_GPIO_Init+0x314>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d013      	beq.n	8001f52 <HAL_GPIO_Init+0x20e>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a4b      	ldr	r2, [pc, #300]	; (800205c <HAL_GPIO_Init+0x318>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d00d      	beq.n	8001f4e <HAL_GPIO_Init+0x20a>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a4a      	ldr	r2, [pc, #296]	; (8002060 <HAL_GPIO_Init+0x31c>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d007      	beq.n	8001f4a <HAL_GPIO_Init+0x206>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a49      	ldr	r2, [pc, #292]	; (8002064 <HAL_GPIO_Init+0x320>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d101      	bne.n	8001f46 <HAL_GPIO_Init+0x202>
 8001f42:	2306      	movs	r3, #6
 8001f44:	e00c      	b.n	8001f60 <HAL_GPIO_Init+0x21c>
 8001f46:	2307      	movs	r3, #7
 8001f48:	e00a      	b.n	8001f60 <HAL_GPIO_Init+0x21c>
 8001f4a:	2305      	movs	r3, #5
 8001f4c:	e008      	b.n	8001f60 <HAL_GPIO_Init+0x21c>
 8001f4e:	2304      	movs	r3, #4
 8001f50:	e006      	b.n	8001f60 <HAL_GPIO_Init+0x21c>
 8001f52:	2303      	movs	r3, #3
 8001f54:	e004      	b.n	8001f60 <HAL_GPIO_Init+0x21c>
 8001f56:	2302      	movs	r3, #2
 8001f58:	e002      	b.n	8001f60 <HAL_GPIO_Init+0x21c>
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e000      	b.n	8001f60 <HAL_GPIO_Init+0x21c>
 8001f5e:	2300      	movs	r3, #0
 8001f60:	69fa      	ldr	r2, [r7, #28]
 8001f62:	f002 0203 	and.w	r2, r2, #3
 8001f66:	0092      	lsls	r2, r2, #2
 8001f68:	4093      	lsls	r3, r2
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f70:	4935      	ldr	r1, [pc, #212]	; (8002048 <HAL_GPIO_Init+0x304>)
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	089b      	lsrs	r3, r3, #2
 8001f76:	3302      	adds	r3, #2
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f7e:	4b3a      	ldr	r3, [pc, #232]	; (8002068 <HAL_GPIO_Init+0x324>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	43db      	mvns	r3, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fa2:	4a31      	ldr	r2, [pc, #196]	; (8002068 <HAL_GPIO_Init+0x324>)
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fa8:	4b2f      	ldr	r3, [pc, #188]	; (8002068 <HAL_GPIO_Init+0x324>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d003      	beq.n	8001fcc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fcc:	4a26      	ldr	r2, [pc, #152]	; (8002068 <HAL_GPIO_Init+0x324>)
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fd2:	4b25      	ldr	r3, [pc, #148]	; (8002068 <HAL_GPIO_Init+0x324>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	43db      	mvns	r3, r3
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ff6:	4a1c      	ldr	r2, [pc, #112]	; (8002068 <HAL_GPIO_Init+0x324>)
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ffc:	4b1a      	ldr	r3, [pc, #104]	; (8002068 <HAL_GPIO_Init+0x324>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	43db      	mvns	r3, r3
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	4013      	ands	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d003      	beq.n	8002020 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	4313      	orrs	r3, r2
 800201e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002020:	4a11      	ldr	r2, [pc, #68]	; (8002068 <HAL_GPIO_Init+0x324>)
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	3301      	adds	r3, #1
 800202a:	61fb      	str	r3, [r7, #28]
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	2b0f      	cmp	r3, #15
 8002030:	f67f ae96 	bls.w	8001d60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002034:	bf00      	nop
 8002036:	bf00      	nop
 8002038:	3724      	adds	r7, #36	; 0x24
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	40023800 	.word	0x40023800
 8002048:	40013800 	.word	0x40013800
 800204c:	40020000 	.word	0x40020000
 8002050:	40020400 	.word	0x40020400
 8002054:	40020800 	.word	0x40020800
 8002058:	40020c00 	.word	0x40020c00
 800205c:	40021000 	.word	0x40021000
 8002060:	40021400 	.word	0x40021400
 8002064:	40021800 	.word	0x40021800
 8002068:	40013c00 	.word	0x40013c00

0800206c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	460b      	mov	r3, r1
 8002076:	807b      	strh	r3, [r7, #2]
 8002078:	4613      	mov	r3, r2
 800207a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800207c:	787b      	ldrb	r3, [r7, #1]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002082:	887a      	ldrh	r2, [r7, #2]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002088:	e003      	b.n	8002092 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800208a:	887b      	ldrh	r3, [r7, #2]
 800208c:	041a      	lsls	r2, r3, #16
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	619a      	str	r2, [r3, #24]
}
 8002092:	bf00      	nop
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800209e:	b480      	push	{r7}
 80020a0:	b085      	sub	sp, #20
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
 80020a6:	460b      	mov	r3, r1
 80020a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020b0:	887a      	ldrh	r2, [r7, #2]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	4013      	ands	r3, r2
 80020b6:	041a      	lsls	r2, r3, #16
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	43d9      	mvns	r1, r3
 80020bc:	887b      	ldrh	r3, [r7, #2]
 80020be:	400b      	ands	r3, r1
 80020c0:	431a      	orrs	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	619a      	str	r2, [r3, #24]
}
 80020c6:	bf00      	nop
 80020c8:	3714      	adds	r7, #20
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
	...

080020d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80020de:	4b08      	ldr	r3, [pc, #32]	; (8002100 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020e0:	695a      	ldr	r2, [r3, #20]
 80020e2:	88fb      	ldrh	r3, [r7, #6]
 80020e4:	4013      	ands	r3, r2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d006      	beq.n	80020f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020ea:	4a05      	ldr	r2, [pc, #20]	; (8002100 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020ec:	88fb      	ldrh	r3, [r7, #6]
 80020ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020f0:	88fb      	ldrh	r3, [r7, #6]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff f90c 	bl	8001310 <HAL_GPIO_EXTI_Callback>
  }
}
 80020f8:	bf00      	nop
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40013c00 	.word	0x40013c00

08002104 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d101      	bne.n	8002118 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e0cc      	b.n	80022b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002118:	4b68      	ldr	r3, [pc, #416]	; (80022bc <HAL_RCC_ClockConfig+0x1b8>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 030f 	and.w	r3, r3, #15
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	429a      	cmp	r2, r3
 8002124:	d90c      	bls.n	8002140 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002126:	4b65      	ldr	r3, [pc, #404]	; (80022bc <HAL_RCC_ClockConfig+0x1b8>)
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	b2d2      	uxtb	r2, r2
 800212c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800212e:	4b63      	ldr	r3, [pc, #396]	; (80022bc <HAL_RCC_ClockConfig+0x1b8>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 030f 	and.w	r3, r3, #15
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	429a      	cmp	r2, r3
 800213a:	d001      	beq.n	8002140 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e0b8      	b.n	80022b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d020      	beq.n	800218e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0304 	and.w	r3, r3, #4
 8002154:	2b00      	cmp	r3, #0
 8002156:	d005      	beq.n	8002164 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002158:	4b59      	ldr	r3, [pc, #356]	; (80022c0 <HAL_RCC_ClockConfig+0x1bc>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	4a58      	ldr	r2, [pc, #352]	; (80022c0 <HAL_RCC_ClockConfig+0x1bc>)
 800215e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002162:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0308 	and.w	r3, r3, #8
 800216c:	2b00      	cmp	r3, #0
 800216e:	d005      	beq.n	800217c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002170:	4b53      	ldr	r3, [pc, #332]	; (80022c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	4a52      	ldr	r2, [pc, #328]	; (80022c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002176:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800217a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800217c:	4b50      	ldr	r3, [pc, #320]	; (80022c0 <HAL_RCC_ClockConfig+0x1bc>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	494d      	ldr	r1, [pc, #308]	; (80022c0 <HAL_RCC_ClockConfig+0x1bc>)
 800218a:	4313      	orrs	r3, r2
 800218c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b00      	cmp	r3, #0
 8002198:	d044      	beq.n	8002224 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d107      	bne.n	80021b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021a2:	4b47      	ldr	r3, [pc, #284]	; (80022c0 <HAL_RCC_ClockConfig+0x1bc>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d119      	bne.n	80021e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e07f      	b.n	80022b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d003      	beq.n	80021c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021be:	2b03      	cmp	r3, #3
 80021c0:	d107      	bne.n	80021d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021c2:	4b3f      	ldr	r3, [pc, #252]	; (80022c0 <HAL_RCC_ClockConfig+0x1bc>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d109      	bne.n	80021e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e06f      	b.n	80022b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021d2:	4b3b      	ldr	r3, [pc, #236]	; (80022c0 <HAL_RCC_ClockConfig+0x1bc>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e067      	b.n	80022b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021e2:	4b37      	ldr	r3, [pc, #220]	; (80022c0 <HAL_RCC_ClockConfig+0x1bc>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f023 0203 	bic.w	r2, r3, #3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	4934      	ldr	r1, [pc, #208]	; (80022c0 <HAL_RCC_ClockConfig+0x1bc>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021f4:	f7ff fbd2 	bl	800199c <HAL_GetTick>
 80021f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021fa:	e00a      	b.n	8002212 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021fc:	f7ff fbce 	bl	800199c <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	f241 3288 	movw	r2, #5000	; 0x1388
 800220a:	4293      	cmp	r3, r2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e04f      	b.n	80022b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002212:	4b2b      	ldr	r3, [pc, #172]	; (80022c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f003 020c 	and.w	r2, r3, #12
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	429a      	cmp	r2, r3
 8002222:	d1eb      	bne.n	80021fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002224:	4b25      	ldr	r3, [pc, #148]	; (80022bc <HAL_RCC_ClockConfig+0x1b8>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 030f 	and.w	r3, r3, #15
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	429a      	cmp	r2, r3
 8002230:	d20c      	bcs.n	800224c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002232:	4b22      	ldr	r3, [pc, #136]	; (80022bc <HAL_RCC_ClockConfig+0x1b8>)
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	b2d2      	uxtb	r2, r2
 8002238:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800223a:	4b20      	ldr	r3, [pc, #128]	; (80022bc <HAL_RCC_ClockConfig+0x1b8>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 030f 	and.w	r3, r3, #15
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	429a      	cmp	r2, r3
 8002246:	d001      	beq.n	800224c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e032      	b.n	80022b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0304 	and.w	r3, r3, #4
 8002254:	2b00      	cmp	r3, #0
 8002256:	d008      	beq.n	800226a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002258:	4b19      	ldr	r3, [pc, #100]	; (80022c0 <HAL_RCC_ClockConfig+0x1bc>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	4916      	ldr	r1, [pc, #88]	; (80022c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002266:	4313      	orrs	r3, r2
 8002268:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0308 	and.w	r3, r3, #8
 8002272:	2b00      	cmp	r3, #0
 8002274:	d009      	beq.n	800228a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002276:	4b12      	ldr	r3, [pc, #72]	; (80022c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	490e      	ldr	r1, [pc, #56]	; (80022c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002286:	4313      	orrs	r3, r2
 8002288:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800228a:	f000 f855 	bl	8002338 <HAL_RCC_GetSysClockFreq>
 800228e:	4602      	mov	r2, r0
 8002290:	4b0b      	ldr	r3, [pc, #44]	; (80022c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	091b      	lsrs	r3, r3, #4
 8002296:	f003 030f 	and.w	r3, r3, #15
 800229a:	490a      	ldr	r1, [pc, #40]	; (80022c4 <HAL_RCC_ClockConfig+0x1c0>)
 800229c:	5ccb      	ldrb	r3, [r1, r3]
 800229e:	fa22 f303 	lsr.w	r3, r2, r3
 80022a2:	4a09      	ldr	r2, [pc, #36]	; (80022c8 <HAL_RCC_ClockConfig+0x1c4>)
 80022a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022a6:	4b09      	ldr	r3, [pc, #36]	; (80022cc <HAL_RCC_ClockConfig+0x1c8>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7ff fb32 	bl	8001914 <HAL_InitTick>

  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40023c00 	.word	0x40023c00
 80022c0:	40023800 	.word	0x40023800
 80022c4:	0800566c 	.word	0x0800566c
 80022c8:	20000004 	.word	0x20000004
 80022cc:	20000008 	.word	0x20000008

080022d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022d4:	4b03      	ldr	r3, [pc, #12]	; (80022e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80022d6:	681b      	ldr	r3, [r3, #0]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	20000004 	.word	0x20000004

080022e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80022ec:	f7ff fff0 	bl	80022d0 <HAL_RCC_GetHCLKFreq>
 80022f0:	4602      	mov	r2, r0
 80022f2:	4b05      	ldr	r3, [pc, #20]	; (8002308 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	0a9b      	lsrs	r3, r3, #10
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	4903      	ldr	r1, [pc, #12]	; (800230c <HAL_RCC_GetPCLK1Freq+0x24>)
 80022fe:	5ccb      	ldrb	r3, [r1, r3]
 8002300:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002304:	4618      	mov	r0, r3
 8002306:	bd80      	pop	{r7, pc}
 8002308:	40023800 	.word	0x40023800
 800230c:	0800567c 	.word	0x0800567c

08002310 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002314:	f7ff ffdc 	bl	80022d0 <HAL_RCC_GetHCLKFreq>
 8002318:	4602      	mov	r2, r0
 800231a:	4b05      	ldr	r3, [pc, #20]	; (8002330 <HAL_RCC_GetPCLK2Freq+0x20>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	0b5b      	lsrs	r3, r3, #13
 8002320:	f003 0307 	and.w	r3, r3, #7
 8002324:	4903      	ldr	r1, [pc, #12]	; (8002334 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002326:	5ccb      	ldrb	r3, [r1, r3]
 8002328:	fa22 f303 	lsr.w	r3, r2, r3
}
 800232c:	4618      	mov	r0, r3
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40023800 	.word	0x40023800
 8002334:	0800567c 	.word	0x0800567c

08002338 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002338:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800233c:	b0a6      	sub	sp, #152	; 0x98
 800233e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002340:	2300      	movs	r3, #0
 8002342:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8002346:	2300      	movs	r3, #0
 8002348:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 800234c:	2300      	movs	r3, #0
 800234e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8002352:	2300      	movs	r3, #0
 8002354:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8002358:	2300      	movs	r3, #0
 800235a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800235e:	4bc8      	ldr	r3, [pc, #800]	; (8002680 <HAL_RCC_GetSysClockFreq+0x348>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f003 030c 	and.w	r3, r3, #12
 8002366:	2b0c      	cmp	r3, #12
 8002368:	f200 817e 	bhi.w	8002668 <HAL_RCC_GetSysClockFreq+0x330>
 800236c:	a201      	add	r2, pc, #4	; (adr r2, 8002374 <HAL_RCC_GetSysClockFreq+0x3c>)
 800236e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002372:	bf00      	nop
 8002374:	080023a9 	.word	0x080023a9
 8002378:	08002669 	.word	0x08002669
 800237c:	08002669 	.word	0x08002669
 8002380:	08002669 	.word	0x08002669
 8002384:	080023b1 	.word	0x080023b1
 8002388:	08002669 	.word	0x08002669
 800238c:	08002669 	.word	0x08002669
 8002390:	08002669 	.word	0x08002669
 8002394:	080023b9 	.word	0x080023b9
 8002398:	08002669 	.word	0x08002669
 800239c:	08002669 	.word	0x08002669
 80023a0:	08002669 	.word	0x08002669
 80023a4:	08002523 	.word	0x08002523
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023a8:	4bb6      	ldr	r3, [pc, #728]	; (8002684 <HAL_RCC_GetSysClockFreq+0x34c>)
 80023aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80023ae:	e15f      	b.n	8002670 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023b0:	4bb5      	ldr	r3, [pc, #724]	; (8002688 <HAL_RCC_GetSysClockFreq+0x350>)
 80023b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80023b6:	e15b      	b.n	8002670 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023b8:	4bb1      	ldr	r3, [pc, #708]	; (8002680 <HAL_RCC_GetSysClockFreq+0x348>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023c4:	4bae      	ldr	r3, [pc, #696]	; (8002680 <HAL_RCC_GetSysClockFreq+0x348>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d031      	beq.n	8002434 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023d0:	4bab      	ldr	r3, [pc, #684]	; (8002680 <HAL_RCC_GetSysClockFreq+0x348>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	099b      	lsrs	r3, r3, #6
 80023d6:	2200      	movs	r2, #0
 80023d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80023da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80023dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023e2:	663b      	str	r3, [r7, #96]	; 0x60
 80023e4:	2300      	movs	r3, #0
 80023e6:	667b      	str	r3, [r7, #100]	; 0x64
 80023e8:	4ba7      	ldr	r3, [pc, #668]	; (8002688 <HAL_RCC_GetSysClockFreq+0x350>)
 80023ea:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80023ee:	462a      	mov	r2, r5
 80023f0:	fb03 f202 	mul.w	r2, r3, r2
 80023f4:	2300      	movs	r3, #0
 80023f6:	4621      	mov	r1, r4
 80023f8:	fb01 f303 	mul.w	r3, r1, r3
 80023fc:	4413      	add	r3, r2
 80023fe:	4aa2      	ldr	r2, [pc, #648]	; (8002688 <HAL_RCC_GetSysClockFreq+0x350>)
 8002400:	4621      	mov	r1, r4
 8002402:	fba1 1202 	umull	r1, r2, r1, r2
 8002406:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002408:	460a      	mov	r2, r1
 800240a:	67ba      	str	r2, [r7, #120]	; 0x78
 800240c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800240e:	4413      	add	r3, r2
 8002410:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002412:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002416:	2200      	movs	r2, #0
 8002418:	65bb      	str	r3, [r7, #88]	; 0x58
 800241a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800241c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002420:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002424:	f7fe fa52 	bl	80008cc <__aeabi_uldivmod>
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	4613      	mov	r3, r2
 800242e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002432:	e064      	b.n	80024fe <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002434:	4b92      	ldr	r3, [pc, #584]	; (8002680 <HAL_RCC_GetSysClockFreq+0x348>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	099b      	lsrs	r3, r3, #6
 800243a:	2200      	movs	r2, #0
 800243c:	653b      	str	r3, [r7, #80]	; 0x50
 800243e:	657a      	str	r2, [r7, #84]	; 0x54
 8002440:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002446:	64bb      	str	r3, [r7, #72]	; 0x48
 8002448:	2300      	movs	r3, #0
 800244a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800244c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002450:	4622      	mov	r2, r4
 8002452:	462b      	mov	r3, r5
 8002454:	f04f 0000 	mov.w	r0, #0
 8002458:	f04f 0100 	mov.w	r1, #0
 800245c:	0159      	lsls	r1, r3, #5
 800245e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002462:	0150      	lsls	r0, r2, #5
 8002464:	4602      	mov	r2, r0
 8002466:	460b      	mov	r3, r1
 8002468:	4621      	mov	r1, r4
 800246a:	1a51      	subs	r1, r2, r1
 800246c:	6139      	str	r1, [r7, #16]
 800246e:	4629      	mov	r1, r5
 8002470:	eb63 0301 	sbc.w	r3, r3, r1
 8002474:	617b      	str	r3, [r7, #20]
 8002476:	f04f 0200 	mov.w	r2, #0
 800247a:	f04f 0300 	mov.w	r3, #0
 800247e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002482:	4659      	mov	r1, fp
 8002484:	018b      	lsls	r3, r1, #6
 8002486:	4651      	mov	r1, sl
 8002488:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800248c:	4651      	mov	r1, sl
 800248e:	018a      	lsls	r2, r1, #6
 8002490:	4651      	mov	r1, sl
 8002492:	ebb2 0801 	subs.w	r8, r2, r1
 8002496:	4659      	mov	r1, fp
 8002498:	eb63 0901 	sbc.w	r9, r3, r1
 800249c:	f04f 0200 	mov.w	r2, #0
 80024a0:	f04f 0300 	mov.w	r3, #0
 80024a4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024a8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024ac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024b0:	4690      	mov	r8, r2
 80024b2:	4699      	mov	r9, r3
 80024b4:	4623      	mov	r3, r4
 80024b6:	eb18 0303 	adds.w	r3, r8, r3
 80024ba:	60bb      	str	r3, [r7, #8]
 80024bc:	462b      	mov	r3, r5
 80024be:	eb49 0303 	adc.w	r3, r9, r3
 80024c2:	60fb      	str	r3, [r7, #12]
 80024c4:	f04f 0200 	mov.w	r2, #0
 80024c8:	f04f 0300 	mov.w	r3, #0
 80024cc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80024d0:	4629      	mov	r1, r5
 80024d2:	028b      	lsls	r3, r1, #10
 80024d4:	4621      	mov	r1, r4
 80024d6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024da:	4621      	mov	r1, r4
 80024dc:	028a      	lsls	r2, r1, #10
 80024de:	4610      	mov	r0, r2
 80024e0:	4619      	mov	r1, r3
 80024e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024e6:	2200      	movs	r2, #0
 80024e8:	643b      	str	r3, [r7, #64]	; 0x40
 80024ea:	647a      	str	r2, [r7, #68]	; 0x44
 80024ec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80024f0:	f7fe f9ec 	bl	80008cc <__aeabi_uldivmod>
 80024f4:	4602      	mov	r2, r0
 80024f6:	460b      	mov	r3, r1
 80024f8:	4613      	mov	r3, r2
 80024fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024fe:	4b60      	ldr	r3, [pc, #384]	; (8002680 <HAL_RCC_GetSysClockFreq+0x348>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	0c1b      	lsrs	r3, r3, #16
 8002504:	f003 0303 	and.w	r3, r3, #3
 8002508:	3301      	adds	r3, #1
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8002510:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002514:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002518:	fbb2 f3f3 	udiv	r3, r2, r3
 800251c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002520:	e0a6      	b.n	8002670 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002522:	4b57      	ldr	r3, [pc, #348]	; (8002680 <HAL_RCC_GetSysClockFreq+0x348>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800252a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800252e:	4b54      	ldr	r3, [pc, #336]	; (8002680 <HAL_RCC_GetSysClockFreq+0x348>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d02a      	beq.n	8002590 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800253a:	4b51      	ldr	r3, [pc, #324]	; (8002680 <HAL_RCC_GetSysClockFreq+0x348>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	099b      	lsrs	r3, r3, #6
 8002540:	2200      	movs	r2, #0
 8002542:	63bb      	str	r3, [r7, #56]	; 0x38
 8002544:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002548:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800254c:	2100      	movs	r1, #0
 800254e:	4b4e      	ldr	r3, [pc, #312]	; (8002688 <HAL_RCC_GetSysClockFreq+0x350>)
 8002550:	fb03 f201 	mul.w	r2, r3, r1
 8002554:	2300      	movs	r3, #0
 8002556:	fb00 f303 	mul.w	r3, r0, r3
 800255a:	4413      	add	r3, r2
 800255c:	4a4a      	ldr	r2, [pc, #296]	; (8002688 <HAL_RCC_GetSysClockFreq+0x350>)
 800255e:	fba0 1202 	umull	r1, r2, r0, r2
 8002562:	677a      	str	r2, [r7, #116]	; 0x74
 8002564:	460a      	mov	r2, r1
 8002566:	673a      	str	r2, [r7, #112]	; 0x70
 8002568:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800256a:	4413      	add	r3, r2
 800256c:	677b      	str	r3, [r7, #116]	; 0x74
 800256e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002572:	2200      	movs	r2, #0
 8002574:	633b      	str	r3, [r7, #48]	; 0x30
 8002576:	637a      	str	r2, [r7, #52]	; 0x34
 8002578:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800257c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002580:	f7fe f9a4 	bl	80008cc <__aeabi_uldivmod>
 8002584:	4602      	mov	r2, r0
 8002586:	460b      	mov	r3, r1
 8002588:	4613      	mov	r3, r2
 800258a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800258e:	e05b      	b.n	8002648 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002590:	4b3b      	ldr	r3, [pc, #236]	; (8002680 <HAL_RCC_GetSysClockFreq+0x348>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	099b      	lsrs	r3, r3, #6
 8002596:	2200      	movs	r2, #0
 8002598:	62bb      	str	r3, [r7, #40]	; 0x28
 800259a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800259c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800259e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025a2:	623b      	str	r3, [r7, #32]
 80025a4:	2300      	movs	r3, #0
 80025a6:	627b      	str	r3, [r7, #36]	; 0x24
 80025a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80025ac:	4642      	mov	r2, r8
 80025ae:	464b      	mov	r3, r9
 80025b0:	f04f 0000 	mov.w	r0, #0
 80025b4:	f04f 0100 	mov.w	r1, #0
 80025b8:	0159      	lsls	r1, r3, #5
 80025ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025be:	0150      	lsls	r0, r2, #5
 80025c0:	4602      	mov	r2, r0
 80025c2:	460b      	mov	r3, r1
 80025c4:	4641      	mov	r1, r8
 80025c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80025ca:	4649      	mov	r1, r9
 80025cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80025d0:	f04f 0200 	mov.w	r2, #0
 80025d4:	f04f 0300 	mov.w	r3, #0
 80025d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80025dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80025e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80025e4:	ebb2 040a 	subs.w	r4, r2, sl
 80025e8:	eb63 050b 	sbc.w	r5, r3, fp
 80025ec:	f04f 0200 	mov.w	r2, #0
 80025f0:	f04f 0300 	mov.w	r3, #0
 80025f4:	00eb      	lsls	r3, r5, #3
 80025f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025fa:	00e2      	lsls	r2, r4, #3
 80025fc:	4614      	mov	r4, r2
 80025fe:	461d      	mov	r5, r3
 8002600:	4643      	mov	r3, r8
 8002602:	18e3      	adds	r3, r4, r3
 8002604:	603b      	str	r3, [r7, #0]
 8002606:	464b      	mov	r3, r9
 8002608:	eb45 0303 	adc.w	r3, r5, r3
 800260c:	607b      	str	r3, [r7, #4]
 800260e:	f04f 0200 	mov.w	r2, #0
 8002612:	f04f 0300 	mov.w	r3, #0
 8002616:	e9d7 4500 	ldrd	r4, r5, [r7]
 800261a:	4629      	mov	r1, r5
 800261c:	028b      	lsls	r3, r1, #10
 800261e:	4621      	mov	r1, r4
 8002620:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002624:	4621      	mov	r1, r4
 8002626:	028a      	lsls	r2, r1, #10
 8002628:	4610      	mov	r0, r2
 800262a:	4619      	mov	r1, r3
 800262c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002630:	2200      	movs	r2, #0
 8002632:	61bb      	str	r3, [r7, #24]
 8002634:	61fa      	str	r2, [r7, #28]
 8002636:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800263a:	f7fe f947 	bl	80008cc <__aeabi_uldivmod>
 800263e:	4602      	mov	r2, r0
 8002640:	460b      	mov	r3, r1
 8002642:	4613      	mov	r3, r2
 8002644:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002648:	4b0d      	ldr	r3, [pc, #52]	; (8002680 <HAL_RCC_GetSysClockFreq+0x348>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	0f1b      	lsrs	r3, r3, #28
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8002656:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800265a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800265e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002662:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002666:	e003      	b.n	8002670 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002668:	4b06      	ldr	r3, [pc, #24]	; (8002684 <HAL_RCC_GetSysClockFreq+0x34c>)
 800266a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800266e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002670:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8002674:	4618      	mov	r0, r3
 8002676:	3798      	adds	r7, #152	; 0x98
 8002678:	46bd      	mov	sp, r7
 800267a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800267e:	bf00      	nop
 8002680:	40023800 	.word	0x40023800
 8002684:	00f42400 	.word	0x00f42400
 8002688:	017d7840 	.word	0x017d7840

0800268c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e28d      	b.n	8002bba <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	f000 8083 	beq.w	80027b2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80026ac:	4b94      	ldr	r3, [pc, #592]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f003 030c 	and.w	r3, r3, #12
 80026b4:	2b04      	cmp	r3, #4
 80026b6:	d019      	beq.n	80026ec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80026b8:	4b91      	ldr	r3, [pc, #580]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80026c0:	2b08      	cmp	r3, #8
 80026c2:	d106      	bne.n	80026d2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80026c4:	4b8e      	ldr	r3, [pc, #568]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026d0:	d00c      	beq.n	80026ec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026d2:	4b8b      	ldr	r3, [pc, #556]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80026da:	2b0c      	cmp	r3, #12
 80026dc:	d112      	bne.n	8002704 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026de:	4b88      	ldr	r3, [pc, #544]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026ea:	d10b      	bne.n	8002704 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ec:	4b84      	ldr	r3, [pc, #528]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d05b      	beq.n	80027b0 <HAL_RCC_OscConfig+0x124>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d157      	bne.n	80027b0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e25a      	b.n	8002bba <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800270c:	d106      	bne.n	800271c <HAL_RCC_OscConfig+0x90>
 800270e:	4b7c      	ldr	r3, [pc, #496]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a7b      	ldr	r2, [pc, #492]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 8002714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002718:	6013      	str	r3, [r2, #0]
 800271a:	e01d      	b.n	8002758 <HAL_RCC_OscConfig+0xcc>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002724:	d10c      	bne.n	8002740 <HAL_RCC_OscConfig+0xb4>
 8002726:	4b76      	ldr	r3, [pc, #472]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a75      	ldr	r2, [pc, #468]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 800272c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002730:	6013      	str	r3, [r2, #0]
 8002732:	4b73      	ldr	r3, [pc, #460]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a72      	ldr	r2, [pc, #456]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 8002738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800273c:	6013      	str	r3, [r2, #0]
 800273e:	e00b      	b.n	8002758 <HAL_RCC_OscConfig+0xcc>
 8002740:	4b6f      	ldr	r3, [pc, #444]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a6e      	ldr	r2, [pc, #440]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 8002746:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800274a:	6013      	str	r3, [r2, #0]
 800274c:	4b6c      	ldr	r3, [pc, #432]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a6b      	ldr	r2, [pc, #428]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 8002752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002756:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d013      	beq.n	8002788 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002760:	f7ff f91c 	bl	800199c <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002768:	f7ff f918 	bl	800199c <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b64      	cmp	r3, #100	; 0x64
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e21f      	b.n	8002bba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800277a:	4b61      	ldr	r3, [pc, #388]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d0f0      	beq.n	8002768 <HAL_RCC_OscConfig+0xdc>
 8002786:	e014      	b.n	80027b2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002788:	f7ff f908 	bl	800199c <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002790:	f7ff f904 	bl	800199c <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b64      	cmp	r3, #100	; 0x64
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e20b      	b.n	8002bba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027a2:	4b57      	ldr	r3, [pc, #348]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1f0      	bne.n	8002790 <HAL_RCC_OscConfig+0x104>
 80027ae:	e000      	b.n	80027b2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d06f      	beq.n	800289e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80027be:	4b50      	ldr	r3, [pc, #320]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 030c 	and.w	r3, r3, #12
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d017      	beq.n	80027fa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80027ca:	4b4d      	ldr	r3, [pc, #308]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80027d2:	2b08      	cmp	r3, #8
 80027d4:	d105      	bne.n	80027e2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80027d6:	4b4a      	ldr	r3, [pc, #296]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00b      	beq.n	80027fa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027e2:	4b47      	ldr	r3, [pc, #284]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80027ea:	2b0c      	cmp	r3, #12
 80027ec:	d11c      	bne.n	8002828 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027ee:	4b44      	ldr	r3, [pc, #272]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d116      	bne.n	8002828 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027fa:	4b41      	ldr	r3, [pc, #260]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d005      	beq.n	8002812 <HAL_RCC_OscConfig+0x186>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d001      	beq.n	8002812 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e1d3      	b.n	8002bba <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002812:	4b3b      	ldr	r3, [pc, #236]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	4937      	ldr	r1, [pc, #220]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 8002822:	4313      	orrs	r3, r2
 8002824:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002826:	e03a      	b.n	800289e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d020      	beq.n	8002872 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002830:	4b34      	ldr	r3, [pc, #208]	; (8002904 <HAL_RCC_OscConfig+0x278>)
 8002832:	2201      	movs	r2, #1
 8002834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002836:	f7ff f8b1 	bl	800199c <HAL_GetTick>
 800283a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800283c:	e008      	b.n	8002850 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800283e:	f7ff f8ad 	bl	800199c <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d901      	bls.n	8002850 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e1b4      	b.n	8002bba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002850:	4b2b      	ldr	r3, [pc, #172]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d0f0      	beq.n	800283e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800285c:	4b28      	ldr	r3, [pc, #160]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	00db      	lsls	r3, r3, #3
 800286a:	4925      	ldr	r1, [pc, #148]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 800286c:	4313      	orrs	r3, r2
 800286e:	600b      	str	r3, [r1, #0]
 8002870:	e015      	b.n	800289e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002872:	4b24      	ldr	r3, [pc, #144]	; (8002904 <HAL_RCC_OscConfig+0x278>)
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002878:	f7ff f890 	bl	800199c <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002880:	f7ff f88c 	bl	800199c <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e193      	b.n	8002bba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002892:	4b1b      	ldr	r3, [pc, #108]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1f0      	bne.n	8002880 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0308 	and.w	r3, r3, #8
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d036      	beq.n	8002918 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d016      	beq.n	80028e0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028b2:	4b15      	ldr	r3, [pc, #84]	; (8002908 <HAL_RCC_OscConfig+0x27c>)
 80028b4:	2201      	movs	r2, #1
 80028b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b8:	f7ff f870 	bl	800199c <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028c0:	f7ff f86c 	bl	800199c <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e173      	b.n	8002bba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028d2:	4b0b      	ldr	r3, [pc, #44]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 80028d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d0f0      	beq.n	80028c0 <HAL_RCC_OscConfig+0x234>
 80028de:	e01b      	b.n	8002918 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028e0:	4b09      	ldr	r3, [pc, #36]	; (8002908 <HAL_RCC_OscConfig+0x27c>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e6:	f7ff f859 	bl	800199c <HAL_GetTick>
 80028ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028ec:	e00e      	b.n	800290c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028ee:	f7ff f855 	bl	800199c <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d907      	bls.n	800290c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e15c      	b.n	8002bba <HAL_RCC_OscConfig+0x52e>
 8002900:	40023800 	.word	0x40023800
 8002904:	42470000 	.word	0x42470000
 8002908:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800290c:	4b8a      	ldr	r3, [pc, #552]	; (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 800290e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d1ea      	bne.n	80028ee <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0304 	and.w	r3, r3, #4
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 8097 	beq.w	8002a54 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002926:	2300      	movs	r3, #0
 8002928:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800292a:	4b83      	ldr	r3, [pc, #524]	; (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d10f      	bne.n	8002956 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002936:	2300      	movs	r3, #0
 8002938:	60bb      	str	r3, [r7, #8]
 800293a:	4b7f      	ldr	r3, [pc, #508]	; (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	4a7e      	ldr	r2, [pc, #504]	; (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 8002940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002944:	6413      	str	r3, [r2, #64]	; 0x40
 8002946:	4b7c      	ldr	r3, [pc, #496]	; (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800294e:	60bb      	str	r3, [r7, #8]
 8002950:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002952:	2301      	movs	r3, #1
 8002954:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002956:	4b79      	ldr	r3, [pc, #484]	; (8002b3c <HAL_RCC_OscConfig+0x4b0>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800295e:	2b00      	cmp	r3, #0
 8002960:	d118      	bne.n	8002994 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002962:	4b76      	ldr	r3, [pc, #472]	; (8002b3c <HAL_RCC_OscConfig+0x4b0>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a75      	ldr	r2, [pc, #468]	; (8002b3c <HAL_RCC_OscConfig+0x4b0>)
 8002968:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800296c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800296e:	f7ff f815 	bl	800199c <HAL_GetTick>
 8002972:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002974:	e008      	b.n	8002988 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002976:	f7ff f811 	bl	800199c <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d901      	bls.n	8002988 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e118      	b.n	8002bba <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002988:	4b6c      	ldr	r3, [pc, #432]	; (8002b3c <HAL_RCC_OscConfig+0x4b0>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0f0      	beq.n	8002976 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d106      	bne.n	80029aa <HAL_RCC_OscConfig+0x31e>
 800299c:	4b66      	ldr	r3, [pc, #408]	; (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 800299e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a0:	4a65      	ldr	r2, [pc, #404]	; (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 80029a2:	f043 0301 	orr.w	r3, r3, #1
 80029a6:	6713      	str	r3, [r2, #112]	; 0x70
 80029a8:	e01c      	b.n	80029e4 <HAL_RCC_OscConfig+0x358>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	2b05      	cmp	r3, #5
 80029b0:	d10c      	bne.n	80029cc <HAL_RCC_OscConfig+0x340>
 80029b2:	4b61      	ldr	r3, [pc, #388]	; (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 80029b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b6:	4a60      	ldr	r2, [pc, #384]	; (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 80029b8:	f043 0304 	orr.w	r3, r3, #4
 80029bc:	6713      	str	r3, [r2, #112]	; 0x70
 80029be:	4b5e      	ldr	r3, [pc, #376]	; (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 80029c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c2:	4a5d      	ldr	r2, [pc, #372]	; (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 80029c4:	f043 0301 	orr.w	r3, r3, #1
 80029c8:	6713      	str	r3, [r2, #112]	; 0x70
 80029ca:	e00b      	b.n	80029e4 <HAL_RCC_OscConfig+0x358>
 80029cc:	4b5a      	ldr	r3, [pc, #360]	; (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 80029ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d0:	4a59      	ldr	r2, [pc, #356]	; (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 80029d2:	f023 0301 	bic.w	r3, r3, #1
 80029d6:	6713      	str	r3, [r2, #112]	; 0x70
 80029d8:	4b57      	ldr	r3, [pc, #348]	; (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 80029da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029dc:	4a56      	ldr	r2, [pc, #344]	; (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 80029de:	f023 0304 	bic.w	r3, r3, #4
 80029e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d015      	beq.n	8002a18 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ec:	f7fe ffd6 	bl	800199c <HAL_GetTick>
 80029f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f2:	e00a      	b.n	8002a0a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029f4:	f7fe ffd2 	bl	800199c <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e0d7      	b.n	8002bba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a0a:	4b4b      	ldr	r3, [pc, #300]	; (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 8002a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d0ee      	beq.n	80029f4 <HAL_RCC_OscConfig+0x368>
 8002a16:	e014      	b.n	8002a42 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a18:	f7fe ffc0 	bl	800199c <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a1e:	e00a      	b.n	8002a36 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a20:	f7fe ffbc 	bl	800199c <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e0c1      	b.n	8002bba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a36:	4b40      	ldr	r3, [pc, #256]	; (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 8002a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1ee      	bne.n	8002a20 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a42:	7dfb      	ldrb	r3, [r7, #23]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d105      	bne.n	8002a54 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a48:	4b3b      	ldr	r3, [pc, #236]	; (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4c:	4a3a      	ldr	r2, [pc, #232]	; (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 8002a4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a52:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f000 80ad 	beq.w	8002bb8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a5e:	4b36      	ldr	r3, [pc, #216]	; (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f003 030c 	and.w	r3, r3, #12
 8002a66:	2b08      	cmp	r3, #8
 8002a68:	d060      	beq.n	8002b2c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d145      	bne.n	8002afe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a72:	4b33      	ldr	r3, [pc, #204]	; (8002b40 <HAL_RCC_OscConfig+0x4b4>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a78:	f7fe ff90 	bl	800199c <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a80:	f7fe ff8c 	bl	800199c <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e093      	b.n	8002bba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a92:	4b29      	ldr	r3, [pc, #164]	; (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1f0      	bne.n	8002a80 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	69da      	ldr	r2, [r3, #28]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a1b      	ldr	r3, [r3, #32]
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aac:	019b      	lsls	r3, r3, #6
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab4:	085b      	lsrs	r3, r3, #1
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	041b      	lsls	r3, r3, #16
 8002aba:	431a      	orrs	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac0:	061b      	lsls	r3, r3, #24
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac8:	071b      	lsls	r3, r3, #28
 8002aca:	491b      	ldr	r1, [pc, #108]	; (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ad0:	4b1b      	ldr	r3, [pc, #108]	; (8002b40 <HAL_RCC_OscConfig+0x4b4>)
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad6:	f7fe ff61 	bl	800199c <HAL_GetTick>
 8002ada:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002adc:	e008      	b.n	8002af0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ade:	f7fe ff5d 	bl	800199c <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e064      	b.n	8002bba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002af0:	4b11      	ldr	r3, [pc, #68]	; (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d0f0      	beq.n	8002ade <HAL_RCC_OscConfig+0x452>
 8002afc:	e05c      	b.n	8002bb8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002afe:	4b10      	ldr	r3, [pc, #64]	; (8002b40 <HAL_RCC_OscConfig+0x4b4>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b04:	f7fe ff4a 	bl	800199c <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b0c:	f7fe ff46 	bl	800199c <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e04d      	b.n	8002bba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b1e:	4b06      	ldr	r3, [pc, #24]	; (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1f0      	bne.n	8002b0c <HAL_RCC_OscConfig+0x480>
 8002b2a:	e045      	b.n	8002bb8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d107      	bne.n	8002b44 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e040      	b.n	8002bba <HAL_RCC_OscConfig+0x52e>
 8002b38:	40023800 	.word	0x40023800
 8002b3c:	40007000 	.word	0x40007000
 8002b40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b44:	4b1f      	ldr	r3, [pc, #124]	; (8002bc4 <HAL_RCC_OscConfig+0x538>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d030      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d129      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d122      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b74:	4013      	ands	r3, r2
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d119      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8a:	085b      	lsrs	r3, r3, #1
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d10f      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d107      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bae:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d001      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e000      	b.n	8002bba <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3718      	adds	r7, #24
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	40023800 	.word	0x40023800

08002bc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e041      	b.n	8002c5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d106      	bne.n	8002bf4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f7fe fcbe 	bl	8001570 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2202      	movs	r2, #2
 8002bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	3304      	adds	r3, #4
 8002c04:	4619      	mov	r1, r3
 8002c06:	4610      	mov	r0, r2
 8002c08:	f000 fcdc 	bl	80035c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3708      	adds	r7, #8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
	...

08002c68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d001      	beq.n	8002c80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e04e      	b.n	8002d1e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2202      	movs	r2, #2
 8002c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68da      	ldr	r2, [r3, #12]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f042 0201 	orr.w	r2, r2, #1
 8002c96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a23      	ldr	r2, [pc, #140]	; (8002d2c <HAL_TIM_Base_Start_IT+0xc4>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d022      	beq.n	8002ce8 <HAL_TIM_Base_Start_IT+0x80>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002caa:	d01d      	beq.n	8002ce8 <HAL_TIM_Base_Start_IT+0x80>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a1f      	ldr	r2, [pc, #124]	; (8002d30 <HAL_TIM_Base_Start_IT+0xc8>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d018      	beq.n	8002ce8 <HAL_TIM_Base_Start_IT+0x80>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a1e      	ldr	r2, [pc, #120]	; (8002d34 <HAL_TIM_Base_Start_IT+0xcc>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d013      	beq.n	8002ce8 <HAL_TIM_Base_Start_IT+0x80>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a1c      	ldr	r2, [pc, #112]	; (8002d38 <HAL_TIM_Base_Start_IT+0xd0>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d00e      	beq.n	8002ce8 <HAL_TIM_Base_Start_IT+0x80>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a1b      	ldr	r2, [pc, #108]	; (8002d3c <HAL_TIM_Base_Start_IT+0xd4>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d009      	beq.n	8002ce8 <HAL_TIM_Base_Start_IT+0x80>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a19      	ldr	r2, [pc, #100]	; (8002d40 <HAL_TIM_Base_Start_IT+0xd8>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d004      	beq.n	8002ce8 <HAL_TIM_Base_Start_IT+0x80>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a18      	ldr	r2, [pc, #96]	; (8002d44 <HAL_TIM_Base_Start_IT+0xdc>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d111      	bne.n	8002d0c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f003 0307 	and.w	r3, r3, #7
 8002cf2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2b06      	cmp	r3, #6
 8002cf8:	d010      	beq.n	8002d1c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f042 0201 	orr.w	r2, r2, #1
 8002d08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d0a:	e007      	b.n	8002d1c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f042 0201 	orr.w	r2, r2, #1
 8002d1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3714      	adds	r7, #20
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	40010000 	.word	0x40010000
 8002d30:	40000400 	.word	0x40000400
 8002d34:	40000800 	.word	0x40000800
 8002d38:	40000c00 	.word	0x40000c00
 8002d3c:	40010400 	.word	0x40010400
 8002d40:	40014000 	.word	0x40014000
 8002d44:	40001800 	.word	0x40001800

08002d48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e041      	b.n	8002dde <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d106      	bne.n	8002d74 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f7fe fb6e 	bl	8001450 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2202      	movs	r2, #2
 8002d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	3304      	adds	r3, #4
 8002d84:	4619      	mov	r1, r3
 8002d86:	4610      	mov	r0, r2
 8002d88:	f000 fc1c 	bl	80035c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
	...

08002de8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d109      	bne.n	8002e0c <HAL_TIM_PWM_Start+0x24>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	bf14      	ite	ne
 8002e04:	2301      	movne	r3, #1
 8002e06:	2300      	moveq	r3, #0
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	e022      	b.n	8002e52 <HAL_TIM_PWM_Start+0x6a>
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	2b04      	cmp	r3, #4
 8002e10:	d109      	bne.n	8002e26 <HAL_TIM_PWM_Start+0x3e>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	bf14      	ite	ne
 8002e1e:	2301      	movne	r3, #1
 8002e20:	2300      	moveq	r3, #0
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	e015      	b.n	8002e52 <HAL_TIM_PWM_Start+0x6a>
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	2b08      	cmp	r3, #8
 8002e2a:	d109      	bne.n	8002e40 <HAL_TIM_PWM_Start+0x58>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	bf14      	ite	ne
 8002e38:	2301      	movne	r3, #1
 8002e3a:	2300      	moveq	r3, #0
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	e008      	b.n	8002e52 <HAL_TIM_PWM_Start+0x6a>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	bf14      	ite	ne
 8002e4c:	2301      	movne	r3, #1
 8002e4e:	2300      	moveq	r3, #0
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e07c      	b.n	8002f54 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d104      	bne.n	8002e6a <HAL_TIM_PWM_Start+0x82>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2202      	movs	r2, #2
 8002e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e68:	e013      	b.n	8002e92 <HAL_TIM_PWM_Start+0xaa>
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	2b04      	cmp	r3, #4
 8002e6e:	d104      	bne.n	8002e7a <HAL_TIM_PWM_Start+0x92>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2202      	movs	r2, #2
 8002e74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e78:	e00b      	b.n	8002e92 <HAL_TIM_PWM_Start+0xaa>
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	2b08      	cmp	r3, #8
 8002e7e:	d104      	bne.n	8002e8a <HAL_TIM_PWM_Start+0xa2>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2202      	movs	r2, #2
 8002e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e88:	e003      	b.n	8002e92 <HAL_TIM_PWM_Start+0xaa>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2202      	movs	r2, #2
 8002e8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2201      	movs	r2, #1
 8002e98:	6839      	ldr	r1, [r7, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f000 fde2 	bl	8003a64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a2d      	ldr	r2, [pc, #180]	; (8002f5c <HAL_TIM_PWM_Start+0x174>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d004      	beq.n	8002eb4 <HAL_TIM_PWM_Start+0xcc>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a2c      	ldr	r2, [pc, #176]	; (8002f60 <HAL_TIM_PWM_Start+0x178>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d101      	bne.n	8002eb8 <HAL_TIM_PWM_Start+0xd0>
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e000      	b.n	8002eba <HAL_TIM_PWM_Start+0xd2>
 8002eb8:	2300      	movs	r3, #0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d007      	beq.n	8002ece <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ecc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a22      	ldr	r2, [pc, #136]	; (8002f5c <HAL_TIM_PWM_Start+0x174>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d022      	beq.n	8002f1e <HAL_TIM_PWM_Start+0x136>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee0:	d01d      	beq.n	8002f1e <HAL_TIM_PWM_Start+0x136>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a1f      	ldr	r2, [pc, #124]	; (8002f64 <HAL_TIM_PWM_Start+0x17c>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d018      	beq.n	8002f1e <HAL_TIM_PWM_Start+0x136>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a1d      	ldr	r2, [pc, #116]	; (8002f68 <HAL_TIM_PWM_Start+0x180>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d013      	beq.n	8002f1e <HAL_TIM_PWM_Start+0x136>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a1c      	ldr	r2, [pc, #112]	; (8002f6c <HAL_TIM_PWM_Start+0x184>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d00e      	beq.n	8002f1e <HAL_TIM_PWM_Start+0x136>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a16      	ldr	r2, [pc, #88]	; (8002f60 <HAL_TIM_PWM_Start+0x178>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d009      	beq.n	8002f1e <HAL_TIM_PWM_Start+0x136>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a18      	ldr	r2, [pc, #96]	; (8002f70 <HAL_TIM_PWM_Start+0x188>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d004      	beq.n	8002f1e <HAL_TIM_PWM_Start+0x136>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a16      	ldr	r2, [pc, #88]	; (8002f74 <HAL_TIM_PWM_Start+0x18c>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d111      	bne.n	8002f42 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f003 0307 	and.w	r3, r3, #7
 8002f28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2b06      	cmp	r3, #6
 8002f2e:	d010      	beq.n	8002f52 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f042 0201 	orr.w	r2, r2, #1
 8002f3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f40:	e007      	b.n	8002f52 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f042 0201 	orr.w	r2, r2, #1
 8002f50:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3710      	adds	r7, #16
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	40010000 	.word	0x40010000
 8002f60:	40010400 	.word	0x40010400
 8002f64:	40000400 	.word	0x40000400
 8002f68:	40000800 	.word	0x40000800
 8002f6c:	40000c00 	.word	0x40000c00
 8002f70:	40014000 	.word	0x40014000
 8002f74:	40001800 	.word	0x40001800

08002f78 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d101      	bne.n	8002f8c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e097      	b.n	80030bc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d106      	bne.n	8002fa6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f7fe fa77 	bl	8001494 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2202      	movs	r2, #2
 8002faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	6812      	ldr	r2, [r2, #0]
 8002fb8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fbc:	f023 0307 	bic.w	r3, r3, #7
 8002fc0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	3304      	adds	r3, #4
 8002fca:	4619      	mov	r1, r3
 8002fcc:	4610      	mov	r0, r2
 8002fce:	f000 faf9 	bl	80035c4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	6a1b      	ldr	r3, [r3, #32]
 8002fe8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ffa:	f023 0303 	bic.w	r3, r3, #3
 8002ffe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	689a      	ldr	r2, [r3, #8]
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	021b      	lsls	r3, r3, #8
 800300a:	4313      	orrs	r3, r2
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	4313      	orrs	r3, r2
 8003010:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003018:	f023 030c 	bic.w	r3, r3, #12
 800301c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003024:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003028:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	68da      	ldr	r2, [r3, #12]
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	69db      	ldr	r3, [r3, #28]
 8003032:	021b      	lsls	r3, r3, #8
 8003034:	4313      	orrs	r3, r2
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	4313      	orrs	r3, r2
 800303a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	011a      	lsls	r2, r3, #4
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	6a1b      	ldr	r3, [r3, #32]
 8003046:	031b      	lsls	r3, r3, #12
 8003048:	4313      	orrs	r3, r2
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	4313      	orrs	r3, r2
 800304e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003056:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800305e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	011b      	lsls	r3, r3, #4
 800306a:	4313      	orrs	r3, r2
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	4313      	orrs	r3, r2
 8003070:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2201      	movs	r2, #1
 800308e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2201      	movs	r2, #1
 800309e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2201      	movs	r2, #1
 80030a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2201      	movs	r2, #1
 80030b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3718      	adds	r7, #24
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030d4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80030dc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80030e4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80030ec:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d110      	bne.n	8003116 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80030f4:	7bfb      	ldrb	r3, [r7, #15]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d102      	bne.n	8003100 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80030fa:	7b7b      	ldrb	r3, [r7, #13]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d001      	beq.n	8003104 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e069      	b.n	80031d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2202      	movs	r2, #2
 8003108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2202      	movs	r2, #2
 8003110:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003114:	e031      	b.n	800317a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	2b04      	cmp	r3, #4
 800311a:	d110      	bne.n	800313e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800311c:	7bbb      	ldrb	r3, [r7, #14]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d102      	bne.n	8003128 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003122:	7b3b      	ldrb	r3, [r7, #12]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d001      	beq.n	800312c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e055      	b.n	80031d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2202      	movs	r2, #2
 8003130:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2202      	movs	r2, #2
 8003138:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800313c:	e01d      	b.n	800317a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800313e:	7bfb      	ldrb	r3, [r7, #15]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d108      	bne.n	8003156 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003144:	7bbb      	ldrb	r3, [r7, #14]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d105      	bne.n	8003156 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800314a:	7b7b      	ldrb	r3, [r7, #13]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d102      	bne.n	8003156 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003150:	7b3b      	ldrb	r3, [r7, #12]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d001      	beq.n	800315a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e03e      	b.n	80031d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2202      	movs	r2, #2
 800315e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2202      	movs	r2, #2
 8003166:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2202      	movs	r2, #2
 800316e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2202      	movs	r2, #2
 8003176:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d003      	beq.n	8003188 <HAL_TIM_Encoder_Start+0xc4>
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	2b04      	cmp	r3, #4
 8003184:	d008      	beq.n	8003198 <HAL_TIM_Encoder_Start+0xd4>
 8003186:	e00f      	b.n	80031a8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2201      	movs	r2, #1
 800318e:	2100      	movs	r1, #0
 8003190:	4618      	mov	r0, r3
 8003192:	f000 fc67 	bl	8003a64 <TIM_CCxChannelCmd>
      break;
 8003196:	e016      	b.n	80031c6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2201      	movs	r2, #1
 800319e:	2104      	movs	r1, #4
 80031a0:	4618      	mov	r0, r3
 80031a2:	f000 fc5f 	bl	8003a64 <TIM_CCxChannelCmd>
      break;
 80031a6:	e00e      	b.n	80031c6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2201      	movs	r2, #1
 80031ae:	2100      	movs	r1, #0
 80031b0:	4618      	mov	r0, r3
 80031b2:	f000 fc57 	bl	8003a64 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2201      	movs	r2, #1
 80031bc:	2104      	movs	r1, #4
 80031be:	4618      	mov	r0, r3
 80031c0:	f000 fc50 	bl	8003a64 <TIM_CCxChannelCmd>
      break;
 80031c4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f042 0201 	orr.w	r2, r2, #1
 80031d4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d122      	bne.n	800323c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b02      	cmp	r3, #2
 8003202:	d11b      	bne.n	800323c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f06f 0202 	mvn.w	r2, #2
 800320c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	f003 0303 	and.w	r3, r3, #3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d003      	beq.n	800322a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f9b0 	bl	8003588 <HAL_TIM_IC_CaptureCallback>
 8003228:	e005      	b.n	8003236 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 f9a2 	bl	8003574 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f000 f9b3 	bl	800359c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	f003 0304 	and.w	r3, r3, #4
 8003246:	2b04      	cmp	r3, #4
 8003248:	d122      	bne.n	8003290 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	f003 0304 	and.w	r3, r3, #4
 8003254:	2b04      	cmp	r3, #4
 8003256:	d11b      	bne.n	8003290 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f06f 0204 	mvn.w	r2, #4
 8003260:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2202      	movs	r2, #2
 8003266:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003272:	2b00      	cmp	r3, #0
 8003274:	d003      	beq.n	800327e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 f986 	bl	8003588 <HAL_TIM_IC_CaptureCallback>
 800327c:	e005      	b.n	800328a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 f978 	bl	8003574 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f000 f989 	bl	800359c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	f003 0308 	and.w	r3, r3, #8
 800329a:	2b08      	cmp	r3, #8
 800329c:	d122      	bne.n	80032e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	f003 0308 	and.w	r3, r3, #8
 80032a8:	2b08      	cmp	r3, #8
 80032aa:	d11b      	bne.n	80032e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f06f 0208 	mvn.w	r2, #8
 80032b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2204      	movs	r2, #4
 80032ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	69db      	ldr	r3, [r3, #28]
 80032c2:	f003 0303 	and.w	r3, r3, #3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d003      	beq.n	80032d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 f95c 	bl	8003588 <HAL_TIM_IC_CaptureCallback>
 80032d0:	e005      	b.n	80032de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f94e 	bl	8003574 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 f95f 	bl	800359c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	f003 0310 	and.w	r3, r3, #16
 80032ee:	2b10      	cmp	r3, #16
 80032f0:	d122      	bne.n	8003338 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	f003 0310 	and.w	r3, r3, #16
 80032fc:	2b10      	cmp	r3, #16
 80032fe:	d11b      	bne.n	8003338 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f06f 0210 	mvn.w	r2, #16
 8003308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2208      	movs	r2, #8
 800330e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800331a:	2b00      	cmp	r3, #0
 800331c:	d003      	beq.n	8003326 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 f932 	bl	8003588 <HAL_TIM_IC_CaptureCallback>
 8003324:	e005      	b.n	8003332 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 f924 	bl	8003574 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 f935 	bl	800359c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b01      	cmp	r3, #1
 8003344:	d10e      	bne.n	8003364 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	2b01      	cmp	r3, #1
 8003352:	d107      	bne.n	8003364 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f06f 0201 	mvn.w	r2, #1
 800335c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f7fd fffc 	bl	800135c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800336e:	2b80      	cmp	r3, #128	; 0x80
 8003370:	d10e      	bne.n	8003390 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800337c:	2b80      	cmp	r3, #128	; 0x80
 800337e:	d107      	bne.n	8003390 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 fc68 	bl	8003c60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800339a:	2b40      	cmp	r3, #64	; 0x40
 800339c:	d10e      	bne.n	80033bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033a8:	2b40      	cmp	r3, #64	; 0x40
 80033aa:	d107      	bne.n	80033bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80033b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f8fa 	bl	80035b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	f003 0320 	and.w	r3, r3, #32
 80033c6:	2b20      	cmp	r3, #32
 80033c8:	d10e      	bne.n	80033e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	f003 0320 	and.w	r3, r3, #32
 80033d4:	2b20      	cmp	r3, #32
 80033d6:	d107      	bne.n	80033e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f06f 0220 	mvn.w	r2, #32
 80033e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 fc32 	bl	8003c4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033e8:	bf00      	nop
 80033ea:	3708      	adds	r7, #8
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033fc:	2300      	movs	r3, #0
 80033fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003406:	2b01      	cmp	r3, #1
 8003408:	d101      	bne.n	800340e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800340a:	2302      	movs	r3, #2
 800340c:	e0ae      	b.n	800356c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2b0c      	cmp	r3, #12
 800341a:	f200 809f 	bhi.w	800355c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800341e:	a201      	add	r2, pc, #4	; (adr r2, 8003424 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003424:	08003459 	.word	0x08003459
 8003428:	0800355d 	.word	0x0800355d
 800342c:	0800355d 	.word	0x0800355d
 8003430:	0800355d 	.word	0x0800355d
 8003434:	08003499 	.word	0x08003499
 8003438:	0800355d 	.word	0x0800355d
 800343c:	0800355d 	.word	0x0800355d
 8003440:	0800355d 	.word	0x0800355d
 8003444:	080034db 	.word	0x080034db
 8003448:	0800355d 	.word	0x0800355d
 800344c:	0800355d 	.word	0x0800355d
 8003450:	0800355d 	.word	0x0800355d
 8003454:	0800351b 	.word	0x0800351b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68b9      	ldr	r1, [r7, #8]
 800345e:	4618      	mov	r0, r3
 8003460:	f000 f950 	bl	8003704 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	699a      	ldr	r2, [r3, #24]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f042 0208 	orr.w	r2, r2, #8
 8003472:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	699a      	ldr	r2, [r3, #24]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 0204 	bic.w	r2, r2, #4
 8003482:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6999      	ldr	r1, [r3, #24]
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	691a      	ldr	r2, [r3, #16]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	430a      	orrs	r2, r1
 8003494:	619a      	str	r2, [r3, #24]
      break;
 8003496:	e064      	b.n	8003562 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68b9      	ldr	r1, [r7, #8]
 800349e:	4618      	mov	r0, r3
 80034a0:	f000 f9a0 	bl	80037e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	699a      	ldr	r2, [r3, #24]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	699a      	ldr	r2, [r3, #24]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6999      	ldr	r1, [r3, #24]
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	021a      	lsls	r2, r3, #8
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	430a      	orrs	r2, r1
 80034d6:	619a      	str	r2, [r3, #24]
      break;
 80034d8:	e043      	b.n	8003562 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68b9      	ldr	r1, [r7, #8]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f000 f9f5 	bl	80038d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	69da      	ldr	r2, [r3, #28]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f042 0208 	orr.w	r2, r2, #8
 80034f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	69da      	ldr	r2, [r3, #28]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f022 0204 	bic.w	r2, r2, #4
 8003504:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	69d9      	ldr	r1, [r3, #28]
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	691a      	ldr	r2, [r3, #16]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	430a      	orrs	r2, r1
 8003516:	61da      	str	r2, [r3, #28]
      break;
 8003518:	e023      	b.n	8003562 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68b9      	ldr	r1, [r7, #8]
 8003520:	4618      	mov	r0, r3
 8003522:	f000 fa49 	bl	80039b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	69da      	ldr	r2, [r3, #28]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003534:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	69da      	ldr	r2, [r3, #28]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003544:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	69d9      	ldr	r1, [r3, #28]
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	021a      	lsls	r2, r3, #8
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	430a      	orrs	r2, r1
 8003558:	61da      	str	r2, [r3, #28]
      break;
 800355a:	e002      	b.n	8003562 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	75fb      	strb	r3, [r7, #23]
      break;
 8003560:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800356a:	7dfb      	ldrb	r3, [r7, #23]
}
 800356c:	4618      	mov	r0, r3
 800356e:	3718      	adds	r7, #24
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a40      	ldr	r2, [pc, #256]	; (80036d8 <TIM_Base_SetConfig+0x114>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d013      	beq.n	8003604 <TIM_Base_SetConfig+0x40>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035e2:	d00f      	beq.n	8003604 <TIM_Base_SetConfig+0x40>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a3d      	ldr	r2, [pc, #244]	; (80036dc <TIM_Base_SetConfig+0x118>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d00b      	beq.n	8003604 <TIM_Base_SetConfig+0x40>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a3c      	ldr	r2, [pc, #240]	; (80036e0 <TIM_Base_SetConfig+0x11c>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d007      	beq.n	8003604 <TIM_Base_SetConfig+0x40>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a3b      	ldr	r2, [pc, #236]	; (80036e4 <TIM_Base_SetConfig+0x120>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d003      	beq.n	8003604 <TIM_Base_SetConfig+0x40>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a3a      	ldr	r2, [pc, #232]	; (80036e8 <TIM_Base_SetConfig+0x124>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d108      	bne.n	8003616 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800360a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	4313      	orrs	r3, r2
 8003614:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a2f      	ldr	r2, [pc, #188]	; (80036d8 <TIM_Base_SetConfig+0x114>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d02b      	beq.n	8003676 <TIM_Base_SetConfig+0xb2>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003624:	d027      	beq.n	8003676 <TIM_Base_SetConfig+0xb2>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a2c      	ldr	r2, [pc, #176]	; (80036dc <TIM_Base_SetConfig+0x118>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d023      	beq.n	8003676 <TIM_Base_SetConfig+0xb2>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a2b      	ldr	r2, [pc, #172]	; (80036e0 <TIM_Base_SetConfig+0x11c>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d01f      	beq.n	8003676 <TIM_Base_SetConfig+0xb2>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a2a      	ldr	r2, [pc, #168]	; (80036e4 <TIM_Base_SetConfig+0x120>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d01b      	beq.n	8003676 <TIM_Base_SetConfig+0xb2>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a29      	ldr	r2, [pc, #164]	; (80036e8 <TIM_Base_SetConfig+0x124>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d017      	beq.n	8003676 <TIM_Base_SetConfig+0xb2>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a28      	ldr	r2, [pc, #160]	; (80036ec <TIM_Base_SetConfig+0x128>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d013      	beq.n	8003676 <TIM_Base_SetConfig+0xb2>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a27      	ldr	r2, [pc, #156]	; (80036f0 <TIM_Base_SetConfig+0x12c>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d00f      	beq.n	8003676 <TIM_Base_SetConfig+0xb2>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a26      	ldr	r2, [pc, #152]	; (80036f4 <TIM_Base_SetConfig+0x130>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d00b      	beq.n	8003676 <TIM_Base_SetConfig+0xb2>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a25      	ldr	r2, [pc, #148]	; (80036f8 <TIM_Base_SetConfig+0x134>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d007      	beq.n	8003676 <TIM_Base_SetConfig+0xb2>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a24      	ldr	r2, [pc, #144]	; (80036fc <TIM_Base_SetConfig+0x138>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d003      	beq.n	8003676 <TIM_Base_SetConfig+0xb2>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a23      	ldr	r2, [pc, #140]	; (8003700 <TIM_Base_SetConfig+0x13c>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d108      	bne.n	8003688 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800367c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	4313      	orrs	r3, r2
 8003686:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	4313      	orrs	r3, r2
 8003694:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a0a      	ldr	r2, [pc, #40]	; (80036d8 <TIM_Base_SetConfig+0x114>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d003      	beq.n	80036bc <TIM_Base_SetConfig+0xf8>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a0c      	ldr	r2, [pc, #48]	; (80036e8 <TIM_Base_SetConfig+0x124>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d103      	bne.n	80036c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	691a      	ldr	r2, [r3, #16]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	615a      	str	r2, [r3, #20]
}
 80036ca:	bf00      	nop
 80036cc:	3714      	adds	r7, #20
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	40010000 	.word	0x40010000
 80036dc:	40000400 	.word	0x40000400
 80036e0:	40000800 	.word	0x40000800
 80036e4:	40000c00 	.word	0x40000c00
 80036e8:	40010400 	.word	0x40010400
 80036ec:	40014000 	.word	0x40014000
 80036f0:	40014400 	.word	0x40014400
 80036f4:	40014800 	.word	0x40014800
 80036f8:	40001800 	.word	0x40001800
 80036fc:	40001c00 	.word	0x40001c00
 8003700:	40002000 	.word	0x40002000

08003704 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003704:	b480      	push	{r7}
 8003706:	b087      	sub	sp, #28
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	f023 0201 	bic.w	r2, r3, #1
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f023 0303 	bic.w	r3, r3, #3
 800373a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	4313      	orrs	r3, r2
 8003744:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	f023 0302 	bic.w	r3, r3, #2
 800374c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	697a      	ldr	r2, [r7, #20]
 8003754:	4313      	orrs	r3, r2
 8003756:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a20      	ldr	r2, [pc, #128]	; (80037dc <TIM_OC1_SetConfig+0xd8>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d003      	beq.n	8003768 <TIM_OC1_SetConfig+0x64>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a1f      	ldr	r2, [pc, #124]	; (80037e0 <TIM_OC1_SetConfig+0xdc>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d10c      	bne.n	8003782 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	f023 0308 	bic.w	r3, r3, #8
 800376e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	4313      	orrs	r3, r2
 8003778:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	f023 0304 	bic.w	r3, r3, #4
 8003780:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a15      	ldr	r2, [pc, #84]	; (80037dc <TIM_OC1_SetConfig+0xd8>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d003      	beq.n	8003792 <TIM_OC1_SetConfig+0x8e>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a14      	ldr	r2, [pc, #80]	; (80037e0 <TIM_OC1_SetConfig+0xdc>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d111      	bne.n	80037b6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003798:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685a      	ldr	r2, [r3, #4]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	621a      	str	r2, [r3, #32]
}
 80037d0:	bf00      	nop
 80037d2:	371c      	adds	r7, #28
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	40010000 	.word	0x40010000
 80037e0:	40010400 	.word	0x40010400

080037e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b087      	sub	sp, #28
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	f023 0210 	bic.w	r2, r3, #16
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003812:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800381a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	021b      	lsls	r3, r3, #8
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	4313      	orrs	r3, r2
 8003826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	f023 0320 	bic.w	r3, r3, #32
 800382e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	011b      	lsls	r3, r3, #4
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	4313      	orrs	r3, r2
 800383a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a22      	ldr	r2, [pc, #136]	; (80038c8 <TIM_OC2_SetConfig+0xe4>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d003      	beq.n	800384c <TIM_OC2_SetConfig+0x68>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a21      	ldr	r2, [pc, #132]	; (80038cc <TIM_OC2_SetConfig+0xe8>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d10d      	bne.n	8003868 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003852:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	011b      	lsls	r3, r3, #4
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	4313      	orrs	r3, r2
 800385e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003866:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a17      	ldr	r2, [pc, #92]	; (80038c8 <TIM_OC2_SetConfig+0xe4>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d003      	beq.n	8003878 <TIM_OC2_SetConfig+0x94>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a16      	ldr	r2, [pc, #88]	; (80038cc <TIM_OC2_SetConfig+0xe8>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d113      	bne.n	80038a0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800387e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003886:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	693a      	ldr	r2, [r7, #16]
 8003890:	4313      	orrs	r3, r2
 8003892:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	4313      	orrs	r3, r2
 800389e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685a      	ldr	r2, [r3, #4]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	621a      	str	r2, [r3, #32]
}
 80038ba:	bf00      	nop
 80038bc:	371c      	adds	r7, #28
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	40010000 	.word	0x40010000
 80038cc:	40010400 	.word	0x40010400

080038d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b087      	sub	sp, #28
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a1b      	ldr	r3, [r3, #32]
 80038ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	69db      	ldr	r3, [r3, #28]
 80038f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f023 0303 	bic.w	r3, r3, #3
 8003906:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	4313      	orrs	r3, r2
 8003910:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003918:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	021b      	lsls	r3, r3, #8
 8003920:	697a      	ldr	r2, [r7, #20]
 8003922:	4313      	orrs	r3, r2
 8003924:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a21      	ldr	r2, [pc, #132]	; (80039b0 <TIM_OC3_SetConfig+0xe0>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d003      	beq.n	8003936 <TIM_OC3_SetConfig+0x66>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a20      	ldr	r2, [pc, #128]	; (80039b4 <TIM_OC3_SetConfig+0xe4>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d10d      	bne.n	8003952 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800393c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	021b      	lsls	r3, r3, #8
 8003944:	697a      	ldr	r2, [r7, #20]
 8003946:	4313      	orrs	r3, r2
 8003948:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003950:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a16      	ldr	r2, [pc, #88]	; (80039b0 <TIM_OC3_SetConfig+0xe0>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d003      	beq.n	8003962 <TIM_OC3_SetConfig+0x92>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a15      	ldr	r2, [pc, #84]	; (80039b4 <TIM_OC3_SetConfig+0xe4>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d113      	bne.n	800398a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003968:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003970:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	011b      	lsls	r3, r3, #4
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	4313      	orrs	r3, r2
 800397c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	699b      	ldr	r3, [r3, #24]
 8003982:	011b      	lsls	r3, r3, #4
 8003984:	693a      	ldr	r2, [r7, #16]
 8003986:	4313      	orrs	r3, r2
 8003988:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	685a      	ldr	r2, [r3, #4]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	621a      	str	r2, [r3, #32]
}
 80039a4:	bf00      	nop
 80039a6:	371c      	adds	r7, #28
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr
 80039b0:	40010000 	.word	0x40010000
 80039b4:	40010400 	.word	0x40010400

080039b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b087      	sub	sp, #28
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	021b      	lsls	r3, r3, #8
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	031b      	lsls	r3, r3, #12
 8003a0a:	693a      	ldr	r2, [r7, #16]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a12      	ldr	r2, [pc, #72]	; (8003a5c <TIM_OC4_SetConfig+0xa4>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d003      	beq.n	8003a20 <TIM_OC4_SetConfig+0x68>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a11      	ldr	r2, [pc, #68]	; (8003a60 <TIM_OC4_SetConfig+0xa8>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d109      	bne.n	8003a34 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	019b      	lsls	r3, r3, #6
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	621a      	str	r2, [r3, #32]
}
 8003a4e:	bf00      	nop
 8003a50:	371c      	adds	r7, #28
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	40010000 	.word	0x40010000
 8003a60:	40010400 	.word	0x40010400

08003a64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b087      	sub	sp, #28
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	f003 031f 	and.w	r3, r3, #31
 8003a76:	2201      	movs	r2, #1
 8003a78:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6a1a      	ldr	r2, [r3, #32]
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	43db      	mvns	r3, r3
 8003a86:	401a      	ands	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6a1a      	ldr	r2, [r3, #32]
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	f003 031f 	and.w	r3, r3, #31
 8003a96:	6879      	ldr	r1, [r7, #4]
 8003a98:	fa01 f303 	lsl.w	r3, r1, r3
 8003a9c:	431a      	orrs	r2, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	621a      	str	r2, [r3, #32]
}
 8003aa2:	bf00      	nop
 8003aa4:	371c      	adds	r7, #28
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
	...

08003ab0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d101      	bne.n	8003ac8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	e05a      	b.n	8003b7e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68fa      	ldr	r2, [r7, #12]
 8003b00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a21      	ldr	r2, [pc, #132]	; (8003b8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d022      	beq.n	8003b52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b14:	d01d      	beq.n	8003b52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a1d      	ldr	r2, [pc, #116]	; (8003b90 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d018      	beq.n	8003b52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a1b      	ldr	r2, [pc, #108]	; (8003b94 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d013      	beq.n	8003b52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a1a      	ldr	r2, [pc, #104]	; (8003b98 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d00e      	beq.n	8003b52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a18      	ldr	r2, [pc, #96]	; (8003b9c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d009      	beq.n	8003b52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a17      	ldr	r2, [pc, #92]	; (8003ba0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d004      	beq.n	8003b52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a15      	ldr	r2, [pc, #84]	; (8003ba4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d10c      	bne.n	8003b6c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	68ba      	ldr	r2, [r7, #8]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68ba      	ldr	r2, [r7, #8]
 8003b6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3714      	adds	r7, #20
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	40010000 	.word	0x40010000
 8003b90:	40000400 	.word	0x40000400
 8003b94:	40000800 	.word	0x40000800
 8003b98:	40000c00 	.word	0x40000c00
 8003b9c:	40010400 	.word	0x40010400
 8003ba0:	40014000 	.word	0x40014000
 8003ba4:	40001800 	.word	0x40001800

08003ba8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d101      	bne.n	8003bc4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	e03d      	b.n	8003c40 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	695b      	ldr	r3, [r3, #20]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	69db      	ldr	r3, [r3, #28]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3714      	adds	r7, #20
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d101      	bne.n	8003c86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e03f      	b.n	8003d06 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d106      	bne.n	8003ca0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f7fd fd06 	bl	80016ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2224      	movs	r2, #36	; 0x24
 8003ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68da      	ldr	r2, [r3, #12]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 fd7b 	bl	80047b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	691a      	ldr	r2, [r3, #16]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ccc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	695a      	ldr	r2, [r3, #20]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cdc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68da      	ldr	r2, [r3, #12]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2220      	movs	r2, #32
 8003cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2220      	movs	r2, #32
 8003d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3708      	adds	r7, #8
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b08a      	sub	sp, #40	; 0x28
 8003d12:	af02      	add	r7, sp, #8
 8003d14:	60f8      	str	r0, [r7, #12]
 8003d16:	60b9      	str	r1, [r7, #8]
 8003d18:	603b      	str	r3, [r7, #0]
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b20      	cmp	r3, #32
 8003d2c:	d17c      	bne.n	8003e28 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d002      	beq.n	8003d3a <HAL_UART_Transmit+0x2c>
 8003d34:	88fb      	ldrh	r3, [r7, #6]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d101      	bne.n	8003d3e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e075      	b.n	8003e2a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d101      	bne.n	8003d4c <HAL_UART_Transmit+0x3e>
 8003d48:	2302      	movs	r3, #2
 8003d4a:	e06e      	b.n	8003e2a <HAL_UART_Transmit+0x11c>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2221      	movs	r2, #33	; 0x21
 8003d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d62:	f7fd fe1b 	bl	800199c <HAL_GetTick>
 8003d66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	88fa      	ldrh	r2, [r7, #6]
 8003d6c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	88fa      	ldrh	r2, [r7, #6]
 8003d72:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d7c:	d108      	bne.n	8003d90 <HAL_UART_Transmit+0x82>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d104      	bne.n	8003d90 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003d86:	2300      	movs	r3, #0
 8003d88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	61bb      	str	r3, [r7, #24]
 8003d8e:	e003      	b.n	8003d98 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d94:	2300      	movs	r3, #0
 8003d96:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003da0:	e02a      	b.n	8003df8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	9300      	str	r3, [sp, #0]
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	2200      	movs	r2, #0
 8003daa:	2180      	movs	r1, #128	; 0x80
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f000 faf9 	bl	80043a4 <UART_WaitOnFlagUntilTimeout>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d001      	beq.n	8003dbc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e036      	b.n	8003e2a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10b      	bne.n	8003dda <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	881b      	ldrh	r3, [r3, #0]
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dd0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	3302      	adds	r3, #2
 8003dd6:	61bb      	str	r3, [r7, #24]
 8003dd8:	e007      	b.n	8003dea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	781a      	ldrb	r2, [r3, #0]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	3301      	adds	r3, #1
 8003de8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	3b01      	subs	r3, #1
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1cf      	bne.n	8003da2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	9300      	str	r3, [sp, #0]
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	2140      	movs	r1, #64	; 0x40
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f000 fac9 	bl	80043a4 <UART_WaitOnFlagUntilTimeout>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d001      	beq.n	8003e1c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e006      	b.n	8003e2a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2220      	movs	r2, #32
 8003e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003e24:	2300      	movs	r3, #0
 8003e26:	e000      	b.n	8003e2a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003e28:	2302      	movs	r3, #2
  }
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3720      	adds	r7, #32
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
	...

08003e34 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b0ba      	sub	sp, #232	; 0xe8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003e60:	2300      	movs	r3, #0
 8003e62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e6a:	f003 030f 	and.w	r3, r3, #15
 8003e6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003e72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10f      	bne.n	8003e9a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e7e:	f003 0320 	and.w	r3, r3, #32
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d009      	beq.n	8003e9a <HAL_UART_IRQHandler+0x66>
 8003e86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e8a:	f003 0320 	and.w	r3, r3, #32
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d003      	beq.n	8003e9a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 fbd3 	bl	800463e <UART_Receive_IT>
      return;
 8003e98:	e256      	b.n	8004348 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003e9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f000 80de 	beq.w	8004060 <HAL_UART_IRQHandler+0x22c>
 8003ea4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d106      	bne.n	8003ebe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003eb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eb4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f000 80d1 	beq.w	8004060 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00b      	beq.n	8003ee2 <HAL_UART_IRQHandler+0xae>
 8003eca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d005      	beq.n	8003ee2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eda:	f043 0201 	orr.w	r2, r3, #1
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ee6:	f003 0304 	and.w	r3, r3, #4
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00b      	beq.n	8003f06 <HAL_UART_IRQHandler+0xd2>
 8003eee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d005      	beq.n	8003f06 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efe:	f043 0202 	orr.w	r2, r3, #2
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00b      	beq.n	8003f2a <HAL_UART_IRQHandler+0xf6>
 8003f12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f16:	f003 0301 	and.w	r3, r3, #1
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d005      	beq.n	8003f2a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f22:	f043 0204 	orr.w	r2, r3, #4
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003f2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f2e:	f003 0308 	and.w	r3, r3, #8
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d011      	beq.n	8003f5a <HAL_UART_IRQHandler+0x126>
 8003f36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f3a:	f003 0320 	and.w	r3, r3, #32
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d105      	bne.n	8003f4e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d005      	beq.n	8003f5a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f52:	f043 0208 	orr.w	r2, r3, #8
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f000 81ed 	beq.w	800433e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f68:	f003 0320 	and.w	r3, r3, #32
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d008      	beq.n	8003f82 <HAL_UART_IRQHandler+0x14e>
 8003f70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f74:	f003 0320 	and.w	r3, r3, #32
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d002      	beq.n	8003f82 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 fb5e 	bl	800463e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f8c:	2b40      	cmp	r3, #64	; 0x40
 8003f8e:	bf0c      	ite	eq
 8003f90:	2301      	moveq	r3, #1
 8003f92:	2300      	movne	r3, #0
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9e:	f003 0308 	and.w	r3, r3, #8
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d103      	bne.n	8003fae <HAL_UART_IRQHandler+0x17a>
 8003fa6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d04f      	beq.n	800404e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 fa66 	bl	8004480 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fbe:	2b40      	cmp	r3, #64	; 0x40
 8003fc0:	d141      	bne.n	8004046 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	3314      	adds	r3, #20
 8003fc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003fd0:	e853 3f00 	ldrex	r3, [r3]
 8003fd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003fd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003fdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fe0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	3314      	adds	r3, #20
 8003fea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003fee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003ff2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003ffa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003ffe:	e841 2300 	strex	r3, r2, [r1]
 8004002:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004006:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1d9      	bne.n	8003fc2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004012:	2b00      	cmp	r3, #0
 8004014:	d013      	beq.n	800403e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401a:	4a7d      	ldr	r2, [pc, #500]	; (8004210 <HAL_UART_IRQHandler+0x3dc>)
 800401c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004022:	4618      	mov	r0, r3
 8004024:	f7fd fe6b 	bl	8001cfe <HAL_DMA_Abort_IT>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d016      	beq.n	800405c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004038:	4610      	mov	r0, r2
 800403a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800403c:	e00e      	b.n	800405c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 f99a 	bl	8004378 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004044:	e00a      	b.n	800405c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 f996 	bl	8004378 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800404c:	e006      	b.n	800405c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 f992 	bl	8004378 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800405a:	e170      	b.n	800433e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800405c:	bf00      	nop
    return;
 800405e:	e16e      	b.n	800433e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004064:	2b01      	cmp	r3, #1
 8004066:	f040 814a 	bne.w	80042fe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800406a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800406e:	f003 0310 	and.w	r3, r3, #16
 8004072:	2b00      	cmp	r3, #0
 8004074:	f000 8143 	beq.w	80042fe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800407c:	f003 0310 	and.w	r3, r3, #16
 8004080:	2b00      	cmp	r3, #0
 8004082:	f000 813c 	beq.w	80042fe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004086:	2300      	movs	r3, #0
 8004088:	60bb      	str	r3, [r7, #8]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	60bb      	str	r3, [r7, #8]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	60bb      	str	r3, [r7, #8]
 800409a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a6:	2b40      	cmp	r3, #64	; 0x40
 80040a8:	f040 80b4 	bne.w	8004214 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80040b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80040bc:	2b00      	cmp	r3, #0
 80040be:	f000 8140 	beq.w	8004342 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80040c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80040ca:	429a      	cmp	r2, r3
 80040cc:	f080 8139 	bcs.w	8004342 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80040d6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040dc:	69db      	ldr	r3, [r3, #28]
 80040de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040e2:	f000 8088 	beq.w	80041f6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	330c      	adds	r3, #12
 80040ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80040f4:	e853 3f00 	ldrex	r3, [r3]
 80040f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80040fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004100:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004104:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	330c      	adds	r3, #12
 800410e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004112:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004116:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800411e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004122:	e841 2300 	strex	r3, r2, [r1]
 8004126:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800412a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1d9      	bne.n	80040e6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	3314      	adds	r3, #20
 8004138:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800413c:	e853 3f00 	ldrex	r3, [r3]
 8004140:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004142:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004144:	f023 0301 	bic.w	r3, r3, #1
 8004148:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	3314      	adds	r3, #20
 8004152:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004156:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800415a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800415e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004162:	e841 2300 	strex	r3, r2, [r1]
 8004166:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004168:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1e1      	bne.n	8004132 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	3314      	adds	r3, #20
 8004174:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004176:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004178:	e853 3f00 	ldrex	r3, [r3]
 800417c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800417e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004180:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004184:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	3314      	adds	r3, #20
 800418e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004192:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004194:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004196:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004198:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800419a:	e841 2300 	strex	r3, r2, [r1]
 800419e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80041a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1e3      	bne.n	800416e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2220      	movs	r2, #32
 80041aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	330c      	adds	r3, #12
 80041ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041be:	e853 3f00 	ldrex	r3, [r3]
 80041c2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80041c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041c6:	f023 0310 	bic.w	r3, r3, #16
 80041ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	330c      	adds	r3, #12
 80041d4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80041d8:	65ba      	str	r2, [r7, #88]	; 0x58
 80041da:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80041de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80041e0:	e841 2300 	strex	r3, r2, [r1]
 80041e4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80041e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1e3      	bne.n	80041b4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f0:	4618      	mov	r0, r3
 80041f2:	f7fd fd14 	bl	8001c1e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041fe:	b29b      	uxth	r3, r3
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	b29b      	uxth	r3, r3
 8004204:	4619      	mov	r1, r3
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 f8c0 	bl	800438c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800420c:	e099      	b.n	8004342 <HAL_UART_IRQHandler+0x50e>
 800420e:	bf00      	nop
 8004210:	08004547 	.word	0x08004547
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800421c:	b29b      	uxth	r3, r3
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004228:	b29b      	uxth	r3, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	f000 808b 	beq.w	8004346 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004230:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004234:	2b00      	cmp	r3, #0
 8004236:	f000 8086 	beq.w	8004346 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	330c      	adds	r3, #12
 8004240:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004244:	e853 3f00 	ldrex	r3, [r3]
 8004248:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800424a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800424c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004250:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	330c      	adds	r3, #12
 800425a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800425e:	647a      	str	r2, [r7, #68]	; 0x44
 8004260:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004262:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004264:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004266:	e841 2300 	strex	r3, r2, [r1]
 800426a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800426c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1e3      	bne.n	800423a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	3314      	adds	r3, #20
 8004278:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427c:	e853 3f00 	ldrex	r3, [r3]
 8004280:	623b      	str	r3, [r7, #32]
   return(result);
 8004282:	6a3b      	ldr	r3, [r7, #32]
 8004284:	f023 0301 	bic.w	r3, r3, #1
 8004288:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	3314      	adds	r3, #20
 8004292:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004296:	633a      	str	r2, [r7, #48]	; 0x30
 8004298:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800429c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800429e:	e841 2300 	strex	r3, r2, [r1]
 80042a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80042a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1e3      	bne.n	8004272 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2220      	movs	r2, #32
 80042ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	330c      	adds	r3, #12
 80042be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	e853 3f00 	ldrex	r3, [r3]
 80042c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f023 0310 	bic.w	r3, r3, #16
 80042ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	330c      	adds	r3, #12
 80042d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80042dc:	61fa      	str	r2, [r7, #28]
 80042de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e0:	69b9      	ldr	r1, [r7, #24]
 80042e2:	69fa      	ldr	r2, [r7, #28]
 80042e4:	e841 2300 	strex	r3, r2, [r1]
 80042e8:	617b      	str	r3, [r7, #20]
   return(result);
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d1e3      	bne.n	80042b8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80042f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80042f4:	4619      	mov	r1, r3
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 f848 	bl	800438c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80042fc:	e023      	b.n	8004346 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80042fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004306:	2b00      	cmp	r3, #0
 8004308:	d009      	beq.n	800431e <HAL_UART_IRQHandler+0x4ea>
 800430a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800430e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004312:	2b00      	cmp	r3, #0
 8004314:	d003      	beq.n	800431e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 f929 	bl	800456e <UART_Transmit_IT>
    return;
 800431c:	e014      	b.n	8004348 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800431e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00e      	beq.n	8004348 <HAL_UART_IRQHandler+0x514>
 800432a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800432e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004332:	2b00      	cmp	r3, #0
 8004334:	d008      	beq.n	8004348 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 f969 	bl	800460e <UART_EndTransmit_IT>
    return;
 800433c:	e004      	b.n	8004348 <HAL_UART_IRQHandler+0x514>
    return;
 800433e:	bf00      	nop
 8004340:	e002      	b.n	8004348 <HAL_UART_IRQHandler+0x514>
      return;
 8004342:	bf00      	nop
 8004344:	e000      	b.n	8004348 <HAL_UART_IRQHandler+0x514>
      return;
 8004346:	bf00      	nop
  }
}
 8004348:	37e8      	adds	r7, #232	; 0xe8
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop

08004350 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800436c:	bf00      	nop
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004380:	bf00      	nop
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	460b      	mov	r3, r1
 8004396:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004398:	bf00      	nop
 800439a:	370c      	adds	r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b090      	sub	sp, #64	; 0x40
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	603b      	str	r3, [r7, #0]
 80043b0:	4613      	mov	r3, r2
 80043b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043b4:	e050      	b.n	8004458 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043bc:	d04c      	beq.n	8004458 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80043be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d007      	beq.n	80043d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80043c4:	f7fd faea 	bl	800199c <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d241      	bcs.n	8004458 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	330c      	adds	r3, #12
 80043da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043de:	e853 3f00 	ldrex	r3, [r3]
 80043e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80043ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	330c      	adds	r3, #12
 80043f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80043f4:	637a      	str	r2, [r7, #52]	; 0x34
 80043f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043fc:	e841 2300 	strex	r3, r2, [r1]
 8004400:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1e5      	bne.n	80043d4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	3314      	adds	r3, #20
 800440e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	e853 3f00 	ldrex	r3, [r3]
 8004416:	613b      	str	r3, [r7, #16]
   return(result);
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	f023 0301 	bic.w	r3, r3, #1
 800441e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	3314      	adds	r3, #20
 8004426:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004428:	623a      	str	r2, [r7, #32]
 800442a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442c:	69f9      	ldr	r1, [r7, #28]
 800442e:	6a3a      	ldr	r2, [r7, #32]
 8004430:	e841 2300 	strex	r3, r2, [r1]
 8004434:	61bb      	str	r3, [r7, #24]
   return(result);
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1e5      	bne.n	8004408 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2220      	movs	r2, #32
 8004440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2220      	movs	r2, #32
 8004448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e00f      	b.n	8004478 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	4013      	ands	r3, r2
 8004462:	68ba      	ldr	r2, [r7, #8]
 8004464:	429a      	cmp	r2, r3
 8004466:	bf0c      	ite	eq
 8004468:	2301      	moveq	r3, #1
 800446a:	2300      	movne	r3, #0
 800446c:	b2db      	uxtb	r3, r3
 800446e:	461a      	mov	r2, r3
 8004470:	79fb      	ldrb	r3, [r7, #7]
 8004472:	429a      	cmp	r2, r3
 8004474:	d09f      	beq.n	80043b6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3740      	adds	r7, #64	; 0x40
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004480:	b480      	push	{r7}
 8004482:	b095      	sub	sp, #84	; 0x54
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	330c      	adds	r3, #12
 800448e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004492:	e853 3f00 	ldrex	r3, [r3]
 8004496:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800449a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800449e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	330c      	adds	r3, #12
 80044a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044a8:	643a      	str	r2, [r7, #64]	; 0x40
 80044aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80044ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044b0:	e841 2300 	strex	r3, r2, [r1]
 80044b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d1e5      	bne.n	8004488 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	3314      	adds	r3, #20
 80044c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c4:	6a3b      	ldr	r3, [r7, #32]
 80044c6:	e853 3f00 	ldrex	r3, [r3]
 80044ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	f023 0301 	bic.w	r3, r3, #1
 80044d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	3314      	adds	r3, #20
 80044da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044e4:	e841 2300 	strex	r3, r2, [r1]
 80044e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1e5      	bne.n	80044bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d119      	bne.n	800452c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	330c      	adds	r3, #12
 80044fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	e853 3f00 	ldrex	r3, [r3]
 8004506:	60bb      	str	r3, [r7, #8]
   return(result);
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	f023 0310 	bic.w	r3, r3, #16
 800450e:	647b      	str	r3, [r7, #68]	; 0x44
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	330c      	adds	r3, #12
 8004516:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004518:	61ba      	str	r2, [r7, #24]
 800451a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451c:	6979      	ldr	r1, [r7, #20]
 800451e:	69ba      	ldr	r2, [r7, #24]
 8004520:	e841 2300 	strex	r3, r2, [r1]
 8004524:	613b      	str	r3, [r7, #16]
   return(result);
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1e5      	bne.n	80044f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2220      	movs	r2, #32
 8004530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	631a      	str	r2, [r3, #48]	; 0x30
}
 800453a:	bf00      	nop
 800453c:	3754      	adds	r7, #84	; 0x54
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr

08004546 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b084      	sub	sp, #16
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004552:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2200      	movs	r2, #0
 800455e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004560:	68f8      	ldr	r0, [r7, #12]
 8004562:	f7ff ff09 	bl	8004378 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004566:	bf00      	nop
 8004568:	3710      	adds	r7, #16
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800456e:	b480      	push	{r7}
 8004570:	b085      	sub	sp, #20
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b21      	cmp	r3, #33	; 0x21
 8004580:	d13e      	bne.n	8004600 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800458a:	d114      	bne.n	80045b6 <UART_Transmit_IT+0x48>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d110      	bne.n	80045b6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	881b      	ldrh	r3, [r3, #0]
 800459e:	461a      	mov	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045a8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	1c9a      	adds	r2, r3, #2
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	621a      	str	r2, [r3, #32]
 80045b4:	e008      	b.n	80045c8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a1b      	ldr	r3, [r3, #32]
 80045ba:	1c59      	adds	r1, r3, #1
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	6211      	str	r1, [r2, #32]
 80045c0:	781a      	ldrb	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	3b01      	subs	r3, #1
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	4619      	mov	r1, r3
 80045d6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d10f      	bne.n	80045fc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68da      	ldr	r2, [r3, #12]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045ea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68da      	ldr	r2, [r3, #12]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045fa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80045fc:	2300      	movs	r3, #0
 80045fe:	e000      	b.n	8004602 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004600:	2302      	movs	r3, #2
  }
}
 8004602:	4618      	mov	r0, r3
 8004604:	3714      	adds	r7, #20
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr

0800460e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800460e:	b580      	push	{r7, lr}
 8004610:	b082      	sub	sp, #8
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68da      	ldr	r2, [r3, #12]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004624:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2220      	movs	r2, #32
 800462a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f7ff fe8e 	bl	8004350 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3708      	adds	r7, #8
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}

0800463e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800463e:	b580      	push	{r7, lr}
 8004640:	b08c      	sub	sp, #48	; 0x30
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b22      	cmp	r3, #34	; 0x22
 8004650:	f040 80ab 	bne.w	80047aa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800465c:	d117      	bne.n	800468e <UART_Receive_IT+0x50>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d113      	bne.n	800468e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004666:	2300      	movs	r3, #0
 8004668:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	b29b      	uxth	r3, r3
 8004678:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800467c:	b29a      	uxth	r2, r3
 800467e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004680:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004686:	1c9a      	adds	r2, r3, #2
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	629a      	str	r2, [r3, #40]	; 0x28
 800468c:	e026      	b.n	80046dc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004692:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004694:	2300      	movs	r3, #0
 8004696:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046a0:	d007      	beq.n	80046b2 <UART_Receive_IT+0x74>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d10a      	bne.n	80046c0 <UART_Receive_IT+0x82>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d106      	bne.n	80046c0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	b2da      	uxtb	r2, r3
 80046ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046bc:	701a      	strb	r2, [r3, #0]
 80046be:	e008      	b.n	80046d2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046cc:	b2da      	uxtb	r2, r3
 80046ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d6:	1c5a      	adds	r2, r3, #1
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	3b01      	subs	r3, #1
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	4619      	mov	r1, r3
 80046ea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d15a      	bne.n	80047a6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68da      	ldr	r2, [r3, #12]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f022 0220 	bic.w	r2, r2, #32
 80046fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68da      	ldr	r2, [r3, #12]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800470e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	695a      	ldr	r2, [r3, #20]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f022 0201 	bic.w	r2, r2, #1
 800471e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2220      	movs	r2, #32
 8004724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472c:	2b01      	cmp	r3, #1
 800472e:	d135      	bne.n	800479c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	330c      	adds	r3, #12
 800473c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	e853 3f00 	ldrex	r3, [r3]
 8004744:	613b      	str	r3, [r7, #16]
   return(result);
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	f023 0310 	bic.w	r3, r3, #16
 800474c:	627b      	str	r3, [r7, #36]	; 0x24
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	330c      	adds	r3, #12
 8004754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004756:	623a      	str	r2, [r7, #32]
 8004758:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800475a:	69f9      	ldr	r1, [r7, #28]
 800475c:	6a3a      	ldr	r2, [r7, #32]
 800475e:	e841 2300 	strex	r3, r2, [r1]
 8004762:	61bb      	str	r3, [r7, #24]
   return(result);
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1e5      	bne.n	8004736 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0310 	and.w	r3, r3, #16
 8004774:	2b10      	cmp	r3, #16
 8004776:	d10a      	bne.n	800478e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004778:	2300      	movs	r3, #0
 800477a:	60fb      	str	r3, [r7, #12]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	60fb      	str	r3, [r7, #12]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	60fb      	str	r3, [r7, #12]
 800478c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004792:	4619      	mov	r1, r3
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f7ff fdf9 	bl	800438c <HAL_UARTEx_RxEventCallback>
 800479a:	e002      	b.n	80047a2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f7ff fde1 	bl	8004364 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80047a2:	2300      	movs	r3, #0
 80047a4:	e002      	b.n	80047ac <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80047a6:	2300      	movs	r3, #0
 80047a8:	e000      	b.n	80047ac <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80047aa:	2302      	movs	r3, #2
  }
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3730      	adds	r7, #48	; 0x30
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047b8:	b0c0      	sub	sp, #256	; 0x100
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80047cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d0:	68d9      	ldr	r1, [r3, #12]
 80047d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	ea40 0301 	orr.w	r3, r0, r1
 80047dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80047de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e2:	689a      	ldr	r2, [r3, #8]
 80047e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	431a      	orrs	r2, r3
 80047ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f0:	695b      	ldr	r3, [r3, #20]
 80047f2:	431a      	orrs	r2, r3
 80047f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f8:	69db      	ldr	r3, [r3, #28]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800480c:	f021 010c 	bic.w	r1, r1, #12
 8004810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800481a:	430b      	orrs	r3, r1
 800481c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800481e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800482a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800482e:	6999      	ldr	r1, [r3, #24]
 8004830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	ea40 0301 	orr.w	r3, r0, r1
 800483a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800483c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	4b8f      	ldr	r3, [pc, #572]	; (8004a80 <UART_SetConfig+0x2cc>)
 8004844:	429a      	cmp	r2, r3
 8004846:	d005      	beq.n	8004854 <UART_SetConfig+0xa0>
 8004848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	4b8d      	ldr	r3, [pc, #564]	; (8004a84 <UART_SetConfig+0x2d0>)
 8004850:	429a      	cmp	r2, r3
 8004852:	d104      	bne.n	800485e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004854:	f7fd fd5c 	bl	8002310 <HAL_RCC_GetPCLK2Freq>
 8004858:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800485c:	e003      	b.n	8004866 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800485e:	f7fd fd43 	bl	80022e8 <HAL_RCC_GetPCLK1Freq>
 8004862:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800486a:	69db      	ldr	r3, [r3, #28]
 800486c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004870:	f040 810c 	bne.w	8004a8c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004874:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004878:	2200      	movs	r2, #0
 800487a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800487e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004882:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004886:	4622      	mov	r2, r4
 8004888:	462b      	mov	r3, r5
 800488a:	1891      	adds	r1, r2, r2
 800488c:	65b9      	str	r1, [r7, #88]	; 0x58
 800488e:	415b      	adcs	r3, r3
 8004890:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004892:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004896:	4621      	mov	r1, r4
 8004898:	eb12 0801 	adds.w	r8, r2, r1
 800489c:	4629      	mov	r1, r5
 800489e:	eb43 0901 	adc.w	r9, r3, r1
 80048a2:	f04f 0200 	mov.w	r2, #0
 80048a6:	f04f 0300 	mov.w	r3, #0
 80048aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048b6:	4690      	mov	r8, r2
 80048b8:	4699      	mov	r9, r3
 80048ba:	4623      	mov	r3, r4
 80048bc:	eb18 0303 	adds.w	r3, r8, r3
 80048c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80048c4:	462b      	mov	r3, r5
 80048c6:	eb49 0303 	adc.w	r3, r9, r3
 80048ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80048ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80048da:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80048de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80048e2:	460b      	mov	r3, r1
 80048e4:	18db      	adds	r3, r3, r3
 80048e6:	653b      	str	r3, [r7, #80]	; 0x50
 80048e8:	4613      	mov	r3, r2
 80048ea:	eb42 0303 	adc.w	r3, r2, r3
 80048ee:	657b      	str	r3, [r7, #84]	; 0x54
 80048f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80048f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80048f8:	f7fb ffe8 	bl	80008cc <__aeabi_uldivmod>
 80048fc:	4602      	mov	r2, r0
 80048fe:	460b      	mov	r3, r1
 8004900:	4b61      	ldr	r3, [pc, #388]	; (8004a88 <UART_SetConfig+0x2d4>)
 8004902:	fba3 2302 	umull	r2, r3, r3, r2
 8004906:	095b      	lsrs	r3, r3, #5
 8004908:	011c      	lsls	r4, r3, #4
 800490a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800490e:	2200      	movs	r2, #0
 8004910:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004914:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004918:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800491c:	4642      	mov	r2, r8
 800491e:	464b      	mov	r3, r9
 8004920:	1891      	adds	r1, r2, r2
 8004922:	64b9      	str	r1, [r7, #72]	; 0x48
 8004924:	415b      	adcs	r3, r3
 8004926:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004928:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800492c:	4641      	mov	r1, r8
 800492e:	eb12 0a01 	adds.w	sl, r2, r1
 8004932:	4649      	mov	r1, r9
 8004934:	eb43 0b01 	adc.w	fp, r3, r1
 8004938:	f04f 0200 	mov.w	r2, #0
 800493c:	f04f 0300 	mov.w	r3, #0
 8004940:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004944:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004948:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800494c:	4692      	mov	sl, r2
 800494e:	469b      	mov	fp, r3
 8004950:	4643      	mov	r3, r8
 8004952:	eb1a 0303 	adds.w	r3, sl, r3
 8004956:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800495a:	464b      	mov	r3, r9
 800495c:	eb4b 0303 	adc.w	r3, fp, r3
 8004960:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004970:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004974:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004978:	460b      	mov	r3, r1
 800497a:	18db      	adds	r3, r3, r3
 800497c:	643b      	str	r3, [r7, #64]	; 0x40
 800497e:	4613      	mov	r3, r2
 8004980:	eb42 0303 	adc.w	r3, r2, r3
 8004984:	647b      	str	r3, [r7, #68]	; 0x44
 8004986:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800498a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800498e:	f7fb ff9d 	bl	80008cc <__aeabi_uldivmod>
 8004992:	4602      	mov	r2, r0
 8004994:	460b      	mov	r3, r1
 8004996:	4611      	mov	r1, r2
 8004998:	4b3b      	ldr	r3, [pc, #236]	; (8004a88 <UART_SetConfig+0x2d4>)
 800499a:	fba3 2301 	umull	r2, r3, r3, r1
 800499e:	095b      	lsrs	r3, r3, #5
 80049a0:	2264      	movs	r2, #100	; 0x64
 80049a2:	fb02 f303 	mul.w	r3, r2, r3
 80049a6:	1acb      	subs	r3, r1, r3
 80049a8:	00db      	lsls	r3, r3, #3
 80049aa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80049ae:	4b36      	ldr	r3, [pc, #216]	; (8004a88 <UART_SetConfig+0x2d4>)
 80049b0:	fba3 2302 	umull	r2, r3, r3, r2
 80049b4:	095b      	lsrs	r3, r3, #5
 80049b6:	005b      	lsls	r3, r3, #1
 80049b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80049bc:	441c      	add	r4, r3
 80049be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049c2:	2200      	movs	r2, #0
 80049c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80049c8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80049cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80049d0:	4642      	mov	r2, r8
 80049d2:	464b      	mov	r3, r9
 80049d4:	1891      	adds	r1, r2, r2
 80049d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80049d8:	415b      	adcs	r3, r3
 80049da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80049e0:	4641      	mov	r1, r8
 80049e2:	1851      	adds	r1, r2, r1
 80049e4:	6339      	str	r1, [r7, #48]	; 0x30
 80049e6:	4649      	mov	r1, r9
 80049e8:	414b      	adcs	r3, r1
 80049ea:	637b      	str	r3, [r7, #52]	; 0x34
 80049ec:	f04f 0200 	mov.w	r2, #0
 80049f0:	f04f 0300 	mov.w	r3, #0
 80049f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80049f8:	4659      	mov	r1, fp
 80049fa:	00cb      	lsls	r3, r1, #3
 80049fc:	4651      	mov	r1, sl
 80049fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a02:	4651      	mov	r1, sl
 8004a04:	00ca      	lsls	r2, r1, #3
 8004a06:	4610      	mov	r0, r2
 8004a08:	4619      	mov	r1, r3
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	4642      	mov	r2, r8
 8004a0e:	189b      	adds	r3, r3, r2
 8004a10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a14:	464b      	mov	r3, r9
 8004a16:	460a      	mov	r2, r1
 8004a18:	eb42 0303 	adc.w	r3, r2, r3
 8004a1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004a2c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004a30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004a34:	460b      	mov	r3, r1
 8004a36:	18db      	adds	r3, r3, r3
 8004a38:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	eb42 0303 	adc.w	r3, r2, r3
 8004a40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a46:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004a4a:	f7fb ff3f 	bl	80008cc <__aeabi_uldivmod>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	460b      	mov	r3, r1
 8004a52:	4b0d      	ldr	r3, [pc, #52]	; (8004a88 <UART_SetConfig+0x2d4>)
 8004a54:	fba3 1302 	umull	r1, r3, r3, r2
 8004a58:	095b      	lsrs	r3, r3, #5
 8004a5a:	2164      	movs	r1, #100	; 0x64
 8004a5c:	fb01 f303 	mul.w	r3, r1, r3
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	00db      	lsls	r3, r3, #3
 8004a64:	3332      	adds	r3, #50	; 0x32
 8004a66:	4a08      	ldr	r2, [pc, #32]	; (8004a88 <UART_SetConfig+0x2d4>)
 8004a68:	fba2 2303 	umull	r2, r3, r2, r3
 8004a6c:	095b      	lsrs	r3, r3, #5
 8004a6e:	f003 0207 	and.w	r2, r3, #7
 8004a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4422      	add	r2, r4
 8004a7a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a7c:	e106      	b.n	8004c8c <UART_SetConfig+0x4d8>
 8004a7e:	bf00      	nop
 8004a80:	40011000 	.word	0x40011000
 8004a84:	40011400 	.word	0x40011400
 8004a88:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a90:	2200      	movs	r2, #0
 8004a92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004a96:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004a9a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004a9e:	4642      	mov	r2, r8
 8004aa0:	464b      	mov	r3, r9
 8004aa2:	1891      	adds	r1, r2, r2
 8004aa4:	6239      	str	r1, [r7, #32]
 8004aa6:	415b      	adcs	r3, r3
 8004aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8004aaa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004aae:	4641      	mov	r1, r8
 8004ab0:	1854      	adds	r4, r2, r1
 8004ab2:	4649      	mov	r1, r9
 8004ab4:	eb43 0501 	adc.w	r5, r3, r1
 8004ab8:	f04f 0200 	mov.w	r2, #0
 8004abc:	f04f 0300 	mov.w	r3, #0
 8004ac0:	00eb      	lsls	r3, r5, #3
 8004ac2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ac6:	00e2      	lsls	r2, r4, #3
 8004ac8:	4614      	mov	r4, r2
 8004aca:	461d      	mov	r5, r3
 8004acc:	4643      	mov	r3, r8
 8004ace:	18e3      	adds	r3, r4, r3
 8004ad0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004ad4:	464b      	mov	r3, r9
 8004ad6:	eb45 0303 	adc.w	r3, r5, r3
 8004ada:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004aea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004aee:	f04f 0200 	mov.w	r2, #0
 8004af2:	f04f 0300 	mov.w	r3, #0
 8004af6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004afa:	4629      	mov	r1, r5
 8004afc:	008b      	lsls	r3, r1, #2
 8004afe:	4621      	mov	r1, r4
 8004b00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b04:	4621      	mov	r1, r4
 8004b06:	008a      	lsls	r2, r1, #2
 8004b08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004b0c:	f7fb fede 	bl	80008cc <__aeabi_uldivmod>
 8004b10:	4602      	mov	r2, r0
 8004b12:	460b      	mov	r3, r1
 8004b14:	4b60      	ldr	r3, [pc, #384]	; (8004c98 <UART_SetConfig+0x4e4>)
 8004b16:	fba3 2302 	umull	r2, r3, r3, r2
 8004b1a:	095b      	lsrs	r3, r3, #5
 8004b1c:	011c      	lsls	r4, r3, #4
 8004b1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b22:	2200      	movs	r2, #0
 8004b24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b28:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004b2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004b30:	4642      	mov	r2, r8
 8004b32:	464b      	mov	r3, r9
 8004b34:	1891      	adds	r1, r2, r2
 8004b36:	61b9      	str	r1, [r7, #24]
 8004b38:	415b      	adcs	r3, r3
 8004b3a:	61fb      	str	r3, [r7, #28]
 8004b3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b40:	4641      	mov	r1, r8
 8004b42:	1851      	adds	r1, r2, r1
 8004b44:	6139      	str	r1, [r7, #16]
 8004b46:	4649      	mov	r1, r9
 8004b48:	414b      	adcs	r3, r1
 8004b4a:	617b      	str	r3, [r7, #20]
 8004b4c:	f04f 0200 	mov.w	r2, #0
 8004b50:	f04f 0300 	mov.w	r3, #0
 8004b54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b58:	4659      	mov	r1, fp
 8004b5a:	00cb      	lsls	r3, r1, #3
 8004b5c:	4651      	mov	r1, sl
 8004b5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b62:	4651      	mov	r1, sl
 8004b64:	00ca      	lsls	r2, r1, #3
 8004b66:	4610      	mov	r0, r2
 8004b68:	4619      	mov	r1, r3
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	4642      	mov	r2, r8
 8004b6e:	189b      	adds	r3, r3, r2
 8004b70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b74:	464b      	mov	r3, r9
 8004b76:	460a      	mov	r2, r1
 8004b78:	eb42 0303 	adc.w	r3, r2, r3
 8004b7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b8a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004b8c:	f04f 0200 	mov.w	r2, #0
 8004b90:	f04f 0300 	mov.w	r3, #0
 8004b94:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004b98:	4649      	mov	r1, r9
 8004b9a:	008b      	lsls	r3, r1, #2
 8004b9c:	4641      	mov	r1, r8
 8004b9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ba2:	4641      	mov	r1, r8
 8004ba4:	008a      	lsls	r2, r1, #2
 8004ba6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004baa:	f7fb fe8f 	bl	80008cc <__aeabi_uldivmod>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	4611      	mov	r1, r2
 8004bb4:	4b38      	ldr	r3, [pc, #224]	; (8004c98 <UART_SetConfig+0x4e4>)
 8004bb6:	fba3 2301 	umull	r2, r3, r3, r1
 8004bba:	095b      	lsrs	r3, r3, #5
 8004bbc:	2264      	movs	r2, #100	; 0x64
 8004bbe:	fb02 f303 	mul.w	r3, r2, r3
 8004bc2:	1acb      	subs	r3, r1, r3
 8004bc4:	011b      	lsls	r3, r3, #4
 8004bc6:	3332      	adds	r3, #50	; 0x32
 8004bc8:	4a33      	ldr	r2, [pc, #204]	; (8004c98 <UART_SetConfig+0x4e4>)
 8004bca:	fba2 2303 	umull	r2, r3, r2, r3
 8004bce:	095b      	lsrs	r3, r3, #5
 8004bd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bd4:	441c      	add	r4, r3
 8004bd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bda:	2200      	movs	r2, #0
 8004bdc:	673b      	str	r3, [r7, #112]	; 0x70
 8004bde:	677a      	str	r2, [r7, #116]	; 0x74
 8004be0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004be4:	4642      	mov	r2, r8
 8004be6:	464b      	mov	r3, r9
 8004be8:	1891      	adds	r1, r2, r2
 8004bea:	60b9      	str	r1, [r7, #8]
 8004bec:	415b      	adcs	r3, r3
 8004bee:	60fb      	str	r3, [r7, #12]
 8004bf0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004bf4:	4641      	mov	r1, r8
 8004bf6:	1851      	adds	r1, r2, r1
 8004bf8:	6039      	str	r1, [r7, #0]
 8004bfa:	4649      	mov	r1, r9
 8004bfc:	414b      	adcs	r3, r1
 8004bfe:	607b      	str	r3, [r7, #4]
 8004c00:	f04f 0200 	mov.w	r2, #0
 8004c04:	f04f 0300 	mov.w	r3, #0
 8004c08:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c0c:	4659      	mov	r1, fp
 8004c0e:	00cb      	lsls	r3, r1, #3
 8004c10:	4651      	mov	r1, sl
 8004c12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c16:	4651      	mov	r1, sl
 8004c18:	00ca      	lsls	r2, r1, #3
 8004c1a:	4610      	mov	r0, r2
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	4603      	mov	r3, r0
 8004c20:	4642      	mov	r2, r8
 8004c22:	189b      	adds	r3, r3, r2
 8004c24:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c26:	464b      	mov	r3, r9
 8004c28:	460a      	mov	r2, r1
 8004c2a:	eb42 0303 	adc.w	r3, r2, r3
 8004c2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	663b      	str	r3, [r7, #96]	; 0x60
 8004c3a:	667a      	str	r2, [r7, #100]	; 0x64
 8004c3c:	f04f 0200 	mov.w	r2, #0
 8004c40:	f04f 0300 	mov.w	r3, #0
 8004c44:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004c48:	4649      	mov	r1, r9
 8004c4a:	008b      	lsls	r3, r1, #2
 8004c4c:	4641      	mov	r1, r8
 8004c4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c52:	4641      	mov	r1, r8
 8004c54:	008a      	lsls	r2, r1, #2
 8004c56:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004c5a:	f7fb fe37 	bl	80008cc <__aeabi_uldivmod>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	460b      	mov	r3, r1
 8004c62:	4b0d      	ldr	r3, [pc, #52]	; (8004c98 <UART_SetConfig+0x4e4>)
 8004c64:	fba3 1302 	umull	r1, r3, r3, r2
 8004c68:	095b      	lsrs	r3, r3, #5
 8004c6a:	2164      	movs	r1, #100	; 0x64
 8004c6c:	fb01 f303 	mul.w	r3, r1, r3
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	011b      	lsls	r3, r3, #4
 8004c74:	3332      	adds	r3, #50	; 0x32
 8004c76:	4a08      	ldr	r2, [pc, #32]	; (8004c98 <UART_SetConfig+0x4e4>)
 8004c78:	fba2 2303 	umull	r2, r3, r2, r3
 8004c7c:	095b      	lsrs	r3, r3, #5
 8004c7e:	f003 020f 	and.w	r2, r3, #15
 8004c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4422      	add	r2, r4
 8004c8a:	609a      	str	r2, [r3, #8]
}
 8004c8c:	bf00      	nop
 8004c8e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004c92:	46bd      	mov	sp, r7
 8004c94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c98:	51eb851f 	.word	0x51eb851f

08004c9c <siprintf>:
 8004c9c:	b40e      	push	{r1, r2, r3}
 8004c9e:	b500      	push	{lr}
 8004ca0:	b09c      	sub	sp, #112	; 0x70
 8004ca2:	ab1d      	add	r3, sp, #116	; 0x74
 8004ca4:	9002      	str	r0, [sp, #8]
 8004ca6:	9006      	str	r0, [sp, #24]
 8004ca8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004cac:	4809      	ldr	r0, [pc, #36]	; (8004cd4 <siprintf+0x38>)
 8004cae:	9107      	str	r1, [sp, #28]
 8004cb0:	9104      	str	r1, [sp, #16]
 8004cb2:	4909      	ldr	r1, [pc, #36]	; (8004cd8 <siprintf+0x3c>)
 8004cb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004cb8:	9105      	str	r1, [sp, #20]
 8004cba:	6800      	ldr	r0, [r0, #0]
 8004cbc:	9301      	str	r3, [sp, #4]
 8004cbe:	a902      	add	r1, sp, #8
 8004cc0:	f000 f992 	bl	8004fe8 <_svfiprintf_r>
 8004cc4:	9b02      	ldr	r3, [sp, #8]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	701a      	strb	r2, [r3, #0]
 8004cca:	b01c      	add	sp, #112	; 0x70
 8004ccc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004cd0:	b003      	add	sp, #12
 8004cd2:	4770      	bx	lr
 8004cd4:	2000005c 	.word	0x2000005c
 8004cd8:	ffff0208 	.word	0xffff0208

08004cdc <memset>:
 8004cdc:	4402      	add	r2, r0
 8004cde:	4603      	mov	r3, r0
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d100      	bne.n	8004ce6 <memset+0xa>
 8004ce4:	4770      	bx	lr
 8004ce6:	f803 1b01 	strb.w	r1, [r3], #1
 8004cea:	e7f9      	b.n	8004ce0 <memset+0x4>

08004cec <__errno>:
 8004cec:	4b01      	ldr	r3, [pc, #4]	; (8004cf4 <__errno+0x8>)
 8004cee:	6818      	ldr	r0, [r3, #0]
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	2000005c 	.word	0x2000005c

08004cf8 <__libc_init_array>:
 8004cf8:	b570      	push	{r4, r5, r6, lr}
 8004cfa:	4d0d      	ldr	r5, [pc, #52]	; (8004d30 <__libc_init_array+0x38>)
 8004cfc:	4c0d      	ldr	r4, [pc, #52]	; (8004d34 <__libc_init_array+0x3c>)
 8004cfe:	1b64      	subs	r4, r4, r5
 8004d00:	10a4      	asrs	r4, r4, #2
 8004d02:	2600      	movs	r6, #0
 8004d04:	42a6      	cmp	r6, r4
 8004d06:	d109      	bne.n	8004d1c <__libc_init_array+0x24>
 8004d08:	4d0b      	ldr	r5, [pc, #44]	; (8004d38 <__libc_init_array+0x40>)
 8004d0a:	4c0c      	ldr	r4, [pc, #48]	; (8004d3c <__libc_init_array+0x44>)
 8004d0c:	f000 fc6a 	bl	80055e4 <_init>
 8004d10:	1b64      	subs	r4, r4, r5
 8004d12:	10a4      	asrs	r4, r4, #2
 8004d14:	2600      	movs	r6, #0
 8004d16:	42a6      	cmp	r6, r4
 8004d18:	d105      	bne.n	8004d26 <__libc_init_array+0x2e>
 8004d1a:	bd70      	pop	{r4, r5, r6, pc}
 8004d1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d20:	4798      	blx	r3
 8004d22:	3601      	adds	r6, #1
 8004d24:	e7ee      	b.n	8004d04 <__libc_init_array+0xc>
 8004d26:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d2a:	4798      	blx	r3
 8004d2c:	3601      	adds	r6, #1
 8004d2e:	e7f2      	b.n	8004d16 <__libc_init_array+0x1e>
 8004d30:	080056c0 	.word	0x080056c0
 8004d34:	080056c0 	.word	0x080056c0
 8004d38:	080056c0 	.word	0x080056c0
 8004d3c:	080056c4 	.word	0x080056c4

08004d40 <__retarget_lock_acquire_recursive>:
 8004d40:	4770      	bx	lr

08004d42 <__retarget_lock_release_recursive>:
 8004d42:	4770      	bx	lr

08004d44 <_free_r>:
 8004d44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d46:	2900      	cmp	r1, #0
 8004d48:	d044      	beq.n	8004dd4 <_free_r+0x90>
 8004d4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d4e:	9001      	str	r0, [sp, #4]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	f1a1 0404 	sub.w	r4, r1, #4
 8004d56:	bfb8      	it	lt
 8004d58:	18e4      	addlt	r4, r4, r3
 8004d5a:	f000 f8df 	bl	8004f1c <__malloc_lock>
 8004d5e:	4a1e      	ldr	r2, [pc, #120]	; (8004dd8 <_free_r+0x94>)
 8004d60:	9801      	ldr	r0, [sp, #4]
 8004d62:	6813      	ldr	r3, [r2, #0]
 8004d64:	b933      	cbnz	r3, 8004d74 <_free_r+0x30>
 8004d66:	6063      	str	r3, [r4, #4]
 8004d68:	6014      	str	r4, [r2, #0]
 8004d6a:	b003      	add	sp, #12
 8004d6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d70:	f000 b8da 	b.w	8004f28 <__malloc_unlock>
 8004d74:	42a3      	cmp	r3, r4
 8004d76:	d908      	bls.n	8004d8a <_free_r+0x46>
 8004d78:	6825      	ldr	r5, [r4, #0]
 8004d7a:	1961      	adds	r1, r4, r5
 8004d7c:	428b      	cmp	r3, r1
 8004d7e:	bf01      	itttt	eq
 8004d80:	6819      	ldreq	r1, [r3, #0]
 8004d82:	685b      	ldreq	r3, [r3, #4]
 8004d84:	1949      	addeq	r1, r1, r5
 8004d86:	6021      	streq	r1, [r4, #0]
 8004d88:	e7ed      	b.n	8004d66 <_free_r+0x22>
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	b10b      	cbz	r3, 8004d94 <_free_r+0x50>
 8004d90:	42a3      	cmp	r3, r4
 8004d92:	d9fa      	bls.n	8004d8a <_free_r+0x46>
 8004d94:	6811      	ldr	r1, [r2, #0]
 8004d96:	1855      	adds	r5, r2, r1
 8004d98:	42a5      	cmp	r5, r4
 8004d9a:	d10b      	bne.n	8004db4 <_free_r+0x70>
 8004d9c:	6824      	ldr	r4, [r4, #0]
 8004d9e:	4421      	add	r1, r4
 8004da0:	1854      	adds	r4, r2, r1
 8004da2:	42a3      	cmp	r3, r4
 8004da4:	6011      	str	r1, [r2, #0]
 8004da6:	d1e0      	bne.n	8004d6a <_free_r+0x26>
 8004da8:	681c      	ldr	r4, [r3, #0]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	6053      	str	r3, [r2, #4]
 8004dae:	440c      	add	r4, r1
 8004db0:	6014      	str	r4, [r2, #0]
 8004db2:	e7da      	b.n	8004d6a <_free_r+0x26>
 8004db4:	d902      	bls.n	8004dbc <_free_r+0x78>
 8004db6:	230c      	movs	r3, #12
 8004db8:	6003      	str	r3, [r0, #0]
 8004dba:	e7d6      	b.n	8004d6a <_free_r+0x26>
 8004dbc:	6825      	ldr	r5, [r4, #0]
 8004dbe:	1961      	adds	r1, r4, r5
 8004dc0:	428b      	cmp	r3, r1
 8004dc2:	bf04      	itt	eq
 8004dc4:	6819      	ldreq	r1, [r3, #0]
 8004dc6:	685b      	ldreq	r3, [r3, #4]
 8004dc8:	6063      	str	r3, [r4, #4]
 8004dca:	bf04      	itt	eq
 8004dcc:	1949      	addeq	r1, r1, r5
 8004dce:	6021      	streq	r1, [r4, #0]
 8004dd0:	6054      	str	r4, [r2, #4]
 8004dd2:	e7ca      	b.n	8004d6a <_free_r+0x26>
 8004dd4:	b003      	add	sp, #12
 8004dd6:	bd30      	pop	{r4, r5, pc}
 8004dd8:	20000340 	.word	0x20000340

08004ddc <sbrk_aligned>:
 8004ddc:	b570      	push	{r4, r5, r6, lr}
 8004dde:	4e0e      	ldr	r6, [pc, #56]	; (8004e18 <sbrk_aligned+0x3c>)
 8004de0:	460c      	mov	r4, r1
 8004de2:	6831      	ldr	r1, [r6, #0]
 8004de4:	4605      	mov	r5, r0
 8004de6:	b911      	cbnz	r1, 8004dee <sbrk_aligned+0x12>
 8004de8:	f000 fba6 	bl	8005538 <_sbrk_r>
 8004dec:	6030      	str	r0, [r6, #0]
 8004dee:	4621      	mov	r1, r4
 8004df0:	4628      	mov	r0, r5
 8004df2:	f000 fba1 	bl	8005538 <_sbrk_r>
 8004df6:	1c43      	adds	r3, r0, #1
 8004df8:	d00a      	beq.n	8004e10 <sbrk_aligned+0x34>
 8004dfa:	1cc4      	adds	r4, r0, #3
 8004dfc:	f024 0403 	bic.w	r4, r4, #3
 8004e00:	42a0      	cmp	r0, r4
 8004e02:	d007      	beq.n	8004e14 <sbrk_aligned+0x38>
 8004e04:	1a21      	subs	r1, r4, r0
 8004e06:	4628      	mov	r0, r5
 8004e08:	f000 fb96 	bl	8005538 <_sbrk_r>
 8004e0c:	3001      	adds	r0, #1
 8004e0e:	d101      	bne.n	8004e14 <sbrk_aligned+0x38>
 8004e10:	f04f 34ff 	mov.w	r4, #4294967295
 8004e14:	4620      	mov	r0, r4
 8004e16:	bd70      	pop	{r4, r5, r6, pc}
 8004e18:	20000344 	.word	0x20000344

08004e1c <_malloc_r>:
 8004e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e20:	1ccd      	adds	r5, r1, #3
 8004e22:	f025 0503 	bic.w	r5, r5, #3
 8004e26:	3508      	adds	r5, #8
 8004e28:	2d0c      	cmp	r5, #12
 8004e2a:	bf38      	it	cc
 8004e2c:	250c      	movcc	r5, #12
 8004e2e:	2d00      	cmp	r5, #0
 8004e30:	4607      	mov	r7, r0
 8004e32:	db01      	blt.n	8004e38 <_malloc_r+0x1c>
 8004e34:	42a9      	cmp	r1, r5
 8004e36:	d905      	bls.n	8004e44 <_malloc_r+0x28>
 8004e38:	230c      	movs	r3, #12
 8004e3a:	603b      	str	r3, [r7, #0]
 8004e3c:	2600      	movs	r6, #0
 8004e3e:	4630      	mov	r0, r6
 8004e40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e44:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004f18 <_malloc_r+0xfc>
 8004e48:	f000 f868 	bl	8004f1c <__malloc_lock>
 8004e4c:	f8d8 3000 	ldr.w	r3, [r8]
 8004e50:	461c      	mov	r4, r3
 8004e52:	bb5c      	cbnz	r4, 8004eac <_malloc_r+0x90>
 8004e54:	4629      	mov	r1, r5
 8004e56:	4638      	mov	r0, r7
 8004e58:	f7ff ffc0 	bl	8004ddc <sbrk_aligned>
 8004e5c:	1c43      	adds	r3, r0, #1
 8004e5e:	4604      	mov	r4, r0
 8004e60:	d155      	bne.n	8004f0e <_malloc_r+0xf2>
 8004e62:	f8d8 4000 	ldr.w	r4, [r8]
 8004e66:	4626      	mov	r6, r4
 8004e68:	2e00      	cmp	r6, #0
 8004e6a:	d145      	bne.n	8004ef8 <_malloc_r+0xdc>
 8004e6c:	2c00      	cmp	r4, #0
 8004e6e:	d048      	beq.n	8004f02 <_malloc_r+0xe6>
 8004e70:	6823      	ldr	r3, [r4, #0]
 8004e72:	4631      	mov	r1, r6
 8004e74:	4638      	mov	r0, r7
 8004e76:	eb04 0903 	add.w	r9, r4, r3
 8004e7a:	f000 fb5d 	bl	8005538 <_sbrk_r>
 8004e7e:	4581      	cmp	r9, r0
 8004e80:	d13f      	bne.n	8004f02 <_malloc_r+0xe6>
 8004e82:	6821      	ldr	r1, [r4, #0]
 8004e84:	1a6d      	subs	r5, r5, r1
 8004e86:	4629      	mov	r1, r5
 8004e88:	4638      	mov	r0, r7
 8004e8a:	f7ff ffa7 	bl	8004ddc <sbrk_aligned>
 8004e8e:	3001      	adds	r0, #1
 8004e90:	d037      	beq.n	8004f02 <_malloc_r+0xe6>
 8004e92:	6823      	ldr	r3, [r4, #0]
 8004e94:	442b      	add	r3, r5
 8004e96:	6023      	str	r3, [r4, #0]
 8004e98:	f8d8 3000 	ldr.w	r3, [r8]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d038      	beq.n	8004f12 <_malloc_r+0xf6>
 8004ea0:	685a      	ldr	r2, [r3, #4]
 8004ea2:	42a2      	cmp	r2, r4
 8004ea4:	d12b      	bne.n	8004efe <_malloc_r+0xe2>
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	605a      	str	r2, [r3, #4]
 8004eaa:	e00f      	b.n	8004ecc <_malloc_r+0xb0>
 8004eac:	6822      	ldr	r2, [r4, #0]
 8004eae:	1b52      	subs	r2, r2, r5
 8004eb0:	d41f      	bmi.n	8004ef2 <_malloc_r+0xd6>
 8004eb2:	2a0b      	cmp	r2, #11
 8004eb4:	d917      	bls.n	8004ee6 <_malloc_r+0xca>
 8004eb6:	1961      	adds	r1, r4, r5
 8004eb8:	42a3      	cmp	r3, r4
 8004eba:	6025      	str	r5, [r4, #0]
 8004ebc:	bf18      	it	ne
 8004ebe:	6059      	strne	r1, [r3, #4]
 8004ec0:	6863      	ldr	r3, [r4, #4]
 8004ec2:	bf08      	it	eq
 8004ec4:	f8c8 1000 	streq.w	r1, [r8]
 8004ec8:	5162      	str	r2, [r4, r5]
 8004eca:	604b      	str	r3, [r1, #4]
 8004ecc:	4638      	mov	r0, r7
 8004ece:	f104 060b 	add.w	r6, r4, #11
 8004ed2:	f000 f829 	bl	8004f28 <__malloc_unlock>
 8004ed6:	f026 0607 	bic.w	r6, r6, #7
 8004eda:	1d23      	adds	r3, r4, #4
 8004edc:	1af2      	subs	r2, r6, r3
 8004ede:	d0ae      	beq.n	8004e3e <_malloc_r+0x22>
 8004ee0:	1b9b      	subs	r3, r3, r6
 8004ee2:	50a3      	str	r3, [r4, r2]
 8004ee4:	e7ab      	b.n	8004e3e <_malloc_r+0x22>
 8004ee6:	42a3      	cmp	r3, r4
 8004ee8:	6862      	ldr	r2, [r4, #4]
 8004eea:	d1dd      	bne.n	8004ea8 <_malloc_r+0x8c>
 8004eec:	f8c8 2000 	str.w	r2, [r8]
 8004ef0:	e7ec      	b.n	8004ecc <_malloc_r+0xb0>
 8004ef2:	4623      	mov	r3, r4
 8004ef4:	6864      	ldr	r4, [r4, #4]
 8004ef6:	e7ac      	b.n	8004e52 <_malloc_r+0x36>
 8004ef8:	4634      	mov	r4, r6
 8004efa:	6876      	ldr	r6, [r6, #4]
 8004efc:	e7b4      	b.n	8004e68 <_malloc_r+0x4c>
 8004efe:	4613      	mov	r3, r2
 8004f00:	e7cc      	b.n	8004e9c <_malloc_r+0x80>
 8004f02:	230c      	movs	r3, #12
 8004f04:	603b      	str	r3, [r7, #0]
 8004f06:	4638      	mov	r0, r7
 8004f08:	f000 f80e 	bl	8004f28 <__malloc_unlock>
 8004f0c:	e797      	b.n	8004e3e <_malloc_r+0x22>
 8004f0e:	6025      	str	r5, [r4, #0]
 8004f10:	e7dc      	b.n	8004ecc <_malloc_r+0xb0>
 8004f12:	605b      	str	r3, [r3, #4]
 8004f14:	deff      	udf	#255	; 0xff
 8004f16:	bf00      	nop
 8004f18:	20000340 	.word	0x20000340

08004f1c <__malloc_lock>:
 8004f1c:	4801      	ldr	r0, [pc, #4]	; (8004f24 <__malloc_lock+0x8>)
 8004f1e:	f7ff bf0f 	b.w	8004d40 <__retarget_lock_acquire_recursive>
 8004f22:	bf00      	nop
 8004f24:	2000033c 	.word	0x2000033c

08004f28 <__malloc_unlock>:
 8004f28:	4801      	ldr	r0, [pc, #4]	; (8004f30 <__malloc_unlock+0x8>)
 8004f2a:	f7ff bf0a 	b.w	8004d42 <__retarget_lock_release_recursive>
 8004f2e:	bf00      	nop
 8004f30:	2000033c 	.word	0x2000033c

08004f34 <__ssputs_r>:
 8004f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f38:	688e      	ldr	r6, [r1, #8]
 8004f3a:	461f      	mov	r7, r3
 8004f3c:	42be      	cmp	r6, r7
 8004f3e:	680b      	ldr	r3, [r1, #0]
 8004f40:	4682      	mov	sl, r0
 8004f42:	460c      	mov	r4, r1
 8004f44:	4690      	mov	r8, r2
 8004f46:	d82c      	bhi.n	8004fa2 <__ssputs_r+0x6e>
 8004f48:	898a      	ldrh	r2, [r1, #12]
 8004f4a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004f4e:	d026      	beq.n	8004f9e <__ssputs_r+0x6a>
 8004f50:	6965      	ldr	r5, [r4, #20]
 8004f52:	6909      	ldr	r1, [r1, #16]
 8004f54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f58:	eba3 0901 	sub.w	r9, r3, r1
 8004f5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004f60:	1c7b      	adds	r3, r7, #1
 8004f62:	444b      	add	r3, r9
 8004f64:	106d      	asrs	r5, r5, #1
 8004f66:	429d      	cmp	r5, r3
 8004f68:	bf38      	it	cc
 8004f6a:	461d      	movcc	r5, r3
 8004f6c:	0553      	lsls	r3, r2, #21
 8004f6e:	d527      	bpl.n	8004fc0 <__ssputs_r+0x8c>
 8004f70:	4629      	mov	r1, r5
 8004f72:	f7ff ff53 	bl	8004e1c <_malloc_r>
 8004f76:	4606      	mov	r6, r0
 8004f78:	b360      	cbz	r0, 8004fd4 <__ssputs_r+0xa0>
 8004f7a:	6921      	ldr	r1, [r4, #16]
 8004f7c:	464a      	mov	r2, r9
 8004f7e:	f000 faeb 	bl	8005558 <memcpy>
 8004f82:	89a3      	ldrh	r3, [r4, #12]
 8004f84:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f8c:	81a3      	strh	r3, [r4, #12]
 8004f8e:	6126      	str	r6, [r4, #16]
 8004f90:	6165      	str	r5, [r4, #20]
 8004f92:	444e      	add	r6, r9
 8004f94:	eba5 0509 	sub.w	r5, r5, r9
 8004f98:	6026      	str	r6, [r4, #0]
 8004f9a:	60a5      	str	r5, [r4, #8]
 8004f9c:	463e      	mov	r6, r7
 8004f9e:	42be      	cmp	r6, r7
 8004fa0:	d900      	bls.n	8004fa4 <__ssputs_r+0x70>
 8004fa2:	463e      	mov	r6, r7
 8004fa4:	6820      	ldr	r0, [r4, #0]
 8004fa6:	4632      	mov	r2, r6
 8004fa8:	4641      	mov	r1, r8
 8004faa:	f000 faab 	bl	8005504 <memmove>
 8004fae:	68a3      	ldr	r3, [r4, #8]
 8004fb0:	1b9b      	subs	r3, r3, r6
 8004fb2:	60a3      	str	r3, [r4, #8]
 8004fb4:	6823      	ldr	r3, [r4, #0]
 8004fb6:	4433      	add	r3, r6
 8004fb8:	6023      	str	r3, [r4, #0]
 8004fba:	2000      	movs	r0, #0
 8004fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fc0:	462a      	mov	r2, r5
 8004fc2:	f000 fad7 	bl	8005574 <_realloc_r>
 8004fc6:	4606      	mov	r6, r0
 8004fc8:	2800      	cmp	r0, #0
 8004fca:	d1e0      	bne.n	8004f8e <__ssputs_r+0x5a>
 8004fcc:	6921      	ldr	r1, [r4, #16]
 8004fce:	4650      	mov	r0, sl
 8004fd0:	f7ff feb8 	bl	8004d44 <_free_r>
 8004fd4:	230c      	movs	r3, #12
 8004fd6:	f8ca 3000 	str.w	r3, [sl]
 8004fda:	89a3      	ldrh	r3, [r4, #12]
 8004fdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fe0:	81a3      	strh	r3, [r4, #12]
 8004fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8004fe6:	e7e9      	b.n	8004fbc <__ssputs_r+0x88>

08004fe8 <_svfiprintf_r>:
 8004fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fec:	4698      	mov	r8, r3
 8004fee:	898b      	ldrh	r3, [r1, #12]
 8004ff0:	061b      	lsls	r3, r3, #24
 8004ff2:	b09d      	sub	sp, #116	; 0x74
 8004ff4:	4607      	mov	r7, r0
 8004ff6:	460d      	mov	r5, r1
 8004ff8:	4614      	mov	r4, r2
 8004ffa:	d50e      	bpl.n	800501a <_svfiprintf_r+0x32>
 8004ffc:	690b      	ldr	r3, [r1, #16]
 8004ffe:	b963      	cbnz	r3, 800501a <_svfiprintf_r+0x32>
 8005000:	2140      	movs	r1, #64	; 0x40
 8005002:	f7ff ff0b 	bl	8004e1c <_malloc_r>
 8005006:	6028      	str	r0, [r5, #0]
 8005008:	6128      	str	r0, [r5, #16]
 800500a:	b920      	cbnz	r0, 8005016 <_svfiprintf_r+0x2e>
 800500c:	230c      	movs	r3, #12
 800500e:	603b      	str	r3, [r7, #0]
 8005010:	f04f 30ff 	mov.w	r0, #4294967295
 8005014:	e0d0      	b.n	80051b8 <_svfiprintf_r+0x1d0>
 8005016:	2340      	movs	r3, #64	; 0x40
 8005018:	616b      	str	r3, [r5, #20]
 800501a:	2300      	movs	r3, #0
 800501c:	9309      	str	r3, [sp, #36]	; 0x24
 800501e:	2320      	movs	r3, #32
 8005020:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005024:	f8cd 800c 	str.w	r8, [sp, #12]
 8005028:	2330      	movs	r3, #48	; 0x30
 800502a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80051d0 <_svfiprintf_r+0x1e8>
 800502e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005032:	f04f 0901 	mov.w	r9, #1
 8005036:	4623      	mov	r3, r4
 8005038:	469a      	mov	sl, r3
 800503a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800503e:	b10a      	cbz	r2, 8005044 <_svfiprintf_r+0x5c>
 8005040:	2a25      	cmp	r2, #37	; 0x25
 8005042:	d1f9      	bne.n	8005038 <_svfiprintf_r+0x50>
 8005044:	ebba 0b04 	subs.w	fp, sl, r4
 8005048:	d00b      	beq.n	8005062 <_svfiprintf_r+0x7a>
 800504a:	465b      	mov	r3, fp
 800504c:	4622      	mov	r2, r4
 800504e:	4629      	mov	r1, r5
 8005050:	4638      	mov	r0, r7
 8005052:	f7ff ff6f 	bl	8004f34 <__ssputs_r>
 8005056:	3001      	adds	r0, #1
 8005058:	f000 80a9 	beq.w	80051ae <_svfiprintf_r+0x1c6>
 800505c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800505e:	445a      	add	r2, fp
 8005060:	9209      	str	r2, [sp, #36]	; 0x24
 8005062:	f89a 3000 	ldrb.w	r3, [sl]
 8005066:	2b00      	cmp	r3, #0
 8005068:	f000 80a1 	beq.w	80051ae <_svfiprintf_r+0x1c6>
 800506c:	2300      	movs	r3, #0
 800506e:	f04f 32ff 	mov.w	r2, #4294967295
 8005072:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005076:	f10a 0a01 	add.w	sl, sl, #1
 800507a:	9304      	str	r3, [sp, #16]
 800507c:	9307      	str	r3, [sp, #28]
 800507e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005082:	931a      	str	r3, [sp, #104]	; 0x68
 8005084:	4654      	mov	r4, sl
 8005086:	2205      	movs	r2, #5
 8005088:	f814 1b01 	ldrb.w	r1, [r4], #1
 800508c:	4850      	ldr	r0, [pc, #320]	; (80051d0 <_svfiprintf_r+0x1e8>)
 800508e:	f7fb f8bf 	bl	8000210 <memchr>
 8005092:	9a04      	ldr	r2, [sp, #16]
 8005094:	b9d8      	cbnz	r0, 80050ce <_svfiprintf_r+0xe6>
 8005096:	06d0      	lsls	r0, r2, #27
 8005098:	bf44      	itt	mi
 800509a:	2320      	movmi	r3, #32
 800509c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050a0:	0711      	lsls	r1, r2, #28
 80050a2:	bf44      	itt	mi
 80050a4:	232b      	movmi	r3, #43	; 0x2b
 80050a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050aa:	f89a 3000 	ldrb.w	r3, [sl]
 80050ae:	2b2a      	cmp	r3, #42	; 0x2a
 80050b0:	d015      	beq.n	80050de <_svfiprintf_r+0xf6>
 80050b2:	9a07      	ldr	r2, [sp, #28]
 80050b4:	4654      	mov	r4, sl
 80050b6:	2000      	movs	r0, #0
 80050b8:	f04f 0c0a 	mov.w	ip, #10
 80050bc:	4621      	mov	r1, r4
 80050be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050c2:	3b30      	subs	r3, #48	; 0x30
 80050c4:	2b09      	cmp	r3, #9
 80050c6:	d94d      	bls.n	8005164 <_svfiprintf_r+0x17c>
 80050c8:	b1b0      	cbz	r0, 80050f8 <_svfiprintf_r+0x110>
 80050ca:	9207      	str	r2, [sp, #28]
 80050cc:	e014      	b.n	80050f8 <_svfiprintf_r+0x110>
 80050ce:	eba0 0308 	sub.w	r3, r0, r8
 80050d2:	fa09 f303 	lsl.w	r3, r9, r3
 80050d6:	4313      	orrs	r3, r2
 80050d8:	9304      	str	r3, [sp, #16]
 80050da:	46a2      	mov	sl, r4
 80050dc:	e7d2      	b.n	8005084 <_svfiprintf_r+0x9c>
 80050de:	9b03      	ldr	r3, [sp, #12]
 80050e0:	1d19      	adds	r1, r3, #4
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	9103      	str	r1, [sp, #12]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	bfbb      	ittet	lt
 80050ea:	425b      	neglt	r3, r3
 80050ec:	f042 0202 	orrlt.w	r2, r2, #2
 80050f0:	9307      	strge	r3, [sp, #28]
 80050f2:	9307      	strlt	r3, [sp, #28]
 80050f4:	bfb8      	it	lt
 80050f6:	9204      	strlt	r2, [sp, #16]
 80050f8:	7823      	ldrb	r3, [r4, #0]
 80050fa:	2b2e      	cmp	r3, #46	; 0x2e
 80050fc:	d10c      	bne.n	8005118 <_svfiprintf_r+0x130>
 80050fe:	7863      	ldrb	r3, [r4, #1]
 8005100:	2b2a      	cmp	r3, #42	; 0x2a
 8005102:	d134      	bne.n	800516e <_svfiprintf_r+0x186>
 8005104:	9b03      	ldr	r3, [sp, #12]
 8005106:	1d1a      	adds	r2, r3, #4
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	9203      	str	r2, [sp, #12]
 800510c:	2b00      	cmp	r3, #0
 800510e:	bfb8      	it	lt
 8005110:	f04f 33ff 	movlt.w	r3, #4294967295
 8005114:	3402      	adds	r4, #2
 8005116:	9305      	str	r3, [sp, #20]
 8005118:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80051e0 <_svfiprintf_r+0x1f8>
 800511c:	7821      	ldrb	r1, [r4, #0]
 800511e:	2203      	movs	r2, #3
 8005120:	4650      	mov	r0, sl
 8005122:	f7fb f875 	bl	8000210 <memchr>
 8005126:	b138      	cbz	r0, 8005138 <_svfiprintf_r+0x150>
 8005128:	9b04      	ldr	r3, [sp, #16]
 800512a:	eba0 000a 	sub.w	r0, r0, sl
 800512e:	2240      	movs	r2, #64	; 0x40
 8005130:	4082      	lsls	r2, r0
 8005132:	4313      	orrs	r3, r2
 8005134:	3401      	adds	r4, #1
 8005136:	9304      	str	r3, [sp, #16]
 8005138:	f814 1b01 	ldrb.w	r1, [r4], #1
 800513c:	4825      	ldr	r0, [pc, #148]	; (80051d4 <_svfiprintf_r+0x1ec>)
 800513e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005142:	2206      	movs	r2, #6
 8005144:	f7fb f864 	bl	8000210 <memchr>
 8005148:	2800      	cmp	r0, #0
 800514a:	d038      	beq.n	80051be <_svfiprintf_r+0x1d6>
 800514c:	4b22      	ldr	r3, [pc, #136]	; (80051d8 <_svfiprintf_r+0x1f0>)
 800514e:	bb1b      	cbnz	r3, 8005198 <_svfiprintf_r+0x1b0>
 8005150:	9b03      	ldr	r3, [sp, #12]
 8005152:	3307      	adds	r3, #7
 8005154:	f023 0307 	bic.w	r3, r3, #7
 8005158:	3308      	adds	r3, #8
 800515a:	9303      	str	r3, [sp, #12]
 800515c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800515e:	4433      	add	r3, r6
 8005160:	9309      	str	r3, [sp, #36]	; 0x24
 8005162:	e768      	b.n	8005036 <_svfiprintf_r+0x4e>
 8005164:	fb0c 3202 	mla	r2, ip, r2, r3
 8005168:	460c      	mov	r4, r1
 800516a:	2001      	movs	r0, #1
 800516c:	e7a6      	b.n	80050bc <_svfiprintf_r+0xd4>
 800516e:	2300      	movs	r3, #0
 8005170:	3401      	adds	r4, #1
 8005172:	9305      	str	r3, [sp, #20]
 8005174:	4619      	mov	r1, r3
 8005176:	f04f 0c0a 	mov.w	ip, #10
 800517a:	4620      	mov	r0, r4
 800517c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005180:	3a30      	subs	r2, #48	; 0x30
 8005182:	2a09      	cmp	r2, #9
 8005184:	d903      	bls.n	800518e <_svfiprintf_r+0x1a6>
 8005186:	2b00      	cmp	r3, #0
 8005188:	d0c6      	beq.n	8005118 <_svfiprintf_r+0x130>
 800518a:	9105      	str	r1, [sp, #20]
 800518c:	e7c4      	b.n	8005118 <_svfiprintf_r+0x130>
 800518e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005192:	4604      	mov	r4, r0
 8005194:	2301      	movs	r3, #1
 8005196:	e7f0      	b.n	800517a <_svfiprintf_r+0x192>
 8005198:	ab03      	add	r3, sp, #12
 800519a:	9300      	str	r3, [sp, #0]
 800519c:	462a      	mov	r2, r5
 800519e:	4b0f      	ldr	r3, [pc, #60]	; (80051dc <_svfiprintf_r+0x1f4>)
 80051a0:	a904      	add	r1, sp, #16
 80051a2:	4638      	mov	r0, r7
 80051a4:	f3af 8000 	nop.w
 80051a8:	1c42      	adds	r2, r0, #1
 80051aa:	4606      	mov	r6, r0
 80051ac:	d1d6      	bne.n	800515c <_svfiprintf_r+0x174>
 80051ae:	89ab      	ldrh	r3, [r5, #12]
 80051b0:	065b      	lsls	r3, r3, #25
 80051b2:	f53f af2d 	bmi.w	8005010 <_svfiprintf_r+0x28>
 80051b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80051b8:	b01d      	add	sp, #116	; 0x74
 80051ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051be:	ab03      	add	r3, sp, #12
 80051c0:	9300      	str	r3, [sp, #0]
 80051c2:	462a      	mov	r2, r5
 80051c4:	4b05      	ldr	r3, [pc, #20]	; (80051dc <_svfiprintf_r+0x1f4>)
 80051c6:	a904      	add	r1, sp, #16
 80051c8:	4638      	mov	r0, r7
 80051ca:	f000 f879 	bl	80052c0 <_printf_i>
 80051ce:	e7eb      	b.n	80051a8 <_svfiprintf_r+0x1c0>
 80051d0:	08005684 	.word	0x08005684
 80051d4:	0800568e 	.word	0x0800568e
 80051d8:	00000000 	.word	0x00000000
 80051dc:	08004f35 	.word	0x08004f35
 80051e0:	0800568a 	.word	0x0800568a

080051e4 <_printf_common>:
 80051e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051e8:	4616      	mov	r6, r2
 80051ea:	4699      	mov	r9, r3
 80051ec:	688a      	ldr	r2, [r1, #8]
 80051ee:	690b      	ldr	r3, [r1, #16]
 80051f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80051f4:	4293      	cmp	r3, r2
 80051f6:	bfb8      	it	lt
 80051f8:	4613      	movlt	r3, r2
 80051fa:	6033      	str	r3, [r6, #0]
 80051fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005200:	4607      	mov	r7, r0
 8005202:	460c      	mov	r4, r1
 8005204:	b10a      	cbz	r2, 800520a <_printf_common+0x26>
 8005206:	3301      	adds	r3, #1
 8005208:	6033      	str	r3, [r6, #0]
 800520a:	6823      	ldr	r3, [r4, #0]
 800520c:	0699      	lsls	r1, r3, #26
 800520e:	bf42      	ittt	mi
 8005210:	6833      	ldrmi	r3, [r6, #0]
 8005212:	3302      	addmi	r3, #2
 8005214:	6033      	strmi	r3, [r6, #0]
 8005216:	6825      	ldr	r5, [r4, #0]
 8005218:	f015 0506 	ands.w	r5, r5, #6
 800521c:	d106      	bne.n	800522c <_printf_common+0x48>
 800521e:	f104 0a19 	add.w	sl, r4, #25
 8005222:	68e3      	ldr	r3, [r4, #12]
 8005224:	6832      	ldr	r2, [r6, #0]
 8005226:	1a9b      	subs	r3, r3, r2
 8005228:	42ab      	cmp	r3, r5
 800522a:	dc26      	bgt.n	800527a <_printf_common+0x96>
 800522c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005230:	1e13      	subs	r3, r2, #0
 8005232:	6822      	ldr	r2, [r4, #0]
 8005234:	bf18      	it	ne
 8005236:	2301      	movne	r3, #1
 8005238:	0692      	lsls	r2, r2, #26
 800523a:	d42b      	bmi.n	8005294 <_printf_common+0xb0>
 800523c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005240:	4649      	mov	r1, r9
 8005242:	4638      	mov	r0, r7
 8005244:	47c0      	blx	r8
 8005246:	3001      	adds	r0, #1
 8005248:	d01e      	beq.n	8005288 <_printf_common+0xa4>
 800524a:	6823      	ldr	r3, [r4, #0]
 800524c:	6922      	ldr	r2, [r4, #16]
 800524e:	f003 0306 	and.w	r3, r3, #6
 8005252:	2b04      	cmp	r3, #4
 8005254:	bf02      	ittt	eq
 8005256:	68e5      	ldreq	r5, [r4, #12]
 8005258:	6833      	ldreq	r3, [r6, #0]
 800525a:	1aed      	subeq	r5, r5, r3
 800525c:	68a3      	ldr	r3, [r4, #8]
 800525e:	bf0c      	ite	eq
 8005260:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005264:	2500      	movne	r5, #0
 8005266:	4293      	cmp	r3, r2
 8005268:	bfc4      	itt	gt
 800526a:	1a9b      	subgt	r3, r3, r2
 800526c:	18ed      	addgt	r5, r5, r3
 800526e:	2600      	movs	r6, #0
 8005270:	341a      	adds	r4, #26
 8005272:	42b5      	cmp	r5, r6
 8005274:	d11a      	bne.n	80052ac <_printf_common+0xc8>
 8005276:	2000      	movs	r0, #0
 8005278:	e008      	b.n	800528c <_printf_common+0xa8>
 800527a:	2301      	movs	r3, #1
 800527c:	4652      	mov	r2, sl
 800527e:	4649      	mov	r1, r9
 8005280:	4638      	mov	r0, r7
 8005282:	47c0      	blx	r8
 8005284:	3001      	adds	r0, #1
 8005286:	d103      	bne.n	8005290 <_printf_common+0xac>
 8005288:	f04f 30ff 	mov.w	r0, #4294967295
 800528c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005290:	3501      	adds	r5, #1
 8005292:	e7c6      	b.n	8005222 <_printf_common+0x3e>
 8005294:	18e1      	adds	r1, r4, r3
 8005296:	1c5a      	adds	r2, r3, #1
 8005298:	2030      	movs	r0, #48	; 0x30
 800529a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800529e:	4422      	add	r2, r4
 80052a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80052a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80052a8:	3302      	adds	r3, #2
 80052aa:	e7c7      	b.n	800523c <_printf_common+0x58>
 80052ac:	2301      	movs	r3, #1
 80052ae:	4622      	mov	r2, r4
 80052b0:	4649      	mov	r1, r9
 80052b2:	4638      	mov	r0, r7
 80052b4:	47c0      	blx	r8
 80052b6:	3001      	adds	r0, #1
 80052b8:	d0e6      	beq.n	8005288 <_printf_common+0xa4>
 80052ba:	3601      	adds	r6, #1
 80052bc:	e7d9      	b.n	8005272 <_printf_common+0x8e>
	...

080052c0 <_printf_i>:
 80052c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052c4:	7e0f      	ldrb	r7, [r1, #24]
 80052c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80052c8:	2f78      	cmp	r7, #120	; 0x78
 80052ca:	4691      	mov	r9, r2
 80052cc:	4680      	mov	r8, r0
 80052ce:	460c      	mov	r4, r1
 80052d0:	469a      	mov	sl, r3
 80052d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80052d6:	d807      	bhi.n	80052e8 <_printf_i+0x28>
 80052d8:	2f62      	cmp	r7, #98	; 0x62
 80052da:	d80a      	bhi.n	80052f2 <_printf_i+0x32>
 80052dc:	2f00      	cmp	r7, #0
 80052de:	f000 80d4 	beq.w	800548a <_printf_i+0x1ca>
 80052e2:	2f58      	cmp	r7, #88	; 0x58
 80052e4:	f000 80c0 	beq.w	8005468 <_printf_i+0x1a8>
 80052e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80052f0:	e03a      	b.n	8005368 <_printf_i+0xa8>
 80052f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80052f6:	2b15      	cmp	r3, #21
 80052f8:	d8f6      	bhi.n	80052e8 <_printf_i+0x28>
 80052fa:	a101      	add	r1, pc, #4	; (adr r1, 8005300 <_printf_i+0x40>)
 80052fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005300:	08005359 	.word	0x08005359
 8005304:	0800536d 	.word	0x0800536d
 8005308:	080052e9 	.word	0x080052e9
 800530c:	080052e9 	.word	0x080052e9
 8005310:	080052e9 	.word	0x080052e9
 8005314:	080052e9 	.word	0x080052e9
 8005318:	0800536d 	.word	0x0800536d
 800531c:	080052e9 	.word	0x080052e9
 8005320:	080052e9 	.word	0x080052e9
 8005324:	080052e9 	.word	0x080052e9
 8005328:	080052e9 	.word	0x080052e9
 800532c:	08005471 	.word	0x08005471
 8005330:	08005399 	.word	0x08005399
 8005334:	0800542b 	.word	0x0800542b
 8005338:	080052e9 	.word	0x080052e9
 800533c:	080052e9 	.word	0x080052e9
 8005340:	08005493 	.word	0x08005493
 8005344:	080052e9 	.word	0x080052e9
 8005348:	08005399 	.word	0x08005399
 800534c:	080052e9 	.word	0x080052e9
 8005350:	080052e9 	.word	0x080052e9
 8005354:	08005433 	.word	0x08005433
 8005358:	682b      	ldr	r3, [r5, #0]
 800535a:	1d1a      	adds	r2, r3, #4
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	602a      	str	r2, [r5, #0]
 8005360:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005364:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005368:	2301      	movs	r3, #1
 800536a:	e09f      	b.n	80054ac <_printf_i+0x1ec>
 800536c:	6820      	ldr	r0, [r4, #0]
 800536e:	682b      	ldr	r3, [r5, #0]
 8005370:	0607      	lsls	r7, r0, #24
 8005372:	f103 0104 	add.w	r1, r3, #4
 8005376:	6029      	str	r1, [r5, #0]
 8005378:	d501      	bpl.n	800537e <_printf_i+0xbe>
 800537a:	681e      	ldr	r6, [r3, #0]
 800537c:	e003      	b.n	8005386 <_printf_i+0xc6>
 800537e:	0646      	lsls	r6, r0, #25
 8005380:	d5fb      	bpl.n	800537a <_printf_i+0xba>
 8005382:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005386:	2e00      	cmp	r6, #0
 8005388:	da03      	bge.n	8005392 <_printf_i+0xd2>
 800538a:	232d      	movs	r3, #45	; 0x2d
 800538c:	4276      	negs	r6, r6
 800538e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005392:	485a      	ldr	r0, [pc, #360]	; (80054fc <_printf_i+0x23c>)
 8005394:	230a      	movs	r3, #10
 8005396:	e012      	b.n	80053be <_printf_i+0xfe>
 8005398:	682b      	ldr	r3, [r5, #0]
 800539a:	6820      	ldr	r0, [r4, #0]
 800539c:	1d19      	adds	r1, r3, #4
 800539e:	6029      	str	r1, [r5, #0]
 80053a0:	0605      	lsls	r5, r0, #24
 80053a2:	d501      	bpl.n	80053a8 <_printf_i+0xe8>
 80053a4:	681e      	ldr	r6, [r3, #0]
 80053a6:	e002      	b.n	80053ae <_printf_i+0xee>
 80053a8:	0641      	lsls	r1, r0, #25
 80053aa:	d5fb      	bpl.n	80053a4 <_printf_i+0xe4>
 80053ac:	881e      	ldrh	r6, [r3, #0]
 80053ae:	4853      	ldr	r0, [pc, #332]	; (80054fc <_printf_i+0x23c>)
 80053b0:	2f6f      	cmp	r7, #111	; 0x6f
 80053b2:	bf0c      	ite	eq
 80053b4:	2308      	moveq	r3, #8
 80053b6:	230a      	movne	r3, #10
 80053b8:	2100      	movs	r1, #0
 80053ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80053be:	6865      	ldr	r5, [r4, #4]
 80053c0:	60a5      	str	r5, [r4, #8]
 80053c2:	2d00      	cmp	r5, #0
 80053c4:	bfa2      	ittt	ge
 80053c6:	6821      	ldrge	r1, [r4, #0]
 80053c8:	f021 0104 	bicge.w	r1, r1, #4
 80053cc:	6021      	strge	r1, [r4, #0]
 80053ce:	b90e      	cbnz	r6, 80053d4 <_printf_i+0x114>
 80053d0:	2d00      	cmp	r5, #0
 80053d2:	d04b      	beq.n	800546c <_printf_i+0x1ac>
 80053d4:	4615      	mov	r5, r2
 80053d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80053da:	fb03 6711 	mls	r7, r3, r1, r6
 80053de:	5dc7      	ldrb	r7, [r0, r7]
 80053e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80053e4:	4637      	mov	r7, r6
 80053e6:	42bb      	cmp	r3, r7
 80053e8:	460e      	mov	r6, r1
 80053ea:	d9f4      	bls.n	80053d6 <_printf_i+0x116>
 80053ec:	2b08      	cmp	r3, #8
 80053ee:	d10b      	bne.n	8005408 <_printf_i+0x148>
 80053f0:	6823      	ldr	r3, [r4, #0]
 80053f2:	07de      	lsls	r6, r3, #31
 80053f4:	d508      	bpl.n	8005408 <_printf_i+0x148>
 80053f6:	6923      	ldr	r3, [r4, #16]
 80053f8:	6861      	ldr	r1, [r4, #4]
 80053fa:	4299      	cmp	r1, r3
 80053fc:	bfde      	ittt	le
 80053fe:	2330      	movle	r3, #48	; 0x30
 8005400:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005404:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005408:	1b52      	subs	r2, r2, r5
 800540a:	6122      	str	r2, [r4, #16]
 800540c:	f8cd a000 	str.w	sl, [sp]
 8005410:	464b      	mov	r3, r9
 8005412:	aa03      	add	r2, sp, #12
 8005414:	4621      	mov	r1, r4
 8005416:	4640      	mov	r0, r8
 8005418:	f7ff fee4 	bl	80051e4 <_printf_common>
 800541c:	3001      	adds	r0, #1
 800541e:	d14a      	bne.n	80054b6 <_printf_i+0x1f6>
 8005420:	f04f 30ff 	mov.w	r0, #4294967295
 8005424:	b004      	add	sp, #16
 8005426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800542a:	6823      	ldr	r3, [r4, #0]
 800542c:	f043 0320 	orr.w	r3, r3, #32
 8005430:	6023      	str	r3, [r4, #0]
 8005432:	4833      	ldr	r0, [pc, #204]	; (8005500 <_printf_i+0x240>)
 8005434:	2778      	movs	r7, #120	; 0x78
 8005436:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800543a:	6823      	ldr	r3, [r4, #0]
 800543c:	6829      	ldr	r1, [r5, #0]
 800543e:	061f      	lsls	r7, r3, #24
 8005440:	f851 6b04 	ldr.w	r6, [r1], #4
 8005444:	d402      	bmi.n	800544c <_printf_i+0x18c>
 8005446:	065f      	lsls	r7, r3, #25
 8005448:	bf48      	it	mi
 800544a:	b2b6      	uxthmi	r6, r6
 800544c:	07df      	lsls	r7, r3, #31
 800544e:	bf48      	it	mi
 8005450:	f043 0320 	orrmi.w	r3, r3, #32
 8005454:	6029      	str	r1, [r5, #0]
 8005456:	bf48      	it	mi
 8005458:	6023      	strmi	r3, [r4, #0]
 800545a:	b91e      	cbnz	r6, 8005464 <_printf_i+0x1a4>
 800545c:	6823      	ldr	r3, [r4, #0]
 800545e:	f023 0320 	bic.w	r3, r3, #32
 8005462:	6023      	str	r3, [r4, #0]
 8005464:	2310      	movs	r3, #16
 8005466:	e7a7      	b.n	80053b8 <_printf_i+0xf8>
 8005468:	4824      	ldr	r0, [pc, #144]	; (80054fc <_printf_i+0x23c>)
 800546a:	e7e4      	b.n	8005436 <_printf_i+0x176>
 800546c:	4615      	mov	r5, r2
 800546e:	e7bd      	b.n	80053ec <_printf_i+0x12c>
 8005470:	682b      	ldr	r3, [r5, #0]
 8005472:	6826      	ldr	r6, [r4, #0]
 8005474:	6961      	ldr	r1, [r4, #20]
 8005476:	1d18      	adds	r0, r3, #4
 8005478:	6028      	str	r0, [r5, #0]
 800547a:	0635      	lsls	r5, r6, #24
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	d501      	bpl.n	8005484 <_printf_i+0x1c4>
 8005480:	6019      	str	r1, [r3, #0]
 8005482:	e002      	b.n	800548a <_printf_i+0x1ca>
 8005484:	0670      	lsls	r0, r6, #25
 8005486:	d5fb      	bpl.n	8005480 <_printf_i+0x1c0>
 8005488:	8019      	strh	r1, [r3, #0]
 800548a:	2300      	movs	r3, #0
 800548c:	6123      	str	r3, [r4, #16]
 800548e:	4615      	mov	r5, r2
 8005490:	e7bc      	b.n	800540c <_printf_i+0x14c>
 8005492:	682b      	ldr	r3, [r5, #0]
 8005494:	1d1a      	adds	r2, r3, #4
 8005496:	602a      	str	r2, [r5, #0]
 8005498:	681d      	ldr	r5, [r3, #0]
 800549a:	6862      	ldr	r2, [r4, #4]
 800549c:	2100      	movs	r1, #0
 800549e:	4628      	mov	r0, r5
 80054a0:	f7fa feb6 	bl	8000210 <memchr>
 80054a4:	b108      	cbz	r0, 80054aa <_printf_i+0x1ea>
 80054a6:	1b40      	subs	r0, r0, r5
 80054a8:	6060      	str	r0, [r4, #4]
 80054aa:	6863      	ldr	r3, [r4, #4]
 80054ac:	6123      	str	r3, [r4, #16]
 80054ae:	2300      	movs	r3, #0
 80054b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054b4:	e7aa      	b.n	800540c <_printf_i+0x14c>
 80054b6:	6923      	ldr	r3, [r4, #16]
 80054b8:	462a      	mov	r2, r5
 80054ba:	4649      	mov	r1, r9
 80054bc:	4640      	mov	r0, r8
 80054be:	47d0      	blx	sl
 80054c0:	3001      	adds	r0, #1
 80054c2:	d0ad      	beq.n	8005420 <_printf_i+0x160>
 80054c4:	6823      	ldr	r3, [r4, #0]
 80054c6:	079b      	lsls	r3, r3, #30
 80054c8:	d413      	bmi.n	80054f2 <_printf_i+0x232>
 80054ca:	68e0      	ldr	r0, [r4, #12]
 80054cc:	9b03      	ldr	r3, [sp, #12]
 80054ce:	4298      	cmp	r0, r3
 80054d0:	bfb8      	it	lt
 80054d2:	4618      	movlt	r0, r3
 80054d4:	e7a6      	b.n	8005424 <_printf_i+0x164>
 80054d6:	2301      	movs	r3, #1
 80054d8:	4632      	mov	r2, r6
 80054da:	4649      	mov	r1, r9
 80054dc:	4640      	mov	r0, r8
 80054de:	47d0      	blx	sl
 80054e0:	3001      	adds	r0, #1
 80054e2:	d09d      	beq.n	8005420 <_printf_i+0x160>
 80054e4:	3501      	adds	r5, #1
 80054e6:	68e3      	ldr	r3, [r4, #12]
 80054e8:	9903      	ldr	r1, [sp, #12]
 80054ea:	1a5b      	subs	r3, r3, r1
 80054ec:	42ab      	cmp	r3, r5
 80054ee:	dcf2      	bgt.n	80054d6 <_printf_i+0x216>
 80054f0:	e7eb      	b.n	80054ca <_printf_i+0x20a>
 80054f2:	2500      	movs	r5, #0
 80054f4:	f104 0619 	add.w	r6, r4, #25
 80054f8:	e7f5      	b.n	80054e6 <_printf_i+0x226>
 80054fa:	bf00      	nop
 80054fc:	08005695 	.word	0x08005695
 8005500:	080056a6 	.word	0x080056a6

08005504 <memmove>:
 8005504:	4288      	cmp	r0, r1
 8005506:	b510      	push	{r4, lr}
 8005508:	eb01 0402 	add.w	r4, r1, r2
 800550c:	d902      	bls.n	8005514 <memmove+0x10>
 800550e:	4284      	cmp	r4, r0
 8005510:	4623      	mov	r3, r4
 8005512:	d807      	bhi.n	8005524 <memmove+0x20>
 8005514:	1e43      	subs	r3, r0, #1
 8005516:	42a1      	cmp	r1, r4
 8005518:	d008      	beq.n	800552c <memmove+0x28>
 800551a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800551e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005522:	e7f8      	b.n	8005516 <memmove+0x12>
 8005524:	4402      	add	r2, r0
 8005526:	4601      	mov	r1, r0
 8005528:	428a      	cmp	r2, r1
 800552a:	d100      	bne.n	800552e <memmove+0x2a>
 800552c:	bd10      	pop	{r4, pc}
 800552e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005532:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005536:	e7f7      	b.n	8005528 <memmove+0x24>

08005538 <_sbrk_r>:
 8005538:	b538      	push	{r3, r4, r5, lr}
 800553a:	4d06      	ldr	r5, [pc, #24]	; (8005554 <_sbrk_r+0x1c>)
 800553c:	2300      	movs	r3, #0
 800553e:	4604      	mov	r4, r0
 8005540:	4608      	mov	r0, r1
 8005542:	602b      	str	r3, [r5, #0]
 8005544:	f7fc f952 	bl	80017ec <_sbrk>
 8005548:	1c43      	adds	r3, r0, #1
 800554a:	d102      	bne.n	8005552 <_sbrk_r+0x1a>
 800554c:	682b      	ldr	r3, [r5, #0]
 800554e:	b103      	cbz	r3, 8005552 <_sbrk_r+0x1a>
 8005550:	6023      	str	r3, [r4, #0]
 8005552:	bd38      	pop	{r3, r4, r5, pc}
 8005554:	20000338 	.word	0x20000338

08005558 <memcpy>:
 8005558:	440a      	add	r2, r1
 800555a:	4291      	cmp	r1, r2
 800555c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005560:	d100      	bne.n	8005564 <memcpy+0xc>
 8005562:	4770      	bx	lr
 8005564:	b510      	push	{r4, lr}
 8005566:	f811 4b01 	ldrb.w	r4, [r1], #1
 800556a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800556e:	4291      	cmp	r1, r2
 8005570:	d1f9      	bne.n	8005566 <memcpy+0xe>
 8005572:	bd10      	pop	{r4, pc}

08005574 <_realloc_r>:
 8005574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005578:	4680      	mov	r8, r0
 800557a:	4614      	mov	r4, r2
 800557c:	460e      	mov	r6, r1
 800557e:	b921      	cbnz	r1, 800558a <_realloc_r+0x16>
 8005580:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005584:	4611      	mov	r1, r2
 8005586:	f7ff bc49 	b.w	8004e1c <_malloc_r>
 800558a:	b92a      	cbnz	r2, 8005598 <_realloc_r+0x24>
 800558c:	f7ff fbda 	bl	8004d44 <_free_r>
 8005590:	4625      	mov	r5, r4
 8005592:	4628      	mov	r0, r5
 8005594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005598:	f000 f81b 	bl	80055d2 <_malloc_usable_size_r>
 800559c:	4284      	cmp	r4, r0
 800559e:	4607      	mov	r7, r0
 80055a0:	d802      	bhi.n	80055a8 <_realloc_r+0x34>
 80055a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80055a6:	d812      	bhi.n	80055ce <_realloc_r+0x5a>
 80055a8:	4621      	mov	r1, r4
 80055aa:	4640      	mov	r0, r8
 80055ac:	f7ff fc36 	bl	8004e1c <_malloc_r>
 80055b0:	4605      	mov	r5, r0
 80055b2:	2800      	cmp	r0, #0
 80055b4:	d0ed      	beq.n	8005592 <_realloc_r+0x1e>
 80055b6:	42bc      	cmp	r4, r7
 80055b8:	4622      	mov	r2, r4
 80055ba:	4631      	mov	r1, r6
 80055bc:	bf28      	it	cs
 80055be:	463a      	movcs	r2, r7
 80055c0:	f7ff ffca 	bl	8005558 <memcpy>
 80055c4:	4631      	mov	r1, r6
 80055c6:	4640      	mov	r0, r8
 80055c8:	f7ff fbbc 	bl	8004d44 <_free_r>
 80055cc:	e7e1      	b.n	8005592 <_realloc_r+0x1e>
 80055ce:	4635      	mov	r5, r6
 80055d0:	e7df      	b.n	8005592 <_realloc_r+0x1e>

080055d2 <_malloc_usable_size_r>:
 80055d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055d6:	1f18      	subs	r0, r3, #4
 80055d8:	2b00      	cmp	r3, #0
 80055da:	bfbc      	itt	lt
 80055dc:	580b      	ldrlt	r3, [r1, r0]
 80055de:	18c0      	addlt	r0, r0, r3
 80055e0:	4770      	bx	lr
	...

080055e4 <_init>:
 80055e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055e6:	bf00      	nop
 80055e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ea:	bc08      	pop	{r3}
 80055ec:	469e      	mov	lr, r3
 80055ee:	4770      	bx	lr

080055f0 <_fini>:
 80055f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055f2:	bf00      	nop
 80055f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055f6:	bc08      	pop	{r3}
 80055f8:	469e      	mov	lr, r3
 80055fa:	4770      	bx	lr
