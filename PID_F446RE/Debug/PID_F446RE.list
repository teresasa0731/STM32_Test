
PID_F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000746c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  0800763c  0800763c  0001763c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007788  08007788  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08007788  08007788  00017788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007790  08007790  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007790  08007790  00017790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007794  08007794  00017794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08007798  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000590  20000060  080077f8  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005f0  080077f8  000205f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   000110a7  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002603  00000000  00000000  0003117a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ff8  00000000  00000000  00033780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c80  00000000  00000000  00034778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023c1f  00000000  00000000  000353f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013366  00000000  00000000  00059017  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df1f8  00000000  00000000  0006c37d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000049b0  00000000  00000000  0014b578  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0014ff28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007624 	.word	0x08007624

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08007624 	.word	0x08007624

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_dmul>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002be:	bf1d      	ittte	ne
 80002c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002c4:	ea94 0f0c 	teqne	r4, ip
 80002c8:	ea95 0f0c 	teqne	r5, ip
 80002cc:	f000 f8de 	bleq	800048c <__aeabi_dmul+0x1dc>
 80002d0:	442c      	add	r4, r5
 80002d2:	ea81 0603 	eor.w	r6, r1, r3
 80002d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002e2:	bf18      	it	ne
 80002e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002f0:	d038      	beq.n	8000364 <__aeabi_dmul+0xb4>
 80002f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002f6:	f04f 0500 	mov.w	r5, #0
 80002fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000302:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000306:	f04f 0600 	mov.w	r6, #0
 800030a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800030e:	f09c 0f00 	teq	ip, #0
 8000312:	bf18      	it	ne
 8000314:	f04e 0e01 	orrne.w	lr, lr, #1
 8000318:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800031c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000320:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000324:	d204      	bcs.n	8000330 <__aeabi_dmul+0x80>
 8000326:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800032a:	416d      	adcs	r5, r5
 800032c:	eb46 0606 	adc.w	r6, r6, r6
 8000330:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000334:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000338:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800033c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000340:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000344:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000348:	bf88      	it	hi
 800034a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800034e:	d81e      	bhi.n	800038e <__aeabi_dmul+0xde>
 8000350:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000368:	ea46 0101 	orr.w	r1, r6, r1
 800036c:	ea40 0002 	orr.w	r0, r0, r2
 8000370:	ea81 0103 	eor.w	r1, r1, r3
 8000374:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000378:	bfc2      	ittt	gt
 800037a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800037e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000382:	bd70      	popgt	{r4, r5, r6, pc}
 8000384:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000388:	f04f 0e00 	mov.w	lr, #0
 800038c:	3c01      	subs	r4, #1
 800038e:	f300 80ab 	bgt.w	80004e8 <__aeabi_dmul+0x238>
 8000392:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000396:	bfde      	ittt	le
 8000398:	2000      	movle	r0, #0
 800039a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800039e:	bd70      	pople	{r4, r5, r6, pc}
 80003a0:	f1c4 0400 	rsb	r4, r4, #0
 80003a4:	3c20      	subs	r4, #32
 80003a6:	da35      	bge.n	8000414 <__aeabi_dmul+0x164>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc1b      	bgt.n	80003e4 <__aeabi_dmul+0x134>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0520 	rsb	r5, r4, #32
 80003b4:	fa00 f305 	lsl.w	r3, r0, r5
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f205 	lsl.w	r2, r1, r5
 80003c0:	ea40 0002 	orr.w	r0, r0, r2
 80003c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d0:	fa21 f604 	lsr.w	r6, r1, r4
 80003d4:	eb42 0106 	adc.w	r1, r2, r6
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 040c 	rsb	r4, r4, #12
 80003e8:	f1c4 0520 	rsb	r5, r4, #32
 80003ec:	fa00 f304 	lsl.w	r3, r0, r4
 80003f0:	fa20 f005 	lsr.w	r0, r0, r5
 80003f4:	fa01 f204 	lsl.w	r2, r1, r4
 80003f8:	ea40 0002 	orr.w	r0, r0, r2
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000400:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000404:	f141 0100 	adc.w	r1, r1, #0
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 0520 	rsb	r5, r4, #32
 8000418:	fa00 f205 	lsl.w	r2, r0, r5
 800041c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000420:	fa20 f304 	lsr.w	r3, r0, r4
 8000424:	fa01 f205 	lsl.w	r2, r1, r5
 8000428:	ea43 0302 	orr.w	r3, r3, r2
 800042c:	fa21 f004 	lsr.w	r0, r1, r4
 8000430:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000434:	fa21 f204 	lsr.w	r2, r1, r4
 8000438:	ea20 0002 	bic.w	r0, r0, r2
 800043c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000440:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000444:	bf08      	it	eq
 8000446:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f094 0f00 	teq	r4, #0
 8000450:	d10f      	bne.n	8000472 <__aeabi_dmul+0x1c2>
 8000452:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000456:	0040      	lsls	r0, r0, #1
 8000458:	eb41 0101 	adc.w	r1, r1, r1
 800045c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3c01      	subeq	r4, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1a6>
 8000466:	ea41 0106 	orr.w	r1, r1, r6
 800046a:	f095 0f00 	teq	r5, #0
 800046e:	bf18      	it	ne
 8000470:	4770      	bxne	lr
 8000472:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	eb43 0303 	adc.w	r3, r3, r3
 800047c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000480:	bf08      	it	eq
 8000482:	3d01      	subeq	r5, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1c6>
 8000486:	ea43 0306 	orr.w	r3, r3, r6
 800048a:	4770      	bx	lr
 800048c:	ea94 0f0c 	teq	r4, ip
 8000490:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000494:	bf18      	it	ne
 8000496:	ea95 0f0c 	teqne	r5, ip
 800049a:	d00c      	beq.n	80004b6 <__aeabi_dmul+0x206>
 800049c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004a0:	bf18      	it	ne
 80004a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a6:	d1d1      	bne.n	800044c <__aeabi_dmul+0x19c>
 80004a8:	ea81 0103 	eor.w	r1, r1, r3
 80004ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004b0:	f04f 0000 	mov.w	r0, #0
 80004b4:	bd70      	pop	{r4, r5, r6, pc}
 80004b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ba:	bf06      	itte	eq
 80004bc:	4610      	moveq	r0, r2
 80004be:	4619      	moveq	r1, r3
 80004c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c4:	d019      	beq.n	80004fa <__aeabi_dmul+0x24a>
 80004c6:	ea94 0f0c 	teq	r4, ip
 80004ca:	d102      	bne.n	80004d2 <__aeabi_dmul+0x222>
 80004cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004d0:	d113      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004d2:	ea95 0f0c 	teq	r5, ip
 80004d6:	d105      	bne.n	80004e4 <__aeabi_dmul+0x234>
 80004d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004dc:	bf1c      	itt	ne
 80004de:	4610      	movne	r0, r2
 80004e0:	4619      	movne	r1, r3
 80004e2:	d10a      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004e4:	ea81 0103 	eor.w	r1, r1, r3
 80004e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd70      	pop	{r4, r5, r6, pc}
 80004fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000502:	bd70      	pop	{r4, r5, r6, pc}

08000504 <__aeabi_drsub>:
 8000504:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e002      	b.n	8000510 <__adddf3>
 800050a:	bf00      	nop

0800050c <__aeabi_dsub>:
 800050c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000510 <__adddf3>:
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000516:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800051a:	ea94 0f05 	teq	r4, r5
 800051e:	bf08      	it	eq
 8000520:	ea90 0f02 	teqeq	r0, r2
 8000524:	bf1f      	itttt	ne
 8000526:	ea54 0c00 	orrsne.w	ip, r4, r0
 800052a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800052e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000532:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000536:	f000 80e2 	beq.w	80006fe <__adddf3+0x1ee>
 800053a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800053e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000542:	bfb8      	it	lt
 8000544:	426d      	neglt	r5, r5
 8000546:	dd0c      	ble.n	8000562 <__adddf3+0x52>
 8000548:	442c      	add	r4, r5
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	ea82 0000 	eor.w	r0, r2, r0
 8000556:	ea83 0101 	eor.w	r1, r3, r1
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	2d36      	cmp	r5, #54	; 0x36
 8000564:	bf88      	it	hi
 8000566:	bd30      	pophi	{r4, r5, pc}
 8000568:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800056c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000570:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000574:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000578:	d002      	beq.n	8000580 <__adddf3+0x70>
 800057a:	4240      	negs	r0, r0
 800057c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000580:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000584:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000588:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800058c:	d002      	beq.n	8000594 <__adddf3+0x84>
 800058e:	4252      	negs	r2, r2
 8000590:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000594:	ea94 0f05 	teq	r4, r5
 8000598:	f000 80a7 	beq.w	80006ea <__adddf3+0x1da>
 800059c:	f1a4 0401 	sub.w	r4, r4, #1
 80005a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005a4:	db0d      	blt.n	80005c2 <__adddf3+0xb2>
 80005a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005aa:	fa22 f205 	lsr.w	r2, r2, r5
 80005ae:	1880      	adds	r0, r0, r2
 80005b0:	f141 0100 	adc.w	r1, r1, #0
 80005b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005b8:	1880      	adds	r0, r0, r2
 80005ba:	fa43 f305 	asr.w	r3, r3, r5
 80005be:	4159      	adcs	r1, r3
 80005c0:	e00e      	b.n	80005e0 <__adddf3+0xd0>
 80005c2:	f1a5 0520 	sub.w	r5, r5, #32
 80005c6:	f10e 0e20 	add.w	lr, lr, #32
 80005ca:	2a01      	cmp	r2, #1
 80005cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d0:	bf28      	it	cs
 80005d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005d6:	fa43 f305 	asr.w	r3, r3, r5
 80005da:	18c0      	adds	r0, r0, r3
 80005dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	d507      	bpl.n	80005f6 <__adddf3+0xe6>
 80005e6:	f04f 0e00 	mov.w	lr, #0
 80005ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005fa:	d31b      	bcc.n	8000634 <__adddf3+0x124>
 80005fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000600:	d30c      	bcc.n	800061c <__adddf3+0x10c>
 8000602:	0849      	lsrs	r1, r1, #1
 8000604:	ea5f 0030 	movs.w	r0, r0, rrx
 8000608:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800060c:	f104 0401 	add.w	r4, r4, #1
 8000610:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000614:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000618:	f080 809a 	bcs.w	8000750 <__adddf3+0x240>
 800061c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	ea41 0105 	orr.w	r1, r1, r5
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000638:	4140      	adcs	r0, r0
 800063a:	eb41 0101 	adc.w	r1, r1, r1
 800063e:	3c01      	subs	r4, #1
 8000640:	bf28      	it	cs
 8000642:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000646:	d2e9      	bcs.n	800061c <__adddf3+0x10c>
 8000648:	f091 0f00 	teq	r1, #0
 800064c:	bf04      	itt	eq
 800064e:	4601      	moveq	r1, r0
 8000650:	2000      	moveq	r0, #0
 8000652:	fab1 f381 	clz	r3, r1
 8000656:	bf08      	it	eq
 8000658:	3320      	addeq	r3, #32
 800065a:	f1a3 030b 	sub.w	r3, r3, #11
 800065e:	f1b3 0220 	subs.w	r2, r3, #32
 8000662:	da0c      	bge.n	800067e <__adddf3+0x16e>
 8000664:	320c      	adds	r2, #12
 8000666:	dd08      	ble.n	800067a <__adddf3+0x16a>
 8000668:	f102 0c14 	add.w	ip, r2, #20
 800066c:	f1c2 020c 	rsb	r2, r2, #12
 8000670:	fa01 f00c 	lsl.w	r0, r1, ip
 8000674:	fa21 f102 	lsr.w	r1, r1, r2
 8000678:	e00c      	b.n	8000694 <__adddf3+0x184>
 800067a:	f102 0214 	add.w	r2, r2, #20
 800067e:	bfd8      	it	le
 8000680:	f1c2 0c20 	rsble	ip, r2, #32
 8000684:	fa01 f102 	lsl.w	r1, r1, r2
 8000688:	fa20 fc0c 	lsr.w	ip, r0, ip
 800068c:	bfdc      	itt	le
 800068e:	ea41 010c 	orrle.w	r1, r1, ip
 8000692:	4090      	lslle	r0, r2
 8000694:	1ae4      	subs	r4, r4, r3
 8000696:	bfa2      	ittt	ge
 8000698:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800069c:	4329      	orrge	r1, r5
 800069e:	bd30      	popge	{r4, r5, pc}
 80006a0:	ea6f 0404 	mvn.w	r4, r4
 80006a4:	3c1f      	subs	r4, #31
 80006a6:	da1c      	bge.n	80006e2 <__adddf3+0x1d2>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc0e      	bgt.n	80006ca <__adddf3+0x1ba>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0220 	rsb	r2, r4, #32
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f302 	lsl.w	r3, r1, r2
 80006bc:	ea40 0003 	orr.w	r0, r0, r3
 80006c0:	fa21 f304 	lsr.w	r3, r1, r4
 80006c4:	ea45 0103 	orr.w	r1, r5, r3
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f1c4 040c 	rsb	r4, r4, #12
 80006ce:	f1c4 0220 	rsb	r2, r4, #32
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 f304 	lsl.w	r3, r1, r4
 80006da:	ea40 0003 	orr.w	r0, r0, r3
 80006de:	4629      	mov	r1, r5
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	fa21 f004 	lsr.w	r0, r1, r4
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f094 0f00 	teq	r4, #0
 80006ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006f2:	bf06      	itte	eq
 80006f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006f8:	3401      	addeq	r4, #1
 80006fa:	3d01      	subne	r5, #1
 80006fc:	e74e      	b.n	800059c <__adddf3+0x8c>
 80006fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000702:	bf18      	it	ne
 8000704:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000708:	d029      	beq.n	800075e <__adddf3+0x24e>
 800070a:	ea94 0f05 	teq	r4, r5
 800070e:	bf08      	it	eq
 8000710:	ea90 0f02 	teqeq	r0, r2
 8000714:	d005      	beq.n	8000722 <__adddf3+0x212>
 8000716:	ea54 0c00 	orrs.w	ip, r4, r0
 800071a:	bf04      	itt	eq
 800071c:	4619      	moveq	r1, r3
 800071e:	4610      	moveq	r0, r2
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	ea91 0f03 	teq	r1, r3
 8000726:	bf1e      	ittt	ne
 8000728:	2100      	movne	r1, #0
 800072a:	2000      	movne	r0, #0
 800072c:	bd30      	popne	{r4, r5, pc}
 800072e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000732:	d105      	bne.n	8000740 <__adddf3+0x230>
 8000734:	0040      	lsls	r0, r0, #1
 8000736:	4149      	adcs	r1, r1
 8000738:	bf28      	it	cs
 800073a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800073e:	bd30      	pop	{r4, r5, pc}
 8000740:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000744:	bf3c      	itt	cc
 8000746:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800074a:	bd30      	popcc	{r4, r5, pc}
 800074c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000750:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000754:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000762:	bf1a      	itte	ne
 8000764:	4619      	movne	r1, r3
 8000766:	4610      	movne	r0, r2
 8000768:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800076c:	bf1c      	itt	ne
 800076e:	460b      	movne	r3, r1
 8000770:	4602      	movne	r2, r0
 8000772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000776:	bf06      	itte	eq
 8000778:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800077c:	ea91 0f03 	teqeq	r1, r3
 8000780:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000784:	bd30      	pop	{r4, r5, pc}
 8000786:	bf00      	nop

08000788 <__aeabi_ui2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f04f 0500 	mov.w	r5, #0
 80007a0:	f04f 0100 	mov.w	r1, #0
 80007a4:	e750      	b.n	8000648 <__adddf3+0x138>
 80007a6:	bf00      	nop

080007a8 <__aeabi_i2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007c0:	bf48      	it	mi
 80007c2:	4240      	negmi	r0, r0
 80007c4:	f04f 0100 	mov.w	r1, #0
 80007c8:	e73e      	b.n	8000648 <__adddf3+0x138>
 80007ca:	bf00      	nop

080007cc <__aeabi_f2d>:
 80007cc:	0042      	lsls	r2, r0, #1
 80007ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007da:	bf1f      	itttt	ne
 80007dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007e8:	4770      	bxne	lr
 80007ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ee:	bf08      	it	eq
 80007f0:	4770      	bxeq	lr
 80007f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007f6:	bf04      	itt	eq
 80007f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007fc:	4770      	bxeq	lr
 80007fe:	b530      	push	{r4, r5, lr}
 8000800:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000804:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000808:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800080c:	e71c      	b.n	8000648 <__adddf3+0x138>
 800080e:	bf00      	nop

08000810 <__aeabi_ul2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f04f 0500 	mov.w	r5, #0
 800081e:	e00a      	b.n	8000836 <__aeabi_l2d+0x16>

08000820 <__aeabi_l2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800082e:	d502      	bpl.n	8000836 <__aeabi_l2d+0x16>
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800083a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800083e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000842:	f43f aed8 	beq.w	80005f6 <__adddf3+0xe6>
 8000846:	f04f 0203 	mov.w	r2, #3
 800084a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800084e:	bf18      	it	ne
 8000850:	3203      	addne	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800085e:	f1c2 0320 	rsb	r3, r2, #32
 8000862:	fa00 fc03 	lsl.w	ip, r0, r3
 8000866:	fa20 f002 	lsr.w	r0, r0, r2
 800086a:	fa01 fe03 	lsl.w	lr, r1, r3
 800086e:	ea40 000e 	orr.w	r0, r0, lr
 8000872:	fa21 f102 	lsr.w	r1, r1, r2
 8000876:	4414      	add	r4, r2
 8000878:	e6bd      	b.n	80005f6 <__adddf3+0xe6>
 800087a:	bf00      	nop

0800087c <__aeabi_d2iz>:
 800087c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000880:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000884:	d215      	bcs.n	80008b2 <__aeabi_d2iz+0x36>
 8000886:	d511      	bpl.n	80008ac <__aeabi_d2iz+0x30>
 8000888:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800088c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000890:	d912      	bls.n	80008b8 <__aeabi_d2iz+0x3c>
 8000892:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000896:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800089a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800089e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80008a2:	fa23 f002 	lsr.w	r0, r3, r2
 80008a6:	bf18      	it	ne
 80008a8:	4240      	negne	r0, r0
 80008aa:	4770      	bx	lr
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	4770      	bx	lr
 80008b2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008b6:	d105      	bne.n	80008c4 <__aeabi_d2iz+0x48>
 80008b8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80008bc:	bf08      	it	eq
 80008be:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80008c2:	4770      	bx	lr
 80008c4:	f04f 0000 	mov.w	r0, #0
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop

080008cc <__aeabi_uldivmod>:
 80008cc:	b953      	cbnz	r3, 80008e4 <__aeabi_uldivmod+0x18>
 80008ce:	b94a      	cbnz	r2, 80008e4 <__aeabi_uldivmod+0x18>
 80008d0:	2900      	cmp	r1, #0
 80008d2:	bf08      	it	eq
 80008d4:	2800      	cmpeq	r0, #0
 80008d6:	bf1c      	itt	ne
 80008d8:	f04f 31ff 	movne.w	r1, #4294967295
 80008dc:	f04f 30ff 	movne.w	r0, #4294967295
 80008e0:	f000 b970 	b.w	8000bc4 <__aeabi_idiv0>
 80008e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ec:	f000 f806 	bl	80008fc <__udivmoddi4>
 80008f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008f8:	b004      	add	sp, #16
 80008fa:	4770      	bx	lr

080008fc <__udivmoddi4>:
 80008fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000900:	9e08      	ldr	r6, [sp, #32]
 8000902:	460d      	mov	r5, r1
 8000904:	4604      	mov	r4, r0
 8000906:	460f      	mov	r7, r1
 8000908:	2b00      	cmp	r3, #0
 800090a:	d14a      	bne.n	80009a2 <__udivmoddi4+0xa6>
 800090c:	428a      	cmp	r2, r1
 800090e:	4694      	mov	ip, r2
 8000910:	d965      	bls.n	80009de <__udivmoddi4+0xe2>
 8000912:	fab2 f382 	clz	r3, r2
 8000916:	b143      	cbz	r3, 800092a <__udivmoddi4+0x2e>
 8000918:	fa02 fc03 	lsl.w	ip, r2, r3
 800091c:	f1c3 0220 	rsb	r2, r3, #32
 8000920:	409f      	lsls	r7, r3
 8000922:	fa20 f202 	lsr.w	r2, r0, r2
 8000926:	4317      	orrs	r7, r2
 8000928:	409c      	lsls	r4, r3
 800092a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800092e:	fa1f f58c 	uxth.w	r5, ip
 8000932:	fbb7 f1fe 	udiv	r1, r7, lr
 8000936:	0c22      	lsrs	r2, r4, #16
 8000938:	fb0e 7711 	mls	r7, lr, r1, r7
 800093c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000940:	fb01 f005 	mul.w	r0, r1, r5
 8000944:	4290      	cmp	r0, r2
 8000946:	d90a      	bls.n	800095e <__udivmoddi4+0x62>
 8000948:	eb1c 0202 	adds.w	r2, ip, r2
 800094c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000950:	f080 811c 	bcs.w	8000b8c <__udivmoddi4+0x290>
 8000954:	4290      	cmp	r0, r2
 8000956:	f240 8119 	bls.w	8000b8c <__udivmoddi4+0x290>
 800095a:	3902      	subs	r1, #2
 800095c:	4462      	add	r2, ip
 800095e:	1a12      	subs	r2, r2, r0
 8000960:	b2a4      	uxth	r4, r4
 8000962:	fbb2 f0fe 	udiv	r0, r2, lr
 8000966:	fb0e 2210 	mls	r2, lr, r0, r2
 800096a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800096e:	fb00 f505 	mul.w	r5, r0, r5
 8000972:	42a5      	cmp	r5, r4
 8000974:	d90a      	bls.n	800098c <__udivmoddi4+0x90>
 8000976:	eb1c 0404 	adds.w	r4, ip, r4
 800097a:	f100 32ff 	add.w	r2, r0, #4294967295
 800097e:	f080 8107 	bcs.w	8000b90 <__udivmoddi4+0x294>
 8000982:	42a5      	cmp	r5, r4
 8000984:	f240 8104 	bls.w	8000b90 <__udivmoddi4+0x294>
 8000988:	4464      	add	r4, ip
 800098a:	3802      	subs	r0, #2
 800098c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000990:	1b64      	subs	r4, r4, r5
 8000992:	2100      	movs	r1, #0
 8000994:	b11e      	cbz	r6, 800099e <__udivmoddi4+0xa2>
 8000996:	40dc      	lsrs	r4, r3
 8000998:	2300      	movs	r3, #0
 800099a:	e9c6 4300 	strd	r4, r3, [r6]
 800099e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009a2:	428b      	cmp	r3, r1
 80009a4:	d908      	bls.n	80009b8 <__udivmoddi4+0xbc>
 80009a6:	2e00      	cmp	r6, #0
 80009a8:	f000 80ed 	beq.w	8000b86 <__udivmoddi4+0x28a>
 80009ac:	2100      	movs	r1, #0
 80009ae:	e9c6 0500 	strd	r0, r5, [r6]
 80009b2:	4608      	mov	r0, r1
 80009b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b8:	fab3 f183 	clz	r1, r3
 80009bc:	2900      	cmp	r1, #0
 80009be:	d149      	bne.n	8000a54 <__udivmoddi4+0x158>
 80009c0:	42ab      	cmp	r3, r5
 80009c2:	d302      	bcc.n	80009ca <__udivmoddi4+0xce>
 80009c4:	4282      	cmp	r2, r0
 80009c6:	f200 80f8 	bhi.w	8000bba <__udivmoddi4+0x2be>
 80009ca:	1a84      	subs	r4, r0, r2
 80009cc:	eb65 0203 	sbc.w	r2, r5, r3
 80009d0:	2001      	movs	r0, #1
 80009d2:	4617      	mov	r7, r2
 80009d4:	2e00      	cmp	r6, #0
 80009d6:	d0e2      	beq.n	800099e <__udivmoddi4+0xa2>
 80009d8:	e9c6 4700 	strd	r4, r7, [r6]
 80009dc:	e7df      	b.n	800099e <__udivmoddi4+0xa2>
 80009de:	b902      	cbnz	r2, 80009e2 <__udivmoddi4+0xe6>
 80009e0:	deff      	udf	#255	; 0xff
 80009e2:	fab2 f382 	clz	r3, r2
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	f040 8090 	bne.w	8000b0c <__udivmoddi4+0x210>
 80009ec:	1a8a      	subs	r2, r1, r2
 80009ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009f2:	fa1f fe8c 	uxth.w	lr, ip
 80009f6:	2101      	movs	r1, #1
 80009f8:	fbb2 f5f7 	udiv	r5, r2, r7
 80009fc:	fb07 2015 	mls	r0, r7, r5, r2
 8000a00:	0c22      	lsrs	r2, r4, #16
 8000a02:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000a06:	fb0e f005 	mul.w	r0, lr, r5
 8000a0a:	4290      	cmp	r0, r2
 8000a0c:	d908      	bls.n	8000a20 <__udivmoddi4+0x124>
 8000a0e:	eb1c 0202 	adds.w	r2, ip, r2
 8000a12:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a16:	d202      	bcs.n	8000a1e <__udivmoddi4+0x122>
 8000a18:	4290      	cmp	r0, r2
 8000a1a:	f200 80cb 	bhi.w	8000bb4 <__udivmoddi4+0x2b8>
 8000a1e:	4645      	mov	r5, r8
 8000a20:	1a12      	subs	r2, r2, r0
 8000a22:	b2a4      	uxth	r4, r4
 8000a24:	fbb2 f0f7 	udiv	r0, r2, r7
 8000a28:	fb07 2210 	mls	r2, r7, r0, r2
 8000a2c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a30:	fb0e fe00 	mul.w	lr, lr, r0
 8000a34:	45a6      	cmp	lr, r4
 8000a36:	d908      	bls.n	8000a4a <__udivmoddi4+0x14e>
 8000a38:	eb1c 0404 	adds.w	r4, ip, r4
 8000a3c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a40:	d202      	bcs.n	8000a48 <__udivmoddi4+0x14c>
 8000a42:	45a6      	cmp	lr, r4
 8000a44:	f200 80bb 	bhi.w	8000bbe <__udivmoddi4+0x2c2>
 8000a48:	4610      	mov	r0, r2
 8000a4a:	eba4 040e 	sub.w	r4, r4, lr
 8000a4e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a52:	e79f      	b.n	8000994 <__udivmoddi4+0x98>
 8000a54:	f1c1 0720 	rsb	r7, r1, #32
 8000a58:	408b      	lsls	r3, r1
 8000a5a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a5e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a62:	fa05 f401 	lsl.w	r4, r5, r1
 8000a66:	fa20 f307 	lsr.w	r3, r0, r7
 8000a6a:	40fd      	lsrs	r5, r7
 8000a6c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a70:	4323      	orrs	r3, r4
 8000a72:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a76:	fa1f fe8c 	uxth.w	lr, ip
 8000a7a:	fb09 5518 	mls	r5, r9, r8, r5
 8000a7e:	0c1c      	lsrs	r4, r3, #16
 8000a80:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a84:	fb08 f50e 	mul.w	r5, r8, lr
 8000a88:	42a5      	cmp	r5, r4
 8000a8a:	fa02 f201 	lsl.w	r2, r2, r1
 8000a8e:	fa00 f001 	lsl.w	r0, r0, r1
 8000a92:	d90b      	bls.n	8000aac <__udivmoddi4+0x1b0>
 8000a94:	eb1c 0404 	adds.w	r4, ip, r4
 8000a98:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a9c:	f080 8088 	bcs.w	8000bb0 <__udivmoddi4+0x2b4>
 8000aa0:	42a5      	cmp	r5, r4
 8000aa2:	f240 8085 	bls.w	8000bb0 <__udivmoddi4+0x2b4>
 8000aa6:	f1a8 0802 	sub.w	r8, r8, #2
 8000aaa:	4464      	add	r4, ip
 8000aac:	1b64      	subs	r4, r4, r5
 8000aae:	b29d      	uxth	r5, r3
 8000ab0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ab4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ab8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000abc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ac0:	45a6      	cmp	lr, r4
 8000ac2:	d908      	bls.n	8000ad6 <__udivmoddi4+0x1da>
 8000ac4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ac8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000acc:	d26c      	bcs.n	8000ba8 <__udivmoddi4+0x2ac>
 8000ace:	45a6      	cmp	lr, r4
 8000ad0:	d96a      	bls.n	8000ba8 <__udivmoddi4+0x2ac>
 8000ad2:	3b02      	subs	r3, #2
 8000ad4:	4464      	add	r4, ip
 8000ad6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ada:	fba3 9502 	umull	r9, r5, r3, r2
 8000ade:	eba4 040e 	sub.w	r4, r4, lr
 8000ae2:	42ac      	cmp	r4, r5
 8000ae4:	46c8      	mov	r8, r9
 8000ae6:	46ae      	mov	lr, r5
 8000ae8:	d356      	bcc.n	8000b98 <__udivmoddi4+0x29c>
 8000aea:	d053      	beq.n	8000b94 <__udivmoddi4+0x298>
 8000aec:	b156      	cbz	r6, 8000b04 <__udivmoddi4+0x208>
 8000aee:	ebb0 0208 	subs.w	r2, r0, r8
 8000af2:	eb64 040e 	sbc.w	r4, r4, lr
 8000af6:	fa04 f707 	lsl.w	r7, r4, r7
 8000afa:	40ca      	lsrs	r2, r1
 8000afc:	40cc      	lsrs	r4, r1
 8000afe:	4317      	orrs	r7, r2
 8000b00:	e9c6 7400 	strd	r7, r4, [r6]
 8000b04:	4618      	mov	r0, r3
 8000b06:	2100      	movs	r1, #0
 8000b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b0c:	f1c3 0120 	rsb	r1, r3, #32
 8000b10:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b14:	fa20 f201 	lsr.w	r2, r0, r1
 8000b18:	fa25 f101 	lsr.w	r1, r5, r1
 8000b1c:	409d      	lsls	r5, r3
 8000b1e:	432a      	orrs	r2, r5
 8000b20:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b24:	fa1f fe8c 	uxth.w	lr, ip
 8000b28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b2c:	fb07 1510 	mls	r5, r7, r0, r1
 8000b30:	0c11      	lsrs	r1, r2, #16
 8000b32:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000b36:	fb00 f50e 	mul.w	r5, r0, lr
 8000b3a:	428d      	cmp	r5, r1
 8000b3c:	fa04 f403 	lsl.w	r4, r4, r3
 8000b40:	d908      	bls.n	8000b54 <__udivmoddi4+0x258>
 8000b42:	eb1c 0101 	adds.w	r1, ip, r1
 8000b46:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b4a:	d22f      	bcs.n	8000bac <__udivmoddi4+0x2b0>
 8000b4c:	428d      	cmp	r5, r1
 8000b4e:	d92d      	bls.n	8000bac <__udivmoddi4+0x2b0>
 8000b50:	3802      	subs	r0, #2
 8000b52:	4461      	add	r1, ip
 8000b54:	1b49      	subs	r1, r1, r5
 8000b56:	b292      	uxth	r2, r2
 8000b58:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b5c:	fb07 1115 	mls	r1, r7, r5, r1
 8000b60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b64:	fb05 f10e 	mul.w	r1, r5, lr
 8000b68:	4291      	cmp	r1, r2
 8000b6a:	d908      	bls.n	8000b7e <__udivmoddi4+0x282>
 8000b6c:	eb1c 0202 	adds.w	r2, ip, r2
 8000b70:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b74:	d216      	bcs.n	8000ba4 <__udivmoddi4+0x2a8>
 8000b76:	4291      	cmp	r1, r2
 8000b78:	d914      	bls.n	8000ba4 <__udivmoddi4+0x2a8>
 8000b7a:	3d02      	subs	r5, #2
 8000b7c:	4462      	add	r2, ip
 8000b7e:	1a52      	subs	r2, r2, r1
 8000b80:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b84:	e738      	b.n	80009f8 <__udivmoddi4+0xfc>
 8000b86:	4631      	mov	r1, r6
 8000b88:	4630      	mov	r0, r6
 8000b8a:	e708      	b.n	800099e <__udivmoddi4+0xa2>
 8000b8c:	4639      	mov	r1, r7
 8000b8e:	e6e6      	b.n	800095e <__udivmoddi4+0x62>
 8000b90:	4610      	mov	r0, r2
 8000b92:	e6fb      	b.n	800098c <__udivmoddi4+0x90>
 8000b94:	4548      	cmp	r0, r9
 8000b96:	d2a9      	bcs.n	8000aec <__udivmoddi4+0x1f0>
 8000b98:	ebb9 0802 	subs.w	r8, r9, r2
 8000b9c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ba0:	3b01      	subs	r3, #1
 8000ba2:	e7a3      	b.n	8000aec <__udivmoddi4+0x1f0>
 8000ba4:	4645      	mov	r5, r8
 8000ba6:	e7ea      	b.n	8000b7e <__udivmoddi4+0x282>
 8000ba8:	462b      	mov	r3, r5
 8000baa:	e794      	b.n	8000ad6 <__udivmoddi4+0x1da>
 8000bac:	4640      	mov	r0, r8
 8000bae:	e7d1      	b.n	8000b54 <__udivmoddi4+0x258>
 8000bb0:	46d0      	mov	r8, sl
 8000bb2:	e77b      	b.n	8000aac <__udivmoddi4+0x1b0>
 8000bb4:	3d02      	subs	r5, #2
 8000bb6:	4462      	add	r2, ip
 8000bb8:	e732      	b.n	8000a20 <__udivmoddi4+0x124>
 8000bba:	4608      	mov	r0, r1
 8000bbc:	e70a      	b.n	80009d4 <__udivmoddi4+0xd8>
 8000bbe:	4464      	add	r4, ip
 8000bc0:	3802      	subs	r0, #2
 8000bc2:	e742      	b.n	8000a4a <__udivmoddi4+0x14e>

08000bc4 <__aeabi_idiv0>:
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <initMotor>:
uint16_t FSRValue[6];




void initMotor(void){
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
	// motor 1
	for(int i = 1;i <= 3; i++){
 8000bce:	2301      	movs	r3, #1
 8000bd0:	607b      	str	r3, [r7, #4]
 8000bd2:	e013      	b.n	8000bfc <initMotor+0x34>
		motor[i].speed = 0;
 8000bd4:	4a28      	ldr	r2, [pc, #160]	; (8000c78 <initMotor+0xb0>)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	00db      	lsls	r3, r3, #3
 8000bda:	4413      	add	r3, r2
 8000bdc:	2200      	movs	r2, #0
 8000bde:	809a      	strh	r2, [r3, #4]
		motor[i].target = 0;
 8000be0:	4a25      	ldr	r2, [pc, #148]	; (8000c78 <initMotor+0xb0>)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2100      	movs	r1, #0
 8000be6:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		motor[i].direc = 0;
 8000bea:	4a23      	ldr	r2, [pc, #140]	; (8000c78 <initMotor+0xb0>)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	00db      	lsls	r3, r3, #3
 8000bf0:	4413      	add	r3, r2
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	80da      	strh	r2, [r3, #6]
	for(int i = 1;i <= 3; i++){
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2b03      	cmp	r3, #3
 8000c00:	dde8      	ble.n	8000bd4 <initMotor+0xc>
	}

	motor1A = 0;
 8000c02:	4b1e      	ldr	r3, [pc, #120]	; (8000c7c <initMotor+0xb4>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	635a      	str	r2, [r3, #52]	; 0x34
	motor1B = 0;
 8000c08:	4b1d      	ldr	r3, [pc, #116]	; (8000c80 <initMotor+0xb8>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	635a      	str	r2, [r3, #52]	; 0x34
	motor2A = 0;
 8000c0e:	4b1b      	ldr	r3, [pc, #108]	; (8000c7c <initMotor+0xb4>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	639a      	str	r2, [r3, #56]	; 0x38
	motor2B = 0;
 8000c14:	4b1b      	ldr	r3, [pc, #108]	; (8000c84 <initMotor+0xbc>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	63da      	str	r2, [r3, #60]	; 0x3c
	motor3A = 0;
 8000c1a:	4b1b      	ldr	r3, [pc, #108]	; (8000c88 <initMotor+0xc0>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	639a      	str	r2, [r3, #56]	; 0x38
	motor3B = 0;
 8000c20:	4b1a      	ldr	r3, [pc, #104]	; (8000c8c <initMotor+0xc4>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	635a      	str	r2, [r3, #52]	; 0x34

	HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_1 | TIM_CHANNEL_2);	// start encoderM1(timer2)
 8000c26:	2104      	movs	r1, #4
 8000c28:	4819      	ldr	r0, [pc, #100]	; (8000c90 <initMotor+0xc8>)
 8000c2a:	f004 fa6b 	bl	8005104 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);	// start motor1A
 8000c2e:	2100      	movs	r1, #0
 8000c30:	4818      	ldr	r0, [pc, #96]	; (8000c94 <initMotor+0xcc>)
 8000c32:	f004 f8f9 	bl	8004e28 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim14,TIM_CHANNEL_1);	// start motor1B
 8000c36:	2100      	movs	r1, #0
 8000c38:	4817      	ldr	r0, [pc, #92]	; (8000c98 <initMotor+0xd0>)
 8000c3a:	f004 f8f5 	bl	8004e28 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_1 | TIM_CHANNEL_2);	// start encoderM2(timer4)
 8000c3e:	2104      	movs	r1, #4
 8000c40:	4816      	ldr	r0, [pc, #88]	; (8000c9c <initMotor+0xd4>)
 8000c42:	f004 fa5f 	bl	8005104 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);	// start motor2A
 8000c46:	2104      	movs	r1, #4
 8000c48:	4812      	ldr	r0, [pc, #72]	; (8000c94 <initMotor+0xcc>)
 8000c4a:	f004 f8ed 	bl	8004e28 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);	// start motor2B
 8000c4e:	2108      	movs	r1, #8
 8000c50:	4813      	ldr	r0, [pc, #76]	; (8000ca0 <initMotor+0xd8>)
 8000c52:	f004 f8e9 	bl	8004e28 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&htim5,TIM_CHANNEL_1 | TIM_CHANNEL_2);	// start encoderM3(timer5)
 8000c56:	2104      	movs	r1, #4
 8000c58:	4812      	ldr	r0, [pc, #72]	; (8000ca4 <initMotor+0xdc>)
 8000c5a:	f004 fa53 	bl	8005104 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_2);	// start motor3A
 8000c5e:	2104      	movs	r1, #4
 8000c60:	4811      	ldr	r0, [pc, #68]	; (8000ca8 <initMotor+0xe0>)
 8000c62:	f004 f8e1 	bl	8004e28 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_1);	// start motor3B
 8000c66:	2100      	movs	r1, #0
 8000c68:	4810      	ldr	r0, [pc, #64]	; (8000cac <initMotor+0xe4>)
 8000c6a:	f004 f8dd 	bl	8004e28 <HAL_TIM_PWM_Start>
}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000468 	.word	0x20000468
 8000c7c:	40010000 	.word	0x40010000
 8000c80:	40002000 	.word	0x40002000
 8000c84:	40000400 	.word	0x40000400
 8000c88:	40010400 	.word	0x40010400
 8000c8c:	40001800 	.word	0x40001800
 8000c90:	20000120 	.word	0x20000120
 8000c94:	200000d8 	.word	0x200000d8
 8000c98:	20000318 	.word	0x20000318
 8000c9c:	200001b0 	.word	0x200001b0
 8000ca0:	20000168 	.word	0x20000168
 8000ca4:	200001f8 	.word	0x200001f8
 8000ca8:	20000288 	.word	0x20000288
 8000cac:	200002d0 	.word	0x200002d0

08000cb0 <errorOccur>:

void errorOccur(uint16_t type,uint16_t motorNum){
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b09c      	sub	sp, #112	; 0x70
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	460a      	mov	r2, r1
 8000cba:	80fb      	strh	r3, [r7, #6]
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	80bb      	strh	r3, [r7, #4]
	char uart_buf[100];
	int uart_buf_len;
	switch(type){
 8000cc0:	88fb      	ldrh	r3, [r7, #6]
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d002      	beq.n	8000ccc <errorOccur+0x1c>
 8000cc6:	2b02      	cmp	r3, #2
 8000cc8:	d011      	beq.n	8000cee <errorOccur+0x3e>
	case 2:
		uart_buf_len = sprintf(uart_buf, "Can't config motor %d speed\r\n",motorNum);
		HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
		break;
	}
}
 8000cca:	e021      	b.n	8000d10 <errorOccur+0x60>
		uart_buf_len = sprintf(uart_buf, "Can't read motor %d encoder value\r\n",motorNum);
 8000ccc:	88ba      	ldrh	r2, [r7, #4]
 8000cce:	f107 0308 	add.w	r3, r7, #8
 8000cd2:	4911      	ldr	r1, [pc, #68]	; (8000d18 <errorOccur+0x68>)
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f006 f801 	bl	8006cdc <siprintf>
 8000cda:	66f8      	str	r0, [r7, #108]	; 0x6c
		HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000cdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000cde:	b29a      	uxth	r2, r3
 8000ce0:	f107 0108 	add.w	r1, r7, #8
 8000ce4:	2364      	movs	r3, #100	; 0x64
 8000ce6:	480d      	ldr	r0, [pc, #52]	; (8000d1c <errorOccur+0x6c>)
 8000ce8:	f005 f831 	bl	8005d4e <HAL_UART_Transmit>
		break;
 8000cec:	e010      	b.n	8000d10 <errorOccur+0x60>
		uart_buf_len = sprintf(uart_buf, "Can't config motor %d speed\r\n",motorNum);
 8000cee:	88ba      	ldrh	r2, [r7, #4]
 8000cf0:	f107 0308 	add.w	r3, r7, #8
 8000cf4:	490a      	ldr	r1, [pc, #40]	; (8000d20 <errorOccur+0x70>)
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f005 fff0 	bl	8006cdc <siprintf>
 8000cfc:	66f8      	str	r0, [r7, #108]	; 0x6c
		HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000cfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000d00:	b29a      	uxth	r2, r3
 8000d02:	f107 0108 	add.w	r1, r7, #8
 8000d06:	2364      	movs	r3, #100	; 0x64
 8000d08:	4804      	ldr	r0, [pc, #16]	; (8000d1c <errorOccur+0x6c>)
 8000d0a:	f005 f820 	bl	8005d4e <HAL_UART_Transmit>
		break;
 8000d0e:	bf00      	nop
}
 8000d10:	bf00      	nop
 8000d12:	3770      	adds	r7, #112	; 0x70
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	0800763c 	.word	0x0800763c
 8000d1c:	20000360 	.word	0x20000360
 8000d20:	08007660 	.word	0x08007660

08000d24 <voltage2speed>:
	uint32_t pulse_value = 1.7 * rpm_value + 27;
	return pulse_value;
}

// table for converting ADC voltage read from FSR,to speed(rpm)
uint32_t voltage2speed(uint32_t FSRvoltage){
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
	uint32_t Target_Speed = FSRvoltage/50 + 200;	// input speed = 0.1*FSR_value + 100
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4a06      	ldr	r2, [pc, #24]	; (8000d48 <voltage2speed+0x24>)
 8000d30:	fba2 2303 	umull	r2, r3, r2, r3
 8000d34:	091b      	lsrs	r3, r3, #4
 8000d36:	33c8      	adds	r3, #200	; 0xc8
 8000d38:	60fb      	str	r3, [r7, #12]
	return Target_Speed;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	51eb851f 	.word	0x51eb851f

08000d4c <getSpeed>:



// get motor real speed (named as encoder value)
short getSpeed(uint16_t motor_num){
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	80fb      	strh	r3, [r7, #6]
	short fspeed = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	81fb      	strh	r3, [r7, #14]
	switch(motor_num){
 8000d5a:	88fb      	ldrh	r3, [r7, #6]
 8000d5c:	2b03      	cmp	r3, #3
 8000d5e:	d852      	bhi.n	8000e06 <getSpeed+0xba>
 8000d60:	a201      	add	r2, pc, #4	; (adr r2, 8000d68 <getSpeed+0x1c>)
 8000d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d66:	bf00      	nop
 8000d68:	08000e13 	.word	0x08000e13
 8000d6c:	08000d79 	.word	0x08000d79
 8000d70:	08000dab 	.word	0x08000dab
 8000d74:	08000dd9 	.word	0x08000dd9
	case 1:
		fspeed = (short)(encoderM1)*100/(16*4); // v = (Num/(CPR*F))/t
 8000d78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d7e:	b21b      	sxth	r3, r3
 8000d80:	461a      	mov	r2, r3
 8000d82:	2364      	movs	r3, #100	; 0x64
 8000d84:	fb02 f303 	mul.w	r3, r2, r3
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	da00      	bge.n	8000d8e <getSpeed+0x42>
 8000d8c:	333f      	adds	r3, #63	; 0x3f
 8000d8e:	119b      	asrs	r3, r3, #6
 8000d90:	81fb      	strh	r3, [r7, #14]
		encoderM1 = 0;
 8000d92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d96:	2200      	movs	r2, #0
 8000d98:	625a      	str	r2, [r3, #36]	; 0x24
		return fspeed*10;
 8000d9a:	89fb      	ldrh	r3, [r7, #14]
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	0092      	lsls	r2, r2, #2
 8000da0:	4413      	add	r3, r2
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	b21b      	sxth	r3, r3
 8000da8:	e035      	b.n	8000e16 <getSpeed+0xca>
		break;
	case 2:
		fspeed = (short)(encoderM2)*100/(16*4); // v = (Num/(CPR*F))/t
 8000daa:	4b1d      	ldr	r3, [pc, #116]	; (8000e20 <getSpeed+0xd4>)
 8000dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dae:	b21b      	sxth	r3, r3
 8000db0:	461a      	mov	r2, r3
 8000db2:	2364      	movs	r3, #100	; 0x64
 8000db4:	fb02 f303 	mul.w	r3, r2, r3
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	da00      	bge.n	8000dbe <getSpeed+0x72>
 8000dbc:	333f      	adds	r3, #63	; 0x3f
 8000dbe:	119b      	asrs	r3, r3, #6
 8000dc0:	81fb      	strh	r3, [r7, #14]
		encoderM2 = 0;
 8000dc2:	4b17      	ldr	r3, [pc, #92]	; (8000e20 <getSpeed+0xd4>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	625a      	str	r2, [r3, #36]	; 0x24
		return fspeed*10;
 8000dc8:	89fb      	ldrh	r3, [r7, #14]
 8000dca:	461a      	mov	r2, r3
 8000dcc:	0092      	lsls	r2, r2, #2
 8000dce:	4413      	add	r3, r2
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	b21b      	sxth	r3, r3
 8000dd6:	e01e      	b.n	8000e16 <getSpeed+0xca>
		break;
	case 3:
		fspeed = (short)(encoderM3)*100/(16*4); // v = (Num/(CPR*F))/t
 8000dd8:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <getSpeed+0xd8>)
 8000dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ddc:	b21b      	sxth	r3, r3
 8000dde:	461a      	mov	r2, r3
 8000de0:	2364      	movs	r3, #100	; 0x64
 8000de2:	fb02 f303 	mul.w	r3, r2, r3
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	da00      	bge.n	8000dec <getSpeed+0xa0>
 8000dea:	333f      	adds	r3, #63	; 0x3f
 8000dec:	119b      	asrs	r3, r3, #6
 8000dee:	81fb      	strh	r3, [r7, #14]
		encoderM3 = 0;
 8000df0:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <getSpeed+0xd8>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	625a      	str	r2, [r3, #36]	; 0x24
		return fspeed*10;
 8000df6:	89fb      	ldrh	r3, [r7, #14]
 8000df8:	461a      	mov	r2, r3
 8000dfa:	0092      	lsls	r2, r2, #2
 8000dfc:	4413      	add	r3, r2
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	b29b      	uxth	r3, r3
 8000e02:	b21b      	sxth	r3, r3
 8000e04:	e007      	b.n	8000e16 <getSpeed+0xca>
		break;
	case 0:
		break;
	default:
		errorOccur(1,motor_num);
 8000e06:	88fb      	ldrh	r3, [r7, #6]
 8000e08:	4619      	mov	r1, r3
 8000e0a:	2001      	movs	r0, #1
 8000e0c:	f7ff ff50 	bl	8000cb0 <errorOccur>
		break;
 8000e10:	e000      	b.n	8000e14 <getSpeed+0xc8>
		break;
 8000e12:	bf00      	nop
	}
	return 0;
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40000800 	.word	0x40000800
 8000e24:	40000c00 	.word	0x40000c00

08000e28 <readFSRVoltage>:

// ADC Conversion processing
void readFSRVoltage(void){
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
	for(int FSRNum = 0; FSRNum < 6; FSRNum ++){
 8000e2e:	2300      	movs	r3, #0
 8000e30:	607b      	str	r3, [r7, #4]
 8000e32:	e01b      	b.n	8000e6c <readFSRVoltage+0x44>
       HAL_ADC_Start(&hadc1);
 8000e34:	4811      	ldr	r0, [pc, #68]	; (8000e7c <readFSRVoltage+0x54>)
 8000e36:	f001 fe51 	bl	8002adc <HAL_ADC_Start>
       HAL_ADC_PollForConversion(&hadc1,100);
 8000e3a:	2164      	movs	r1, #100	; 0x64
 8000e3c:	480f      	ldr	r0, [pc, #60]	; (8000e7c <readFSRVoltage+0x54>)
 8000e3e:	f001 ff1f 	bl	8002c80 <HAL_ADC_PollForConversion>
       if(HAL_IS_BIT_SET(HAL_ADC_GetState(&hadc1),HAL_ADC_STATE_REG_EOC)){
 8000e42:	480e      	ldr	r0, [pc, #56]	; (8000e7c <readFSRVoltage+0x54>)
 8000e44:	f002 f8e6 	bl	8003014 <HAL_ADC_GetState>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e52:	d108      	bne.n	8000e66 <readFSRVoltage+0x3e>
    	   FSRValue[FSRNum] = (uint16_t)HAL_ADC_GetValue(&hadc1);
 8000e54:	4809      	ldr	r0, [pc, #36]	; (8000e7c <readFSRVoltage+0x54>)
 8000e56:	f001 ff9e 	bl	8002d96 <HAL_ADC_GetValue>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	b299      	uxth	r1, r3
 8000e5e:	4a08      	ldr	r2, [pc, #32]	; (8000e80 <readFSRVoltage+0x58>)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int FSRNum = 0; FSRNum < 6; FSRNum ++){
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2b05      	cmp	r3, #5
 8000e70:	dde0      	ble.n	8000e34 <readFSRVoltage+0xc>
       }
	}
}
 8000e72:	bf00      	nop
 8000e74:	bf00      	nop
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	2000007c 	.word	0x2000007c
 8000e80:	2000048c 	.word	0x2000048c

08000e84 <setSpeed_M1>:

void setSpeed_M1(uint16_t ctrl) {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	80fb      	strh	r3, [r7, #6]
    switch (ctrl) {
 8000e8e:	88fb      	ldrh	r3, [r7, #6]
 8000e90:	2b02      	cmp	r3, #2
 8000e92:	d013      	beq.n	8000ebc <setSpeed_M1+0x38>
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	dc17      	bgt.n	8000ec8 <setSpeed_M1+0x44>
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d002      	beq.n	8000ea2 <setSpeed_M1+0x1e>
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d007      	beq.n	8000eb0 <setSpeed_M1+0x2c>
 8000ea0:	e012      	b.n	8000ec8 <setSpeed_M1+0x44>
        case RESET:
            motor1A = 0;
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <setSpeed_M1+0x58>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	635a      	str	r2, [r3, #52]	; 0x34
            motor1B = 0;
 8000ea8:	4b0d      	ldr	r3, [pc, #52]	; (8000ee0 <setSpeed_M1+0x5c>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	635a      	str	r2, [r3, #52]	; 0x34
            break;
 8000eae:	e010      	b.n	8000ed2 <setSpeed_M1+0x4e>

        case CW_A:
            motor1A = motor[1].speed;
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <setSpeed_M1+0x60>)
 8000eb2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8000eb6:	4b09      	ldr	r3, [pc, #36]	; (8000edc <setSpeed_M1+0x58>)
 8000eb8:	635a      	str	r2, [r3, #52]	; 0x34
            break;
 8000eba:	e00a      	b.n	8000ed2 <setSpeed_M1+0x4e>

        case CCW_B:
            motor1B = motor[1].speed;
 8000ebc:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <setSpeed_M1+0x60>)
 8000ebe:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8000ec2:	4b07      	ldr	r3, [pc, #28]	; (8000ee0 <setSpeed_M1+0x5c>)
 8000ec4:	635a      	str	r2, [r3, #52]	; 0x34
            break;
 8000ec6:	e004      	b.n	8000ed2 <setSpeed_M1+0x4e>

        default:
            errorOccur(2, 1);
 8000ec8:	2101      	movs	r1, #1
 8000eca:	2002      	movs	r0, #2
 8000ecc:	f7ff fef0 	bl	8000cb0 <errorOccur>
            break;
 8000ed0:	bf00      	nop
    }
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40010000 	.word	0x40010000
 8000ee0:	40002000 	.word	0x40002000
 8000ee4:	20000468 	.word	0x20000468

08000ee8 <setSpeed_M2>:


void setSpeed_M2(uint16_t ctrl) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	80fb      	strh	r3, [r7, #6]
    switch (ctrl) {
 8000ef2:	88fb      	ldrh	r3, [r7, #6]
 8000ef4:	2b02      	cmp	r3, #2
 8000ef6:	d013      	beq.n	8000f20 <setSpeed_M2+0x38>
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	dc17      	bgt.n	8000f2c <setSpeed_M2+0x44>
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d002      	beq.n	8000f06 <setSpeed_M2+0x1e>
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d007      	beq.n	8000f14 <setSpeed_M2+0x2c>
 8000f04:	e012      	b.n	8000f2c <setSpeed_M2+0x44>
        case RESET:
            motor2A = 0;
 8000f06:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <setSpeed_M2+0x58>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	639a      	str	r2, [r3, #56]	; 0x38
            motor2B = 0;
 8000f0c:	4b0d      	ldr	r3, [pc, #52]	; (8000f44 <setSpeed_M2+0x5c>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	63da      	str	r2, [r3, #60]	; 0x3c
            break;
 8000f12:	e010      	b.n	8000f36 <setSpeed_M2+0x4e>

        case CW_A:
            motor2A = motor[2].speed;
 8000f14:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <setSpeed_M2+0x60>)
 8000f16:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8000f1a:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <setSpeed_M2+0x58>)
 8000f1c:	639a      	str	r2, [r3, #56]	; 0x38
            break;
 8000f1e:	e00a      	b.n	8000f36 <setSpeed_M2+0x4e>

        case CCW_B:
            motor2B = motor[2].speed;
 8000f20:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <setSpeed_M2+0x60>)
 8000f22:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8000f26:	4b07      	ldr	r3, [pc, #28]	; (8000f44 <setSpeed_M2+0x5c>)
 8000f28:	63da      	str	r2, [r3, #60]	; 0x3c
            break;
 8000f2a:	e004      	b.n	8000f36 <setSpeed_M2+0x4e>

        default:
            errorOccur(2, 2);
 8000f2c:	2102      	movs	r1, #2
 8000f2e:	2002      	movs	r0, #2
 8000f30:	f7ff febe 	bl	8000cb0 <errorOccur>
            break;
 8000f34:	bf00      	nop
    }
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40010000 	.word	0x40010000
 8000f44:	40000400 	.word	0x40000400
 8000f48:	20000468 	.word	0x20000468

08000f4c <setSpeed_M3>:

void setSpeed_M3(uint16_t ctrl) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	80fb      	strh	r3, [r7, #6]
    switch (ctrl) {
 8000f56:	88fb      	ldrh	r3, [r7, #6]
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d013      	beq.n	8000f84 <setSpeed_M3+0x38>
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	dc17      	bgt.n	8000f90 <setSpeed_M3+0x44>
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d002      	beq.n	8000f6a <setSpeed_M3+0x1e>
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d007      	beq.n	8000f78 <setSpeed_M3+0x2c>
 8000f68:	e012      	b.n	8000f90 <setSpeed_M3+0x44>
        case RESET:
            motor3A = 0;
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <setSpeed_M3+0x58>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	639a      	str	r2, [r3, #56]	; 0x38
            motor3B = 0;
 8000f70:	4b0d      	ldr	r3, [pc, #52]	; (8000fa8 <setSpeed_M3+0x5c>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	635a      	str	r2, [r3, #52]	; 0x34
            break;
 8000f76:	e010      	b.n	8000f9a <setSpeed_M3+0x4e>

        case CW_A:
            motor3A = motor[3].speed;
 8000f78:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <setSpeed_M3+0x60>)
 8000f7a:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 8000f7e:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <setSpeed_M3+0x58>)
 8000f80:	639a      	str	r2, [r3, #56]	; 0x38
            break;
 8000f82:	e00a      	b.n	8000f9a <setSpeed_M3+0x4e>

        case CCW_B:
            motor3B = motor[3].speed;
 8000f84:	4b09      	ldr	r3, [pc, #36]	; (8000fac <setSpeed_M3+0x60>)
 8000f86:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 8000f8a:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <setSpeed_M3+0x5c>)
 8000f8c:	635a      	str	r2, [r3, #52]	; 0x34
            break;
 8000f8e:	e004      	b.n	8000f9a <setSpeed_M3+0x4e>

        default:
            errorOccur(2, 3);
 8000f90:	2103      	movs	r1, #3
 8000f92:	2002      	movs	r0, #2
 8000f94:	f7ff fe8c 	bl	8000cb0 <errorOccur>
            break;
 8000f98:	bf00      	nop
    }
}
 8000f9a:	bf00      	nop
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40010400 	.word	0x40010400
 8000fa8:	40001800 	.word	0x40001800
 8000fac:	20000468 	.word	0x20000468

08000fb0 <setSpeed>:


void setSpeed(uint16_t motorNum,uint16_t ctrl){
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	460a      	mov	r2, r1
 8000fba:	80fb      	strh	r3, [r7, #6]
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	80bb      	strh	r3, [r7, #4]
	if(motorNum == 1) setSpeed_M1(ctrl);
 8000fc0:	88fb      	ldrh	r3, [r7, #6]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d104      	bne.n	8000fd0 <setSpeed+0x20>
 8000fc6:	88bb      	ldrh	r3, [r7, #4]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff ff5b 	bl	8000e84 <setSpeed_M1>
	else if(motorNum == 2) setSpeed_M2(ctrl);
	else if(motorNum == 3) setSpeed_M3(ctrl);
}
 8000fce:	e00e      	b.n	8000fee <setSpeed+0x3e>
	else if(motorNum == 2) setSpeed_M2(ctrl);
 8000fd0:	88fb      	ldrh	r3, [r7, #6]
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d104      	bne.n	8000fe0 <setSpeed+0x30>
 8000fd6:	88bb      	ldrh	r3, [r7, #4]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff ff85 	bl	8000ee8 <setSpeed_M2>
}
 8000fde:	e006      	b.n	8000fee <setSpeed+0x3e>
	else if(motorNum == 3) setSpeed_M3(ctrl);
 8000fe0:	88fb      	ldrh	r3, [r7, #6]
 8000fe2:	2b03      	cmp	r3, #3
 8000fe4:	d103      	bne.n	8000fee <setSpeed+0x3e>
 8000fe6:	88bb      	ldrh	r3, [r7, #4]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff ffaf 	bl	8000f4c <setSpeed_M3>
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
	...

08000ff8 <Dac2_Set_Vol>:

void Dac2_Set_Vol(uint16_t vol)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	80fb      	strh	r3, [r7, #6]
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, vol);
 8001002:	88fb      	ldrh	r3, [r7, #6]
 8001004:	2200      	movs	r2, #0
 8001006:	2110      	movs	r1, #16
 8001008:	4805      	ldr	r0, [pc, #20]	; (8001020 <Dac2_Set_Vol+0x28>)
 800100a:	f002 faea 	bl	80035e2 <HAL_DAC_SetValue>
	HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 800100e:	2110      	movs	r1, #16
 8001010:	4803      	ldr	r0, [pc, #12]	; (8001020 <Dac2_Set_Vol+0x28>)
 8001012:	f002 fa3a 	bl	800348a <HAL_DAC_Start>
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	200000c4 	.word	0x200000c4
 8001024:	00000000 	.word	0x00000000

08001028 <PID_Cal>:


short PID_Cal(short speed,short *error)
{
 8001028:	b5b0      	push	{r4, r5, r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	6039      	str	r1, [r7, #0]
 8001032:	80fb      	strh	r3, [r7, #6]
	short Error = motor[curMotorNum].target - speed;
 8001034:	4b40      	ldr	r3, [pc, #256]	; (8001138 <PID_Cal+0x110>)
 8001036:	881b      	ldrh	r3, [r3, #0]
 8001038:	461a      	mov	r2, r3
 800103a:	4b40      	ldr	r3, [pc, #256]	; (800113c <PID_Cal+0x114>)
 800103c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8001040:	b29a      	uxth	r2, r3
 8001042:	88fb      	ldrh	r3, [r7, #6]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	b29b      	uxth	r3, r3
 8001048:	81fb      	strh	r3, [r7, #14]
	static short Error_last = 0,Error_prev = 0;
	short pwm_add = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	81bb      	strh	r3, [r7, #12]
	*error = Error;
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	89fa      	ldrh	r2, [r7, #14]
 8001052:	801a      	strh	r2, [r3, #0]
//	pwm_add = kp*(Error - Error_last);
	pwm_add = kp*(Error - Error_last) + ki*Error + kd*(Error-2.0f*Error_last+Error_prev);
 8001054:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001058:	4a39      	ldr	r2, [pc, #228]	; (8001140 <PID_Cal+0x118>)
 800105a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800105e:	1a9b      	subs	r3, r3, r2
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fba1 	bl	80007a8 <__aeabi_i2d>
 8001066:	a32e      	add	r3, pc, #184	; (adr r3, 8001120 <PID_Cal+0xf8>)
 8001068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106c:	f7ff f920 	bl	80002b0 <__aeabi_dmul>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	4614      	mov	r4, r2
 8001076:	461d      	mov	r5, r3
 8001078:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff fb93 	bl	80007a8 <__aeabi_i2d>
 8001082:	a329      	add	r3, pc, #164	; (adr r3, 8001128 <PID_Cal+0x100>)
 8001084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001088:	f7ff f912 	bl	80002b0 <__aeabi_dmul>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	4620      	mov	r0, r4
 8001092:	4629      	mov	r1, r5
 8001094:	f7ff fa3c 	bl	8000510 <__adddf3>
 8001098:	4602      	mov	r2, r0
 800109a:	460b      	mov	r3, r1
 800109c:	4614      	mov	r4, r2
 800109e:	461d      	mov	r5, r3
 80010a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010a4:	ee07 3a90 	vmov	s15, r3
 80010a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010ac:	4b24      	ldr	r3, [pc, #144]	; (8001140 <PID_Cal+0x118>)
 80010ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010b2:	ee07 3a90 	vmov	s15, r3
 80010b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80010be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010c2:	4b20      	ldr	r3, [pc, #128]	; (8001144 <PID_Cal+0x11c>)
 80010c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010c8:	ee07 3a90 	vmov	s15, r3
 80010cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010d4:	ee17 0a90 	vmov	r0, s15
 80010d8:	f7ff fb78 	bl	80007cc <__aeabi_f2d>
 80010dc:	a314      	add	r3, pc, #80	; (adr r3, 8001130 <PID_Cal+0x108>)
 80010de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e2:	f7ff f8e5 	bl	80002b0 <__aeabi_dmul>
 80010e6:	4602      	mov	r2, r0
 80010e8:	460b      	mov	r3, r1
 80010ea:	4620      	mov	r0, r4
 80010ec:	4629      	mov	r1, r5
 80010ee:	f7ff fa0f 	bl	8000510 <__adddf3>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	4610      	mov	r0, r2
 80010f8:	4619      	mov	r1, r3
 80010fa:	f7ff fbbf 	bl	800087c <__aeabi_d2iz>
 80010fe:	4603      	mov	r3, r0
 8001100:	81bb      	strh	r3, [r7, #12]

	Error_prev = Error_last;
 8001102:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <PID_Cal+0x118>)
 8001104:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001108:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <PID_Cal+0x11c>)
 800110a:	801a      	strh	r2, [r3, #0]
	Error_last = Error;
 800110c:	4a0c      	ldr	r2, [pc, #48]	; (8001140 <PID_Cal+0x118>)
 800110e:	89fb      	ldrh	r3, [r7, #14]
 8001110:	8013      	strh	r3, [r2, #0]

	return pwm_add;
 8001112:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
}
 8001116:	4618      	mov	r0, r3
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bdb0      	pop	{r4, r5, r7, pc}
 800111e:	bf00      	nop
 8001120:	b851eb85 	.word	0xb851eb85
 8001124:	3feb851e 	.word	0x3feb851e
 8001128:	bc6a7efa 	.word	0xbc6a7efa
 800112c:	3f889374 	.word	0x3f889374
 8001130:	47ae147b 	.word	0x47ae147b
 8001134:	3f747ae1 	.word	0x3f747ae1
 8001138:	20000464 	.word	0x20000464
 800113c:	20000468 	.word	0x20000468
 8001140:	20000498 	.word	0x20000498
 8001144:	2000049a 	.word	0x2000049a

08001148 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001148:	b590      	push	{r4, r7, lr}
 800114a:	b09f      	sub	sp, #124	; 0x7c
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char uart_buf[100];
	int uart_buf_len;
	uint16_t idx = 0;
 800114e:	2300      	movs	r3, #0
 8001150:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	uint16_t d = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800115a:	f001 fbe5 	bl	8002928 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800115e:	f000 f945 	bl	80013ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001162:	f000 fded 	bl	8001d40 <MX_GPIO_Init>
  MX_DMA_Init();
 8001166:	f000 fdc3 	bl	8001cf0 <MX_DMA_Init>
  MX_TIM6_Init();
 800116a:	f000 fc49 	bl	8001a00 <MX_TIM6_Init>
  MX_TIM14_Init();
 800116e:	f000 fd47 	bl	8001c00 <MX_TIM14_Init>
  MX_TIM2_Init();
 8001172:	f000 faef 	bl	8001754 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001176:	f000 fd91 	bl	8001c9c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800117a:	f000 f997 	bl	80014ac <MX_ADC1_Init>
  MX_TIM1_Init();
 800117e:	f000 fa59 	bl	8001634 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001182:	f000 fb3b 	bl	80017fc <MX_TIM3_Init>
  MX_TIM4_Init();
 8001186:	f000 fb93 	bl	80018b0 <MX_TIM4_Init>
  MX_TIM5_Init();
 800118a:	f000 fbe5 	bl	8001958 <MX_TIM5_Init>
  MX_TIM8_Init();
 800118e:	f000 fc6d 	bl	8001a6c <MX_TIM8_Init>
  MX_TIM12_Init();
 8001192:	f000 fcef 	bl	8001b74 <MX_TIM12_Init>
  MX_DAC_Init();
 8001196:	f000 fa23 	bl	80015e0 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */
  uart_buf_len = sprintf(uart_buf, "Configuring...\r\n");
 800119a:	463b      	mov	r3, r7
 800119c:	4985      	ldr	r1, [pc, #532]	; (80013b4 <main+0x26c>)
 800119e:	4618      	mov	r0, r3
 80011a0:	f005 fd9c 	bl	8006cdc <siprintf>
 80011a4:	6678      	str	r0, [r7, #100]	; 0x64
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 80011a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80011a8:	b29a      	uxth	r2, r3
 80011aa:	4639      	mov	r1, r7
 80011ac:	2364      	movs	r3, #100	; 0x64
 80011ae:	4882      	ldr	r0, [pc, #520]	; (80013b8 <main+0x270>)
 80011b0:	f004 fdcd 	bl	8005d4e <HAL_UART_Transmit>
  initMotor();
 80011b4:	f7ff fd08 	bl	8000bc8 <initMotor>
  // Start timer
  HAL_TIM_Base_Start_IT(&htim6);
 80011b8:	4880      	ldr	r0, [pc, #512]	; (80013bc <main+0x274>)
 80011ba:	f003 fd75 	bl	8004ca8 <HAL_TIM_Base_Start_IT>
  uart_buf_len = sprintf(uart_buf, "Test Start!\r\n");
 80011be:	463b      	mov	r3, r7
 80011c0:	497f      	ldr	r1, [pc, #508]	; (80013c0 <main+0x278>)
 80011c2:	4618      	mov	r0, r3
 80011c4:	f005 fd8a 	bl	8006cdc <siprintf>
 80011c8:	6678      	str	r0, [r7, #100]	; 0x64
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 80011ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80011cc:	b29a      	uxth	r2, r3
 80011ce:	4639      	mov	r1, r7
 80011d0:	2364      	movs	r3, #100	; 0x64
 80011d2:	4879      	ldr	r0, [pc, #484]	; (80013b8 <main+0x270>)
 80011d4:	f004 fdbb 	bl	8005d4e <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(encoderRead_flag){
 80011d8:	4b7a      	ldr	r3, [pc, #488]	; (80013c4 <main+0x27c>)
 80011da:	881b      	ldrh	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d02f      	beq.n	8001240 <main+0xf8>
		  uart_buf_len = sprintf(uart_buf, "target speed from FSR %lu, direct %d \r\n",motor[curMotorNum].target,motor[curMotorNum].direc);
 80011e0:	4b79      	ldr	r3, [pc, #484]	; (80013c8 <main+0x280>)
 80011e2:	881b      	ldrh	r3, [r3, #0]
 80011e4:	461a      	mov	r2, r3
 80011e6:	4b79      	ldr	r3, [pc, #484]	; (80013cc <main+0x284>)
 80011e8:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 80011ec:	4b76      	ldr	r3, [pc, #472]	; (80013c8 <main+0x280>)
 80011ee:	881b      	ldrh	r3, [r3, #0]
 80011f0:	4976      	ldr	r1, [pc, #472]	; (80013cc <main+0x284>)
 80011f2:	00db      	lsls	r3, r3, #3
 80011f4:	440b      	add	r3, r1
 80011f6:	88db      	ldrh	r3, [r3, #6]
 80011f8:	4638      	mov	r0, r7
 80011fa:	4975      	ldr	r1, [pc, #468]	; (80013d0 <main+0x288>)
 80011fc:	f005 fd6e 	bl	8006cdc <siprintf>
 8001200:	6678      	str	r0, [r7, #100]	; 0x64
		  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 8001202:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001204:	b29a      	uxth	r2, r3
 8001206:	4639      	mov	r1, r7
 8001208:	2364      	movs	r3, #100	; 0x64
 800120a:	486b      	ldr	r0, [pc, #428]	; (80013b8 <main+0x270>)
 800120c:	f004 fd9f 	bl	8005d4e <HAL_UART_Transmit>
		  uart_buf_len = sprintf(uart_buf, "actual speed = %d\r\n",motor[curMotorNum].speed);
 8001210:	4b6d      	ldr	r3, [pc, #436]	; (80013c8 <main+0x280>)
 8001212:	881b      	ldrh	r3, [r3, #0]
 8001214:	4a6d      	ldr	r2, [pc, #436]	; (80013cc <main+0x284>)
 8001216:	00db      	lsls	r3, r3, #3
 8001218:	4413      	add	r3, r2
 800121a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800121e:	461a      	mov	r2, r3
 8001220:	463b      	mov	r3, r7
 8001222:	496c      	ldr	r1, [pc, #432]	; (80013d4 <main+0x28c>)
 8001224:	4618      	mov	r0, r3
 8001226:	f005 fd59 	bl	8006cdc <siprintf>
 800122a:	6678      	str	r0, [r7, #100]	; 0x64
		  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 800122c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800122e:	b29a      	uxth	r2, r3
 8001230:	4639      	mov	r1, r7
 8001232:	2364      	movs	r3, #100	; 0x64
 8001234:	4860      	ldr	r0, [pc, #384]	; (80013b8 <main+0x270>)
 8001236:	f004 fd8a 	bl	8005d4e <HAL_UART_Transmit>
		  encoderRead_flag = 0;
 800123a:	4b62      	ldr	r3, [pc, #392]	; (80013c4 <main+0x27c>)
 800123c:	2200      	movs	r2, #0
 800123e:	801a      	strh	r2, [r3, #0]
	  }
	  readFSRVoltage();
 8001240:	f7ff fdf2 	bl	8000e28 <readFSRVoltage>

	  if(curMotorNum == 0)	// Stationary state
 8001244:	4b60      	ldr	r3, [pc, #384]	; (80013c8 <main+0x280>)
 8001246:	881b      	ldrh	r3, [r3, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d135      	bne.n	80012b8 <main+0x170>
	  {
		  for(int i = 0; i < 6; i++){
 800124c:	2300      	movs	r3, #0
 800124e:	673b      	str	r3, [r7, #112]	; 0x70
 8001250:	e02f      	b.n	80012b2 <main+0x16a>
			  if(FSRValue[i] >= FSRThreshold){
 8001252:	4a61      	ldr	r2, [pc, #388]	; (80013d8 <main+0x290>)
 8001254:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001256:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800125a:	4b60      	ldr	r3, [pc, #384]	; (80013dc <main+0x294>)
 800125c:	881b      	ldrh	r3, [r3, #0]
 800125e:	429a      	cmp	r2, r3
 8001260:	d324      	bcc.n	80012ac <main+0x164>
				  idx = i;
 8001262:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001264:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
				  d = (i%2)? 1 : 2;	// mod=1(1,3,5) for CW(direc code is 1); mod=0(0,2,4) for CCW(direc code is 2)
 8001268:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <main+0x12e>
 8001272:	2301      	movs	r3, #1
 8001274:	e000      	b.n	8001278 <main+0x130>
 8001276:	2302      	movs	r3, #2
 8001278:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
				  curMotorNum = (idx + 2) / 2; // 0&1 for motor1, 2&3 for motor2, 4&5 for motor3
 800127c:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001280:	3302      	adds	r3, #2
 8001282:	0fda      	lsrs	r2, r3, #31
 8001284:	4413      	add	r3, r2
 8001286:	105b      	asrs	r3, r3, #1
 8001288:	b29a      	uxth	r2, r3
 800128a:	4b4f      	ldr	r3, [pc, #316]	; (80013c8 <main+0x280>)
 800128c:	801a      	strh	r2, [r3, #0]
				  setSpeed(curMotorNum,RESET);
 800128e:	4b4e      	ldr	r3, [pc, #312]	; (80013c8 <main+0x280>)
 8001290:	881b      	ldrh	r3, [r3, #0]
 8001292:	2100      	movs	r1, #0
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff fe8b 	bl	8000fb0 <setSpeed>
				  motor[curMotorNum].direc = d;
 800129a:	4b4b      	ldr	r3, [pc, #300]	; (80013c8 <main+0x280>)
 800129c:	881b      	ldrh	r3, [r3, #0]
 800129e:	4a4b      	ldr	r2, [pc, #300]	; (80013cc <main+0x284>)
 80012a0:	00db      	lsls	r3, r3, #3
 80012a2:	4413      	add	r3, r2
 80012a4:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 80012a8:	80da      	strh	r2, [r3, #6]
				  break;
 80012aa:	e005      	b.n	80012b8 <main+0x170>
		  for(int i = 0; i < 6; i++){
 80012ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80012ae:	3301      	adds	r3, #1
 80012b0:	673b      	str	r3, [r7, #112]	; 0x70
 80012b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80012b4:	2b05      	cmp	r3, #5
 80012b6:	ddcc      	ble.n	8001252 <main+0x10a>
			  }
		  }
	  }
	  if(curMotorNum != 0) // motor{curMotorNum} functioning
 80012b8:	4b43      	ldr	r3, [pc, #268]	; (80013c8 <main+0x280>)
 80012ba:	881b      	ldrh	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d049      	beq.n	8001354 <main+0x20c>
	  {
		  if(FSRValue[idx] >= FSRThreshold){
 80012c0:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80012c4:	4a44      	ldr	r2, [pc, #272]	; (80013d8 <main+0x290>)
 80012c6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80012ca:	4b44      	ldr	r3, [pc, #272]	; (80013dc <main+0x294>)
 80012cc:	881b      	ldrh	r3, [r3, #0]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d329      	bcc.n	8001326 <main+0x1de>
			  motor[curMotorNum].target = voltage2speed(FSRValue[idx]);
 80012d2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80012d6:	4a40      	ldr	r2, [pc, #256]	; (80013d8 <main+0x290>)
 80012d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012dc:	461a      	mov	r2, r3
 80012de:	4b3a      	ldr	r3, [pc, #232]	; (80013c8 <main+0x280>)
 80012e0:	881b      	ldrh	r3, [r3, #0]
 80012e2:	461c      	mov	r4, r3
 80012e4:	4610      	mov	r0, r2
 80012e6:	f7ff fd1d 	bl	8000d24 <voltage2speed>
 80012ea:	4603      	mov	r3, r0
 80012ec:	4a37      	ldr	r2, [pc, #220]	; (80013cc <main+0x284>)
 80012ee:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
			  uart_buf_len = sprintf(uart_buf, "FSR voltage = %d change to speed = %d\r\n",FSRValue[idx],motor[curMotorNum].target);
 80012f2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80012f6:	4a38      	ldr	r2, [pc, #224]	; (80013d8 <main+0x290>)
 80012f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012fc:	4619      	mov	r1, r3
 80012fe:	4b32      	ldr	r3, [pc, #200]	; (80013c8 <main+0x280>)
 8001300:	881b      	ldrh	r3, [r3, #0]
 8001302:	461a      	mov	r2, r3
 8001304:	4b31      	ldr	r3, [pc, #196]	; (80013cc <main+0x284>)
 8001306:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800130a:	4638      	mov	r0, r7
 800130c:	460a      	mov	r2, r1
 800130e:	4934      	ldr	r1, [pc, #208]	; (80013e0 <main+0x298>)
 8001310:	f005 fce4 	bl	8006cdc <siprintf>
 8001314:	6678      	str	r0, [r7, #100]	; 0x64
			  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 8001316:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001318:	b29a      	uxth	r2, r3
 800131a:	4639      	mov	r1, r7
 800131c:	2364      	movs	r3, #100	; 0x64
 800131e:	4826      	ldr	r0, [pc, #152]	; (80013b8 <main+0x270>)
 8001320:	f004 fd15 	bl	8005d4e <HAL_UART_Transmit>
 8001324:	e016      	b.n	8001354 <main+0x20c>
		  }else{	// stop functioning
			  motor[curMotorNum].target = 0;
 8001326:	4b28      	ldr	r3, [pc, #160]	; (80013c8 <main+0x280>)
 8001328:	881b      	ldrh	r3, [r3, #0]
 800132a:	4619      	mov	r1, r3
 800132c:	4b27      	ldr	r3, [pc, #156]	; (80013cc <main+0x284>)
 800132e:	2200      	movs	r2, #0
 8001330:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
			  motor[curMotorNum].direc = 0;
 8001334:	4b24      	ldr	r3, [pc, #144]	; (80013c8 <main+0x280>)
 8001336:	881b      	ldrh	r3, [r3, #0]
 8001338:	4a24      	ldr	r2, [pc, #144]	; (80013cc <main+0x284>)
 800133a:	00db      	lsls	r3, r3, #3
 800133c:	4413      	add	r3, r2
 800133e:	2200      	movs	r2, #0
 8001340:	80da      	strh	r2, [r3, #6]
			  setSpeed(curMotorNum,RESET);
 8001342:	4b21      	ldr	r3, [pc, #132]	; (80013c8 <main+0x280>)
 8001344:	881b      	ldrh	r3, [r3, #0]
 8001346:	2100      	movs	r1, #0
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff fe31 	bl	8000fb0 <setSpeed>
			  curMotorNum = 0;
 800134e:	4b1e      	ldr	r3, [pc, #120]	; (80013c8 <main+0x280>)
 8001350:	2200      	movs	r2, #0
 8001352:	801a      	strh	r2, [r3, #0]
		  }

	  }
	  for(int FSRNum = 0; FSRNum < 6; FSRNum ++){
 8001354:	2300      	movs	r3, #0
 8001356:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001358:	e013      	b.n	8001382 <main+0x23a>
		  uart_buf_len = sprintf(uart_buf, "idx[%d] value[%d]\r\n",FSRNum,FSRValue[FSRNum]);
 800135a:	4a1f      	ldr	r2, [pc, #124]	; (80013d8 <main+0x290>)
 800135c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800135e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001362:	4638      	mov	r0, r7
 8001364:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001366:	491f      	ldr	r1, [pc, #124]	; (80013e4 <main+0x29c>)
 8001368:	f005 fcb8 	bl	8006cdc <siprintf>
 800136c:	6678      	str	r0, [r7, #100]	; 0x64
		  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 800136e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001370:	b29a      	uxth	r2, r3
 8001372:	4639      	mov	r1, r7
 8001374:	2364      	movs	r3, #100	; 0x64
 8001376:	4810      	ldr	r0, [pc, #64]	; (80013b8 <main+0x270>)
 8001378:	f004 fce9 	bl	8005d4e <HAL_UART_Transmit>
	  for(int FSRNum = 0; FSRNum < 6; FSRNum ++){
 800137c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800137e:	3301      	adds	r3, #1
 8001380:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001382:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001384:	2b05      	cmp	r3, #5
 8001386:	dde8      	ble.n	800135a <main+0x212>
	  }
	  uart_buf_len = sprintf(uart_buf, "CURRENT MOTOR IS [%d]\r\n",curMotorNum);
 8001388:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <main+0x280>)
 800138a:	881b      	ldrh	r3, [r3, #0]
 800138c:	461a      	mov	r2, r3
 800138e:	463b      	mov	r3, r7
 8001390:	4915      	ldr	r1, [pc, #84]	; (80013e8 <main+0x2a0>)
 8001392:	4618      	mov	r0, r3
 8001394:	f005 fca2 	bl	8006cdc <siprintf>
 8001398:	6678      	str	r0, [r7, #100]	; 0x64
	  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 800139a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800139c:	b29a      	uxth	r2, r3
 800139e:	4639      	mov	r1, r7
 80013a0:	2364      	movs	r3, #100	; 0x64
 80013a2:	4805      	ldr	r0, [pc, #20]	; (80013b8 <main+0x270>)
 80013a4:	f004 fcd3 	bl	8005d4e <HAL_UART_Transmit>
	  HAL_Delay(1000);
 80013a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013ac:	f001 fb2e 	bl	8002a0c <HAL_Delay>
	  if(encoderRead_flag){
 80013b0:	e712      	b.n	80011d8 <main+0x90>
 80013b2:	bf00      	nop
 80013b4:	08007680 	.word	0x08007680
 80013b8:	20000360 	.word	0x20000360
 80013bc:	20000240 	.word	0x20000240
 80013c0:	08007694 	.word	0x08007694
 80013c4:	20000466 	.word	0x20000466
 80013c8:	20000464 	.word	0x20000464
 80013cc:	20000468 	.word	0x20000468
 80013d0:	080076a4 	.word	0x080076a4
 80013d4:	080076cc 	.word	0x080076cc
 80013d8:	2000048c 	.word	0x2000048c
 80013dc:	20000000 	.word	0x20000000
 80013e0:	080076e0 	.word	0x080076e0
 80013e4:	08007708 	.word	0x08007708
 80013e8:	0800771c 	.word	0x0800771c

080013ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b094      	sub	sp, #80	; 0x50
 80013f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013f2:	f107 031c 	add.w	r3, r7, #28
 80013f6:	2234      	movs	r2, #52	; 0x34
 80013f8:	2100      	movs	r1, #0
 80013fa:	4618      	mov	r0, r3
 80013fc:	f005 fc8e 	bl	8006d1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001400:	f107 0308 	add.w	r3, r7, #8
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001410:	2300      	movs	r3, #0
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	4b23      	ldr	r3, [pc, #140]	; (80014a4 <SystemClock_Config+0xb8>)
 8001416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001418:	4a22      	ldr	r2, [pc, #136]	; (80014a4 <SystemClock_Config+0xb8>)
 800141a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800141e:	6413      	str	r3, [r2, #64]	; 0x40
 8001420:	4b20      	ldr	r3, [pc, #128]	; (80014a4 <SystemClock_Config+0xb8>)
 8001422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001424:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001428:	607b      	str	r3, [r7, #4]
 800142a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800142c:	2300      	movs	r3, #0
 800142e:	603b      	str	r3, [r7, #0]
 8001430:	4b1d      	ldr	r3, [pc, #116]	; (80014a8 <SystemClock_Config+0xbc>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001438:	4a1b      	ldr	r2, [pc, #108]	; (80014a8 <SystemClock_Config+0xbc>)
 800143a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800143e:	6013      	str	r3, [r2, #0]
 8001440:	4b19      	ldr	r3, [pc, #100]	; (80014a8 <SystemClock_Config+0xbc>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001448:	603b      	str	r3, [r7, #0]
 800144a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800144c:	2302      	movs	r3, #2
 800144e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001450:	2301      	movs	r3, #1
 8001452:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001454:	2310      	movs	r3, #16
 8001456:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001458:	2300      	movs	r3, #0
 800145a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800145c:	f107 031c 	add.w	r3, r7, #28
 8001460:	4618      	mov	r0, r3
 8001462:	f003 f933 	bl	80046cc <HAL_RCC_OscConfig>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800146c:	f000 fd64 	bl	8001f38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001470:	230f      	movs	r3, #15
 8001472:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001474:	2300      	movs	r3, #0
 8001476:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001478:	2300      	movs	r3, #0
 800147a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001480:	2300      	movs	r3, #0
 8001482:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001484:	f107 0308 	add.w	r3, r7, #8
 8001488:	2100      	movs	r1, #0
 800148a:	4618      	mov	r0, r3
 800148c:	f002 fe5a 	bl	8004144 <HAL_RCC_ClockConfig>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001496:	f000 fd4f 	bl	8001f38 <Error_Handler>
  }
}
 800149a:	bf00      	nop
 800149c:	3750      	adds	r7, #80	; 0x50
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40007000 	.word	0x40007000

080014ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014b2:	463b      	mov	r3, r7
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80014be:	4b45      	ldr	r3, [pc, #276]	; (80015d4 <MX_ADC1_Init+0x128>)
 80014c0:	4a45      	ldr	r2, [pc, #276]	; (80015d8 <MX_ADC1_Init+0x12c>)
 80014c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80014c4:	4b43      	ldr	r3, [pc, #268]	; (80015d4 <MX_ADC1_Init+0x128>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014ca:	4b42      	ldr	r3, [pc, #264]	; (80015d4 <MX_ADC1_Init+0x128>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80014d0:	4b40      	ldr	r3, [pc, #256]	; (80015d4 <MX_ADC1_Init+0x128>)
 80014d2:	2201      	movs	r2, #1
 80014d4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014d6:	4b3f      	ldr	r3, [pc, #252]	; (80015d4 <MX_ADC1_Init+0x128>)
 80014d8:	2200      	movs	r2, #0
 80014da:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 80014dc:	4b3d      	ldr	r3, [pc, #244]	; (80015d4 <MX_ADC1_Init+0x128>)
 80014de:	2201      	movs	r2, #1
 80014e0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 80014e4:	4b3b      	ldr	r3, [pc, #236]	; (80015d4 <MX_ADC1_Init+0x128>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014ea:	4b3a      	ldr	r3, [pc, #232]	; (80015d4 <MX_ADC1_Init+0x128>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014f0:	4b38      	ldr	r3, [pc, #224]	; (80015d4 <MX_ADC1_Init+0x128>)
 80014f2:	4a3a      	ldr	r2, [pc, #232]	; (80015dc <MX_ADC1_Init+0x130>)
 80014f4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014f6:	4b37      	ldr	r3, [pc, #220]	; (80015d4 <MX_ADC1_Init+0x128>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 80014fc:	4b35      	ldr	r3, [pc, #212]	; (80015d4 <MX_ADC1_Init+0x128>)
 80014fe:	2206      	movs	r2, #6
 8001500:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001502:	4b34      	ldr	r3, [pc, #208]	; (80015d4 <MX_ADC1_Init+0x128>)
 8001504:	2200      	movs	r2, #0
 8001506:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800150a:	4b32      	ldr	r3, [pc, #200]	; (80015d4 <MX_ADC1_Init+0x128>)
 800150c:	2201      	movs	r2, #1
 800150e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001510:	4830      	ldr	r0, [pc, #192]	; (80015d4 <MX_ADC1_Init+0x128>)
 8001512:	f001 fa9f 	bl	8002a54 <HAL_ADC_Init>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800151c:	f000 fd0c 	bl	8001f38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001520:	230f      	movs	r3, #15
 8001522:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001524:	2301      	movs	r3, #1
 8001526:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001528:	2300      	movs	r3, #0
 800152a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800152c:	463b      	mov	r3, r7
 800152e:	4619      	mov	r1, r3
 8001530:	4828      	ldr	r0, [pc, #160]	; (80015d4 <MX_ADC1_Init+0x128>)
 8001532:	f001 fc3d 	bl	8002db0 <HAL_ADC_ConfigChannel>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800153c:	f000 fcfc 	bl	8001f38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001540:	2309      	movs	r3, #9
 8001542:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001544:	2302      	movs	r3, #2
 8001546:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001548:	463b      	mov	r3, r7
 800154a:	4619      	mov	r1, r3
 800154c:	4821      	ldr	r0, [pc, #132]	; (80015d4 <MX_ADC1_Init+0x128>)
 800154e:	f001 fc2f 	bl	8002db0 <HAL_ADC_ConfigChannel>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001558:	f000 fcee 	bl	8001f38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800155c:	230e      	movs	r3, #14
 800155e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001560:	2303      	movs	r3, #3
 8001562:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001564:	463b      	mov	r3, r7
 8001566:	4619      	mov	r1, r3
 8001568:	481a      	ldr	r0, [pc, #104]	; (80015d4 <MX_ADC1_Init+0x128>)
 800156a:	f001 fc21 	bl	8002db0 <HAL_ADC_ConfigChannel>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8001574:	f000 fce0 	bl	8001f38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001578:	2304      	movs	r3, #4
 800157a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800157c:	2304      	movs	r3, #4
 800157e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001580:	463b      	mov	r3, r7
 8001582:	4619      	mov	r1, r3
 8001584:	4813      	ldr	r0, [pc, #76]	; (80015d4 <MX_ADC1_Init+0x128>)
 8001586:	f001 fc13 	bl	8002db0 <HAL_ADC_ConfigChannel>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8001590:	f000 fcd2 	bl	8001f38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001594:	230d      	movs	r3, #13
 8001596:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001598:	2305      	movs	r3, #5
 800159a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800159c:	463b      	mov	r3, r7
 800159e:	4619      	mov	r1, r3
 80015a0:	480c      	ldr	r0, [pc, #48]	; (80015d4 <MX_ADC1_Init+0x128>)
 80015a2:	f001 fc05 	bl	8002db0 <HAL_ADC_ConfigChannel>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 80015ac:	f000 fcc4 	bl	8001f38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80015b0:	230c      	movs	r3, #12
 80015b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80015b4:	2306      	movs	r3, #6
 80015b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015b8:	463b      	mov	r3, r7
 80015ba:	4619      	mov	r1, r3
 80015bc:	4805      	ldr	r0, [pc, #20]	; (80015d4 <MX_ADC1_Init+0x128>)
 80015be:	f001 fbf7 	bl	8002db0 <HAL_ADC_ConfigChannel>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 80015c8:	f000 fcb6 	bl	8001f38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015cc:	bf00      	nop
 80015ce:	3710      	adds	r7, #16
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	2000007c 	.word	0x2000007c
 80015d8:	40012000 	.word	0x40012000
 80015dc:	0f000001 	.word	0x0f000001

080015e0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80015e6:	463b      	mov	r3, r7
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80015ee:	4b0f      	ldr	r3, [pc, #60]	; (800162c <MX_DAC_Init+0x4c>)
 80015f0:	4a0f      	ldr	r2, [pc, #60]	; (8001630 <MX_DAC_Init+0x50>)
 80015f2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80015f4:	480d      	ldr	r0, [pc, #52]	; (800162c <MX_DAC_Init+0x4c>)
 80015f6:	f001 ff26 	bl	8003446 <HAL_DAC_Init>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001600:	f000 fc9a 	bl	8001f38 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001604:	2300      	movs	r3, #0
 8001606:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001608:	2302      	movs	r3, #2
 800160a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800160c:	463b      	mov	r3, r7
 800160e:	2210      	movs	r2, #16
 8001610:	4619      	mov	r1, r3
 8001612:	4806      	ldr	r0, [pc, #24]	; (800162c <MX_DAC_Init+0x4c>)
 8001614:	f002 f814 	bl	8003640 <HAL_DAC_ConfigChannel>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800161e:	f000 fc8b 	bl	8001f38 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	200000c4 	.word	0x200000c4
 8001630:	40007400 	.word	0x40007400

08001634 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b092      	sub	sp, #72	; 0x48
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800163a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001644:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]
 8001654:	615a      	str	r2, [r3, #20]
 8001656:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001658:	1d3b      	adds	r3, r7, #4
 800165a:	2220      	movs	r2, #32
 800165c:	2100      	movs	r1, #0
 800165e:	4618      	mov	r0, r3
 8001660:	f005 fb5c 	bl	8006d1c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001664:	4b39      	ldr	r3, [pc, #228]	; (800174c <MX_TIM1_Init+0x118>)
 8001666:	4a3a      	ldr	r2, [pc, #232]	; (8001750 <MX_TIM1_Init+0x11c>)
 8001668:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160-1;
 800166a:	4b38      	ldr	r3, [pc, #224]	; (800174c <MX_TIM1_Init+0x118>)
 800166c:	229f      	movs	r2, #159	; 0x9f
 800166e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001670:	4b36      	ldr	r3, [pc, #216]	; (800174c <MX_TIM1_Init+0x118>)
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8001676:	4b35      	ldr	r3, [pc, #212]	; (800174c <MX_TIM1_Init+0x118>)
 8001678:	f240 32e7 	movw	r2, #999	; 0x3e7
 800167c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800167e:	4b33      	ldr	r3, [pc, #204]	; (800174c <MX_TIM1_Init+0x118>)
 8001680:	2200      	movs	r2, #0
 8001682:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001684:	4b31      	ldr	r3, [pc, #196]	; (800174c <MX_TIM1_Init+0x118>)
 8001686:	2200      	movs	r2, #0
 8001688:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800168a:	4b30      	ldr	r3, [pc, #192]	; (800174c <MX_TIM1_Init+0x118>)
 800168c:	2280      	movs	r2, #128	; 0x80
 800168e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001690:	482e      	ldr	r0, [pc, #184]	; (800174c <MX_TIM1_Init+0x118>)
 8001692:	f003 fb79 	bl	8004d88 <HAL_TIM_PWM_Init>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800169c:	f000 fc4c 	bl	8001f38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a0:	2300      	movs	r3, #0
 80016a2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016a4:	2300      	movs	r3, #0
 80016a6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016ac:	4619      	mov	r1, r3
 80016ae:	4827      	ldr	r0, [pc, #156]	; (800174c <MX_TIM1_Init+0x118>)
 80016b0:	f004 fa1e 	bl	8005af0 <HAL_TIMEx_MasterConfigSynchronization>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80016ba:	f000 fc3d 	bl	8001f38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016be:	2360      	movs	r3, #96	; 0x60
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016c6:	2300      	movs	r3, #0
 80016c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016ca:	2300      	movs	r3, #0
 80016cc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016ce:	2300      	movs	r3, #0
 80016d0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016d2:	2300      	movs	r3, #0
 80016d4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016d6:	2300      	movs	r3, #0
 80016d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016de:	2200      	movs	r2, #0
 80016e0:	4619      	mov	r1, r3
 80016e2:	481a      	ldr	r0, [pc, #104]	; (800174c <MX_TIM1_Init+0x118>)
 80016e4:	f003 fea4 	bl	8005430 <HAL_TIM_PWM_ConfigChannel>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80016ee:	f000 fc23 	bl	8001f38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016f6:	2204      	movs	r2, #4
 80016f8:	4619      	mov	r1, r3
 80016fa:	4814      	ldr	r0, [pc, #80]	; (800174c <MX_TIM1_Init+0x118>)
 80016fc:	f003 fe98 	bl	8005430 <HAL_TIM_PWM_ConfigChannel>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001706:	f000 fc17 	bl	8001f38 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800170a:	2300      	movs	r3, #0
 800170c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800170e:	2300      	movs	r3, #0
 8001710:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001712:	2300      	movs	r3, #0
 8001714:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001716:	2300      	movs	r3, #0
 8001718:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800171a:	2300      	movs	r3, #0
 800171c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800171e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001722:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001724:	2300      	movs	r3, #0
 8001726:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001728:	1d3b      	adds	r3, r7, #4
 800172a:	4619      	mov	r1, r3
 800172c:	4807      	ldr	r0, [pc, #28]	; (800174c <MX_TIM1_Init+0x118>)
 800172e:	f004 fa5b 	bl	8005be8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001738:	f000 fbfe 	bl	8001f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800173c:	4803      	ldr	r0, [pc, #12]	; (800174c <MX_TIM1_Init+0x118>)
 800173e:	f000 fe79 	bl	8002434 <HAL_TIM_MspPostInit>

}
 8001742:	bf00      	nop
 8001744:	3748      	adds	r7, #72	; 0x48
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	200000d8 	.word	0x200000d8
 8001750:	40010000 	.word	0x40010000

08001754 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08c      	sub	sp, #48	; 0x30
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800175a:	f107 030c 	add.w	r3, r7, #12
 800175e:	2224      	movs	r2, #36	; 0x24
 8001760:	2100      	movs	r1, #0
 8001762:	4618      	mov	r0, r3
 8001764:	f005 fada 	bl	8006d1c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001768:	1d3b      	adds	r3, r7, #4
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001770:	4b21      	ldr	r3, [pc, #132]	; (80017f8 <MX_TIM2_Init+0xa4>)
 8001772:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001776:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001778:	4b1f      	ldr	r3, [pc, #124]	; (80017f8 <MX_TIM2_Init+0xa4>)
 800177a:	2200      	movs	r2, #0
 800177c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800177e:	4b1e      	ldr	r3, [pc, #120]	; (80017f8 <MX_TIM2_Init+0xa4>)
 8001780:	2200      	movs	r2, #0
 8001782:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001784:	4b1c      	ldr	r3, [pc, #112]	; (80017f8 <MX_TIM2_Init+0xa4>)
 8001786:	f04f 32ff 	mov.w	r2, #4294967295
 800178a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800178c:	4b1a      	ldr	r3, [pc, #104]	; (80017f8 <MX_TIM2_Init+0xa4>)
 800178e:	2200      	movs	r2, #0
 8001790:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001792:	4b19      	ldr	r3, [pc, #100]	; (80017f8 <MX_TIM2_Init+0xa4>)
 8001794:	2280      	movs	r2, #128	; 0x80
 8001796:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001798:	2303      	movs	r3, #3
 800179a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800179c:	2300      	movs	r3, #0
 800179e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80017a0:	2301      	movs	r3, #1
 80017a2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80017a4:	2300      	movs	r3, #0
 80017a6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80017ac:	2300      	movs	r3, #0
 80017ae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80017b0:	2301      	movs	r3, #1
 80017b2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80017b4:	2300      	movs	r3, #0
 80017b6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80017b8:	2300      	movs	r3, #0
 80017ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80017bc:	f107 030c 	add.w	r3, r7, #12
 80017c0:	4619      	mov	r1, r3
 80017c2:	480d      	ldr	r0, [pc, #52]	; (80017f8 <MX_TIM2_Init+0xa4>)
 80017c4:	f003 fbf8 	bl	8004fb8 <HAL_TIM_Encoder_Init>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80017ce:	f000 fbb3 	bl	8001f38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017d2:	2300      	movs	r3, #0
 80017d4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017d6:	2300      	movs	r3, #0
 80017d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017da:	1d3b      	adds	r3, r7, #4
 80017dc:	4619      	mov	r1, r3
 80017de:	4806      	ldr	r0, [pc, #24]	; (80017f8 <MX_TIM2_Init+0xa4>)
 80017e0:	f004 f986 	bl	8005af0 <HAL_TIMEx_MasterConfigSynchronization>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80017ea:	f000 fba5 	bl	8001f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017ee:	bf00      	nop
 80017f0:	3730      	adds	r7, #48	; 0x30
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000120 	.word	0x20000120

080017fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08a      	sub	sp, #40	; 0x28
 8001800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001802:	f107 0320 	add.w	r3, r7, #32
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800180c:	1d3b      	adds	r3, r7, #4
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	605a      	str	r2, [r3, #4]
 8001814:	609a      	str	r2, [r3, #8]
 8001816:	60da      	str	r2, [r3, #12]
 8001818:	611a      	str	r2, [r3, #16]
 800181a:	615a      	str	r2, [r3, #20]
 800181c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800181e:	4b22      	ldr	r3, [pc, #136]	; (80018a8 <MX_TIM3_Init+0xac>)
 8001820:	4a22      	ldr	r2, [pc, #136]	; (80018ac <MX_TIM3_Init+0xb0>)
 8001822:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 8001824:	4b20      	ldr	r3, [pc, #128]	; (80018a8 <MX_TIM3_Init+0xac>)
 8001826:	220f      	movs	r2, #15
 8001828:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800182a:	4b1f      	ldr	r3, [pc, #124]	; (80018a8 <MX_TIM3_Init+0xac>)
 800182c:	2200      	movs	r2, #0
 800182e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001830:	4b1d      	ldr	r3, [pc, #116]	; (80018a8 <MX_TIM3_Init+0xac>)
 8001832:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001836:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001838:	4b1b      	ldr	r3, [pc, #108]	; (80018a8 <MX_TIM3_Init+0xac>)
 800183a:	2200      	movs	r2, #0
 800183c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800183e:	4b1a      	ldr	r3, [pc, #104]	; (80018a8 <MX_TIM3_Init+0xac>)
 8001840:	2280      	movs	r2, #128	; 0x80
 8001842:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001844:	4818      	ldr	r0, [pc, #96]	; (80018a8 <MX_TIM3_Init+0xac>)
 8001846:	f003 fa9f 	bl	8004d88 <HAL_TIM_PWM_Init>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001850:	f000 fb72 	bl	8001f38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001854:	2300      	movs	r3, #0
 8001856:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001858:	2300      	movs	r3, #0
 800185a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800185c:	f107 0320 	add.w	r3, r7, #32
 8001860:	4619      	mov	r1, r3
 8001862:	4811      	ldr	r0, [pc, #68]	; (80018a8 <MX_TIM3_Init+0xac>)
 8001864:	f004 f944 	bl	8005af0 <HAL_TIMEx_MasterConfigSynchronization>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800186e:	f000 fb63 	bl	8001f38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001872:	2360      	movs	r3, #96	; 0x60
 8001874:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001876:	2300      	movs	r3, #0
 8001878:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800187a:	2300      	movs	r3, #0
 800187c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800187e:	2300      	movs	r3, #0
 8001880:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001882:	1d3b      	adds	r3, r7, #4
 8001884:	2208      	movs	r2, #8
 8001886:	4619      	mov	r1, r3
 8001888:	4807      	ldr	r0, [pc, #28]	; (80018a8 <MX_TIM3_Init+0xac>)
 800188a:	f003 fdd1 	bl	8005430 <HAL_TIM_PWM_ConfigChannel>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001894:	f000 fb50 	bl	8001f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001898:	4803      	ldr	r0, [pc, #12]	; (80018a8 <MX_TIM3_Init+0xac>)
 800189a:	f000 fdcb 	bl	8002434 <HAL_TIM_MspPostInit>

}
 800189e:	bf00      	nop
 80018a0:	3728      	adds	r7, #40	; 0x28
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000168 	.word	0x20000168
 80018ac:	40000400 	.word	0x40000400

080018b0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b08c      	sub	sp, #48	; 0x30
 80018b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80018b6:	f107 030c 	add.w	r3, r7, #12
 80018ba:	2224      	movs	r2, #36	; 0x24
 80018bc:	2100      	movs	r1, #0
 80018be:	4618      	mov	r0, r3
 80018c0:	f005 fa2c 	bl	8006d1c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c4:	1d3b      	adds	r3, r7, #4
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80018cc:	4b20      	ldr	r3, [pc, #128]	; (8001950 <MX_TIM4_Init+0xa0>)
 80018ce:	4a21      	ldr	r2, [pc, #132]	; (8001954 <MX_TIM4_Init+0xa4>)
 80018d0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80018d2:	4b1f      	ldr	r3, [pc, #124]	; (8001950 <MX_TIM4_Init+0xa0>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018d8:	4b1d      	ldr	r3, [pc, #116]	; (8001950 <MX_TIM4_Init+0xa0>)
 80018da:	2200      	movs	r2, #0
 80018dc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80018de:	4b1c      	ldr	r3, [pc, #112]	; (8001950 <MX_TIM4_Init+0xa0>)
 80018e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018e4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018e6:	4b1a      	ldr	r3, [pc, #104]	; (8001950 <MX_TIM4_Init+0xa0>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018ec:	4b18      	ldr	r3, [pc, #96]	; (8001950 <MX_TIM4_Init+0xa0>)
 80018ee:	2280      	movs	r2, #128	; 0x80
 80018f0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80018f2:	2303      	movs	r3, #3
 80018f4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80018f6:	2300      	movs	r3, #0
 80018f8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80018fa:	2301      	movs	r3, #1
 80018fc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80018fe:	2300      	movs	r3, #0
 8001900:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001902:	2300      	movs	r3, #0
 8001904:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001906:	2300      	movs	r3, #0
 8001908:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800190a:	2301      	movs	r3, #1
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800190e:	2300      	movs	r3, #0
 8001910:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001912:	2300      	movs	r3, #0
 8001914:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001916:	f107 030c 	add.w	r3, r7, #12
 800191a:	4619      	mov	r1, r3
 800191c:	480c      	ldr	r0, [pc, #48]	; (8001950 <MX_TIM4_Init+0xa0>)
 800191e:	f003 fb4b 	bl	8004fb8 <HAL_TIM_Encoder_Init>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001928:	f000 fb06 	bl	8001f38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800192c:	2300      	movs	r3, #0
 800192e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001930:	2300      	movs	r3, #0
 8001932:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001934:	1d3b      	adds	r3, r7, #4
 8001936:	4619      	mov	r1, r3
 8001938:	4805      	ldr	r0, [pc, #20]	; (8001950 <MX_TIM4_Init+0xa0>)
 800193a:	f004 f8d9 	bl	8005af0 <HAL_TIMEx_MasterConfigSynchronization>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001944:	f000 faf8 	bl	8001f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001948:	bf00      	nop
 800194a:	3730      	adds	r7, #48	; 0x30
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	200001b0 	.word	0x200001b0
 8001954:	40000800 	.word	0x40000800

08001958 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b08c      	sub	sp, #48	; 0x30
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800195e:	f107 030c 	add.w	r3, r7, #12
 8001962:	2224      	movs	r2, #36	; 0x24
 8001964:	2100      	movs	r1, #0
 8001966:	4618      	mov	r0, r3
 8001968:	f005 f9d8 	bl	8006d1c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800196c:	1d3b      	adds	r3, r7, #4
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001974:	4b20      	ldr	r3, [pc, #128]	; (80019f8 <MX_TIM5_Init+0xa0>)
 8001976:	4a21      	ldr	r2, [pc, #132]	; (80019fc <MX_TIM5_Init+0xa4>)
 8001978:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800197a:	4b1f      	ldr	r3, [pc, #124]	; (80019f8 <MX_TIM5_Init+0xa0>)
 800197c:	2200      	movs	r2, #0
 800197e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001980:	4b1d      	ldr	r3, [pc, #116]	; (80019f8 <MX_TIM5_Init+0xa0>)
 8001982:	2200      	movs	r2, #0
 8001984:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001986:	4b1c      	ldr	r3, [pc, #112]	; (80019f8 <MX_TIM5_Init+0xa0>)
 8001988:	f04f 32ff 	mov.w	r2, #4294967295
 800198c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800198e:	4b1a      	ldr	r3, [pc, #104]	; (80019f8 <MX_TIM5_Init+0xa0>)
 8001990:	2200      	movs	r2, #0
 8001992:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001994:	4b18      	ldr	r3, [pc, #96]	; (80019f8 <MX_TIM5_Init+0xa0>)
 8001996:	2280      	movs	r2, #128	; 0x80
 8001998:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800199a:	2303      	movs	r3, #3
 800199c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800199e:	2300      	movs	r3, #0
 80019a0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80019a2:	2301      	movs	r3, #1
 80019a4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80019a6:	2300      	movs	r3, #0
 80019a8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80019aa:	2300      	movs	r3, #0
 80019ac:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80019ae:	2300      	movs	r3, #0
 80019b0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80019b2:	2301      	movs	r3, #1
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80019b6:	2300      	movs	r3, #0
 80019b8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80019ba:	2300      	movs	r3, #0
 80019bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80019be:	f107 030c 	add.w	r3, r7, #12
 80019c2:	4619      	mov	r1, r3
 80019c4:	480c      	ldr	r0, [pc, #48]	; (80019f8 <MX_TIM5_Init+0xa0>)
 80019c6:	f003 faf7 	bl	8004fb8 <HAL_TIM_Encoder_Init>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80019d0:	f000 fab2 	bl	8001f38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019d4:	2300      	movs	r3, #0
 80019d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019d8:	2300      	movs	r3, #0
 80019da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80019dc:	1d3b      	adds	r3, r7, #4
 80019de:	4619      	mov	r1, r3
 80019e0:	4805      	ldr	r0, [pc, #20]	; (80019f8 <MX_TIM5_Init+0xa0>)
 80019e2:	f004 f885 	bl	8005af0 <HAL_TIMEx_MasterConfigSynchronization>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 80019ec:	f000 faa4 	bl	8001f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80019f0:	bf00      	nop
 80019f2:	3730      	adds	r7, #48	; 0x30
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	200001f8 	.word	0x200001f8
 80019fc:	40000c00 	.word	0x40000c00

08001a00 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a06:	463b      	mov	r3, r7
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001a0e:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <MX_TIM6_Init+0x64>)
 8001a10:	4a15      	ldr	r2, [pc, #84]	; (8001a68 <MX_TIM6_Init+0x68>)
 8001a12:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 160-1;
 8001a14:	4b13      	ldr	r3, [pc, #76]	; (8001a64 <MX_TIM6_Init+0x64>)
 8001a16:	229f      	movs	r2, #159	; 0x9f
 8001a18:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a1a:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <MX_TIM6_Init+0x64>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8001a20:	4b10      	ldr	r3, [pc, #64]	; (8001a64 <MX_TIM6_Init+0x64>)
 8001a22:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a26:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a28:	4b0e      	ldr	r3, [pc, #56]	; (8001a64 <MX_TIM6_Init+0x64>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001a2e:	480d      	ldr	r0, [pc, #52]	; (8001a64 <MX_TIM6_Init+0x64>)
 8001a30:	f003 f8ea 	bl	8004c08 <HAL_TIM_Base_Init>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001a3a:	f000 fa7d 	bl	8001f38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a42:	2300      	movs	r3, #0
 8001a44:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001a46:	463b      	mov	r3, r7
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4806      	ldr	r0, [pc, #24]	; (8001a64 <MX_TIM6_Init+0x64>)
 8001a4c:	f004 f850 	bl	8005af0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001a56:	f000 fa6f 	bl	8001f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001a5a:	bf00      	nop
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20000240 	.word	0x20000240
 8001a68:	40001000 	.word	0x40001000

08001a6c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b092      	sub	sp, #72	; 0x48
 8001a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a72:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]
 8001a8a:	611a      	str	r2, [r3, #16]
 8001a8c:	615a      	str	r2, [r3, #20]
 8001a8e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a90:	1d3b      	adds	r3, r7, #4
 8001a92:	2220      	movs	r2, #32
 8001a94:	2100      	movs	r1, #0
 8001a96:	4618      	mov	r0, r3
 8001a98:	f005 f940 	bl	8006d1c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001a9c:	4b33      	ldr	r3, [pc, #204]	; (8001b6c <MX_TIM8_Init+0x100>)
 8001a9e:	4a34      	ldr	r2, [pc, #208]	; (8001b70 <MX_TIM8_Init+0x104>)
 8001aa0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 16-1;
 8001aa2:	4b32      	ldr	r3, [pc, #200]	; (8001b6c <MX_TIM8_Init+0x100>)
 8001aa4:	220f      	movs	r2, #15
 8001aa6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa8:	4b30      	ldr	r3, [pc, #192]	; (8001b6c <MX_TIM8_Init+0x100>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000-1;
 8001aae:	4b2f      	ldr	r3, [pc, #188]	; (8001b6c <MX_TIM8_Init+0x100>)
 8001ab0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ab4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ab6:	4b2d      	ldr	r3, [pc, #180]	; (8001b6c <MX_TIM8_Init+0x100>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001abc:	4b2b      	ldr	r3, [pc, #172]	; (8001b6c <MX_TIM8_Init+0x100>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ac2:	4b2a      	ldr	r3, [pc, #168]	; (8001b6c <MX_TIM8_Init+0x100>)
 8001ac4:	2280      	movs	r2, #128	; 0x80
 8001ac6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001ac8:	4828      	ldr	r0, [pc, #160]	; (8001b6c <MX_TIM8_Init+0x100>)
 8001aca:	f003 f95d 	bl	8004d88 <HAL_TIM_PWM_Init>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8001ad4:	f000 fa30 	bl	8001f38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001adc:	2300      	movs	r3, #0
 8001ade:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001ae0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4821      	ldr	r0, [pc, #132]	; (8001b6c <MX_TIM8_Init+0x100>)
 8001ae8:	f004 f802 	bl	8005af0 <HAL_TIMEx_MasterConfigSynchronization>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8001af2:	f000 fa21 	bl	8001f38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001af6:	2360      	movs	r3, #96	; 0x60
 8001af8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001afa:	2300      	movs	r3, #0
 8001afc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001afe:	2300      	movs	r3, #0
 8001b00:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b02:	2300      	movs	r3, #0
 8001b04:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b06:	2300      	movs	r3, #0
 8001b08:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b16:	2204      	movs	r2, #4
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4814      	ldr	r0, [pc, #80]	; (8001b6c <MX_TIM8_Init+0x100>)
 8001b1c:	f003 fc88 	bl	8005430 <HAL_TIM_PWM_ConfigChannel>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8001b26:	f000 fa07 	bl	8001f38 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b32:	2300      	movs	r3, #0
 8001b34:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b36:	2300      	movs	r3, #0
 8001b38:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b42:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b44:	2300      	movs	r3, #0
 8001b46:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001b48:	1d3b      	adds	r3, r7, #4
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4807      	ldr	r0, [pc, #28]	; (8001b6c <MX_TIM8_Init+0x100>)
 8001b4e:	f004 f84b 	bl	8005be8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_TIM8_Init+0xf0>
  {
    Error_Handler();
 8001b58:	f000 f9ee 	bl	8001f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001b5c:	4803      	ldr	r0, [pc, #12]	; (8001b6c <MX_TIM8_Init+0x100>)
 8001b5e:	f000 fc69 	bl	8002434 <HAL_TIM_MspPostInit>

}
 8001b62:	bf00      	nop
 8001b64:	3748      	adds	r7, #72	; 0x48
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20000288 	.word	0x20000288
 8001b70:	40010400 	.word	0x40010400

08001b74 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b088      	sub	sp, #32
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b7a:	1d3b      	adds	r3, r7, #4
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]
 8001b86:	611a      	str	r2, [r3, #16]
 8001b88:	615a      	str	r2, [r3, #20]
 8001b8a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001b8c:	4b1a      	ldr	r3, [pc, #104]	; (8001bf8 <MX_TIM12_Init+0x84>)
 8001b8e:	4a1b      	ldr	r2, [pc, #108]	; (8001bfc <MX_TIM12_Init+0x88>)
 8001b90:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 16-1;
 8001b92:	4b19      	ldr	r3, [pc, #100]	; (8001bf8 <MX_TIM12_Init+0x84>)
 8001b94:	220f      	movs	r2, #15
 8001b96:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b98:	4b17      	ldr	r3, [pc, #92]	; (8001bf8 <MX_TIM12_Init+0x84>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1000-1;
 8001b9e:	4b16      	ldr	r3, [pc, #88]	; (8001bf8 <MX_TIM12_Init+0x84>)
 8001ba0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ba4:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ba6:	4b14      	ldr	r3, [pc, #80]	; (8001bf8 <MX_TIM12_Init+0x84>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bac:	4b12      	ldr	r3, [pc, #72]	; (8001bf8 <MX_TIM12_Init+0x84>)
 8001bae:	2280      	movs	r2, #128	; 0x80
 8001bb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001bb2:	4811      	ldr	r0, [pc, #68]	; (8001bf8 <MX_TIM12_Init+0x84>)
 8001bb4:	f003 f8e8 	bl	8004d88 <HAL_TIM_PWM_Init>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001bbe:	f000 f9bb 	bl	8001f38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bc2:	2360      	movs	r3, #96	; 0x60
 8001bc4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bd2:	1d3b      	adds	r3, r7, #4
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4807      	ldr	r0, [pc, #28]	; (8001bf8 <MX_TIM12_Init+0x84>)
 8001bda:	f003 fc29 	bl	8005430 <HAL_TIM_PWM_ConfigChannel>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001be4:	f000 f9a8 	bl	8001f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001be8:	4803      	ldr	r0, [pc, #12]	; (8001bf8 <MX_TIM12_Init+0x84>)
 8001bea:	f000 fc23 	bl	8002434 <HAL_TIM_MspPostInit>

}
 8001bee:	bf00      	nop
 8001bf0:	3720      	adds	r7, #32
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	200002d0 	.word	0x200002d0
 8001bfc:	40001800 	.word	0x40001800

08001c00 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b088      	sub	sp, #32
 8001c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c06:	1d3b      	adds	r3, r7, #4
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	605a      	str	r2, [r3, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
 8001c10:	60da      	str	r2, [r3, #12]
 8001c12:	611a      	str	r2, [r3, #16]
 8001c14:	615a      	str	r2, [r3, #20]
 8001c16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001c18:	4b1e      	ldr	r3, [pc, #120]	; (8001c94 <MX_TIM14_Init+0x94>)
 8001c1a:	4a1f      	ldr	r2, [pc, #124]	; (8001c98 <MX_TIM14_Init+0x98>)
 8001c1c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16-1;
 8001c1e:	4b1d      	ldr	r3, [pc, #116]	; (8001c94 <MX_TIM14_Init+0x94>)
 8001c20:	220f      	movs	r2, #15
 8001c22:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c24:	4b1b      	ldr	r3, [pc, #108]	; (8001c94 <MX_TIM14_Init+0x94>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000-1;
 8001c2a:	4b1a      	ldr	r3, [pc, #104]	; (8001c94 <MX_TIM14_Init+0x94>)
 8001c2c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c30:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c32:	4b18      	ldr	r3, [pc, #96]	; (8001c94 <MX_TIM14_Init+0x94>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c38:	4b16      	ldr	r3, [pc, #88]	; (8001c94 <MX_TIM14_Init+0x94>)
 8001c3a:	2280      	movs	r2, #128	; 0x80
 8001c3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001c3e:	4815      	ldr	r0, [pc, #84]	; (8001c94 <MX_TIM14_Init+0x94>)
 8001c40:	f002 ffe2 	bl	8004c08 <HAL_TIM_Base_Init>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8001c4a:	f000 f975 	bl	8001f38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8001c4e:	4811      	ldr	r0, [pc, #68]	; (8001c94 <MX_TIM14_Init+0x94>)
 8001c50:	f003 f89a 	bl	8004d88 <HAL_TIM_PWM_Init>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8001c5a:	f000 f96d 	bl	8001f38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c5e:	2360      	movs	r3, #96	; 0x60
 8001c60:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c62:	2300      	movs	r3, #0
 8001c64:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c66:	2300      	movs	r3, #0
 8001c68:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c6e:	1d3b      	adds	r3, r7, #4
 8001c70:	2200      	movs	r2, #0
 8001c72:	4619      	mov	r1, r3
 8001c74:	4807      	ldr	r0, [pc, #28]	; (8001c94 <MX_TIM14_Init+0x94>)
 8001c76:	f003 fbdb 	bl	8005430 <HAL_TIM_PWM_ConfigChannel>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8001c80:	f000 f95a 	bl	8001f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8001c84:	4803      	ldr	r0, [pc, #12]	; (8001c94 <MX_TIM14_Init+0x94>)
 8001c86:	f000 fbd5 	bl	8002434 <HAL_TIM_MspPostInit>

}
 8001c8a:	bf00      	nop
 8001c8c:	3720      	adds	r7, #32
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000318 	.word	0x20000318
 8001c98:	40002000 	.word	0x40002000

08001c9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ca0:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <MX_USART2_UART_Init+0x4c>)
 8001ca2:	4a12      	ldr	r2, [pc, #72]	; (8001cec <MX_USART2_UART_Init+0x50>)
 8001ca4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ca6:	4b10      	ldr	r3, [pc, #64]	; (8001ce8 <MX_USART2_UART_Init+0x4c>)
 8001ca8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cae:	4b0e      	ldr	r3, [pc, #56]	; (8001ce8 <MX_USART2_UART_Init+0x4c>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <MX_USART2_UART_Init+0x4c>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cba:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <MX_USART2_UART_Init+0x4c>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cc0:	4b09      	ldr	r3, [pc, #36]	; (8001ce8 <MX_USART2_UART_Init+0x4c>)
 8001cc2:	220c      	movs	r2, #12
 8001cc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cc6:	4b08      	ldr	r3, [pc, #32]	; (8001ce8 <MX_USART2_UART_Init+0x4c>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ccc:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <MX_USART2_UART_Init+0x4c>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cd2:	4805      	ldr	r0, [pc, #20]	; (8001ce8 <MX_USART2_UART_Init+0x4c>)
 8001cd4:	f003 ffee 	bl	8005cb4 <HAL_UART_Init>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001cde:	f000 f92b 	bl	8001f38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20000360 	.word	0x20000360
 8001cec:	40004400 	.word	0x40004400

08001cf0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	607b      	str	r3, [r7, #4]
 8001cfa:	4b10      	ldr	r3, [pc, #64]	; (8001d3c <MX_DMA_Init+0x4c>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	4a0f      	ldr	r2, [pc, #60]	; (8001d3c <MX_DMA_Init+0x4c>)
 8001d00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d04:	6313      	str	r3, [r2, #48]	; 0x30
 8001d06:	4b0d      	ldr	r3, [pc, #52]	; (8001d3c <MX_DMA_Init+0x4c>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d0e:	607b      	str	r3, [r7, #4]
 8001d10:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001d12:	2200      	movs	r2, #0
 8001d14:	2100      	movs	r1, #0
 8001d16:	2010      	movs	r0, #16
 8001d18:	f001 fb5f 	bl	80033da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001d1c:	2010      	movs	r0, #16
 8001d1e:	f001 fb78 	bl	8003412 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001d22:	2200      	movs	r2, #0
 8001d24:	2100      	movs	r1, #0
 8001d26:	2011      	movs	r0, #17
 8001d28:	f001 fb57 	bl	80033da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001d2c:	2011      	movs	r0, #17
 8001d2e:	f001 fb70 	bl	8003412 <HAL_NVIC_EnableIRQ>

}
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40023800 	.word	0x40023800

08001d40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b088      	sub	sp, #32
 8001d44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d46:	f107 030c 	add.w	r3, r7, #12
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	605a      	str	r2, [r3, #4]
 8001d50:	609a      	str	r2, [r3, #8]
 8001d52:	60da      	str	r2, [r3, #12]
 8001d54:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	60bb      	str	r3, [r7, #8]
 8001d5a:	4b21      	ldr	r3, [pc, #132]	; (8001de0 <MX_GPIO_Init+0xa0>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	4a20      	ldr	r2, [pc, #128]	; (8001de0 <MX_GPIO_Init+0xa0>)
 8001d60:	f043 0304 	orr.w	r3, r3, #4
 8001d64:	6313      	str	r3, [r2, #48]	; 0x30
 8001d66:	4b1e      	ldr	r3, [pc, #120]	; (8001de0 <MX_GPIO_Init+0xa0>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	f003 0304 	and.w	r3, r3, #4
 8001d6e:	60bb      	str	r3, [r7, #8]
 8001d70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	607b      	str	r3, [r7, #4]
 8001d76:	4b1a      	ldr	r3, [pc, #104]	; (8001de0 <MX_GPIO_Init+0xa0>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	4a19      	ldr	r2, [pc, #100]	; (8001de0 <MX_GPIO_Init+0xa0>)
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	6313      	str	r3, [r2, #48]	; 0x30
 8001d82:	4b17      	ldr	r3, [pc, #92]	; (8001de0 <MX_GPIO_Init+0xa0>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	607b      	str	r3, [r7, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	603b      	str	r3, [r7, #0]
 8001d92:	4b13      	ldr	r3, [pc, #76]	; (8001de0 <MX_GPIO_Init+0xa0>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	4a12      	ldr	r2, [pc, #72]	; (8001de0 <MX_GPIO_Init+0xa0>)
 8001d98:	f043 0302 	orr.w	r3, r3, #2
 8001d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9e:	4b10      	ldr	r3, [pc, #64]	; (8001de0 <MX_GPIO_Init+0xa0>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	603b      	str	r3, [r7, #0]
 8001da8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001daa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001db0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001db4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db6:	2300      	movs	r3, #0
 8001db8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001dba:	f107 030c 	add.w	r3, r7, #12
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4808      	ldr	r0, [pc, #32]	; (8001de4 <MX_GPIO_Init+0xa4>)
 8001dc2:	f002 f813 	bl	8003dec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	2100      	movs	r1, #0
 8001dca:	2028      	movs	r0, #40	; 0x28
 8001dcc:	f001 fb05 	bl	80033da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001dd0:	2028      	movs	r0, #40	; 0x28
 8001dd2:	f001 fb1e 	bl	8003412 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001dd6:	bf00      	nop
 8001dd8:	3720      	adds	r7, #32
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	40023800 	.word	0x40023800
 8001de4:	40020800 	.word	0x40020800

08001de8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == B1_Pin) {	// blue button interrupt
 8001df2:	88fb      	ldrh	r3, [r7, #6]
 8001df4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001df8:	d107      	bne.n	8001e0a <HAL_GPIO_EXTI_Callback+0x22>
	PID_FLAG = 1 - PID_FLAG;
 8001dfa:	4b07      	ldr	r3, [pc, #28]	; (8001e18 <HAL_GPIO_EXTI_Callback+0x30>)
 8001dfc:	881b      	ldrh	r3, [r3, #0]
 8001dfe:	f1c3 0301 	rsb	r3, r3, #1
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	4b04      	ldr	r3, [pc, #16]	; (8001e18 <HAL_GPIO_EXTI_Callback+0x30>)
 8001e06:	801a      	strh	r2, [r3, #0]
  } else {
      __NOP();
  }
}
 8001e08:	e000      	b.n	8001e0c <HAL_GPIO_EXTI_Callback+0x24>
      __NOP();
 8001e0a:	bf00      	nop
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	20000488 	.word	0x20000488

08001e1c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
	short fspeed = 0;
 8001e24:	2300      	movs	r3, #0
 8001e26:	81fb      	strh	r3, [r7, #14]
	short ERROR;
	static uint8_t i = 0;
	if (htim == &htim6)	// basic clock, 100Hz(10ms)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a3d      	ldr	r2, [pc, #244]	; (8001f20 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d173      	bne.n	8001f18 <HAL_TIM_PeriodElapsedCallback+0xfc>
	{
		// motor 1 encoder value
		fspeed = (short)getSpeed(curMotorNum);	// get motor 1 current speed from motor1's encoder
 8001e30:	4b3c      	ldr	r3, [pc, #240]	; (8001f24 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001e32:	881b      	ldrh	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7fe ff89 	bl	8000d4c <getSpeed>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	81fb      	strh	r3, [r7, #14]
		Dac2_Set_Vol(abs(fspeed*6));	// for PID control visualization at PA5
 8001e3e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001e42:	4613      	mov	r3, r2
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	4413      	add	r3, r2
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	bfb8      	it	lt
 8001e4e:	425b      	neglt	r3, r3
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff f8d0 	bl	8000ff8 <Dac2_Set_Vol>
		if(PID_FLAG){
 8001e58:	4b33      	ldr	r3, [pc, #204]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001e5a:	881b      	ldrh	r3, [r3, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d04b      	beq.n	8001ef8 <HAL_TIM_PeriodElapsedCallback+0xdc>
			motor[curMotorNum].speed += PID_Cal(fspeed,&ERROR);	// PID configure new speed for motor 1
 8001e60:	f107 020c 	add.w	r2, r7, #12
 8001e64:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e68:	4611      	mov	r1, r2
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff f8dc 	bl	8001028 <PID_Cal>
 8001e70:	4603      	mov	r3, r0
 8001e72:	4619      	mov	r1, r3
 8001e74:	4b2b      	ldr	r3, [pc, #172]	; (8001f24 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001e76:	881b      	ldrh	r3, [r3, #0]
 8001e78:	4a2c      	ldr	r2, [pc, #176]	; (8001f2c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	4413      	add	r3, r2
 8001e7e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	b28b      	uxth	r3, r1
 8001e86:	4413      	add	r3, r2
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	4b26      	ldr	r3, [pc, #152]	; (8001f24 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001e8c:	881b      	ldrh	r3, [r3, #0]
 8001e8e:	b211      	sxth	r1, r2
 8001e90:	4a26      	ldr	r2, [pc, #152]	; (8001f2c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	4413      	add	r3, r2
 8001e96:	460a      	mov	r2, r1
 8001e98:	809a      	strh	r2, [r3, #4]

			if(motor[curMotorNum].speed > 1000) motor[curMotorNum].speed = 1000;
 8001e9a:	4b22      	ldr	r3, [pc, #136]	; (8001f24 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001e9c:	881b      	ldrh	r3, [r3, #0]
 8001e9e:	4a23      	ldr	r2, [pc, #140]	; (8001f2c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001ea0:	00db      	lsls	r3, r3, #3
 8001ea2:	4413      	add	r3, r2
 8001ea4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ea8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001eac:	dd08      	ble.n	8001ec0 <HAL_TIM_PeriodElapsedCallback+0xa4>
 8001eae:	4b1d      	ldr	r3, [pc, #116]	; (8001f24 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001eb0:	881b      	ldrh	r3, [r3, #0]
 8001eb2:	4a1e      	ldr	r2, [pc, #120]	; (8001f2c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001eb4:	00db      	lsls	r3, r3, #3
 8001eb6:	4413      	add	r3, r2
 8001eb8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ebc:	809a      	strh	r2, [r3, #4]
 8001ebe:	e00f      	b.n	8001ee0 <HAL_TIM_PeriodElapsedCallback+0xc4>
			else if(motor[curMotorNum].speed < 1 )motor[curMotorNum].speed = 1;
 8001ec0:	4b18      	ldr	r3, [pc, #96]	; (8001f24 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001ec2:	881b      	ldrh	r3, [r3, #0]
 8001ec4:	4a19      	ldr	r2, [pc, #100]	; (8001f2c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	4413      	add	r3, r2
 8001eca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	dc06      	bgt.n	8001ee0 <HAL_TIM_PeriodElapsedCallback+0xc4>
 8001ed2:	4b14      	ldr	r3, [pc, #80]	; (8001f24 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001ed4:	881b      	ldrh	r3, [r3, #0]
 8001ed6:	4a15      	ldr	r2, [pc, #84]	; (8001f2c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	4413      	add	r3, r2
 8001edc:	2201      	movs	r2, #1
 8001ede:	809a      	strh	r2, [r3, #4]
			setSpeed(curMotorNum,motor[curMotorNum].direc);
 8001ee0:	4b10      	ldr	r3, [pc, #64]	; (8001f24 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001ee2:	881a      	ldrh	r2, [r3, #0]
 8001ee4:	4b0f      	ldr	r3, [pc, #60]	; (8001f24 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001ee6:	881b      	ldrh	r3, [r3, #0]
 8001ee8:	4910      	ldr	r1, [pc, #64]	; (8001f2c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	440b      	add	r3, r1
 8001eee:	88db      	ldrh	r3, [r3, #6]
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4610      	mov	r0, r2
 8001ef4:	f7ff f85c 	bl	8000fb0 <setSpeed>
		}

		i++;
 8001ef8:	4b0d      	ldr	r3, [pc, #52]	; (8001f30 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	3301      	adds	r3, #1
 8001efe:	b2da      	uxtb	r2, r3
 8001f00:	4b0b      	ldr	r3, [pc, #44]	; (8001f30 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001f02:	701a      	strb	r2, [r3, #0]
		if(i >= 100)	// every 10 msec *100=1 sec
 8001f04:	4b0a      	ldr	r3, [pc, #40]	; (8001f30 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	2b63      	cmp	r3, #99	; 0x63
 8001f0a:	d905      	bls.n	8001f18 <HAL_TIM_PeriodElapsedCallback+0xfc>
		{
			i = 0;
 8001f0c:	4b08      	ldr	r3, [pc, #32]	; (8001f30 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	701a      	strb	r2, [r3, #0]
			encoderRead_flag = 1;
 8001f12:	4b08      	ldr	r3, [pc, #32]	; (8001f34 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001f14:	2201      	movs	r2, #1
 8001f16:	801a      	strh	r2, [r3, #0]
		// motor2 encoder counting
	}
	if(htim == &htim5){
		// motor3 encoder counting
	}
}
 8001f18:	bf00      	nop
 8001f1a:	3710      	adds	r7, #16
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	20000240 	.word	0x20000240
 8001f24:	20000464 	.word	0x20000464
 8001f28:	20000488 	.word	0x20000488
 8001f2c:	20000468 	.word	0x20000468
 8001f30:	2000049c 	.word	0x2000049c
 8001f34:	20000466 	.word	0x20000466

08001f38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f3c:	b672      	cpsid	i
}
 8001f3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f40:	e7fe      	b.n	8001f40 <Error_Handler+0x8>
	...

08001f44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	607b      	str	r3, [r7, #4]
 8001f4e:	4b10      	ldr	r3, [pc, #64]	; (8001f90 <HAL_MspInit+0x4c>)
 8001f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f52:	4a0f      	ldr	r2, [pc, #60]	; (8001f90 <HAL_MspInit+0x4c>)
 8001f54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f58:	6453      	str	r3, [r2, #68]	; 0x44
 8001f5a:	4b0d      	ldr	r3, [pc, #52]	; (8001f90 <HAL_MspInit+0x4c>)
 8001f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f62:	607b      	str	r3, [r7, #4]
 8001f64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	603b      	str	r3, [r7, #0]
 8001f6a:	4b09      	ldr	r3, [pc, #36]	; (8001f90 <HAL_MspInit+0x4c>)
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	4a08      	ldr	r2, [pc, #32]	; (8001f90 <HAL_MspInit+0x4c>)
 8001f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f74:	6413      	str	r3, [r2, #64]	; 0x40
 8001f76:	4b06      	ldr	r3, [pc, #24]	; (8001f90 <HAL_MspInit+0x4c>)
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7e:	603b      	str	r3, [r7, #0]
 8001f80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f82:	bf00      	nop
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	40023800 	.word	0x40023800

08001f94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b08c      	sub	sp, #48	; 0x30
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f9c:	f107 031c 	add.w	r3, r7, #28
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	605a      	str	r2, [r3, #4]
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	60da      	str	r2, [r3, #12]
 8001faa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a31      	ldr	r2, [pc, #196]	; (8002078 <HAL_ADC_MspInit+0xe4>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d15b      	bne.n	800206e <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61bb      	str	r3, [r7, #24]
 8001fba:	4b30      	ldr	r3, [pc, #192]	; (800207c <HAL_ADC_MspInit+0xe8>)
 8001fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbe:	4a2f      	ldr	r2, [pc, #188]	; (800207c <HAL_ADC_MspInit+0xe8>)
 8001fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fc6:	4b2d      	ldr	r3, [pc, #180]	; (800207c <HAL_ADC_MspInit+0xe8>)
 8001fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fce:	61bb      	str	r3, [r7, #24]
 8001fd0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	617b      	str	r3, [r7, #20]
 8001fd6:	4b29      	ldr	r3, [pc, #164]	; (800207c <HAL_ADC_MspInit+0xe8>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	4a28      	ldr	r2, [pc, #160]	; (800207c <HAL_ADC_MspInit+0xe8>)
 8001fdc:	f043 0304 	orr.w	r3, r3, #4
 8001fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe2:	4b26      	ldr	r3, [pc, #152]	; (800207c <HAL_ADC_MspInit+0xe8>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	f003 0304 	and.w	r3, r3, #4
 8001fea:	617b      	str	r3, [r7, #20]
 8001fec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fee:	2300      	movs	r3, #0
 8001ff0:	613b      	str	r3, [r7, #16]
 8001ff2:	4b22      	ldr	r3, [pc, #136]	; (800207c <HAL_ADC_MspInit+0xe8>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	4a21      	ldr	r2, [pc, #132]	; (800207c <HAL_ADC_MspInit+0xe8>)
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ffe:	4b1f      	ldr	r3, [pc, #124]	; (800207c <HAL_ADC_MspInit+0xe8>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	613b      	str	r3, [r7, #16]
 8002008:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	60fb      	str	r3, [r7, #12]
 800200e:	4b1b      	ldr	r3, [pc, #108]	; (800207c <HAL_ADC_MspInit+0xe8>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	4a1a      	ldr	r2, [pc, #104]	; (800207c <HAL_ADC_MspInit+0xe8>)
 8002014:	f043 0302 	orr.w	r3, r3, #2
 8002018:	6313      	str	r3, [r2, #48]	; 0x30
 800201a:	4b18      	ldr	r3, [pc, #96]	; (800207c <HAL_ADC_MspInit+0xe8>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002026:	233c      	movs	r3, #60	; 0x3c
 8002028:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800202a:	2303      	movs	r3, #3
 800202c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202e:	2300      	movs	r3, #0
 8002030:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002032:	f107 031c 	add.w	r3, r7, #28
 8002036:	4619      	mov	r1, r3
 8002038:	4811      	ldr	r0, [pc, #68]	; (8002080 <HAL_ADC_MspInit+0xec>)
 800203a:	f001 fed7 	bl	8003dec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800203e:	2310      	movs	r3, #16
 8002040:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002042:	2303      	movs	r3, #3
 8002044:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002046:	2300      	movs	r3, #0
 8002048:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800204a:	f107 031c 	add.w	r3, r7, #28
 800204e:	4619      	mov	r1, r3
 8002050:	480c      	ldr	r0, [pc, #48]	; (8002084 <HAL_ADC_MspInit+0xf0>)
 8002052:	f001 fecb 	bl	8003dec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002056:	2302      	movs	r3, #2
 8002058:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800205a:	2303      	movs	r3, #3
 800205c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205e:	2300      	movs	r3, #0
 8002060:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002062:	f107 031c 	add.w	r3, r7, #28
 8002066:	4619      	mov	r1, r3
 8002068:	4807      	ldr	r0, [pc, #28]	; (8002088 <HAL_ADC_MspInit+0xf4>)
 800206a:	f001 febf 	bl	8003dec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800206e:	bf00      	nop
 8002070:	3730      	adds	r7, #48	; 0x30
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	40012000 	.word	0x40012000
 800207c:	40023800 	.word	0x40023800
 8002080:	40020800 	.word	0x40020800
 8002084:	40020000 	.word	0x40020000
 8002088:	40020400 	.word	0x40020400

0800208c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b08a      	sub	sp, #40	; 0x28
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002094:	f107 0314 	add.w	r3, r7, #20
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	605a      	str	r2, [r3, #4]
 800209e:	609a      	str	r2, [r3, #8]
 80020a0:	60da      	str	r2, [r3, #12]
 80020a2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a1b      	ldr	r2, [pc, #108]	; (8002118 <HAL_DAC_MspInit+0x8c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d12f      	bne.n	800210e <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	613b      	str	r3, [r7, #16]
 80020b2:	4b1a      	ldr	r3, [pc, #104]	; (800211c <HAL_DAC_MspInit+0x90>)
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	4a19      	ldr	r2, [pc, #100]	; (800211c <HAL_DAC_MspInit+0x90>)
 80020b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80020bc:	6413      	str	r3, [r2, #64]	; 0x40
 80020be:	4b17      	ldr	r3, [pc, #92]	; (800211c <HAL_DAC_MspInit+0x90>)
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020c6:	613b      	str	r3, [r7, #16]
 80020c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	60fb      	str	r3, [r7, #12]
 80020ce:	4b13      	ldr	r3, [pc, #76]	; (800211c <HAL_DAC_MspInit+0x90>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	4a12      	ldr	r2, [pc, #72]	; (800211c <HAL_DAC_MspInit+0x90>)
 80020d4:	f043 0301 	orr.w	r3, r3, #1
 80020d8:	6313      	str	r3, [r2, #48]	; 0x30
 80020da:	4b10      	ldr	r3, [pc, #64]	; (800211c <HAL_DAC_MspInit+0x90>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	60fb      	str	r3, [r7, #12]
 80020e4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80020e6:	2320      	movs	r3, #32
 80020e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020ea:	2303      	movs	r3, #3
 80020ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ee:	2300      	movs	r3, #0
 80020f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f2:	f107 0314 	add.w	r3, r7, #20
 80020f6:	4619      	mov	r1, r3
 80020f8:	4809      	ldr	r0, [pc, #36]	; (8002120 <HAL_DAC_MspInit+0x94>)
 80020fa:	f001 fe77 	bl	8003dec <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 80020fe:	2200      	movs	r2, #0
 8002100:	2103      	movs	r1, #3
 8002102:	2036      	movs	r0, #54	; 0x36
 8002104:	f001 f969 	bl	80033da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002108:	2036      	movs	r0, #54	; 0x36
 800210a:	f001 f982 	bl	8003412 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800210e:	bf00      	nop
 8002110:	3728      	adds	r7, #40	; 0x28
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40007400 	.word	0x40007400
 800211c:	40023800 	.word	0x40023800
 8002120:	40020000 	.word	0x40020000

08002124 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002124:	b480      	push	{r7}
 8002126:	b087      	sub	sp, #28
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a29      	ldr	r2, [pc, #164]	; (80021d8 <HAL_TIM_PWM_MspInit+0xb4>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d10e      	bne.n	8002154 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	617b      	str	r3, [r7, #20]
 800213a:	4b28      	ldr	r3, [pc, #160]	; (80021dc <HAL_TIM_PWM_MspInit+0xb8>)
 800213c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213e:	4a27      	ldr	r2, [pc, #156]	; (80021dc <HAL_TIM_PWM_MspInit+0xb8>)
 8002140:	f043 0301 	orr.w	r3, r3, #1
 8002144:	6453      	str	r3, [r2, #68]	; 0x44
 8002146:	4b25      	ldr	r3, [pc, #148]	; (80021dc <HAL_TIM_PWM_MspInit+0xb8>)
 8002148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	617b      	str	r3, [r7, #20]
 8002150:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002152:	e03a      	b.n	80021ca <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM3)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a21      	ldr	r2, [pc, #132]	; (80021e0 <HAL_TIM_PWM_MspInit+0xbc>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d10e      	bne.n	800217c <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800215e:	2300      	movs	r3, #0
 8002160:	613b      	str	r3, [r7, #16]
 8002162:	4b1e      	ldr	r3, [pc, #120]	; (80021dc <HAL_TIM_PWM_MspInit+0xb8>)
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	4a1d      	ldr	r2, [pc, #116]	; (80021dc <HAL_TIM_PWM_MspInit+0xb8>)
 8002168:	f043 0302 	orr.w	r3, r3, #2
 800216c:	6413      	str	r3, [r2, #64]	; 0x40
 800216e:	4b1b      	ldr	r3, [pc, #108]	; (80021dc <HAL_TIM_PWM_MspInit+0xb8>)
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	613b      	str	r3, [r7, #16]
 8002178:	693b      	ldr	r3, [r7, #16]
}
 800217a:	e026      	b.n	80021ca <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM8)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a18      	ldr	r2, [pc, #96]	; (80021e4 <HAL_TIM_PWM_MspInit+0xc0>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d10e      	bne.n	80021a4 <HAL_TIM_PWM_MspInit+0x80>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	60fb      	str	r3, [r7, #12]
 800218a:	4b14      	ldr	r3, [pc, #80]	; (80021dc <HAL_TIM_PWM_MspInit+0xb8>)
 800218c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218e:	4a13      	ldr	r2, [pc, #76]	; (80021dc <HAL_TIM_PWM_MspInit+0xb8>)
 8002190:	f043 0302 	orr.w	r3, r3, #2
 8002194:	6453      	str	r3, [r2, #68]	; 0x44
 8002196:	4b11      	ldr	r3, [pc, #68]	; (80021dc <HAL_TIM_PWM_MspInit+0xb8>)
 8002198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	68fb      	ldr	r3, [r7, #12]
}
 80021a2:	e012      	b.n	80021ca <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM12)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a0f      	ldr	r2, [pc, #60]	; (80021e8 <HAL_TIM_PWM_MspInit+0xc4>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d10d      	bne.n	80021ca <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	60bb      	str	r3, [r7, #8]
 80021b2:	4b0a      	ldr	r3, [pc, #40]	; (80021dc <HAL_TIM_PWM_MspInit+0xb8>)
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	4a09      	ldr	r2, [pc, #36]	; (80021dc <HAL_TIM_PWM_MspInit+0xb8>)
 80021b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021bc:	6413      	str	r3, [r2, #64]	; 0x40
 80021be:	4b07      	ldr	r3, [pc, #28]	; (80021dc <HAL_TIM_PWM_MspInit+0xb8>)
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021c6:	60bb      	str	r3, [r7, #8]
 80021c8:	68bb      	ldr	r3, [r7, #8]
}
 80021ca:	bf00      	nop
 80021cc:	371c      	adds	r7, #28
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	40010000 	.word	0x40010000
 80021dc:	40023800 	.word	0x40023800
 80021e0:	40000400 	.word	0x40000400
 80021e4:	40010400 	.word	0x40010400
 80021e8:	40001800 	.word	0x40001800

080021ec <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b08e      	sub	sp, #56	; 0x38
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	605a      	str	r2, [r3, #4]
 80021fe:	609a      	str	r2, [r3, #8]
 8002200:	60da      	str	r2, [r3, #12]
 8002202:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800220c:	d153      	bne.n	80022b6 <HAL_TIM_Encoder_MspInit+0xca>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800220e:	2300      	movs	r3, #0
 8002210:	623b      	str	r3, [r7, #32]
 8002212:	4b64      	ldr	r3, [pc, #400]	; (80023a4 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	4a63      	ldr	r2, [pc, #396]	; (80023a4 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8002218:	f043 0301 	orr.w	r3, r3, #1
 800221c:	6413      	str	r3, [r2, #64]	; 0x40
 800221e:	4b61      	ldr	r3, [pc, #388]	; (80023a4 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	623b      	str	r3, [r7, #32]
 8002228:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800222a:	2300      	movs	r3, #0
 800222c:	61fb      	str	r3, [r7, #28]
 800222e:	4b5d      	ldr	r3, [pc, #372]	; (80023a4 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	4a5c      	ldr	r2, [pc, #368]	; (80023a4 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8002234:	f043 0301 	orr.w	r3, r3, #1
 8002238:	6313      	str	r3, [r2, #48]	; 0x30
 800223a:	4b5a      	ldr	r3, [pc, #360]	; (80023a4 <HAL_TIM_Encoder_MspInit+0x1b8>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	61fb      	str	r3, [r7, #28]
 8002244:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002246:	2300      	movs	r3, #0
 8002248:	61bb      	str	r3, [r7, #24]
 800224a:	4b56      	ldr	r3, [pc, #344]	; (80023a4 <HAL_TIM_Encoder_MspInit+0x1b8>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	4a55      	ldr	r2, [pc, #340]	; (80023a4 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8002250:	f043 0302 	orr.w	r3, r3, #2
 8002254:	6313      	str	r3, [r2, #48]	; 0x30
 8002256:	4b53      	ldr	r3, [pc, #332]	; (80023a4 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	61bb      	str	r3, [r7, #24]
 8002260:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = encoder1A_Pin;
 8002262:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002266:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002268:	2302      	movs	r3, #2
 800226a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226c:	2300      	movs	r3, #0
 800226e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002270:	2300      	movs	r3, #0
 8002272:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002274:	2301      	movs	r3, #1
 8002276:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(encoder1A_GPIO_Port, &GPIO_InitStruct);
 8002278:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800227c:	4619      	mov	r1, r3
 800227e:	484a      	ldr	r0, [pc, #296]	; (80023a8 <HAL_TIM_Encoder_MspInit+0x1bc>)
 8002280:	f001 fdb4 	bl	8003dec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = encoder1B_Pin;
 8002284:	2308      	movs	r3, #8
 8002286:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002288:	2302      	movs	r3, #2
 800228a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228c:	2300      	movs	r3, #0
 800228e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002290:	2300      	movs	r3, #0
 8002292:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002294:	2301      	movs	r3, #1
 8002296:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(encoder1B_GPIO_Port, &GPIO_InitStruct);
 8002298:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800229c:	4619      	mov	r1, r3
 800229e:	4843      	ldr	r0, [pc, #268]	; (80023ac <HAL_TIM_Encoder_MspInit+0x1c0>)
 80022a0:	f001 fda4 	bl	8003dec <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80022a4:	2200      	movs	r2, #0
 80022a6:	2101      	movs	r1, #1
 80022a8:	201c      	movs	r0, #28
 80022aa:	f001 f896 	bl	80033da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80022ae:	201c      	movs	r0, #28
 80022b0:	f001 f8af 	bl	8003412 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80022b4:	e072      	b.n	800239c <HAL_TIM_Encoder_MspInit+0x1b0>
  else if(htim_encoder->Instance==TIM4)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a3d      	ldr	r2, [pc, #244]	; (80023b0 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d134      	bne.n	800232a <HAL_TIM_Encoder_MspInit+0x13e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80022c0:	2300      	movs	r3, #0
 80022c2:	617b      	str	r3, [r7, #20]
 80022c4:	4b37      	ldr	r3, [pc, #220]	; (80023a4 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80022c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c8:	4a36      	ldr	r2, [pc, #216]	; (80023a4 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80022ca:	f043 0304 	orr.w	r3, r3, #4
 80022ce:	6413      	str	r3, [r2, #64]	; 0x40
 80022d0:	4b34      	ldr	r3, [pc, #208]	; (80023a4 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80022d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d4:	f003 0304 	and.w	r3, r3, #4
 80022d8:	617b      	str	r3, [r7, #20]
 80022da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022dc:	2300      	movs	r3, #0
 80022de:	613b      	str	r3, [r7, #16]
 80022e0:	4b30      	ldr	r3, [pc, #192]	; (80023a4 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80022e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e4:	4a2f      	ldr	r2, [pc, #188]	; (80023a4 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80022e6:	f043 0302 	orr.w	r3, r3, #2
 80022ea:	6313      	str	r3, [r2, #48]	; 0x30
 80022ec:	4b2d      	ldr	r3, [pc, #180]	; (80023a4 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80022ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	613b      	str	r3, [r7, #16]
 80022f6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = encoder2A_Pin|encoder2B_Pin;
 80022f8:	23c0      	movs	r3, #192	; 0xc0
 80022fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fc:	2302      	movs	r3, #2
 80022fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002300:	2300      	movs	r3, #0
 8002302:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002304:	2300      	movs	r3, #0
 8002306:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002308:	2302      	movs	r3, #2
 800230a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800230c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002310:	4619      	mov	r1, r3
 8002312:	4826      	ldr	r0, [pc, #152]	; (80023ac <HAL_TIM_Encoder_MspInit+0x1c0>)
 8002314:	f001 fd6a 	bl	8003dec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8002318:	2200      	movs	r2, #0
 800231a:	2101      	movs	r1, #1
 800231c:	201e      	movs	r0, #30
 800231e:	f001 f85c 	bl	80033da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002322:	201e      	movs	r0, #30
 8002324:	f001 f875 	bl	8003412 <HAL_NVIC_EnableIRQ>
}
 8002328:	e038      	b.n	800239c <HAL_TIM_Encoder_MspInit+0x1b0>
  else if(htim_encoder->Instance==TIM5)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a21      	ldr	r2, [pc, #132]	; (80023b4 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d133      	bne.n	800239c <HAL_TIM_Encoder_MspInit+0x1b0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002334:	2300      	movs	r3, #0
 8002336:	60fb      	str	r3, [r7, #12]
 8002338:	4b1a      	ldr	r3, [pc, #104]	; (80023a4 <HAL_TIM_Encoder_MspInit+0x1b8>)
 800233a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233c:	4a19      	ldr	r2, [pc, #100]	; (80023a4 <HAL_TIM_Encoder_MspInit+0x1b8>)
 800233e:	f043 0308 	orr.w	r3, r3, #8
 8002342:	6413      	str	r3, [r2, #64]	; 0x40
 8002344:	4b17      	ldr	r3, [pc, #92]	; (80023a4 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8002346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002348:	f003 0308 	and.w	r3, r3, #8
 800234c:	60fb      	str	r3, [r7, #12]
 800234e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002350:	2300      	movs	r3, #0
 8002352:	60bb      	str	r3, [r7, #8]
 8002354:	4b13      	ldr	r3, [pc, #76]	; (80023a4 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8002356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002358:	4a12      	ldr	r2, [pc, #72]	; (80023a4 <HAL_TIM_Encoder_MspInit+0x1b8>)
 800235a:	f043 0301 	orr.w	r3, r3, #1
 800235e:	6313      	str	r3, [r2, #48]	; 0x30
 8002360:	4b10      	ldr	r3, [pc, #64]	; (80023a4 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8002362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	60bb      	str	r3, [r7, #8]
 800236a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = encoder3A_Pin|encoder3B_Pin;
 800236c:	2303      	movs	r3, #3
 800236e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002370:	2302      	movs	r3, #2
 8002372:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002374:	2300      	movs	r3, #0
 8002376:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002378:	2300      	movs	r3, #0
 800237a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800237c:	2302      	movs	r3, #2
 800237e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002380:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002384:	4619      	mov	r1, r3
 8002386:	4808      	ldr	r0, [pc, #32]	; (80023a8 <HAL_TIM_Encoder_MspInit+0x1bc>)
 8002388:	f001 fd30 	bl	8003dec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 800238c:	2200      	movs	r2, #0
 800238e:	2101      	movs	r1, #1
 8002390:	2032      	movs	r0, #50	; 0x32
 8002392:	f001 f822 	bl	80033da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002396:	2032      	movs	r0, #50	; 0x32
 8002398:	f001 f83b 	bl	8003412 <HAL_NVIC_EnableIRQ>
}
 800239c:	bf00      	nop
 800239e:	3738      	adds	r7, #56	; 0x38
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40023800 	.word	0x40023800
 80023a8:	40020000 	.word	0x40020000
 80023ac:	40020400 	.word	0x40020400
 80023b0:	40000800 	.word	0x40000800
 80023b4:	40000c00 	.word	0x40000c00

080023b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a18      	ldr	r2, [pc, #96]	; (8002428 <HAL_TIM_Base_MspInit+0x70>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d116      	bne.n	80023f8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80023ca:	2300      	movs	r3, #0
 80023cc:	60fb      	str	r3, [r7, #12]
 80023ce:	4b17      	ldr	r3, [pc, #92]	; (800242c <HAL_TIM_Base_MspInit+0x74>)
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	4a16      	ldr	r2, [pc, #88]	; (800242c <HAL_TIM_Base_MspInit+0x74>)
 80023d4:	f043 0310 	orr.w	r3, r3, #16
 80023d8:	6413      	str	r3, [r2, #64]	; 0x40
 80023da:	4b14      	ldr	r3, [pc, #80]	; (800242c <HAL_TIM_Base_MspInit+0x74>)
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	f003 0310 	and.w	r3, r3, #16
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 80023e6:	2200      	movs	r2, #0
 80023e8:	2103      	movs	r1, #3
 80023ea:	2036      	movs	r0, #54	; 0x36
 80023ec:	f000 fff5 	bl	80033da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80023f0:	2036      	movs	r0, #54	; 0x36
 80023f2:	f001 f80e 	bl	8003412 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80023f6:	e012      	b.n	800241e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM14)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a0c      	ldr	r2, [pc, #48]	; (8002430 <HAL_TIM_Base_MspInit+0x78>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d10d      	bne.n	800241e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002402:	2300      	movs	r3, #0
 8002404:	60bb      	str	r3, [r7, #8]
 8002406:	4b09      	ldr	r3, [pc, #36]	; (800242c <HAL_TIM_Base_MspInit+0x74>)
 8002408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240a:	4a08      	ldr	r2, [pc, #32]	; (800242c <HAL_TIM_Base_MspInit+0x74>)
 800240c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002410:	6413      	str	r3, [r2, #64]	; 0x40
 8002412:	4b06      	ldr	r3, [pc, #24]	; (800242c <HAL_TIM_Base_MspInit+0x74>)
 8002414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800241a:	60bb      	str	r3, [r7, #8]
 800241c:	68bb      	ldr	r3, [r7, #8]
}
 800241e:	bf00      	nop
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40001000 	.word	0x40001000
 800242c:	40023800 	.word	0x40023800
 8002430:	40002000 	.word	0x40002000

08002434 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b08c      	sub	sp, #48	; 0x30
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800243c:	f107 031c 	add.w	r3, r7, #28
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	605a      	str	r2, [r3, #4]
 8002446:	609a      	str	r2, [r3, #8]
 8002448:	60da      	str	r2, [r3, #12]
 800244a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a5b      	ldr	r2, [pc, #364]	; (80025c0 <HAL_TIM_MspPostInit+0x18c>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d11f      	bne.n	8002496 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002456:	2300      	movs	r3, #0
 8002458:	61bb      	str	r3, [r7, #24]
 800245a:	4b5a      	ldr	r3, [pc, #360]	; (80025c4 <HAL_TIM_MspPostInit+0x190>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245e:	4a59      	ldr	r2, [pc, #356]	; (80025c4 <HAL_TIM_MspPostInit+0x190>)
 8002460:	f043 0301 	orr.w	r3, r3, #1
 8002464:	6313      	str	r3, [r2, #48]	; 0x30
 8002466:	4b57      	ldr	r3, [pc, #348]	; (80025c4 <HAL_TIM_MspPostInit+0x190>)
 8002468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	61bb      	str	r3, [r7, #24]
 8002470:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = motor1B_Pin|motor2A_Pin;
 8002472:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002476:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002478:	2302      	movs	r3, #2
 800247a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247c:	2300      	movs	r3, #0
 800247e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002480:	2300      	movs	r3, #0
 8002482:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002484:	2301      	movs	r3, #1
 8002486:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002488:	f107 031c 	add.w	r3, r7, #28
 800248c:	4619      	mov	r1, r3
 800248e:	484e      	ldr	r0, [pc, #312]	; (80025c8 <HAL_TIM_MspPostInit+0x194>)
 8002490:	f001 fcac 	bl	8003dec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8002494:	e08f      	b.n	80025b6 <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM3)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a4c      	ldr	r2, [pc, #304]	; (80025cc <HAL_TIM_MspPostInit+0x198>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d11e      	bne.n	80024de <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024a0:	2300      	movs	r3, #0
 80024a2:	617b      	str	r3, [r7, #20]
 80024a4:	4b47      	ldr	r3, [pc, #284]	; (80025c4 <HAL_TIM_MspPostInit+0x190>)
 80024a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a8:	4a46      	ldr	r2, [pc, #280]	; (80025c4 <HAL_TIM_MspPostInit+0x190>)
 80024aa:	f043 0302 	orr.w	r3, r3, #2
 80024ae:	6313      	str	r3, [r2, #48]	; 0x30
 80024b0:	4b44      	ldr	r3, [pc, #272]	; (80025c4 <HAL_TIM_MspPostInit+0x190>)
 80024b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	617b      	str	r3, [r7, #20]
 80024ba:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = motor2B_Pin;
 80024bc:	2301      	movs	r3, #1
 80024be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c0:	2302      	movs	r3, #2
 80024c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c4:	2300      	movs	r3, #0
 80024c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c8:	2300      	movs	r3, #0
 80024ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80024cc:	2302      	movs	r3, #2
 80024ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(motor2B_GPIO_Port, &GPIO_InitStruct);
 80024d0:	f107 031c 	add.w	r3, r7, #28
 80024d4:	4619      	mov	r1, r3
 80024d6:	483e      	ldr	r0, [pc, #248]	; (80025d0 <HAL_TIM_MspPostInit+0x19c>)
 80024d8:	f001 fc88 	bl	8003dec <HAL_GPIO_Init>
}
 80024dc:	e06b      	b.n	80025b6 <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM8)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a3c      	ldr	r2, [pc, #240]	; (80025d4 <HAL_TIM_MspPostInit+0x1a0>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d11e      	bne.n	8002526 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024e8:	2300      	movs	r3, #0
 80024ea:	613b      	str	r3, [r7, #16]
 80024ec:	4b35      	ldr	r3, [pc, #212]	; (80025c4 <HAL_TIM_MspPostInit+0x190>)
 80024ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f0:	4a34      	ldr	r2, [pc, #208]	; (80025c4 <HAL_TIM_MspPostInit+0x190>)
 80024f2:	f043 0304 	orr.w	r3, r3, #4
 80024f6:	6313      	str	r3, [r2, #48]	; 0x30
 80024f8:	4b32      	ldr	r3, [pc, #200]	; (80025c4 <HAL_TIM_MspPostInit+0x190>)
 80024fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fc:	f003 0304 	and.w	r3, r3, #4
 8002500:	613b      	str	r3, [r7, #16]
 8002502:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = motor3A_Pin;
 8002504:	2380      	movs	r3, #128	; 0x80
 8002506:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002508:	2302      	movs	r3, #2
 800250a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250c:	2300      	movs	r3, #0
 800250e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002510:	2300      	movs	r3, #0
 8002512:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002514:	2303      	movs	r3, #3
 8002516:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(motor3A_GPIO_Port, &GPIO_InitStruct);
 8002518:	f107 031c 	add.w	r3, r7, #28
 800251c:	4619      	mov	r1, r3
 800251e:	482e      	ldr	r0, [pc, #184]	; (80025d8 <HAL_TIM_MspPostInit+0x1a4>)
 8002520:	f001 fc64 	bl	8003dec <HAL_GPIO_Init>
}
 8002524:	e047      	b.n	80025b6 <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM12)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a2c      	ldr	r2, [pc, #176]	; (80025dc <HAL_TIM_MspPostInit+0x1a8>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d11f      	bne.n	8002570 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002530:	2300      	movs	r3, #0
 8002532:	60fb      	str	r3, [r7, #12]
 8002534:	4b23      	ldr	r3, [pc, #140]	; (80025c4 <HAL_TIM_MspPostInit+0x190>)
 8002536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002538:	4a22      	ldr	r2, [pc, #136]	; (80025c4 <HAL_TIM_MspPostInit+0x190>)
 800253a:	f043 0302 	orr.w	r3, r3, #2
 800253e:	6313      	str	r3, [r2, #48]	; 0x30
 8002540:	4b20      	ldr	r3, [pc, #128]	; (80025c4 <HAL_TIM_MspPostInit+0x190>)
 8002542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = motor3B_Pin;
 800254c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002550:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002552:	2302      	movs	r3, #2
 8002554:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002556:	2300      	movs	r3, #0
 8002558:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800255a:	2300      	movs	r3, #0
 800255c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800255e:	2309      	movs	r3, #9
 8002560:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(motor3B_GPIO_Port, &GPIO_InitStruct);
 8002562:	f107 031c 	add.w	r3, r7, #28
 8002566:	4619      	mov	r1, r3
 8002568:	4819      	ldr	r0, [pc, #100]	; (80025d0 <HAL_TIM_MspPostInit+0x19c>)
 800256a:	f001 fc3f 	bl	8003dec <HAL_GPIO_Init>
}
 800256e:	e022      	b.n	80025b6 <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM14)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a1a      	ldr	r2, [pc, #104]	; (80025e0 <HAL_TIM_MspPostInit+0x1ac>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d11d      	bne.n	80025b6 <HAL_TIM_MspPostInit+0x182>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	60bb      	str	r3, [r7, #8]
 800257e:	4b11      	ldr	r3, [pc, #68]	; (80025c4 <HAL_TIM_MspPostInit+0x190>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	4a10      	ldr	r2, [pc, #64]	; (80025c4 <HAL_TIM_MspPostInit+0x190>)
 8002584:	f043 0301 	orr.w	r3, r3, #1
 8002588:	6313      	str	r3, [r2, #48]	; 0x30
 800258a:	4b0e      	ldr	r3, [pc, #56]	; (80025c4 <HAL_TIM_MspPostInit+0x190>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	60bb      	str	r3, [r7, #8]
 8002594:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = motor1A_Pin;
 8002596:	2380      	movs	r3, #128	; 0x80
 8002598:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259a:	2302      	movs	r3, #2
 800259c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259e:	2300      	movs	r3, #0
 80025a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a2:	2300      	movs	r3, #0
 80025a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 80025a6:	2309      	movs	r3, #9
 80025a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(motor1A_GPIO_Port, &GPIO_InitStruct);
 80025aa:	f107 031c 	add.w	r3, r7, #28
 80025ae:	4619      	mov	r1, r3
 80025b0:	4805      	ldr	r0, [pc, #20]	; (80025c8 <HAL_TIM_MspPostInit+0x194>)
 80025b2:	f001 fc1b 	bl	8003dec <HAL_GPIO_Init>
}
 80025b6:	bf00      	nop
 80025b8:	3730      	adds	r7, #48	; 0x30
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	40010000 	.word	0x40010000
 80025c4:	40023800 	.word	0x40023800
 80025c8:	40020000 	.word	0x40020000
 80025cc:	40000400 	.word	0x40000400
 80025d0:	40020400 	.word	0x40020400
 80025d4:	40010400 	.word	0x40010400
 80025d8:	40020800 	.word	0x40020800
 80025dc:	40001800 	.word	0x40001800
 80025e0:	40002000 	.word	0x40002000

080025e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b08a      	sub	sp, #40	; 0x28
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ec:	f107 0314 	add.w	r3, r7, #20
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	605a      	str	r2, [r3, #4]
 80025f6:	609a      	str	r2, [r3, #8]
 80025f8:	60da      	str	r2, [r3, #12]
 80025fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a4b      	ldr	r2, [pc, #300]	; (8002730 <HAL_UART_MspInit+0x14c>)
 8002602:	4293      	cmp	r3, r2
 8002604:	f040 8090 	bne.w	8002728 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002608:	2300      	movs	r3, #0
 800260a:	613b      	str	r3, [r7, #16]
 800260c:	4b49      	ldr	r3, [pc, #292]	; (8002734 <HAL_UART_MspInit+0x150>)
 800260e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002610:	4a48      	ldr	r2, [pc, #288]	; (8002734 <HAL_UART_MspInit+0x150>)
 8002612:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002616:	6413      	str	r3, [r2, #64]	; 0x40
 8002618:	4b46      	ldr	r3, [pc, #280]	; (8002734 <HAL_UART_MspInit+0x150>)
 800261a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002620:	613b      	str	r3, [r7, #16]
 8002622:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002624:	2300      	movs	r3, #0
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	4b42      	ldr	r3, [pc, #264]	; (8002734 <HAL_UART_MspInit+0x150>)
 800262a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262c:	4a41      	ldr	r2, [pc, #260]	; (8002734 <HAL_UART_MspInit+0x150>)
 800262e:	f043 0301 	orr.w	r3, r3, #1
 8002632:	6313      	str	r3, [r2, #48]	; 0x30
 8002634:	4b3f      	ldr	r3, [pc, #252]	; (8002734 <HAL_UART_MspInit+0x150>)
 8002636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	60fb      	str	r3, [r7, #12]
 800263e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002640:	230c      	movs	r3, #12
 8002642:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002644:	2302      	movs	r3, #2
 8002646:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002648:	2300      	movs	r3, #0
 800264a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800264c:	2303      	movs	r3, #3
 800264e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002650:	2307      	movs	r3, #7
 8002652:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002654:	f107 0314 	add.w	r3, r7, #20
 8002658:	4619      	mov	r1, r3
 800265a:	4837      	ldr	r0, [pc, #220]	; (8002738 <HAL_UART_MspInit+0x154>)
 800265c:	f001 fbc6 	bl	8003dec <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002660:	4b36      	ldr	r3, [pc, #216]	; (800273c <HAL_UART_MspInit+0x158>)
 8002662:	4a37      	ldr	r2, [pc, #220]	; (8002740 <HAL_UART_MspInit+0x15c>)
 8002664:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002666:	4b35      	ldr	r3, [pc, #212]	; (800273c <HAL_UART_MspInit+0x158>)
 8002668:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800266c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800266e:	4b33      	ldr	r3, [pc, #204]	; (800273c <HAL_UART_MspInit+0x158>)
 8002670:	2200      	movs	r2, #0
 8002672:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002674:	4b31      	ldr	r3, [pc, #196]	; (800273c <HAL_UART_MspInit+0x158>)
 8002676:	2200      	movs	r2, #0
 8002678:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800267a:	4b30      	ldr	r3, [pc, #192]	; (800273c <HAL_UART_MspInit+0x158>)
 800267c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002680:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002682:	4b2e      	ldr	r3, [pc, #184]	; (800273c <HAL_UART_MspInit+0x158>)
 8002684:	2200      	movs	r2, #0
 8002686:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002688:	4b2c      	ldr	r3, [pc, #176]	; (800273c <HAL_UART_MspInit+0x158>)
 800268a:	2200      	movs	r2, #0
 800268c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800268e:	4b2b      	ldr	r3, [pc, #172]	; (800273c <HAL_UART_MspInit+0x158>)
 8002690:	2200      	movs	r2, #0
 8002692:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002694:	4b29      	ldr	r3, [pc, #164]	; (800273c <HAL_UART_MspInit+0x158>)
 8002696:	2200      	movs	r2, #0
 8002698:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800269a:	4b28      	ldr	r3, [pc, #160]	; (800273c <HAL_UART_MspInit+0x158>)
 800269c:	2200      	movs	r2, #0
 800269e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80026a0:	4826      	ldr	r0, [pc, #152]	; (800273c <HAL_UART_MspInit+0x158>)
 80026a2:	f001 f827 	bl	80036f4 <HAL_DMA_Init>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80026ac:	f7ff fc44 	bl	8001f38 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a22      	ldr	r2, [pc, #136]	; (800273c <HAL_UART_MspInit+0x158>)
 80026b4:	639a      	str	r2, [r3, #56]	; 0x38
 80026b6:	4a21      	ldr	r2, [pc, #132]	; (800273c <HAL_UART_MspInit+0x158>)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80026bc:	4b21      	ldr	r3, [pc, #132]	; (8002744 <HAL_UART_MspInit+0x160>)
 80026be:	4a22      	ldr	r2, [pc, #136]	; (8002748 <HAL_UART_MspInit+0x164>)
 80026c0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80026c2:	4b20      	ldr	r3, [pc, #128]	; (8002744 <HAL_UART_MspInit+0x160>)
 80026c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026c8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026ca:	4b1e      	ldr	r3, [pc, #120]	; (8002744 <HAL_UART_MspInit+0x160>)
 80026cc:	2240      	movs	r2, #64	; 0x40
 80026ce:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026d0:	4b1c      	ldr	r3, [pc, #112]	; (8002744 <HAL_UART_MspInit+0x160>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80026d6:	4b1b      	ldr	r3, [pc, #108]	; (8002744 <HAL_UART_MspInit+0x160>)
 80026d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026dc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026de:	4b19      	ldr	r3, [pc, #100]	; (8002744 <HAL_UART_MspInit+0x160>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026e4:	4b17      	ldr	r3, [pc, #92]	; (8002744 <HAL_UART_MspInit+0x160>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80026ea:	4b16      	ldr	r3, [pc, #88]	; (8002744 <HAL_UART_MspInit+0x160>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80026f0:	4b14      	ldr	r3, [pc, #80]	; (8002744 <HAL_UART_MspInit+0x160>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026f6:	4b13      	ldr	r3, [pc, #76]	; (8002744 <HAL_UART_MspInit+0x160>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80026fc:	4811      	ldr	r0, [pc, #68]	; (8002744 <HAL_UART_MspInit+0x160>)
 80026fe:	f000 fff9 	bl	80036f4 <HAL_DMA_Init>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8002708:	f7ff fc16 	bl	8001f38 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a0d      	ldr	r2, [pc, #52]	; (8002744 <HAL_UART_MspInit+0x160>)
 8002710:	635a      	str	r2, [r3, #52]	; 0x34
 8002712:	4a0c      	ldr	r2, [pc, #48]	; (8002744 <HAL_UART_MspInit+0x160>)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8002718:	2200      	movs	r2, #0
 800271a:	2102      	movs	r1, #2
 800271c:	2026      	movs	r0, #38	; 0x26
 800271e:	f000 fe5c 	bl	80033da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002722:	2026      	movs	r0, #38	; 0x26
 8002724:	f000 fe75 	bl	8003412 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002728:	bf00      	nop
 800272a:	3728      	adds	r7, #40	; 0x28
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	40004400 	.word	0x40004400
 8002734:	40023800 	.word	0x40023800
 8002738:	40020000 	.word	0x40020000
 800273c:	200003a4 	.word	0x200003a4
 8002740:	40026088 	.word	0x40026088
 8002744:	20000404 	.word	0x20000404
 8002748:	400260a0 	.word	0x400260a0

0800274c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002750:	e7fe      	b.n	8002750 <NMI_Handler+0x4>

08002752 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002752:	b480      	push	{r7}
 8002754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002756:	e7fe      	b.n	8002756 <HardFault_Handler+0x4>

08002758 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800275c:	e7fe      	b.n	800275c <MemManage_Handler+0x4>

0800275e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800275e:	b480      	push	{r7}
 8002760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002762:	e7fe      	b.n	8002762 <BusFault_Handler+0x4>

08002764 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002768:	e7fe      	b.n	8002768 <UsageFault_Handler+0x4>

0800276a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800276a:	b480      	push	{r7}
 800276c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800276e:	bf00      	nop
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800277c:	bf00      	nop
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr

08002786 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002786:	b480      	push	{r7}
 8002788:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800278a:	bf00      	nop
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002798:	f000 f918 	bl	80029cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800279c:	bf00      	nop
 800279e:	bd80      	pop	{r7, pc}

080027a0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80027a4:	4802      	ldr	r0, [pc, #8]	; (80027b0 <DMA1_Stream5_IRQHandler+0x10>)
 80027a6:	f001 f8e5 	bl	8003974 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80027aa:	bf00      	nop
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	200003a4 	.word	0x200003a4

080027b4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80027b8:	4802      	ldr	r0, [pc, #8]	; (80027c4 <DMA1_Stream6_IRQHandler+0x10>)
 80027ba:	f001 f8db 	bl	8003974 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80027be:	bf00      	nop
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	20000404 	.word	0x20000404

080027c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80027cc:	4802      	ldr	r0, [pc, #8]	; (80027d8 <TIM2_IRQHandler+0x10>)
 80027ce:	f002 fd27 	bl	8005220 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80027d2:	bf00      	nop
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	20000120 	.word	0x20000120

080027dc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80027e0:	4802      	ldr	r0, [pc, #8]	; (80027ec <TIM4_IRQHandler+0x10>)
 80027e2:	f002 fd1d 	bl	8005220 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80027e6:	bf00      	nop
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	200001b0 	.word	0x200001b0

080027f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80027f4:	4802      	ldr	r0, [pc, #8]	; (8002800 <USART2_IRQHandler+0x10>)
 80027f6:	f003 fb3d 	bl	8005e74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80027fa:	bf00      	nop
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	20000360 	.word	0x20000360

08002804 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002808:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800280c:	f001 fc82 	bl	8004114 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002810:	bf00      	nop
 8002812:	bd80      	pop	{r7, pc}

08002814 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002818:	4802      	ldr	r0, [pc, #8]	; (8002824 <TIM5_IRQHandler+0x10>)
 800281a:	f002 fd01 	bl	8005220 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800281e:	bf00      	nop
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	200001f8 	.word	0x200001f8

08002828 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 800282c:	4803      	ldr	r0, [pc, #12]	; (800283c <TIM6_DAC_IRQHandler+0x14>)
 800282e:	f000 fe7e 	bl	800352e <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8002832:	4803      	ldr	r0, [pc, #12]	; (8002840 <TIM6_DAC_IRQHandler+0x18>)
 8002834:	f002 fcf4 	bl	8005220 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002838:	bf00      	nop
 800283a:	bd80      	pop	{r7, pc}
 800283c:	200000c4 	.word	0x200000c4
 8002840:	20000240 	.word	0x20000240

08002844 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800284c:	4a14      	ldr	r2, [pc, #80]	; (80028a0 <_sbrk+0x5c>)
 800284e:	4b15      	ldr	r3, [pc, #84]	; (80028a4 <_sbrk+0x60>)
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002858:	4b13      	ldr	r3, [pc, #76]	; (80028a8 <_sbrk+0x64>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d102      	bne.n	8002866 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002860:	4b11      	ldr	r3, [pc, #68]	; (80028a8 <_sbrk+0x64>)
 8002862:	4a12      	ldr	r2, [pc, #72]	; (80028ac <_sbrk+0x68>)
 8002864:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002866:	4b10      	ldr	r3, [pc, #64]	; (80028a8 <_sbrk+0x64>)
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4413      	add	r3, r2
 800286e:	693a      	ldr	r2, [r7, #16]
 8002870:	429a      	cmp	r2, r3
 8002872:	d207      	bcs.n	8002884 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002874:	f004 fa5a 	bl	8006d2c <__errno>
 8002878:	4603      	mov	r3, r0
 800287a:	220c      	movs	r2, #12
 800287c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800287e:	f04f 33ff 	mov.w	r3, #4294967295
 8002882:	e009      	b.n	8002898 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002884:	4b08      	ldr	r3, [pc, #32]	; (80028a8 <_sbrk+0x64>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800288a:	4b07      	ldr	r3, [pc, #28]	; (80028a8 <_sbrk+0x64>)
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4413      	add	r3, r2
 8002892:	4a05      	ldr	r2, [pc, #20]	; (80028a8 <_sbrk+0x64>)
 8002894:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002896:	68fb      	ldr	r3, [r7, #12]
}
 8002898:	4618      	mov	r0, r3
 800289a:	3718      	adds	r7, #24
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	20020000 	.word	0x20020000
 80028a4:	00000400 	.word	0x00000400
 80028a8:	200004a0 	.word	0x200004a0
 80028ac:	200005f0 	.word	0x200005f0

080028b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028b4:	4b06      	ldr	r3, [pc, #24]	; (80028d0 <SystemInit+0x20>)
 80028b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ba:	4a05      	ldr	r2, [pc, #20]	; (80028d0 <SystemInit+0x20>)
 80028bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028c4:	bf00      	nop
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	e000ed00 	.word	0xe000ed00

080028d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80028d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800290c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028d8:	480d      	ldr	r0, [pc, #52]	; (8002910 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80028da:	490e      	ldr	r1, [pc, #56]	; (8002914 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80028dc:	4a0e      	ldr	r2, [pc, #56]	; (8002918 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80028de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028e0:	e002      	b.n	80028e8 <LoopCopyDataInit>

080028e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028e6:	3304      	adds	r3, #4

080028e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028ec:	d3f9      	bcc.n	80028e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028ee:	4a0b      	ldr	r2, [pc, #44]	; (800291c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80028f0:	4c0b      	ldr	r4, [pc, #44]	; (8002920 <LoopFillZerobss+0x26>)
  movs r3, #0
 80028f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028f4:	e001      	b.n	80028fa <LoopFillZerobss>

080028f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028f8:	3204      	adds	r2, #4

080028fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028fc:	d3fb      	bcc.n	80028f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80028fe:	f7ff ffd7 	bl	80028b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002902:	f004 fa19 	bl	8006d38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002906:	f7fe fc1f 	bl	8001148 <main>
  bx  lr    
 800290a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800290c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002910:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002914:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002918:	08007798 	.word	0x08007798
  ldr r2, =_sbss
 800291c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002920:	200005f0 	.word	0x200005f0

08002924 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002924:	e7fe      	b.n	8002924 <ADC_IRQHandler>
	...

08002928 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800292c:	4b0e      	ldr	r3, [pc, #56]	; (8002968 <HAL_Init+0x40>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a0d      	ldr	r2, [pc, #52]	; (8002968 <HAL_Init+0x40>)
 8002932:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002936:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002938:	4b0b      	ldr	r3, [pc, #44]	; (8002968 <HAL_Init+0x40>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a0a      	ldr	r2, [pc, #40]	; (8002968 <HAL_Init+0x40>)
 800293e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002942:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002944:	4b08      	ldr	r3, [pc, #32]	; (8002968 <HAL_Init+0x40>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a07      	ldr	r2, [pc, #28]	; (8002968 <HAL_Init+0x40>)
 800294a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800294e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002950:	2003      	movs	r0, #3
 8002952:	f000 fd37 	bl	80033c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002956:	200f      	movs	r0, #15
 8002958:	f000 f808 	bl	800296c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800295c:	f7ff faf2 	bl	8001f44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	40023c00 	.word	0x40023c00

0800296c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002974:	4b12      	ldr	r3, [pc, #72]	; (80029c0 <HAL_InitTick+0x54>)
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	4b12      	ldr	r3, [pc, #72]	; (80029c4 <HAL_InitTick+0x58>)
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	4619      	mov	r1, r3
 800297e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002982:	fbb3 f3f1 	udiv	r3, r3, r1
 8002986:	fbb2 f3f3 	udiv	r3, r2, r3
 800298a:	4618      	mov	r0, r3
 800298c:	f000 fd4f 	bl	800342e <HAL_SYSTICK_Config>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e00e      	b.n	80029b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2b0f      	cmp	r3, #15
 800299e:	d80a      	bhi.n	80029b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029a0:	2200      	movs	r2, #0
 80029a2:	6879      	ldr	r1, [r7, #4]
 80029a4:	f04f 30ff 	mov.w	r0, #4294967295
 80029a8:	f000 fd17 	bl	80033da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029ac:	4a06      	ldr	r2, [pc, #24]	; (80029c8 <HAL_InitTick+0x5c>)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029b2:	2300      	movs	r3, #0
 80029b4:	e000      	b.n	80029b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	20000004 	.word	0x20000004
 80029c4:	2000000c 	.word	0x2000000c
 80029c8:	20000008 	.word	0x20000008

080029cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029d0:	4b06      	ldr	r3, [pc, #24]	; (80029ec <HAL_IncTick+0x20>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	461a      	mov	r2, r3
 80029d6:	4b06      	ldr	r3, [pc, #24]	; (80029f0 <HAL_IncTick+0x24>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4413      	add	r3, r2
 80029dc:	4a04      	ldr	r2, [pc, #16]	; (80029f0 <HAL_IncTick+0x24>)
 80029de:	6013      	str	r3, [r2, #0]
}
 80029e0:	bf00      	nop
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	2000000c 	.word	0x2000000c
 80029f0:	200004a4 	.word	0x200004a4

080029f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  return uwTick;
 80029f8:	4b03      	ldr	r3, [pc, #12]	; (8002a08 <HAL_GetTick+0x14>)
 80029fa:	681b      	ldr	r3, [r3, #0]
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	200004a4 	.word	0x200004a4

08002a0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a14:	f7ff ffee 	bl	80029f4 <HAL_GetTick>
 8002a18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a24:	d005      	beq.n	8002a32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a26:	4b0a      	ldr	r3, [pc, #40]	; (8002a50 <HAL_Delay+0x44>)
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	4413      	add	r3, r2
 8002a30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a32:	bf00      	nop
 8002a34:	f7ff ffde 	bl	80029f4 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d8f7      	bhi.n	8002a34 <HAL_Delay+0x28>
  {
  }
}
 8002a44:	bf00      	nop
 8002a46:	bf00      	nop
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	2000000c 	.word	0x2000000c

08002a54 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e033      	b.n	8002ad2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d109      	bne.n	8002a86 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f7ff fa8e 	bl	8001f94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8a:	f003 0310 	and.w	r3, r3, #16
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d118      	bne.n	8002ac4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a96:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a9a:	f023 0302 	bic.w	r3, r3, #2
 8002a9e:	f043 0202 	orr.w	r2, r3, #2
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 fac0 	bl	800302c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	f023 0303 	bic.w	r3, r3, #3
 8002aba:	f043 0201 	orr.w	r2, r3, #1
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	641a      	str	r2, [r3, #64]	; 0x40
 8002ac2:	e001      	b.n	8002ac8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
	...

08002adc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d101      	bne.n	8002af6 <HAL_ADC_Start+0x1a>
 8002af2:	2302      	movs	r3, #2
 8002af4:	e0b2      	b.n	8002c5c <HAL_ADC_Start+0x180>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2201      	movs	r2, #1
 8002afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d018      	beq.n	8002b3e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	689a      	ldr	r2, [r3, #8]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f042 0201 	orr.w	r2, r2, #1
 8002b1a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b1c:	4b52      	ldr	r3, [pc, #328]	; (8002c68 <HAL_ADC_Start+0x18c>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a52      	ldr	r2, [pc, #328]	; (8002c6c <HAL_ADC_Start+0x190>)
 8002b22:	fba2 2303 	umull	r2, r3, r2, r3
 8002b26:	0c9a      	lsrs	r2, r3, #18
 8002b28:	4613      	mov	r3, r2
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	4413      	add	r3, r2
 8002b2e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002b30:	e002      	b.n	8002b38 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	3b01      	subs	r3, #1
 8002b36:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1f9      	bne.n	8002b32 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f003 0301 	and.w	r3, r3, #1
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d17a      	bne.n	8002c42 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b50:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002b54:	f023 0301 	bic.w	r3, r3, #1
 8002b58:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d007      	beq.n	8002b7e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b76:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b8a:	d106      	bne.n	8002b9a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b90:	f023 0206 	bic.w	r2, r3, #6
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	645a      	str	r2, [r3, #68]	; 0x44
 8002b98:	e002      	b.n	8002ba0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ba8:	4b31      	ldr	r3, [pc, #196]	; (8002c70 <HAL_ADC_Start+0x194>)
 8002baa:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002bb4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f003 031f 	and.w	r3, r3, #31
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d12a      	bne.n	8002c18 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a2b      	ldr	r2, [pc, #172]	; (8002c74 <HAL_ADC_Start+0x198>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d015      	beq.n	8002bf8 <HAL_ADC_Start+0x11c>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a29      	ldr	r2, [pc, #164]	; (8002c78 <HAL_ADC_Start+0x19c>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d105      	bne.n	8002be2 <HAL_ADC_Start+0x106>
 8002bd6:	4b26      	ldr	r3, [pc, #152]	; (8002c70 <HAL_ADC_Start+0x194>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f003 031f 	and.w	r3, r3, #31
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00a      	beq.n	8002bf8 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a25      	ldr	r2, [pc, #148]	; (8002c7c <HAL_ADC_Start+0x1a0>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d136      	bne.n	8002c5a <HAL_ADC_Start+0x17e>
 8002bec:	4b20      	ldr	r3, [pc, #128]	; (8002c70 <HAL_ADC_Start+0x194>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f003 0310 	and.w	r3, r3, #16
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d130      	bne.n	8002c5a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d129      	bne.n	8002c5a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	689a      	ldr	r2, [r3, #8]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c14:	609a      	str	r2, [r3, #8]
 8002c16:	e020      	b.n	8002c5a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a15      	ldr	r2, [pc, #84]	; (8002c74 <HAL_ADC_Start+0x198>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d11b      	bne.n	8002c5a <HAL_ADC_Start+0x17e>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d114      	bne.n	8002c5a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	689a      	ldr	r2, [r3, #8]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c3e:	609a      	str	r2, [r3, #8]
 8002c40:	e00b      	b.n	8002c5a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	f043 0210 	orr.w	r2, r3, #16
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c52:	f043 0201 	orr.w	r2, r3, #1
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3714      	adds	r7, #20
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr
 8002c68:	20000004 	.word	0x20000004
 8002c6c:	431bde83 	.word	0x431bde83
 8002c70:	40012300 	.word	0x40012300
 8002c74:	40012000 	.word	0x40012000
 8002c78:	40012100 	.word	0x40012100
 8002c7c:	40012200 	.word	0x40012200

08002c80 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c9c:	d113      	bne.n	8002cc6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002ca8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cac:	d10b      	bne.n	8002cc6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	f043 0220 	orr.w	r2, r3, #32
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e063      	b.n	8002d8e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002cc6:	f7ff fe95 	bl	80029f4 <HAL_GetTick>
 8002cca:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002ccc:	e021      	b.n	8002d12 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd4:	d01d      	beq.n	8002d12 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d007      	beq.n	8002cec <HAL_ADC_PollForConversion+0x6c>
 8002cdc:	f7ff fe8a 	bl	80029f4 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	683a      	ldr	r2, [r7, #0]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d212      	bcs.n	8002d12 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d00b      	beq.n	8002d12 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	f043 0204 	orr.w	r2, r3, #4
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e03d      	b.n	8002d8e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0302 	and.w	r3, r3, #2
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d1d6      	bne.n	8002cce <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f06f 0212 	mvn.w	r2, #18
 8002d28:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d123      	bne.n	8002d8c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d11f      	bne.n	8002d8c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d52:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d006      	beq.n	8002d68 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d111      	bne.n	8002d8c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d105      	bne.n	8002d8c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d84:	f043 0201 	orr.w	r2, r3, #1
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002d96:	b480      	push	{r7}
 8002d98:	b083      	sub	sp, #12
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d101      	bne.n	8002dcc <HAL_ADC_ConfigChannel+0x1c>
 8002dc8:	2302      	movs	r3, #2
 8002dca:	e113      	b.n	8002ff4 <HAL_ADC_ConfigChannel+0x244>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2b09      	cmp	r3, #9
 8002dda:	d925      	bls.n	8002e28 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68d9      	ldr	r1, [r3, #12]
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	461a      	mov	r2, r3
 8002dea:	4613      	mov	r3, r2
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	4413      	add	r3, r2
 8002df0:	3b1e      	subs	r3, #30
 8002df2:	2207      	movs	r2, #7
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	43da      	mvns	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	400a      	ands	r2, r1
 8002e00:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68d9      	ldr	r1, [r3, #12]
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	689a      	ldr	r2, [r3, #8]
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	4618      	mov	r0, r3
 8002e14:	4603      	mov	r3, r0
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	4403      	add	r3, r0
 8002e1a:	3b1e      	subs	r3, #30
 8002e1c:	409a      	lsls	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	60da      	str	r2, [r3, #12]
 8002e26:	e022      	b.n	8002e6e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	6919      	ldr	r1, [r3, #16]
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	461a      	mov	r2, r3
 8002e36:	4613      	mov	r3, r2
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	4413      	add	r3, r2
 8002e3c:	2207      	movs	r2, #7
 8002e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e42:	43da      	mvns	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	400a      	ands	r2, r1
 8002e4a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	6919      	ldr	r1, [r3, #16]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	689a      	ldr	r2, [r3, #8]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	4603      	mov	r3, r0
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	4403      	add	r3, r0
 8002e64:	409a      	lsls	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	2b06      	cmp	r3, #6
 8002e74:	d824      	bhi.n	8002ec0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	4613      	mov	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	4413      	add	r3, r2
 8002e86:	3b05      	subs	r3, #5
 8002e88:	221f      	movs	r2, #31
 8002e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8e:	43da      	mvns	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	400a      	ands	r2, r1
 8002e96:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685a      	ldr	r2, [r3, #4]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	4413      	add	r3, r2
 8002eb0:	3b05      	subs	r3, #5
 8002eb2:	fa00 f203 	lsl.w	r2, r0, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	635a      	str	r2, [r3, #52]	; 0x34
 8002ebe:	e04c      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	2b0c      	cmp	r3, #12
 8002ec6:	d824      	bhi.n	8002f12 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685a      	ldr	r2, [r3, #4]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	4413      	add	r3, r2
 8002ed8:	3b23      	subs	r3, #35	; 0x23
 8002eda:	221f      	movs	r2, #31
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	43da      	mvns	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	400a      	ands	r2, r1
 8002ee8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	4613      	mov	r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	4413      	add	r3, r2
 8002f02:	3b23      	subs	r3, #35	; 0x23
 8002f04:	fa00 f203 	lsl.w	r2, r0, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	631a      	str	r2, [r3, #48]	; 0x30
 8002f10:	e023      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	4413      	add	r3, r2
 8002f22:	3b41      	subs	r3, #65	; 0x41
 8002f24:	221f      	movs	r2, #31
 8002f26:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2a:	43da      	mvns	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	400a      	ands	r2, r1
 8002f32:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	4618      	mov	r0, r3
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	4613      	mov	r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	4413      	add	r3, r2
 8002f4c:	3b41      	subs	r3, #65	; 0x41
 8002f4e:	fa00 f203 	lsl.w	r2, r0, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f5a:	4b29      	ldr	r3, [pc, #164]	; (8003000 <HAL_ADC_ConfigChannel+0x250>)
 8002f5c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a28      	ldr	r2, [pc, #160]	; (8003004 <HAL_ADC_ConfigChannel+0x254>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d10f      	bne.n	8002f88 <HAL_ADC_ConfigChannel+0x1d8>
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2b12      	cmp	r3, #18
 8002f6e:	d10b      	bne.n	8002f88 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a1d      	ldr	r2, [pc, #116]	; (8003004 <HAL_ADC_ConfigChannel+0x254>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d12b      	bne.n	8002fea <HAL_ADC_ConfigChannel+0x23a>
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a1c      	ldr	r2, [pc, #112]	; (8003008 <HAL_ADC_ConfigChannel+0x258>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d003      	beq.n	8002fa4 <HAL_ADC_ConfigChannel+0x1f4>
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2b11      	cmp	r3, #17
 8002fa2:	d122      	bne.n	8002fea <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a11      	ldr	r2, [pc, #68]	; (8003008 <HAL_ADC_ConfigChannel+0x258>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d111      	bne.n	8002fea <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002fc6:	4b11      	ldr	r3, [pc, #68]	; (800300c <HAL_ADC_ConfigChannel+0x25c>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a11      	ldr	r2, [pc, #68]	; (8003010 <HAL_ADC_ConfigChannel+0x260>)
 8002fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd0:	0c9a      	lsrs	r2, r3, #18
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	4413      	add	r3, r2
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002fdc:	e002      	b.n	8002fe4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1f9      	bne.n	8002fde <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3714      	adds	r7, #20
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr
 8003000:	40012300 	.word	0x40012300
 8003004:	40012000 	.word	0x40012000
 8003008:	10000012 	.word	0x10000012
 800300c:	20000004 	.word	0x20000004
 8003010:	431bde83 	.word	0x431bde83

08003014 <HAL_ADC_GetState>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL state
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* Return ADC state */
  return hadc->State;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003020:	4618      	mov	r0, r3
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003034:	4b79      	ldr	r3, [pc, #484]	; (800321c <ADC_Init+0x1f0>)
 8003036:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	685a      	ldr	r2, [r3, #4]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	431a      	orrs	r2, r3
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	685a      	ldr	r2, [r3, #4]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003060:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	6859      	ldr	r1, [r3, #4]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	021a      	lsls	r2, r3, #8
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	430a      	orrs	r2, r1
 8003074:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	685a      	ldr	r2, [r3, #4]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003084:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	6859      	ldr	r1, [r3, #4]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	689a      	ldr	r2, [r3, #8]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	430a      	orrs	r2, r1
 8003096:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689a      	ldr	r2, [r3, #8]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	6899      	ldr	r1, [r3, #8]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68da      	ldr	r2, [r3, #12]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	430a      	orrs	r2, r1
 80030b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030be:	4a58      	ldr	r2, [pc, #352]	; (8003220 <ADC_Init+0x1f4>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d022      	beq.n	800310a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	689a      	ldr	r2, [r3, #8]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6899      	ldr	r1, [r3, #8]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	430a      	orrs	r2, r1
 80030e4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	6899      	ldr	r1, [r3, #8]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	430a      	orrs	r2, r1
 8003106:	609a      	str	r2, [r3, #8]
 8003108:	e00f      	b.n	800312a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	689a      	ldr	r2, [r3, #8]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003118:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	689a      	ldr	r2, [r3, #8]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003128:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f022 0202 	bic.w	r2, r2, #2
 8003138:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	6899      	ldr	r1, [r3, #8]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	7e1b      	ldrb	r3, [r3, #24]
 8003144:	005a      	lsls	r2, r3, #1
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	430a      	orrs	r2, r1
 800314c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d01b      	beq.n	8003190 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	685a      	ldr	r2, [r3, #4]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003166:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	685a      	ldr	r2, [r3, #4]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003176:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	6859      	ldr	r1, [r3, #4]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003182:	3b01      	subs	r3, #1
 8003184:	035a      	lsls	r2, r3, #13
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	430a      	orrs	r2, r1
 800318c:	605a      	str	r2, [r3, #4]
 800318e:	e007      	b.n	80031a0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	685a      	ldr	r2, [r3, #4]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800319e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80031ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	69db      	ldr	r3, [r3, #28]
 80031ba:	3b01      	subs	r3, #1
 80031bc:	051a      	lsls	r2, r3, #20
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	430a      	orrs	r2, r1
 80031c4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80031d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	6899      	ldr	r1, [r3, #8]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80031e2:	025a      	lsls	r2, r3, #9
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	430a      	orrs	r2, r1
 80031ea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	689a      	ldr	r2, [r3, #8]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6899      	ldr	r1, [r3, #8]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	029a      	lsls	r2, r3, #10
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	430a      	orrs	r2, r1
 800320e:	609a      	str	r2, [r3, #8]
}
 8003210:	bf00      	nop
 8003212:	3714      	adds	r7, #20
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr
 800321c:	40012300 	.word	0x40012300
 8003220:	0f000001 	.word	0x0f000001

08003224 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f003 0307 	and.w	r3, r3, #7
 8003232:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003234:	4b0c      	ldr	r3, [pc, #48]	; (8003268 <__NVIC_SetPriorityGrouping+0x44>)
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800323a:	68ba      	ldr	r2, [r7, #8]
 800323c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003240:	4013      	ands	r3, r2
 8003242:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800324c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003250:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003254:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003256:	4a04      	ldr	r2, [pc, #16]	; (8003268 <__NVIC_SetPriorityGrouping+0x44>)
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	60d3      	str	r3, [r2, #12]
}
 800325c:	bf00      	nop
 800325e:	3714      	adds	r7, #20
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr
 8003268:	e000ed00 	.word	0xe000ed00

0800326c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003270:	4b04      	ldr	r3, [pc, #16]	; (8003284 <__NVIC_GetPriorityGrouping+0x18>)
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	0a1b      	lsrs	r3, r3, #8
 8003276:	f003 0307 	and.w	r3, r3, #7
}
 800327a:	4618      	mov	r0, r3
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr
 8003284:	e000ed00 	.word	0xe000ed00

08003288 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	4603      	mov	r3, r0
 8003290:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003296:	2b00      	cmp	r3, #0
 8003298:	db0b      	blt.n	80032b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800329a:	79fb      	ldrb	r3, [r7, #7]
 800329c:	f003 021f 	and.w	r2, r3, #31
 80032a0:	4907      	ldr	r1, [pc, #28]	; (80032c0 <__NVIC_EnableIRQ+0x38>)
 80032a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a6:	095b      	lsrs	r3, r3, #5
 80032a8:	2001      	movs	r0, #1
 80032aa:	fa00 f202 	lsl.w	r2, r0, r2
 80032ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032b2:	bf00      	nop
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	e000e100 	.word	0xe000e100

080032c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	4603      	mov	r3, r0
 80032cc:	6039      	str	r1, [r7, #0]
 80032ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	db0a      	blt.n	80032ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	b2da      	uxtb	r2, r3
 80032dc:	490c      	ldr	r1, [pc, #48]	; (8003310 <__NVIC_SetPriority+0x4c>)
 80032de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e2:	0112      	lsls	r2, r2, #4
 80032e4:	b2d2      	uxtb	r2, r2
 80032e6:	440b      	add	r3, r1
 80032e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032ec:	e00a      	b.n	8003304 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	b2da      	uxtb	r2, r3
 80032f2:	4908      	ldr	r1, [pc, #32]	; (8003314 <__NVIC_SetPriority+0x50>)
 80032f4:	79fb      	ldrb	r3, [r7, #7]
 80032f6:	f003 030f 	and.w	r3, r3, #15
 80032fa:	3b04      	subs	r3, #4
 80032fc:	0112      	lsls	r2, r2, #4
 80032fe:	b2d2      	uxtb	r2, r2
 8003300:	440b      	add	r3, r1
 8003302:	761a      	strb	r2, [r3, #24]
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr
 8003310:	e000e100 	.word	0xe000e100
 8003314:	e000ed00 	.word	0xe000ed00

08003318 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003318:	b480      	push	{r7}
 800331a:	b089      	sub	sp, #36	; 0x24
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f003 0307 	and.w	r3, r3, #7
 800332a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	f1c3 0307 	rsb	r3, r3, #7
 8003332:	2b04      	cmp	r3, #4
 8003334:	bf28      	it	cs
 8003336:	2304      	movcs	r3, #4
 8003338:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	3304      	adds	r3, #4
 800333e:	2b06      	cmp	r3, #6
 8003340:	d902      	bls.n	8003348 <NVIC_EncodePriority+0x30>
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	3b03      	subs	r3, #3
 8003346:	e000      	b.n	800334a <NVIC_EncodePriority+0x32>
 8003348:	2300      	movs	r3, #0
 800334a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800334c:	f04f 32ff 	mov.w	r2, #4294967295
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	fa02 f303 	lsl.w	r3, r2, r3
 8003356:	43da      	mvns	r2, r3
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	401a      	ands	r2, r3
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003360:	f04f 31ff 	mov.w	r1, #4294967295
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	fa01 f303 	lsl.w	r3, r1, r3
 800336a:	43d9      	mvns	r1, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003370:	4313      	orrs	r3, r2
         );
}
 8003372:	4618      	mov	r0, r3
 8003374:	3724      	adds	r7, #36	; 0x24
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
	...

08003380 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	3b01      	subs	r3, #1
 800338c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003390:	d301      	bcc.n	8003396 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003392:	2301      	movs	r3, #1
 8003394:	e00f      	b.n	80033b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003396:	4a0a      	ldr	r2, [pc, #40]	; (80033c0 <SysTick_Config+0x40>)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	3b01      	subs	r3, #1
 800339c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800339e:	210f      	movs	r1, #15
 80033a0:	f04f 30ff 	mov.w	r0, #4294967295
 80033a4:	f7ff ff8e 	bl	80032c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033a8:	4b05      	ldr	r3, [pc, #20]	; (80033c0 <SysTick_Config+0x40>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033ae:	4b04      	ldr	r3, [pc, #16]	; (80033c0 <SysTick_Config+0x40>)
 80033b0:	2207      	movs	r2, #7
 80033b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3708      	adds	r7, #8
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	e000e010 	.word	0xe000e010

080033c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f7ff ff29 	bl	8003224 <__NVIC_SetPriorityGrouping>
}
 80033d2:	bf00      	nop
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033da:	b580      	push	{r7, lr}
 80033dc:	b086      	sub	sp, #24
 80033de:	af00      	add	r7, sp, #0
 80033e0:	4603      	mov	r3, r0
 80033e2:	60b9      	str	r1, [r7, #8]
 80033e4:	607a      	str	r2, [r7, #4]
 80033e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033e8:	2300      	movs	r3, #0
 80033ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033ec:	f7ff ff3e 	bl	800326c <__NVIC_GetPriorityGrouping>
 80033f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	68b9      	ldr	r1, [r7, #8]
 80033f6:	6978      	ldr	r0, [r7, #20]
 80033f8:	f7ff ff8e 	bl	8003318 <NVIC_EncodePriority>
 80033fc:	4602      	mov	r2, r0
 80033fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003402:	4611      	mov	r1, r2
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff ff5d 	bl	80032c4 <__NVIC_SetPriority>
}
 800340a:	bf00      	nop
 800340c:	3718      	adds	r7, #24
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b082      	sub	sp, #8
 8003416:	af00      	add	r7, sp, #0
 8003418:	4603      	mov	r3, r0
 800341a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800341c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003420:	4618      	mov	r0, r3
 8003422:	f7ff ff31 	bl	8003288 <__NVIC_EnableIRQ>
}
 8003426:	bf00      	nop
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	b082      	sub	sp, #8
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f7ff ffa2 	bl	8003380 <SysTick_Config>
 800343c:	4603      	mov	r3, r0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b082      	sub	sp, #8
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d101      	bne.n	8003458 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e014      	b.n	8003482 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	791b      	ldrb	r3, [r3, #4]
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d105      	bne.n	800346e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f7fe fe0f 	bl	800208c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2202      	movs	r2, #2
 8003472:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2201      	movs	r2, #1
 800347e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3708      	adds	r7, #8
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800348a:	b480      	push	{r7}
 800348c:	b083      	sub	sp, #12
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
 8003492:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	795b      	ldrb	r3, [r3, #5]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d101      	bne.n	80034a0 <HAL_DAC_Start+0x16>
 800349c:	2302      	movs	r3, #2
 800349e:	e040      	b.n	8003522 <HAL_DAC_Start+0x98>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2202      	movs	r2, #2
 80034aa:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6819      	ldr	r1, [r3, #0]
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	f003 0310 	and.w	r3, r3, #16
 80034b8:	2201      	movs	r2, #1
 80034ba:	409a      	lsls	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	430a      	orrs	r2, r1
 80034c2:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d10f      	bne.n	80034ea <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80034d4:	2b3c      	cmp	r3, #60	; 0x3c
 80034d6:	d11d      	bne.n	8003514 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	685a      	ldr	r2, [r3, #4]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f042 0201 	orr.w	r2, r2, #1
 80034e6:	605a      	str	r2, [r3, #4]
 80034e8:	e014      	b.n	8003514 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	f003 0310 	and.w	r3, r3, #16
 80034fa:	213c      	movs	r1, #60	; 0x3c
 80034fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003500:	429a      	cmp	r2, r3
 8003502:	d107      	bne.n	8003514 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685a      	ldr	r2, [r3, #4]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f042 0202 	orr.w	r2, r2, #2
 8003512:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr

0800352e <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b082      	sub	sp, #8
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003540:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003544:	d120      	bne.n	8003588 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800354c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003550:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003554:	d118      	bne.n	8003588 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2204      	movs	r2, #4
 800355a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	f043 0201 	orr.w	r2, r3, #1
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003570:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003580:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 f852 	bl	800362c <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003592:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003596:	d120      	bne.n	80035da <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800359e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035a6:	d118      	bne.n	80035da <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2204      	movs	r2, #4
 80035ac:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	f043 0202 	orr.w	r2, r3, #2
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80035c2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80035d2:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 f882 	bl	80036de <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 80035da:	bf00      	nop
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80035e2:	b480      	push	{r7}
 80035e4:	b087      	sub	sp, #28
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	60f8      	str	r0, [r7, #12]
 80035ea:	60b9      	str	r1, [r7, #8]
 80035ec:	607a      	str	r2, [r7, #4]
 80035ee:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80035f0:	2300      	movs	r3, #0
 80035f2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d105      	bne.n	800360c <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003600:	697a      	ldr	r2, [r7, #20]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4413      	add	r3, r2
 8003606:	3308      	adds	r3, #8
 8003608:	617b      	str	r3, [r7, #20]
 800360a:	e004      	b.n	8003616 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800360c:	697a      	ldr	r2, [r7, #20]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4413      	add	r3, r2
 8003612:	3314      	adds	r3, #20
 8003614:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	461a      	mov	r2, r3
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	371c      	adds	r7, #28
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003640:	b480      	push	{r7}
 8003642:	b087      	sub	sp, #28
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	795b      	ldrb	r3, [r3, #5]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d101      	bne.n	8003658 <HAL_DAC_ConfigChannel+0x18>
 8003654:	2302      	movs	r3, #2
 8003656:	e03c      	b.n	80036d2 <HAL_DAC_ConfigChannel+0x92>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2201      	movs	r2, #1
 800365c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2202      	movs	r2, #2
 8003662:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f003 0310 	and.w	r3, r3, #16
 8003672:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003676:	fa02 f303 	lsl.w	r3, r2, r3
 800367a:	43db      	mvns	r3, r3
 800367c:	697a      	ldr	r2, [r7, #20]
 800367e:	4013      	ands	r3, r2
 8003680:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	4313      	orrs	r3, r2
 800368c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f003 0310 	and.w	r3, r3, #16
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	fa02 f303 	lsl.w	r3, r2, r3
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	4313      	orrs	r3, r2
 800369e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	6819      	ldr	r1, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f003 0310 	and.w	r3, r3, #16
 80036b4:	22c0      	movs	r2, #192	; 0xc0
 80036b6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ba:	43da      	mvns	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	400a      	ands	r2, r1
 80036c2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2201      	movs	r2, #1
 80036c8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2200      	movs	r2, #0
 80036ce:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	371c      	adds	r7, #28
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr

080036de <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80036de:	b480      	push	{r7}
 80036e0:	b083      	sub	sp, #12
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80036e6:	bf00      	nop
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
	...

080036f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80036fc:	2300      	movs	r3, #0
 80036fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003700:	f7ff f978 	bl	80029f4 <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d101      	bne.n	8003710 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e099      	b.n	8003844 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2202      	movs	r2, #2
 8003714:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 0201 	bic.w	r2, r2, #1
 800372e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003730:	e00f      	b.n	8003752 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003732:	f7ff f95f 	bl	80029f4 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	2b05      	cmp	r3, #5
 800373e:	d908      	bls.n	8003752 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2220      	movs	r2, #32
 8003744:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2203      	movs	r2, #3
 800374a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e078      	b.n	8003844 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1e8      	bne.n	8003732 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003768:	697a      	ldr	r2, [r7, #20]
 800376a:	4b38      	ldr	r3, [pc, #224]	; (800384c <HAL_DMA_Init+0x158>)
 800376c:	4013      	ands	r3, r2
 800376e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800377e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800378a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003796:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a1b      	ldr	r3, [r3, #32]
 800379c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800379e:	697a      	ldr	r2, [r7, #20]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	2b04      	cmp	r3, #4
 80037aa:	d107      	bne.n	80037bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b4:	4313      	orrs	r3, r2
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	f023 0307 	bic.w	r3, r3, #7
 80037d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	4313      	orrs	r3, r2
 80037dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e2:	2b04      	cmp	r3, #4
 80037e4:	d117      	bne.n	8003816 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d00e      	beq.n	8003816 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 fa7b 	bl	8003cf4 <DMA_CheckFifoParam>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d008      	beq.n	8003816 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2240      	movs	r2, #64	; 0x40
 8003808:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003812:	2301      	movs	r3, #1
 8003814:	e016      	b.n	8003844 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 fa32 	bl	8003c88 <DMA_CalcBaseAndBitshift>
 8003824:	4603      	mov	r3, r0
 8003826:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800382c:	223f      	movs	r2, #63	; 0x3f
 800382e:	409a      	lsls	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3718      	adds	r7, #24
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	f010803f 	.word	0xf010803f

08003850 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800385c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800385e:	f7ff f8c9 	bl	80029f4 <HAL_GetTick>
 8003862:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2b02      	cmp	r3, #2
 800386e:	d008      	beq.n	8003882 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2280      	movs	r2, #128	; 0x80
 8003874:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e052      	b.n	8003928 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f022 0216 	bic.w	r2, r2, #22
 8003890:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	695a      	ldr	r2, [r3, #20]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038a0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d103      	bne.n	80038b2 <HAL_DMA_Abort+0x62>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d007      	beq.n	80038c2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f022 0208 	bic.w	r2, r2, #8
 80038c0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f022 0201 	bic.w	r2, r2, #1
 80038d0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038d2:	e013      	b.n	80038fc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038d4:	f7ff f88e 	bl	80029f4 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b05      	cmp	r3, #5
 80038e0:	d90c      	bls.n	80038fc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2220      	movs	r2, #32
 80038e6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2203      	movs	r2, #3
 80038ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e015      	b.n	8003928 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1e4      	bne.n	80038d4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800390e:	223f      	movs	r2, #63	; 0x3f
 8003910:	409a      	lsls	r2, r3
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3710      	adds	r7, #16
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800393e:	b2db      	uxtb	r3, r3
 8003940:	2b02      	cmp	r3, #2
 8003942:	d004      	beq.n	800394e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2280      	movs	r2, #128	; 0x80
 8003948:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e00c      	b.n	8003968 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2205      	movs	r2, #5
 8003952:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 0201 	bic.w	r2, r2, #1
 8003964:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b086      	sub	sp, #24
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800397c:	2300      	movs	r3, #0
 800397e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003980:	4b8e      	ldr	r3, [pc, #568]	; (8003bbc <HAL_DMA_IRQHandler+0x248>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a8e      	ldr	r2, [pc, #568]	; (8003bc0 <HAL_DMA_IRQHandler+0x24c>)
 8003986:	fba2 2303 	umull	r2, r3, r2, r3
 800398a:	0a9b      	lsrs	r3, r3, #10
 800398c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003992:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800399e:	2208      	movs	r2, #8
 80039a0:	409a      	lsls	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	4013      	ands	r3, r2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d01a      	beq.n	80039e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0304 	and.w	r3, r3, #4
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d013      	beq.n	80039e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f022 0204 	bic.w	r2, r2, #4
 80039c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039cc:	2208      	movs	r2, #8
 80039ce:	409a      	lsls	r2, r3
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d8:	f043 0201 	orr.w	r2, r3, #1
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e4:	2201      	movs	r2, #1
 80039e6:	409a      	lsls	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	4013      	ands	r3, r2
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d012      	beq.n	8003a16 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00b      	beq.n	8003a16 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a02:	2201      	movs	r2, #1
 8003a04:	409a      	lsls	r2, r3
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a0e:	f043 0202 	orr.w	r2, r3, #2
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a1a:	2204      	movs	r2, #4
 8003a1c:	409a      	lsls	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	4013      	ands	r3, r2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d012      	beq.n	8003a4c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d00b      	beq.n	8003a4c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a38:	2204      	movs	r2, #4
 8003a3a:	409a      	lsls	r2, r3
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a44:	f043 0204 	orr.w	r2, r3, #4
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a50:	2210      	movs	r2, #16
 8003a52:	409a      	lsls	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	4013      	ands	r3, r2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d043      	beq.n	8003ae4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0308 	and.w	r3, r3, #8
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d03c      	beq.n	8003ae4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a6e:	2210      	movs	r2, #16
 8003a70:	409a      	lsls	r2, r3
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d018      	beq.n	8003ab6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d108      	bne.n	8003aa4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d024      	beq.n	8003ae4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	4798      	blx	r3
 8003aa2:	e01f      	b.n	8003ae4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d01b      	beq.n	8003ae4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	4798      	blx	r3
 8003ab4:	e016      	b.n	8003ae4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d107      	bne.n	8003ad4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 0208 	bic.w	r2, r2, #8
 8003ad2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d003      	beq.n	8003ae4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae8:	2220      	movs	r2, #32
 8003aea:	409a      	lsls	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	4013      	ands	r3, r2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f000 808f 	beq.w	8003c14 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0310 	and.w	r3, r3, #16
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f000 8087 	beq.w	8003c14 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	409a      	lsls	r2, r3
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b05      	cmp	r3, #5
 8003b1c:	d136      	bne.n	8003b8c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f022 0216 	bic.w	r2, r2, #22
 8003b2c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	695a      	ldr	r2, [r3, #20]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b3c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d103      	bne.n	8003b4e <HAL_DMA_IRQHandler+0x1da>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d007      	beq.n	8003b5e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f022 0208 	bic.w	r2, r2, #8
 8003b5c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b62:	223f      	movs	r2, #63	; 0x3f
 8003b64:	409a      	lsls	r2, r3
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d07e      	beq.n	8003c80 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	4798      	blx	r3
        }
        return;
 8003b8a:	e079      	b.n	8003c80 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d01d      	beq.n	8003bd6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d10d      	bne.n	8003bc4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d031      	beq.n	8003c14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	4798      	blx	r3
 8003bb8:	e02c      	b.n	8003c14 <HAL_DMA_IRQHandler+0x2a0>
 8003bba:	bf00      	nop
 8003bbc:	20000004 	.word	0x20000004
 8003bc0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d023      	beq.n	8003c14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	4798      	blx	r3
 8003bd4:	e01e      	b.n	8003c14 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d10f      	bne.n	8003c04 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f022 0210 	bic.w	r2, r2, #16
 8003bf2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d003      	beq.n	8003c14 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d032      	beq.n	8003c82 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c20:	f003 0301 	and.w	r3, r3, #1
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d022      	beq.n	8003c6e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2205      	movs	r2, #5
 8003c2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f022 0201 	bic.w	r2, r2, #1
 8003c3e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	3301      	adds	r3, #1
 8003c44:	60bb      	str	r3, [r7, #8]
 8003c46:	697a      	ldr	r2, [r7, #20]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d307      	bcc.n	8003c5c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1f2      	bne.n	8003c40 <HAL_DMA_IRQHandler+0x2cc>
 8003c5a:	e000      	b.n	8003c5e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003c5c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d005      	beq.n	8003c82 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	4798      	blx	r3
 8003c7e:	e000      	b.n	8003c82 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003c80:	bf00      	nop
    }
  }
}
 8003c82:	3718      	adds	r7, #24
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	3b10      	subs	r3, #16
 8003c98:	4a14      	ldr	r2, [pc, #80]	; (8003cec <DMA_CalcBaseAndBitshift+0x64>)
 8003c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9e:	091b      	lsrs	r3, r3, #4
 8003ca0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003ca2:	4a13      	ldr	r2, [pc, #76]	; (8003cf0 <DMA_CalcBaseAndBitshift+0x68>)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	461a      	mov	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2b03      	cmp	r3, #3
 8003cb4:	d909      	bls.n	8003cca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003cbe:	f023 0303 	bic.w	r3, r3, #3
 8003cc2:	1d1a      	adds	r2, r3, #4
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	659a      	str	r2, [r3, #88]	; 0x58
 8003cc8:	e007      	b.n	8003cda <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003cd2:	f023 0303 	bic.w	r3, r3, #3
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3714      	adds	r7, #20
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	aaaaaaab 	.word	0xaaaaaaab
 8003cf0:	0800774c 	.word	0x0800774c

08003cf4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d04:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d11f      	bne.n	8003d4e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	2b03      	cmp	r3, #3
 8003d12:	d856      	bhi.n	8003dc2 <DMA_CheckFifoParam+0xce>
 8003d14:	a201      	add	r2, pc, #4	; (adr r2, 8003d1c <DMA_CheckFifoParam+0x28>)
 8003d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d1a:	bf00      	nop
 8003d1c:	08003d2d 	.word	0x08003d2d
 8003d20:	08003d3f 	.word	0x08003d3f
 8003d24:	08003d2d 	.word	0x08003d2d
 8003d28:	08003dc3 	.word	0x08003dc3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d046      	beq.n	8003dc6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d3c:	e043      	b.n	8003dc6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d42:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d46:	d140      	bne.n	8003dca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d4c:	e03d      	b.n	8003dca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d56:	d121      	bne.n	8003d9c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	2b03      	cmp	r3, #3
 8003d5c:	d837      	bhi.n	8003dce <DMA_CheckFifoParam+0xda>
 8003d5e:	a201      	add	r2, pc, #4	; (adr r2, 8003d64 <DMA_CheckFifoParam+0x70>)
 8003d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d64:	08003d75 	.word	0x08003d75
 8003d68:	08003d7b 	.word	0x08003d7b
 8003d6c:	08003d75 	.word	0x08003d75
 8003d70:	08003d8d 	.word	0x08003d8d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	73fb      	strb	r3, [r7, #15]
      break;
 8003d78:	e030      	b.n	8003ddc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d025      	beq.n	8003dd2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d8a:	e022      	b.n	8003dd2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d90:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d94:	d11f      	bne.n	8003dd6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003d9a:	e01c      	b.n	8003dd6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d903      	bls.n	8003daa <DMA_CheckFifoParam+0xb6>
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	2b03      	cmp	r3, #3
 8003da6:	d003      	beq.n	8003db0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003da8:	e018      	b.n	8003ddc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	73fb      	strb	r3, [r7, #15]
      break;
 8003dae:	e015      	b.n	8003ddc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00e      	beq.n	8003dda <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	73fb      	strb	r3, [r7, #15]
      break;
 8003dc0:	e00b      	b.n	8003dda <DMA_CheckFifoParam+0xe6>
      break;
 8003dc2:	bf00      	nop
 8003dc4:	e00a      	b.n	8003ddc <DMA_CheckFifoParam+0xe8>
      break;
 8003dc6:	bf00      	nop
 8003dc8:	e008      	b.n	8003ddc <DMA_CheckFifoParam+0xe8>
      break;
 8003dca:	bf00      	nop
 8003dcc:	e006      	b.n	8003ddc <DMA_CheckFifoParam+0xe8>
      break;
 8003dce:	bf00      	nop
 8003dd0:	e004      	b.n	8003ddc <DMA_CheckFifoParam+0xe8>
      break;
 8003dd2:	bf00      	nop
 8003dd4:	e002      	b.n	8003ddc <DMA_CheckFifoParam+0xe8>
      break;   
 8003dd6:	bf00      	nop
 8003dd8:	e000      	b.n	8003ddc <DMA_CheckFifoParam+0xe8>
      break;
 8003dda:	bf00      	nop
    }
  } 
  
  return status; 
 8003ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3714      	adds	r7, #20
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop

08003dec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b089      	sub	sp, #36	; 0x24
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003df6:	2300      	movs	r3, #0
 8003df8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e02:	2300      	movs	r3, #0
 8003e04:	61fb      	str	r3, [r7, #28]
 8003e06:	e165      	b.n	80040d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e08:	2201      	movs	r2, #1
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	697a      	ldr	r2, [r7, #20]
 8003e18:	4013      	ands	r3, r2
 8003e1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	f040 8154 	bne.w	80040ce <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f003 0303 	and.w	r3, r3, #3
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d005      	beq.n	8003e3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d130      	bne.n	8003ea0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	005b      	lsls	r3, r3, #1
 8003e48:	2203      	movs	r2, #3
 8003e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4e:	43db      	mvns	r3, r3
 8003e50:	69ba      	ldr	r2, [r7, #24]
 8003e52:	4013      	ands	r3, r2
 8003e54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	68da      	ldr	r2, [r3, #12]
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	005b      	lsls	r3, r3, #1
 8003e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e62:	69ba      	ldr	r2, [r7, #24]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	69ba      	ldr	r2, [r7, #24]
 8003e6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e74:	2201      	movs	r2, #1
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7c:	43db      	mvns	r3, r3
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	4013      	ands	r3, r2
 8003e82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	091b      	lsrs	r3, r3, #4
 8003e8a:	f003 0201 	and.w	r2, r3, #1
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	fa02 f303 	lsl.w	r3, r2, r3
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	69ba      	ldr	r2, [r7, #24]
 8003e9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f003 0303 	and.w	r3, r3, #3
 8003ea8:	2b03      	cmp	r3, #3
 8003eaa:	d017      	beq.n	8003edc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	005b      	lsls	r3, r3, #1
 8003eb6:	2203      	movs	r2, #3
 8003eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebc:	43db      	mvns	r3, r3
 8003ebe:	69ba      	ldr	r2, [r7, #24]
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	689a      	ldr	r2, [r3, #8]
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	005b      	lsls	r3, r3, #1
 8003ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f003 0303 	and.w	r3, r3, #3
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d123      	bne.n	8003f30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	08da      	lsrs	r2, r3, #3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	3208      	adds	r2, #8
 8003ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	f003 0307 	and.w	r3, r3, #7
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	220f      	movs	r2, #15
 8003f00:	fa02 f303 	lsl.w	r3, r2, r3
 8003f04:	43db      	mvns	r3, r3
 8003f06:	69ba      	ldr	r2, [r7, #24]
 8003f08:	4013      	ands	r3, r2
 8003f0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	691a      	ldr	r2, [r3, #16]
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	f003 0307 	and.w	r3, r3, #7
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1c:	69ba      	ldr	r2, [r7, #24]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	08da      	lsrs	r2, r3, #3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	3208      	adds	r2, #8
 8003f2a:	69b9      	ldr	r1, [r7, #24]
 8003f2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	005b      	lsls	r3, r3, #1
 8003f3a:	2203      	movs	r2, #3
 8003f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f40:	43db      	mvns	r3, r3
 8003f42:	69ba      	ldr	r2, [r7, #24]
 8003f44:	4013      	ands	r3, r2
 8003f46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f003 0203 	and.w	r2, r3, #3
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	005b      	lsls	r3, r3, #1
 8003f54:	fa02 f303 	lsl.w	r3, r2, r3
 8003f58:	69ba      	ldr	r2, [r7, #24]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f000 80ae 	beq.w	80040ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f72:	2300      	movs	r3, #0
 8003f74:	60fb      	str	r3, [r7, #12]
 8003f76:	4b5d      	ldr	r3, [pc, #372]	; (80040ec <HAL_GPIO_Init+0x300>)
 8003f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f7a:	4a5c      	ldr	r2, [pc, #368]	; (80040ec <HAL_GPIO_Init+0x300>)
 8003f7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f80:	6453      	str	r3, [r2, #68]	; 0x44
 8003f82:	4b5a      	ldr	r3, [pc, #360]	; (80040ec <HAL_GPIO_Init+0x300>)
 8003f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f8a:	60fb      	str	r3, [r7, #12]
 8003f8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f8e:	4a58      	ldr	r2, [pc, #352]	; (80040f0 <HAL_GPIO_Init+0x304>)
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	089b      	lsrs	r3, r3, #2
 8003f94:	3302      	adds	r3, #2
 8003f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	f003 0303 	and.w	r3, r3, #3
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	220f      	movs	r2, #15
 8003fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003faa:	43db      	mvns	r3, r3
 8003fac:	69ba      	ldr	r2, [r7, #24]
 8003fae:	4013      	ands	r3, r2
 8003fb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a4f      	ldr	r2, [pc, #316]	; (80040f4 <HAL_GPIO_Init+0x308>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d025      	beq.n	8004006 <HAL_GPIO_Init+0x21a>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a4e      	ldr	r2, [pc, #312]	; (80040f8 <HAL_GPIO_Init+0x30c>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d01f      	beq.n	8004002 <HAL_GPIO_Init+0x216>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a4d      	ldr	r2, [pc, #308]	; (80040fc <HAL_GPIO_Init+0x310>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d019      	beq.n	8003ffe <HAL_GPIO_Init+0x212>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a4c      	ldr	r2, [pc, #304]	; (8004100 <HAL_GPIO_Init+0x314>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d013      	beq.n	8003ffa <HAL_GPIO_Init+0x20e>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a4b      	ldr	r2, [pc, #300]	; (8004104 <HAL_GPIO_Init+0x318>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d00d      	beq.n	8003ff6 <HAL_GPIO_Init+0x20a>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a4a      	ldr	r2, [pc, #296]	; (8004108 <HAL_GPIO_Init+0x31c>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d007      	beq.n	8003ff2 <HAL_GPIO_Init+0x206>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a49      	ldr	r2, [pc, #292]	; (800410c <HAL_GPIO_Init+0x320>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d101      	bne.n	8003fee <HAL_GPIO_Init+0x202>
 8003fea:	2306      	movs	r3, #6
 8003fec:	e00c      	b.n	8004008 <HAL_GPIO_Init+0x21c>
 8003fee:	2307      	movs	r3, #7
 8003ff0:	e00a      	b.n	8004008 <HAL_GPIO_Init+0x21c>
 8003ff2:	2305      	movs	r3, #5
 8003ff4:	e008      	b.n	8004008 <HAL_GPIO_Init+0x21c>
 8003ff6:	2304      	movs	r3, #4
 8003ff8:	e006      	b.n	8004008 <HAL_GPIO_Init+0x21c>
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e004      	b.n	8004008 <HAL_GPIO_Init+0x21c>
 8003ffe:	2302      	movs	r3, #2
 8004000:	e002      	b.n	8004008 <HAL_GPIO_Init+0x21c>
 8004002:	2301      	movs	r3, #1
 8004004:	e000      	b.n	8004008 <HAL_GPIO_Init+0x21c>
 8004006:	2300      	movs	r3, #0
 8004008:	69fa      	ldr	r2, [r7, #28]
 800400a:	f002 0203 	and.w	r2, r2, #3
 800400e:	0092      	lsls	r2, r2, #2
 8004010:	4093      	lsls	r3, r2
 8004012:	69ba      	ldr	r2, [r7, #24]
 8004014:	4313      	orrs	r3, r2
 8004016:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004018:	4935      	ldr	r1, [pc, #212]	; (80040f0 <HAL_GPIO_Init+0x304>)
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	089b      	lsrs	r3, r3, #2
 800401e:	3302      	adds	r3, #2
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004026:	4b3a      	ldr	r3, [pc, #232]	; (8004110 <HAL_GPIO_Init+0x324>)
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	43db      	mvns	r3, r3
 8004030:	69ba      	ldr	r2, [r7, #24]
 8004032:	4013      	ands	r3, r2
 8004034:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d003      	beq.n	800404a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004042:	69ba      	ldr	r2, [r7, #24]
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	4313      	orrs	r3, r2
 8004048:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800404a:	4a31      	ldr	r2, [pc, #196]	; (8004110 <HAL_GPIO_Init+0x324>)
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004050:	4b2f      	ldr	r3, [pc, #188]	; (8004110 <HAL_GPIO_Init+0x324>)
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	43db      	mvns	r3, r3
 800405a:	69ba      	ldr	r2, [r7, #24]
 800405c:	4013      	ands	r3, r2
 800405e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d003      	beq.n	8004074 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	4313      	orrs	r3, r2
 8004072:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004074:	4a26      	ldr	r2, [pc, #152]	; (8004110 <HAL_GPIO_Init+0x324>)
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800407a:	4b25      	ldr	r3, [pc, #148]	; (8004110 <HAL_GPIO_Init+0x324>)
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	43db      	mvns	r3, r3
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	4013      	ands	r3, r2
 8004088:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d003      	beq.n	800409e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004096:	69ba      	ldr	r2, [r7, #24]
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	4313      	orrs	r3, r2
 800409c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800409e:	4a1c      	ldr	r2, [pc, #112]	; (8004110 <HAL_GPIO_Init+0x324>)
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040a4:	4b1a      	ldr	r3, [pc, #104]	; (8004110 <HAL_GPIO_Init+0x324>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	43db      	mvns	r3, r3
 80040ae:	69ba      	ldr	r2, [r7, #24]
 80040b0:	4013      	ands	r3, r2
 80040b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d003      	beq.n	80040c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040c8:	4a11      	ldr	r2, [pc, #68]	; (8004110 <HAL_GPIO_Init+0x324>)
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	3301      	adds	r3, #1
 80040d2:	61fb      	str	r3, [r7, #28]
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	2b0f      	cmp	r3, #15
 80040d8:	f67f ae96 	bls.w	8003e08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80040dc:	bf00      	nop
 80040de:	bf00      	nop
 80040e0:	3724      	adds	r7, #36	; 0x24
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	40023800 	.word	0x40023800
 80040f0:	40013800 	.word	0x40013800
 80040f4:	40020000 	.word	0x40020000
 80040f8:	40020400 	.word	0x40020400
 80040fc:	40020800 	.word	0x40020800
 8004100:	40020c00 	.word	0x40020c00
 8004104:	40021000 	.word	0x40021000
 8004108:	40021400 	.word	0x40021400
 800410c:	40021800 	.word	0x40021800
 8004110:	40013c00 	.word	0x40013c00

08004114 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	4603      	mov	r3, r0
 800411c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800411e:	4b08      	ldr	r3, [pc, #32]	; (8004140 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004120:	695a      	ldr	r2, [r3, #20]
 8004122:	88fb      	ldrh	r3, [r7, #6]
 8004124:	4013      	ands	r3, r2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d006      	beq.n	8004138 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800412a:	4a05      	ldr	r2, [pc, #20]	; (8004140 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800412c:	88fb      	ldrh	r3, [r7, #6]
 800412e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004130:	88fb      	ldrh	r3, [r7, #6]
 8004132:	4618      	mov	r0, r3
 8004134:	f7fd fe58 	bl	8001de8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004138:	bf00      	nop
 800413a:	3708      	adds	r7, #8
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	40013c00 	.word	0x40013c00

08004144 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d101      	bne.n	8004158 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e0cc      	b.n	80042f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004158:	4b68      	ldr	r3, [pc, #416]	; (80042fc <HAL_RCC_ClockConfig+0x1b8>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 030f 	and.w	r3, r3, #15
 8004160:	683a      	ldr	r2, [r7, #0]
 8004162:	429a      	cmp	r2, r3
 8004164:	d90c      	bls.n	8004180 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004166:	4b65      	ldr	r3, [pc, #404]	; (80042fc <HAL_RCC_ClockConfig+0x1b8>)
 8004168:	683a      	ldr	r2, [r7, #0]
 800416a:	b2d2      	uxtb	r2, r2
 800416c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800416e:	4b63      	ldr	r3, [pc, #396]	; (80042fc <HAL_RCC_ClockConfig+0x1b8>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 030f 	and.w	r3, r3, #15
 8004176:	683a      	ldr	r2, [r7, #0]
 8004178:	429a      	cmp	r2, r3
 800417a:	d001      	beq.n	8004180 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e0b8      	b.n	80042f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0302 	and.w	r3, r3, #2
 8004188:	2b00      	cmp	r3, #0
 800418a:	d020      	beq.n	80041ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0304 	and.w	r3, r3, #4
 8004194:	2b00      	cmp	r3, #0
 8004196:	d005      	beq.n	80041a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004198:	4b59      	ldr	r3, [pc, #356]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	4a58      	ldr	r2, [pc, #352]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 800419e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80041a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0308 	and.w	r3, r3, #8
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d005      	beq.n	80041bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041b0:	4b53      	ldr	r3, [pc, #332]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	4a52      	ldr	r2, [pc, #328]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 80041b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80041ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041bc:	4b50      	ldr	r3, [pc, #320]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	494d      	ldr	r1, [pc, #308]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d044      	beq.n	8004264 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d107      	bne.n	80041f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041e2:	4b47      	ldr	r3, [pc, #284]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d119      	bne.n	8004222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e07f      	b.n	80042f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d003      	beq.n	8004202 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041fe:	2b03      	cmp	r3, #3
 8004200:	d107      	bne.n	8004212 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004202:	4b3f      	ldr	r3, [pc, #252]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d109      	bne.n	8004222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e06f      	b.n	80042f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004212:	4b3b      	ldr	r3, [pc, #236]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d101      	bne.n	8004222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e067      	b.n	80042f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004222:	4b37      	ldr	r3, [pc, #220]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f023 0203 	bic.w	r2, r3, #3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	4934      	ldr	r1, [pc, #208]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 8004230:	4313      	orrs	r3, r2
 8004232:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004234:	f7fe fbde 	bl	80029f4 <HAL_GetTick>
 8004238:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800423a:	e00a      	b.n	8004252 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800423c:	f7fe fbda 	bl	80029f4 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	f241 3288 	movw	r2, #5000	; 0x1388
 800424a:	4293      	cmp	r3, r2
 800424c:	d901      	bls.n	8004252 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e04f      	b.n	80042f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004252:	4b2b      	ldr	r3, [pc, #172]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f003 020c 	and.w	r2, r3, #12
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	429a      	cmp	r2, r3
 8004262:	d1eb      	bne.n	800423c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004264:	4b25      	ldr	r3, [pc, #148]	; (80042fc <HAL_RCC_ClockConfig+0x1b8>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 030f 	and.w	r3, r3, #15
 800426c:	683a      	ldr	r2, [r7, #0]
 800426e:	429a      	cmp	r2, r3
 8004270:	d20c      	bcs.n	800428c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004272:	4b22      	ldr	r3, [pc, #136]	; (80042fc <HAL_RCC_ClockConfig+0x1b8>)
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	b2d2      	uxtb	r2, r2
 8004278:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800427a:	4b20      	ldr	r3, [pc, #128]	; (80042fc <HAL_RCC_ClockConfig+0x1b8>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 030f 	and.w	r3, r3, #15
 8004282:	683a      	ldr	r2, [r7, #0]
 8004284:	429a      	cmp	r2, r3
 8004286:	d001      	beq.n	800428c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e032      	b.n	80042f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0304 	and.w	r3, r3, #4
 8004294:	2b00      	cmp	r3, #0
 8004296:	d008      	beq.n	80042aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004298:	4b19      	ldr	r3, [pc, #100]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	4916      	ldr	r1, [pc, #88]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0308 	and.w	r3, r3, #8
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d009      	beq.n	80042ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042b6:	4b12      	ldr	r3, [pc, #72]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	00db      	lsls	r3, r3, #3
 80042c4:	490e      	ldr	r1, [pc, #56]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042ca:	f000 f855 	bl	8004378 <HAL_RCC_GetSysClockFreq>
 80042ce:	4602      	mov	r2, r0
 80042d0:	4b0b      	ldr	r3, [pc, #44]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	091b      	lsrs	r3, r3, #4
 80042d6:	f003 030f 	and.w	r3, r3, #15
 80042da:	490a      	ldr	r1, [pc, #40]	; (8004304 <HAL_RCC_ClockConfig+0x1c0>)
 80042dc:	5ccb      	ldrb	r3, [r1, r3]
 80042de:	fa22 f303 	lsr.w	r3, r2, r3
 80042e2:	4a09      	ldr	r2, [pc, #36]	; (8004308 <HAL_RCC_ClockConfig+0x1c4>)
 80042e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80042e6:	4b09      	ldr	r3, [pc, #36]	; (800430c <HAL_RCC_ClockConfig+0x1c8>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7fe fb3e 	bl	800296c <HAL_InitTick>

  return HAL_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3710      	adds	r7, #16
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	40023c00 	.word	0x40023c00
 8004300:	40023800 	.word	0x40023800
 8004304:	08007734 	.word	0x08007734
 8004308:	20000004 	.word	0x20000004
 800430c:	20000008 	.word	0x20000008

08004310 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004310:	b480      	push	{r7}
 8004312:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004314:	4b03      	ldr	r3, [pc, #12]	; (8004324 <HAL_RCC_GetHCLKFreq+0x14>)
 8004316:	681b      	ldr	r3, [r3, #0]
}
 8004318:	4618      	mov	r0, r3
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	20000004 	.word	0x20000004

08004328 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800432c:	f7ff fff0 	bl	8004310 <HAL_RCC_GetHCLKFreq>
 8004330:	4602      	mov	r2, r0
 8004332:	4b05      	ldr	r3, [pc, #20]	; (8004348 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	0a9b      	lsrs	r3, r3, #10
 8004338:	f003 0307 	and.w	r3, r3, #7
 800433c:	4903      	ldr	r1, [pc, #12]	; (800434c <HAL_RCC_GetPCLK1Freq+0x24>)
 800433e:	5ccb      	ldrb	r3, [r1, r3]
 8004340:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004344:	4618      	mov	r0, r3
 8004346:	bd80      	pop	{r7, pc}
 8004348:	40023800 	.word	0x40023800
 800434c:	08007744 	.word	0x08007744

08004350 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004354:	f7ff ffdc 	bl	8004310 <HAL_RCC_GetHCLKFreq>
 8004358:	4602      	mov	r2, r0
 800435a:	4b05      	ldr	r3, [pc, #20]	; (8004370 <HAL_RCC_GetPCLK2Freq+0x20>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	0b5b      	lsrs	r3, r3, #13
 8004360:	f003 0307 	and.w	r3, r3, #7
 8004364:	4903      	ldr	r1, [pc, #12]	; (8004374 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004366:	5ccb      	ldrb	r3, [r1, r3]
 8004368:	fa22 f303 	lsr.w	r3, r2, r3
}
 800436c:	4618      	mov	r0, r3
 800436e:	bd80      	pop	{r7, pc}
 8004370:	40023800 	.word	0x40023800
 8004374:	08007744 	.word	0x08007744

08004378 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004378:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800437c:	b0a6      	sub	sp, #152	; 0x98
 800437e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004380:	2300      	movs	r3, #0
 8004382:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8004386:	2300      	movs	r3, #0
 8004388:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 800438c:	2300      	movs	r3, #0
 800438e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8004392:	2300      	movs	r3, #0
 8004394:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8004398:	2300      	movs	r3, #0
 800439a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800439e:	4bc8      	ldr	r3, [pc, #800]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x348>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f003 030c 	and.w	r3, r3, #12
 80043a6:	2b0c      	cmp	r3, #12
 80043a8:	f200 817e 	bhi.w	80046a8 <HAL_RCC_GetSysClockFreq+0x330>
 80043ac:	a201      	add	r2, pc, #4	; (adr r2, 80043b4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80043ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b2:	bf00      	nop
 80043b4:	080043e9 	.word	0x080043e9
 80043b8:	080046a9 	.word	0x080046a9
 80043bc:	080046a9 	.word	0x080046a9
 80043c0:	080046a9 	.word	0x080046a9
 80043c4:	080043f1 	.word	0x080043f1
 80043c8:	080046a9 	.word	0x080046a9
 80043cc:	080046a9 	.word	0x080046a9
 80043d0:	080046a9 	.word	0x080046a9
 80043d4:	080043f9 	.word	0x080043f9
 80043d8:	080046a9 	.word	0x080046a9
 80043dc:	080046a9 	.word	0x080046a9
 80043e0:	080046a9 	.word	0x080046a9
 80043e4:	08004563 	.word	0x08004563
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043e8:	4bb6      	ldr	r3, [pc, #728]	; (80046c4 <HAL_RCC_GetSysClockFreq+0x34c>)
 80043ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80043ee:	e15f      	b.n	80046b0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043f0:	4bb5      	ldr	r3, [pc, #724]	; (80046c8 <HAL_RCC_GetSysClockFreq+0x350>)
 80043f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80043f6:	e15b      	b.n	80046b0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043f8:	4bb1      	ldr	r3, [pc, #708]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x348>)
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004400:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004404:	4bae      	ldr	r3, [pc, #696]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x348>)
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d031      	beq.n	8004474 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004410:	4bab      	ldr	r3, [pc, #684]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x348>)
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	099b      	lsrs	r3, r3, #6
 8004416:	2200      	movs	r2, #0
 8004418:	66bb      	str	r3, [r7, #104]	; 0x68
 800441a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800441c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800441e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004422:	663b      	str	r3, [r7, #96]	; 0x60
 8004424:	2300      	movs	r3, #0
 8004426:	667b      	str	r3, [r7, #100]	; 0x64
 8004428:	4ba7      	ldr	r3, [pc, #668]	; (80046c8 <HAL_RCC_GetSysClockFreq+0x350>)
 800442a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800442e:	462a      	mov	r2, r5
 8004430:	fb03 f202 	mul.w	r2, r3, r2
 8004434:	2300      	movs	r3, #0
 8004436:	4621      	mov	r1, r4
 8004438:	fb01 f303 	mul.w	r3, r1, r3
 800443c:	4413      	add	r3, r2
 800443e:	4aa2      	ldr	r2, [pc, #648]	; (80046c8 <HAL_RCC_GetSysClockFreq+0x350>)
 8004440:	4621      	mov	r1, r4
 8004442:	fba1 1202 	umull	r1, r2, r1, r2
 8004446:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004448:	460a      	mov	r2, r1
 800444a:	67ba      	str	r2, [r7, #120]	; 0x78
 800444c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800444e:	4413      	add	r3, r2
 8004450:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004452:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004456:	2200      	movs	r2, #0
 8004458:	65bb      	str	r3, [r7, #88]	; 0x58
 800445a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800445c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004460:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8004464:	f7fc fa32 	bl	80008cc <__aeabi_uldivmod>
 8004468:	4602      	mov	r2, r0
 800446a:	460b      	mov	r3, r1
 800446c:	4613      	mov	r3, r2
 800446e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004472:	e064      	b.n	800453e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004474:	4b92      	ldr	r3, [pc, #584]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x348>)
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	099b      	lsrs	r3, r3, #6
 800447a:	2200      	movs	r2, #0
 800447c:	653b      	str	r3, [r7, #80]	; 0x50
 800447e:	657a      	str	r2, [r7, #84]	; 0x54
 8004480:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004486:	64bb      	str	r3, [r7, #72]	; 0x48
 8004488:	2300      	movs	r3, #0
 800448a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800448c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8004490:	4622      	mov	r2, r4
 8004492:	462b      	mov	r3, r5
 8004494:	f04f 0000 	mov.w	r0, #0
 8004498:	f04f 0100 	mov.w	r1, #0
 800449c:	0159      	lsls	r1, r3, #5
 800449e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044a2:	0150      	lsls	r0, r2, #5
 80044a4:	4602      	mov	r2, r0
 80044a6:	460b      	mov	r3, r1
 80044a8:	4621      	mov	r1, r4
 80044aa:	1a51      	subs	r1, r2, r1
 80044ac:	6139      	str	r1, [r7, #16]
 80044ae:	4629      	mov	r1, r5
 80044b0:	eb63 0301 	sbc.w	r3, r3, r1
 80044b4:	617b      	str	r3, [r7, #20]
 80044b6:	f04f 0200 	mov.w	r2, #0
 80044ba:	f04f 0300 	mov.w	r3, #0
 80044be:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044c2:	4659      	mov	r1, fp
 80044c4:	018b      	lsls	r3, r1, #6
 80044c6:	4651      	mov	r1, sl
 80044c8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80044cc:	4651      	mov	r1, sl
 80044ce:	018a      	lsls	r2, r1, #6
 80044d0:	4651      	mov	r1, sl
 80044d2:	ebb2 0801 	subs.w	r8, r2, r1
 80044d6:	4659      	mov	r1, fp
 80044d8:	eb63 0901 	sbc.w	r9, r3, r1
 80044dc:	f04f 0200 	mov.w	r2, #0
 80044e0:	f04f 0300 	mov.w	r3, #0
 80044e4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044e8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044ec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044f0:	4690      	mov	r8, r2
 80044f2:	4699      	mov	r9, r3
 80044f4:	4623      	mov	r3, r4
 80044f6:	eb18 0303 	adds.w	r3, r8, r3
 80044fa:	60bb      	str	r3, [r7, #8]
 80044fc:	462b      	mov	r3, r5
 80044fe:	eb49 0303 	adc.w	r3, r9, r3
 8004502:	60fb      	str	r3, [r7, #12]
 8004504:	f04f 0200 	mov.w	r2, #0
 8004508:	f04f 0300 	mov.w	r3, #0
 800450c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004510:	4629      	mov	r1, r5
 8004512:	028b      	lsls	r3, r1, #10
 8004514:	4621      	mov	r1, r4
 8004516:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800451a:	4621      	mov	r1, r4
 800451c:	028a      	lsls	r2, r1, #10
 800451e:	4610      	mov	r0, r2
 8004520:	4619      	mov	r1, r3
 8004522:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004526:	2200      	movs	r2, #0
 8004528:	643b      	str	r3, [r7, #64]	; 0x40
 800452a:	647a      	str	r2, [r7, #68]	; 0x44
 800452c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004530:	f7fc f9cc 	bl	80008cc <__aeabi_uldivmod>
 8004534:	4602      	mov	r2, r0
 8004536:	460b      	mov	r3, r1
 8004538:	4613      	mov	r3, r2
 800453a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800453e:	4b60      	ldr	r3, [pc, #384]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x348>)
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	0c1b      	lsrs	r3, r3, #16
 8004544:	f003 0303 	and.w	r3, r3, #3
 8004548:	3301      	adds	r3, #1
 800454a:	005b      	lsls	r3, r3, #1
 800454c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8004550:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004554:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004558:	fbb2 f3f3 	udiv	r3, r2, r3
 800455c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004560:	e0a6      	b.n	80046b0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004562:	4b57      	ldr	r3, [pc, #348]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x348>)
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800456a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800456e:	4b54      	ldr	r3, [pc, #336]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x348>)
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d02a      	beq.n	80045d0 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800457a:	4b51      	ldr	r3, [pc, #324]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x348>)
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	099b      	lsrs	r3, r3, #6
 8004580:	2200      	movs	r2, #0
 8004582:	63bb      	str	r3, [r7, #56]	; 0x38
 8004584:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004588:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800458c:	2100      	movs	r1, #0
 800458e:	4b4e      	ldr	r3, [pc, #312]	; (80046c8 <HAL_RCC_GetSysClockFreq+0x350>)
 8004590:	fb03 f201 	mul.w	r2, r3, r1
 8004594:	2300      	movs	r3, #0
 8004596:	fb00 f303 	mul.w	r3, r0, r3
 800459a:	4413      	add	r3, r2
 800459c:	4a4a      	ldr	r2, [pc, #296]	; (80046c8 <HAL_RCC_GetSysClockFreq+0x350>)
 800459e:	fba0 1202 	umull	r1, r2, r0, r2
 80045a2:	677a      	str	r2, [r7, #116]	; 0x74
 80045a4:	460a      	mov	r2, r1
 80045a6:	673a      	str	r2, [r7, #112]	; 0x70
 80045a8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80045aa:	4413      	add	r3, r2
 80045ac:	677b      	str	r3, [r7, #116]	; 0x74
 80045ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045b2:	2200      	movs	r2, #0
 80045b4:	633b      	str	r3, [r7, #48]	; 0x30
 80045b6:	637a      	str	r2, [r7, #52]	; 0x34
 80045b8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80045bc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80045c0:	f7fc f984 	bl	80008cc <__aeabi_uldivmod>
 80045c4:	4602      	mov	r2, r0
 80045c6:	460b      	mov	r3, r1
 80045c8:	4613      	mov	r3, r2
 80045ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80045ce:	e05b      	b.n	8004688 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045d0:	4b3b      	ldr	r3, [pc, #236]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x348>)
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	099b      	lsrs	r3, r3, #6
 80045d6:	2200      	movs	r2, #0
 80045d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80045da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045e2:	623b      	str	r3, [r7, #32]
 80045e4:	2300      	movs	r3, #0
 80045e6:	627b      	str	r3, [r7, #36]	; 0x24
 80045e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80045ec:	4642      	mov	r2, r8
 80045ee:	464b      	mov	r3, r9
 80045f0:	f04f 0000 	mov.w	r0, #0
 80045f4:	f04f 0100 	mov.w	r1, #0
 80045f8:	0159      	lsls	r1, r3, #5
 80045fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045fe:	0150      	lsls	r0, r2, #5
 8004600:	4602      	mov	r2, r0
 8004602:	460b      	mov	r3, r1
 8004604:	4641      	mov	r1, r8
 8004606:	ebb2 0a01 	subs.w	sl, r2, r1
 800460a:	4649      	mov	r1, r9
 800460c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004610:	f04f 0200 	mov.w	r2, #0
 8004614:	f04f 0300 	mov.w	r3, #0
 8004618:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800461c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004620:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004624:	ebb2 040a 	subs.w	r4, r2, sl
 8004628:	eb63 050b 	sbc.w	r5, r3, fp
 800462c:	f04f 0200 	mov.w	r2, #0
 8004630:	f04f 0300 	mov.w	r3, #0
 8004634:	00eb      	lsls	r3, r5, #3
 8004636:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800463a:	00e2      	lsls	r2, r4, #3
 800463c:	4614      	mov	r4, r2
 800463e:	461d      	mov	r5, r3
 8004640:	4643      	mov	r3, r8
 8004642:	18e3      	adds	r3, r4, r3
 8004644:	603b      	str	r3, [r7, #0]
 8004646:	464b      	mov	r3, r9
 8004648:	eb45 0303 	adc.w	r3, r5, r3
 800464c:	607b      	str	r3, [r7, #4]
 800464e:	f04f 0200 	mov.w	r2, #0
 8004652:	f04f 0300 	mov.w	r3, #0
 8004656:	e9d7 4500 	ldrd	r4, r5, [r7]
 800465a:	4629      	mov	r1, r5
 800465c:	028b      	lsls	r3, r1, #10
 800465e:	4621      	mov	r1, r4
 8004660:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004664:	4621      	mov	r1, r4
 8004666:	028a      	lsls	r2, r1, #10
 8004668:	4610      	mov	r0, r2
 800466a:	4619      	mov	r1, r3
 800466c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004670:	2200      	movs	r2, #0
 8004672:	61bb      	str	r3, [r7, #24]
 8004674:	61fa      	str	r2, [r7, #28]
 8004676:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800467a:	f7fc f927 	bl	80008cc <__aeabi_uldivmod>
 800467e:	4602      	mov	r2, r0
 8004680:	460b      	mov	r3, r1
 8004682:	4613      	mov	r3, r2
 8004684:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004688:	4b0d      	ldr	r3, [pc, #52]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x348>)
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	0f1b      	lsrs	r3, r3, #28
 800468e:	f003 0307 	and.w	r3, r3, #7
 8004692:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8004696:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800469a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800469e:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80046a6:	e003      	b.n	80046b0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046a8:	4b06      	ldr	r3, [pc, #24]	; (80046c4 <HAL_RCC_GetSysClockFreq+0x34c>)
 80046aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80046ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3798      	adds	r7, #152	; 0x98
 80046b8:	46bd      	mov	sp, r7
 80046ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046be:	bf00      	nop
 80046c0:	40023800 	.word	0x40023800
 80046c4:	00f42400 	.word	0x00f42400
 80046c8:	017d7840 	.word	0x017d7840

080046cc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d101      	bne.n	80046de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e28d      	b.n	8004bfa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f000 8083 	beq.w	80047f2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80046ec:	4b94      	ldr	r3, [pc, #592]	; (8004940 <HAL_RCC_OscConfig+0x274>)
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f003 030c 	and.w	r3, r3, #12
 80046f4:	2b04      	cmp	r3, #4
 80046f6:	d019      	beq.n	800472c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80046f8:	4b91      	ldr	r3, [pc, #580]	; (8004940 <HAL_RCC_OscConfig+0x274>)
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004700:	2b08      	cmp	r3, #8
 8004702:	d106      	bne.n	8004712 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004704:	4b8e      	ldr	r3, [pc, #568]	; (8004940 <HAL_RCC_OscConfig+0x274>)
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800470c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004710:	d00c      	beq.n	800472c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004712:	4b8b      	ldr	r3, [pc, #556]	; (8004940 <HAL_RCC_OscConfig+0x274>)
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800471a:	2b0c      	cmp	r3, #12
 800471c:	d112      	bne.n	8004744 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800471e:	4b88      	ldr	r3, [pc, #544]	; (8004940 <HAL_RCC_OscConfig+0x274>)
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004726:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800472a:	d10b      	bne.n	8004744 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800472c:	4b84      	ldr	r3, [pc, #528]	; (8004940 <HAL_RCC_OscConfig+0x274>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d05b      	beq.n	80047f0 <HAL_RCC_OscConfig+0x124>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d157      	bne.n	80047f0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e25a      	b.n	8004bfa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800474c:	d106      	bne.n	800475c <HAL_RCC_OscConfig+0x90>
 800474e:	4b7c      	ldr	r3, [pc, #496]	; (8004940 <HAL_RCC_OscConfig+0x274>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a7b      	ldr	r2, [pc, #492]	; (8004940 <HAL_RCC_OscConfig+0x274>)
 8004754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004758:	6013      	str	r3, [r2, #0]
 800475a:	e01d      	b.n	8004798 <HAL_RCC_OscConfig+0xcc>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004764:	d10c      	bne.n	8004780 <HAL_RCC_OscConfig+0xb4>
 8004766:	4b76      	ldr	r3, [pc, #472]	; (8004940 <HAL_RCC_OscConfig+0x274>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a75      	ldr	r2, [pc, #468]	; (8004940 <HAL_RCC_OscConfig+0x274>)
 800476c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004770:	6013      	str	r3, [r2, #0]
 8004772:	4b73      	ldr	r3, [pc, #460]	; (8004940 <HAL_RCC_OscConfig+0x274>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a72      	ldr	r2, [pc, #456]	; (8004940 <HAL_RCC_OscConfig+0x274>)
 8004778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800477c:	6013      	str	r3, [r2, #0]
 800477e:	e00b      	b.n	8004798 <HAL_RCC_OscConfig+0xcc>
 8004780:	4b6f      	ldr	r3, [pc, #444]	; (8004940 <HAL_RCC_OscConfig+0x274>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a6e      	ldr	r2, [pc, #440]	; (8004940 <HAL_RCC_OscConfig+0x274>)
 8004786:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800478a:	6013      	str	r3, [r2, #0]
 800478c:	4b6c      	ldr	r3, [pc, #432]	; (8004940 <HAL_RCC_OscConfig+0x274>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a6b      	ldr	r2, [pc, #428]	; (8004940 <HAL_RCC_OscConfig+0x274>)
 8004792:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004796:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d013      	beq.n	80047c8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a0:	f7fe f928 	bl	80029f4 <HAL_GetTick>
 80047a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047a6:	e008      	b.n	80047ba <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047a8:	f7fe f924 	bl	80029f4 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b64      	cmp	r3, #100	; 0x64
 80047b4:	d901      	bls.n	80047ba <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e21f      	b.n	8004bfa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ba:	4b61      	ldr	r3, [pc, #388]	; (8004940 <HAL_RCC_OscConfig+0x274>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d0f0      	beq.n	80047a8 <HAL_RCC_OscConfig+0xdc>
 80047c6:	e014      	b.n	80047f2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c8:	f7fe f914 	bl	80029f4 <HAL_GetTick>
 80047cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047ce:	e008      	b.n	80047e2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047d0:	f7fe f910 	bl	80029f4 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b64      	cmp	r3, #100	; 0x64
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e20b      	b.n	8004bfa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047e2:	4b57      	ldr	r3, [pc, #348]	; (8004940 <HAL_RCC_OscConfig+0x274>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1f0      	bne.n	80047d0 <HAL_RCC_OscConfig+0x104>
 80047ee:	e000      	b.n	80047f2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0302 	and.w	r3, r3, #2
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d06f      	beq.n	80048de <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80047fe:	4b50      	ldr	r3, [pc, #320]	; (8004940 <HAL_RCC_OscConfig+0x274>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f003 030c 	and.w	r3, r3, #12
 8004806:	2b00      	cmp	r3, #0
 8004808:	d017      	beq.n	800483a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800480a:	4b4d      	ldr	r3, [pc, #308]	; (8004940 <HAL_RCC_OscConfig+0x274>)
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004812:	2b08      	cmp	r3, #8
 8004814:	d105      	bne.n	8004822 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004816:	4b4a      	ldr	r3, [pc, #296]	; (8004940 <HAL_RCC_OscConfig+0x274>)
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00b      	beq.n	800483a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004822:	4b47      	ldr	r3, [pc, #284]	; (8004940 <HAL_RCC_OscConfig+0x274>)
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800482a:	2b0c      	cmp	r3, #12
 800482c:	d11c      	bne.n	8004868 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800482e:	4b44      	ldr	r3, [pc, #272]	; (8004940 <HAL_RCC_OscConfig+0x274>)
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d116      	bne.n	8004868 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800483a:	4b41      	ldr	r3, [pc, #260]	; (8004940 <HAL_RCC_OscConfig+0x274>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0302 	and.w	r3, r3, #2
 8004842:	2b00      	cmp	r3, #0
 8004844:	d005      	beq.n	8004852 <HAL_RCC_OscConfig+0x186>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d001      	beq.n	8004852 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e1d3      	b.n	8004bfa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004852:	4b3b      	ldr	r3, [pc, #236]	; (8004940 <HAL_RCC_OscConfig+0x274>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	00db      	lsls	r3, r3, #3
 8004860:	4937      	ldr	r1, [pc, #220]	; (8004940 <HAL_RCC_OscConfig+0x274>)
 8004862:	4313      	orrs	r3, r2
 8004864:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004866:	e03a      	b.n	80048de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d020      	beq.n	80048b2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004870:	4b34      	ldr	r3, [pc, #208]	; (8004944 <HAL_RCC_OscConfig+0x278>)
 8004872:	2201      	movs	r2, #1
 8004874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004876:	f7fe f8bd 	bl	80029f4 <HAL_GetTick>
 800487a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800487c:	e008      	b.n	8004890 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800487e:	f7fe f8b9 	bl	80029f4 <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	2b02      	cmp	r3, #2
 800488a:	d901      	bls.n	8004890 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	e1b4      	b.n	8004bfa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004890:	4b2b      	ldr	r3, [pc, #172]	; (8004940 <HAL_RCC_OscConfig+0x274>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0302 	and.w	r3, r3, #2
 8004898:	2b00      	cmp	r3, #0
 800489a:	d0f0      	beq.n	800487e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800489c:	4b28      	ldr	r3, [pc, #160]	; (8004940 <HAL_RCC_OscConfig+0x274>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	00db      	lsls	r3, r3, #3
 80048aa:	4925      	ldr	r1, [pc, #148]	; (8004940 <HAL_RCC_OscConfig+0x274>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	600b      	str	r3, [r1, #0]
 80048b0:	e015      	b.n	80048de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048b2:	4b24      	ldr	r3, [pc, #144]	; (8004944 <HAL_RCC_OscConfig+0x278>)
 80048b4:	2200      	movs	r2, #0
 80048b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b8:	f7fe f89c 	bl	80029f4 <HAL_GetTick>
 80048bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048be:	e008      	b.n	80048d2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048c0:	f7fe f898 	bl	80029f4 <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d901      	bls.n	80048d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e193      	b.n	8004bfa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048d2:	4b1b      	ldr	r3, [pc, #108]	; (8004940 <HAL_RCC_OscConfig+0x274>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0302 	and.w	r3, r3, #2
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1f0      	bne.n	80048c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0308 	and.w	r3, r3, #8
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d036      	beq.n	8004958 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	695b      	ldr	r3, [r3, #20]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d016      	beq.n	8004920 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048f2:	4b15      	ldr	r3, [pc, #84]	; (8004948 <HAL_RCC_OscConfig+0x27c>)
 80048f4:	2201      	movs	r2, #1
 80048f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048f8:	f7fe f87c 	bl	80029f4 <HAL_GetTick>
 80048fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048fe:	e008      	b.n	8004912 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004900:	f7fe f878 	bl	80029f4 <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	2b02      	cmp	r3, #2
 800490c:	d901      	bls.n	8004912 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e173      	b.n	8004bfa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004912:	4b0b      	ldr	r3, [pc, #44]	; (8004940 <HAL_RCC_OscConfig+0x274>)
 8004914:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	2b00      	cmp	r3, #0
 800491c:	d0f0      	beq.n	8004900 <HAL_RCC_OscConfig+0x234>
 800491e:	e01b      	b.n	8004958 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004920:	4b09      	ldr	r3, [pc, #36]	; (8004948 <HAL_RCC_OscConfig+0x27c>)
 8004922:	2200      	movs	r2, #0
 8004924:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004926:	f7fe f865 	bl	80029f4 <HAL_GetTick>
 800492a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800492c:	e00e      	b.n	800494c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800492e:	f7fe f861 	bl	80029f4 <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	2b02      	cmp	r3, #2
 800493a:	d907      	bls.n	800494c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e15c      	b.n	8004bfa <HAL_RCC_OscConfig+0x52e>
 8004940:	40023800 	.word	0x40023800
 8004944:	42470000 	.word	0x42470000
 8004948:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800494c:	4b8a      	ldr	r3, [pc, #552]	; (8004b78 <HAL_RCC_OscConfig+0x4ac>)
 800494e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004950:	f003 0302 	and.w	r3, r3, #2
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1ea      	bne.n	800492e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0304 	and.w	r3, r3, #4
 8004960:	2b00      	cmp	r3, #0
 8004962:	f000 8097 	beq.w	8004a94 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004966:	2300      	movs	r3, #0
 8004968:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800496a:	4b83      	ldr	r3, [pc, #524]	; (8004b78 <HAL_RCC_OscConfig+0x4ac>)
 800496c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10f      	bne.n	8004996 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004976:	2300      	movs	r3, #0
 8004978:	60bb      	str	r3, [r7, #8]
 800497a:	4b7f      	ldr	r3, [pc, #508]	; (8004b78 <HAL_RCC_OscConfig+0x4ac>)
 800497c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497e:	4a7e      	ldr	r2, [pc, #504]	; (8004b78 <HAL_RCC_OscConfig+0x4ac>)
 8004980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004984:	6413      	str	r3, [r2, #64]	; 0x40
 8004986:	4b7c      	ldr	r3, [pc, #496]	; (8004b78 <HAL_RCC_OscConfig+0x4ac>)
 8004988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800498e:	60bb      	str	r3, [r7, #8]
 8004990:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004992:	2301      	movs	r3, #1
 8004994:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004996:	4b79      	ldr	r3, [pc, #484]	; (8004b7c <HAL_RCC_OscConfig+0x4b0>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d118      	bne.n	80049d4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049a2:	4b76      	ldr	r3, [pc, #472]	; (8004b7c <HAL_RCC_OscConfig+0x4b0>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a75      	ldr	r2, [pc, #468]	; (8004b7c <HAL_RCC_OscConfig+0x4b0>)
 80049a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049ae:	f7fe f821 	bl	80029f4 <HAL_GetTick>
 80049b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049b4:	e008      	b.n	80049c8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049b6:	f7fe f81d 	bl	80029f4 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d901      	bls.n	80049c8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e118      	b.n	8004bfa <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049c8:	4b6c      	ldr	r3, [pc, #432]	; (8004b7c <HAL_RCC_OscConfig+0x4b0>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d0f0      	beq.n	80049b6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d106      	bne.n	80049ea <HAL_RCC_OscConfig+0x31e>
 80049dc:	4b66      	ldr	r3, [pc, #408]	; (8004b78 <HAL_RCC_OscConfig+0x4ac>)
 80049de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e0:	4a65      	ldr	r2, [pc, #404]	; (8004b78 <HAL_RCC_OscConfig+0x4ac>)
 80049e2:	f043 0301 	orr.w	r3, r3, #1
 80049e6:	6713      	str	r3, [r2, #112]	; 0x70
 80049e8:	e01c      	b.n	8004a24 <HAL_RCC_OscConfig+0x358>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	2b05      	cmp	r3, #5
 80049f0:	d10c      	bne.n	8004a0c <HAL_RCC_OscConfig+0x340>
 80049f2:	4b61      	ldr	r3, [pc, #388]	; (8004b78 <HAL_RCC_OscConfig+0x4ac>)
 80049f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f6:	4a60      	ldr	r2, [pc, #384]	; (8004b78 <HAL_RCC_OscConfig+0x4ac>)
 80049f8:	f043 0304 	orr.w	r3, r3, #4
 80049fc:	6713      	str	r3, [r2, #112]	; 0x70
 80049fe:	4b5e      	ldr	r3, [pc, #376]	; (8004b78 <HAL_RCC_OscConfig+0x4ac>)
 8004a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a02:	4a5d      	ldr	r2, [pc, #372]	; (8004b78 <HAL_RCC_OscConfig+0x4ac>)
 8004a04:	f043 0301 	orr.w	r3, r3, #1
 8004a08:	6713      	str	r3, [r2, #112]	; 0x70
 8004a0a:	e00b      	b.n	8004a24 <HAL_RCC_OscConfig+0x358>
 8004a0c:	4b5a      	ldr	r3, [pc, #360]	; (8004b78 <HAL_RCC_OscConfig+0x4ac>)
 8004a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a10:	4a59      	ldr	r2, [pc, #356]	; (8004b78 <HAL_RCC_OscConfig+0x4ac>)
 8004a12:	f023 0301 	bic.w	r3, r3, #1
 8004a16:	6713      	str	r3, [r2, #112]	; 0x70
 8004a18:	4b57      	ldr	r3, [pc, #348]	; (8004b78 <HAL_RCC_OscConfig+0x4ac>)
 8004a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a1c:	4a56      	ldr	r2, [pc, #344]	; (8004b78 <HAL_RCC_OscConfig+0x4ac>)
 8004a1e:	f023 0304 	bic.w	r3, r3, #4
 8004a22:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d015      	beq.n	8004a58 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a2c:	f7fd ffe2 	bl	80029f4 <HAL_GetTick>
 8004a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a32:	e00a      	b.n	8004a4a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a34:	f7fd ffde 	bl	80029f4 <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d901      	bls.n	8004a4a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e0d7      	b.n	8004bfa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a4a:	4b4b      	ldr	r3, [pc, #300]	; (8004b78 <HAL_RCC_OscConfig+0x4ac>)
 8004a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a4e:	f003 0302 	and.w	r3, r3, #2
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d0ee      	beq.n	8004a34 <HAL_RCC_OscConfig+0x368>
 8004a56:	e014      	b.n	8004a82 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a58:	f7fd ffcc 	bl	80029f4 <HAL_GetTick>
 8004a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a5e:	e00a      	b.n	8004a76 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a60:	f7fd ffc8 	bl	80029f4 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d901      	bls.n	8004a76 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e0c1      	b.n	8004bfa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a76:	4b40      	ldr	r3, [pc, #256]	; (8004b78 <HAL_RCC_OscConfig+0x4ac>)
 8004a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d1ee      	bne.n	8004a60 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a82:	7dfb      	ldrb	r3, [r7, #23]
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d105      	bne.n	8004a94 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a88:	4b3b      	ldr	r3, [pc, #236]	; (8004b78 <HAL_RCC_OscConfig+0x4ac>)
 8004a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8c:	4a3a      	ldr	r2, [pc, #232]	; (8004b78 <HAL_RCC_OscConfig+0x4ac>)
 8004a8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a92:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f000 80ad 	beq.w	8004bf8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a9e:	4b36      	ldr	r3, [pc, #216]	; (8004b78 <HAL_RCC_OscConfig+0x4ac>)
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f003 030c 	and.w	r3, r3, #12
 8004aa6:	2b08      	cmp	r3, #8
 8004aa8:	d060      	beq.n	8004b6c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	699b      	ldr	r3, [r3, #24]
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d145      	bne.n	8004b3e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ab2:	4b33      	ldr	r3, [pc, #204]	; (8004b80 <HAL_RCC_OscConfig+0x4b4>)
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab8:	f7fd ff9c 	bl	80029f4 <HAL_GetTick>
 8004abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004abe:	e008      	b.n	8004ad2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ac0:	f7fd ff98 	bl	80029f4 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d901      	bls.n	8004ad2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e093      	b.n	8004bfa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ad2:	4b29      	ldr	r3, [pc, #164]	; (8004b78 <HAL_RCC_OscConfig+0x4ac>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1f0      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	69da      	ldr	r2, [r3, #28]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	431a      	orrs	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aec:	019b      	lsls	r3, r3, #6
 8004aee:	431a      	orrs	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af4:	085b      	lsrs	r3, r3, #1
 8004af6:	3b01      	subs	r3, #1
 8004af8:	041b      	lsls	r3, r3, #16
 8004afa:	431a      	orrs	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b00:	061b      	lsls	r3, r3, #24
 8004b02:	431a      	orrs	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b08:	071b      	lsls	r3, r3, #28
 8004b0a:	491b      	ldr	r1, [pc, #108]	; (8004b78 <HAL_RCC_OscConfig+0x4ac>)
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b10:	4b1b      	ldr	r3, [pc, #108]	; (8004b80 <HAL_RCC_OscConfig+0x4b4>)
 8004b12:	2201      	movs	r2, #1
 8004b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b16:	f7fd ff6d 	bl	80029f4 <HAL_GetTick>
 8004b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b1c:	e008      	b.n	8004b30 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b1e:	f7fd ff69 	bl	80029f4 <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d901      	bls.n	8004b30 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e064      	b.n	8004bfa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b30:	4b11      	ldr	r3, [pc, #68]	; (8004b78 <HAL_RCC_OscConfig+0x4ac>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d0f0      	beq.n	8004b1e <HAL_RCC_OscConfig+0x452>
 8004b3c:	e05c      	b.n	8004bf8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b3e:	4b10      	ldr	r3, [pc, #64]	; (8004b80 <HAL_RCC_OscConfig+0x4b4>)
 8004b40:	2200      	movs	r2, #0
 8004b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b44:	f7fd ff56 	bl	80029f4 <HAL_GetTick>
 8004b48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b4a:	e008      	b.n	8004b5e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b4c:	f7fd ff52 	bl	80029f4 <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d901      	bls.n	8004b5e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e04d      	b.n	8004bfa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b5e:	4b06      	ldr	r3, [pc, #24]	; (8004b78 <HAL_RCC_OscConfig+0x4ac>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d1f0      	bne.n	8004b4c <HAL_RCC_OscConfig+0x480>
 8004b6a:	e045      	b.n	8004bf8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	699b      	ldr	r3, [r3, #24]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d107      	bne.n	8004b84 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e040      	b.n	8004bfa <HAL_RCC_OscConfig+0x52e>
 8004b78:	40023800 	.word	0x40023800
 8004b7c:	40007000 	.word	0x40007000
 8004b80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b84:	4b1f      	ldr	r3, [pc, #124]	; (8004c04 <HAL_RCC_OscConfig+0x538>)
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d030      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d129      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d122      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004bba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d119      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bca:	085b      	lsrs	r3, r3, #1
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d10f      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bde:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d107      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bee:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d001      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e000      	b.n	8004bfa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3718      	adds	r7, #24
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	40023800 	.word	0x40023800

08004c08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e041      	b.n	8004c9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d106      	bne.n	8004c34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f7fd fbc2 	bl	80023b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2202      	movs	r2, #2
 8004c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	3304      	adds	r3, #4
 8004c44:	4619      	mov	r1, r3
 8004c46:	4610      	mov	r0, r2
 8004c48:	f000 fcdc 	bl	8005604 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3708      	adds	r7, #8
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
	...

08004ca8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d001      	beq.n	8004cc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e04e      	b.n	8004d5e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68da      	ldr	r2, [r3, #12]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f042 0201 	orr.w	r2, r2, #1
 8004cd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a23      	ldr	r2, [pc, #140]	; (8004d6c <HAL_TIM_Base_Start_IT+0xc4>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d022      	beq.n	8004d28 <HAL_TIM_Base_Start_IT+0x80>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cea:	d01d      	beq.n	8004d28 <HAL_TIM_Base_Start_IT+0x80>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a1f      	ldr	r2, [pc, #124]	; (8004d70 <HAL_TIM_Base_Start_IT+0xc8>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d018      	beq.n	8004d28 <HAL_TIM_Base_Start_IT+0x80>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a1e      	ldr	r2, [pc, #120]	; (8004d74 <HAL_TIM_Base_Start_IT+0xcc>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d013      	beq.n	8004d28 <HAL_TIM_Base_Start_IT+0x80>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a1c      	ldr	r2, [pc, #112]	; (8004d78 <HAL_TIM_Base_Start_IT+0xd0>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d00e      	beq.n	8004d28 <HAL_TIM_Base_Start_IT+0x80>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a1b      	ldr	r2, [pc, #108]	; (8004d7c <HAL_TIM_Base_Start_IT+0xd4>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d009      	beq.n	8004d28 <HAL_TIM_Base_Start_IT+0x80>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a19      	ldr	r2, [pc, #100]	; (8004d80 <HAL_TIM_Base_Start_IT+0xd8>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d004      	beq.n	8004d28 <HAL_TIM_Base_Start_IT+0x80>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a18      	ldr	r2, [pc, #96]	; (8004d84 <HAL_TIM_Base_Start_IT+0xdc>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d111      	bne.n	8004d4c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f003 0307 	and.w	r3, r3, #7
 8004d32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2b06      	cmp	r3, #6
 8004d38:	d010      	beq.n	8004d5c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f042 0201 	orr.w	r2, r2, #1
 8004d48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d4a:	e007      	b.n	8004d5c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f042 0201 	orr.w	r2, r2, #1
 8004d5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3714      	adds	r7, #20
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	40010000 	.word	0x40010000
 8004d70:	40000400 	.word	0x40000400
 8004d74:	40000800 	.word	0x40000800
 8004d78:	40000c00 	.word	0x40000c00
 8004d7c:	40010400 	.word	0x40010400
 8004d80:	40014000 	.word	0x40014000
 8004d84:	40001800 	.word	0x40001800

08004d88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e041      	b.n	8004e1e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d106      	bne.n	8004db4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f7fd f9b8 	bl	8002124 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2202      	movs	r2, #2
 8004db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	3304      	adds	r3, #4
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	4610      	mov	r0, r2
 8004dc8:	f000 fc1c 	bl	8005604 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3708      	adds	r7, #8
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
	...

08004e28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d109      	bne.n	8004e4c <HAL_TIM_PWM_Start+0x24>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	bf14      	ite	ne
 8004e44:	2301      	movne	r3, #1
 8004e46:	2300      	moveq	r3, #0
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	e022      	b.n	8004e92 <HAL_TIM_PWM_Start+0x6a>
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	2b04      	cmp	r3, #4
 8004e50:	d109      	bne.n	8004e66 <HAL_TIM_PWM_Start+0x3e>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	bf14      	ite	ne
 8004e5e:	2301      	movne	r3, #1
 8004e60:	2300      	moveq	r3, #0
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	e015      	b.n	8004e92 <HAL_TIM_PWM_Start+0x6a>
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	2b08      	cmp	r3, #8
 8004e6a:	d109      	bne.n	8004e80 <HAL_TIM_PWM_Start+0x58>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	bf14      	ite	ne
 8004e78:	2301      	movne	r3, #1
 8004e7a:	2300      	moveq	r3, #0
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	e008      	b.n	8004e92 <HAL_TIM_PWM_Start+0x6a>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	bf14      	ite	ne
 8004e8c:	2301      	movne	r3, #1
 8004e8e:	2300      	moveq	r3, #0
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d001      	beq.n	8004e9a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e07c      	b.n	8004f94 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d104      	bne.n	8004eaa <HAL_TIM_PWM_Start+0x82>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2202      	movs	r2, #2
 8004ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ea8:	e013      	b.n	8004ed2 <HAL_TIM_PWM_Start+0xaa>
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	2b04      	cmp	r3, #4
 8004eae:	d104      	bne.n	8004eba <HAL_TIM_PWM_Start+0x92>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2202      	movs	r2, #2
 8004eb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004eb8:	e00b      	b.n	8004ed2 <HAL_TIM_PWM_Start+0xaa>
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	2b08      	cmp	r3, #8
 8004ebe:	d104      	bne.n	8004eca <HAL_TIM_PWM_Start+0xa2>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2202      	movs	r2, #2
 8004ec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ec8:	e003      	b.n	8004ed2 <HAL_TIM_PWM_Start+0xaa>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2202      	movs	r2, #2
 8004ece:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	6839      	ldr	r1, [r7, #0]
 8004eda:	4618      	mov	r0, r3
 8004edc:	f000 fde2 	bl	8005aa4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a2d      	ldr	r2, [pc, #180]	; (8004f9c <HAL_TIM_PWM_Start+0x174>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d004      	beq.n	8004ef4 <HAL_TIM_PWM_Start+0xcc>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a2c      	ldr	r2, [pc, #176]	; (8004fa0 <HAL_TIM_PWM_Start+0x178>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d101      	bne.n	8004ef8 <HAL_TIM_PWM_Start+0xd0>
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e000      	b.n	8004efa <HAL_TIM_PWM_Start+0xd2>
 8004ef8:	2300      	movs	r3, #0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d007      	beq.n	8004f0e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f0c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a22      	ldr	r2, [pc, #136]	; (8004f9c <HAL_TIM_PWM_Start+0x174>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d022      	beq.n	8004f5e <HAL_TIM_PWM_Start+0x136>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f20:	d01d      	beq.n	8004f5e <HAL_TIM_PWM_Start+0x136>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a1f      	ldr	r2, [pc, #124]	; (8004fa4 <HAL_TIM_PWM_Start+0x17c>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d018      	beq.n	8004f5e <HAL_TIM_PWM_Start+0x136>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a1d      	ldr	r2, [pc, #116]	; (8004fa8 <HAL_TIM_PWM_Start+0x180>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d013      	beq.n	8004f5e <HAL_TIM_PWM_Start+0x136>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a1c      	ldr	r2, [pc, #112]	; (8004fac <HAL_TIM_PWM_Start+0x184>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d00e      	beq.n	8004f5e <HAL_TIM_PWM_Start+0x136>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a16      	ldr	r2, [pc, #88]	; (8004fa0 <HAL_TIM_PWM_Start+0x178>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d009      	beq.n	8004f5e <HAL_TIM_PWM_Start+0x136>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a18      	ldr	r2, [pc, #96]	; (8004fb0 <HAL_TIM_PWM_Start+0x188>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d004      	beq.n	8004f5e <HAL_TIM_PWM_Start+0x136>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a16      	ldr	r2, [pc, #88]	; (8004fb4 <HAL_TIM_PWM_Start+0x18c>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d111      	bne.n	8004f82 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	f003 0307 	and.w	r3, r3, #7
 8004f68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2b06      	cmp	r3, #6
 8004f6e:	d010      	beq.n	8004f92 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f042 0201 	orr.w	r2, r2, #1
 8004f7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f80:	e007      	b.n	8004f92 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f042 0201 	orr.w	r2, r2, #1
 8004f90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3710      	adds	r7, #16
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	40010000 	.word	0x40010000
 8004fa0:	40010400 	.word	0x40010400
 8004fa4:	40000400 	.word	0x40000400
 8004fa8:	40000800 	.word	0x40000800
 8004fac:	40000c00 	.word	0x40000c00
 8004fb0:	40014000 	.word	0x40014000
 8004fb4:	40001800 	.word	0x40001800

08004fb8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b086      	sub	sp, #24
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d101      	bne.n	8004fcc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e097      	b.n	80050fc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d106      	bne.n	8004fe6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f7fd f903 	bl	80021ec <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2202      	movs	r2, #2
 8004fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	6812      	ldr	r2, [r2, #0]
 8004ff8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ffc:	f023 0307 	bic.w	r3, r3, #7
 8005000:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	3304      	adds	r3, #4
 800500a:	4619      	mov	r1, r3
 800500c:	4610      	mov	r0, r2
 800500e:	f000 faf9 	bl	8005604 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	6a1b      	ldr	r3, [r3, #32]
 8005028:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	697a      	ldr	r2, [r7, #20]
 8005030:	4313      	orrs	r3, r2
 8005032:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800503a:	f023 0303 	bic.w	r3, r3, #3
 800503e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	689a      	ldr	r2, [r3, #8]
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	021b      	lsls	r3, r3, #8
 800504a:	4313      	orrs	r3, r2
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	4313      	orrs	r3, r2
 8005050:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005058:	f023 030c 	bic.w	r3, r3, #12
 800505c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005064:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005068:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	68da      	ldr	r2, [r3, #12]
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	69db      	ldr	r3, [r3, #28]
 8005072:	021b      	lsls	r3, r3, #8
 8005074:	4313      	orrs	r3, r2
 8005076:	693a      	ldr	r2, [r7, #16]
 8005078:	4313      	orrs	r3, r2
 800507a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	011a      	lsls	r2, r3, #4
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	031b      	lsls	r3, r3, #12
 8005088:	4313      	orrs	r3, r2
 800508a:	693a      	ldr	r2, [r7, #16]
 800508c:	4313      	orrs	r3, r2
 800508e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005096:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800509e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	685a      	ldr	r2, [r3, #4]
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	695b      	ldr	r3, [r3, #20]
 80050a8:	011b      	lsls	r3, r3, #4
 80050aa:	4313      	orrs	r3, r2
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2201      	movs	r2, #1
 80050ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2201      	movs	r2, #1
 80050d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2201      	movs	r2, #1
 80050de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2201      	movs	r2, #1
 80050e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2201      	movs	r2, #1
 80050ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2201      	movs	r2, #1
 80050f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3718      	adds	r7, #24
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005114:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800511c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005124:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800512c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d110      	bne.n	8005156 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005134:	7bfb      	ldrb	r3, [r7, #15]
 8005136:	2b01      	cmp	r3, #1
 8005138:	d102      	bne.n	8005140 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800513a:	7b7b      	ldrb	r3, [r7, #13]
 800513c:	2b01      	cmp	r3, #1
 800513e:	d001      	beq.n	8005144 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e069      	b.n	8005218 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2202      	movs	r2, #2
 8005148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2202      	movs	r2, #2
 8005150:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005154:	e031      	b.n	80051ba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	2b04      	cmp	r3, #4
 800515a:	d110      	bne.n	800517e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800515c:	7bbb      	ldrb	r3, [r7, #14]
 800515e:	2b01      	cmp	r3, #1
 8005160:	d102      	bne.n	8005168 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005162:	7b3b      	ldrb	r3, [r7, #12]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d001      	beq.n	800516c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e055      	b.n	8005218 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2202      	movs	r2, #2
 8005170:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2202      	movs	r2, #2
 8005178:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800517c:	e01d      	b.n	80051ba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800517e:	7bfb      	ldrb	r3, [r7, #15]
 8005180:	2b01      	cmp	r3, #1
 8005182:	d108      	bne.n	8005196 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005184:	7bbb      	ldrb	r3, [r7, #14]
 8005186:	2b01      	cmp	r3, #1
 8005188:	d105      	bne.n	8005196 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800518a:	7b7b      	ldrb	r3, [r7, #13]
 800518c:	2b01      	cmp	r3, #1
 800518e:	d102      	bne.n	8005196 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005190:	7b3b      	ldrb	r3, [r7, #12]
 8005192:	2b01      	cmp	r3, #1
 8005194:	d001      	beq.n	800519a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e03e      	b.n	8005218 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2202      	movs	r2, #2
 800519e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2202      	movs	r2, #2
 80051a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2202      	movs	r2, #2
 80051ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2202      	movs	r2, #2
 80051b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d003      	beq.n	80051c8 <HAL_TIM_Encoder_Start+0xc4>
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	2b04      	cmp	r3, #4
 80051c4:	d008      	beq.n	80051d8 <HAL_TIM_Encoder_Start+0xd4>
 80051c6:	e00f      	b.n	80051e8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2201      	movs	r2, #1
 80051ce:	2100      	movs	r1, #0
 80051d0:	4618      	mov	r0, r3
 80051d2:	f000 fc67 	bl	8005aa4 <TIM_CCxChannelCmd>
      break;
 80051d6:	e016      	b.n	8005206 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2201      	movs	r2, #1
 80051de:	2104      	movs	r1, #4
 80051e0:	4618      	mov	r0, r3
 80051e2:	f000 fc5f 	bl	8005aa4 <TIM_CCxChannelCmd>
      break;
 80051e6:	e00e      	b.n	8005206 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2201      	movs	r2, #1
 80051ee:	2100      	movs	r1, #0
 80051f0:	4618      	mov	r0, r3
 80051f2:	f000 fc57 	bl	8005aa4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2201      	movs	r2, #1
 80051fc:	2104      	movs	r1, #4
 80051fe:	4618      	mov	r0, r3
 8005200:	f000 fc50 	bl	8005aa4 <TIM_CCxChannelCmd>
      break;
 8005204:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f042 0201 	orr.w	r2, r2, #1
 8005214:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005216:	2300      	movs	r3, #0
}
 8005218:	4618      	mov	r0, r3
 800521a:	3710      	adds	r7, #16
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	f003 0302 	and.w	r3, r3, #2
 8005232:	2b02      	cmp	r3, #2
 8005234:	d122      	bne.n	800527c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	f003 0302 	and.w	r3, r3, #2
 8005240:	2b02      	cmp	r3, #2
 8005242:	d11b      	bne.n	800527c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f06f 0202 	mvn.w	r2, #2
 800524c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2201      	movs	r2, #1
 8005252:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	f003 0303 	and.w	r3, r3, #3
 800525e:	2b00      	cmp	r3, #0
 8005260:	d003      	beq.n	800526a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 f9b0 	bl	80055c8 <HAL_TIM_IC_CaptureCallback>
 8005268:	e005      	b.n	8005276 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 f9a2 	bl	80055b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 f9b3 	bl	80055dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	f003 0304 	and.w	r3, r3, #4
 8005286:	2b04      	cmp	r3, #4
 8005288:	d122      	bne.n	80052d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	f003 0304 	and.w	r3, r3, #4
 8005294:	2b04      	cmp	r3, #4
 8005296:	d11b      	bne.n	80052d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f06f 0204 	mvn.w	r2, #4
 80052a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2202      	movs	r2, #2
 80052a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	699b      	ldr	r3, [r3, #24]
 80052ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d003      	beq.n	80052be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 f986 	bl	80055c8 <HAL_TIM_IC_CaptureCallback>
 80052bc:	e005      	b.n	80052ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 f978 	bl	80055b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 f989 	bl	80055dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	f003 0308 	and.w	r3, r3, #8
 80052da:	2b08      	cmp	r3, #8
 80052dc:	d122      	bne.n	8005324 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	f003 0308 	and.w	r3, r3, #8
 80052e8:	2b08      	cmp	r3, #8
 80052ea:	d11b      	bne.n	8005324 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f06f 0208 	mvn.w	r2, #8
 80052f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2204      	movs	r2, #4
 80052fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	69db      	ldr	r3, [r3, #28]
 8005302:	f003 0303 	and.w	r3, r3, #3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d003      	beq.n	8005312 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 f95c 	bl	80055c8 <HAL_TIM_IC_CaptureCallback>
 8005310:	e005      	b.n	800531e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 f94e 	bl	80055b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 f95f 	bl	80055dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	f003 0310 	and.w	r3, r3, #16
 800532e:	2b10      	cmp	r3, #16
 8005330:	d122      	bne.n	8005378 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	f003 0310 	and.w	r3, r3, #16
 800533c:	2b10      	cmp	r3, #16
 800533e:	d11b      	bne.n	8005378 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f06f 0210 	mvn.w	r2, #16
 8005348:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2208      	movs	r2, #8
 800534e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	69db      	ldr	r3, [r3, #28]
 8005356:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800535a:	2b00      	cmp	r3, #0
 800535c:	d003      	beq.n	8005366 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 f932 	bl	80055c8 <HAL_TIM_IC_CaptureCallback>
 8005364:	e005      	b.n	8005372 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 f924 	bl	80055b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f000 f935 	bl	80055dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	f003 0301 	and.w	r3, r3, #1
 8005382:	2b01      	cmp	r3, #1
 8005384:	d10e      	bne.n	80053a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	f003 0301 	and.w	r3, r3, #1
 8005390:	2b01      	cmp	r3, #1
 8005392:	d107      	bne.n	80053a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f06f 0201 	mvn.w	r2, #1
 800539c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f7fc fd3c 	bl	8001e1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ae:	2b80      	cmp	r3, #128	; 0x80
 80053b0:	d10e      	bne.n	80053d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053bc:	2b80      	cmp	r3, #128	; 0x80
 80053be:	d107      	bne.n	80053d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80053c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 fc68 	bl	8005ca0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053da:	2b40      	cmp	r3, #64	; 0x40
 80053dc:	d10e      	bne.n	80053fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e8:	2b40      	cmp	r3, #64	; 0x40
 80053ea:	d107      	bne.n	80053fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 f8fa 	bl	80055f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	f003 0320 	and.w	r3, r3, #32
 8005406:	2b20      	cmp	r3, #32
 8005408:	d10e      	bne.n	8005428 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	f003 0320 	and.w	r3, r3, #32
 8005414:	2b20      	cmp	r3, #32
 8005416:	d107      	bne.n	8005428 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f06f 0220 	mvn.w	r2, #32
 8005420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 fc32 	bl	8005c8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005428:	bf00      	nop
 800542a:	3708      	adds	r7, #8
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b086      	sub	sp, #24
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800543c:	2300      	movs	r3, #0
 800543e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005446:	2b01      	cmp	r3, #1
 8005448:	d101      	bne.n	800544e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800544a:	2302      	movs	r3, #2
 800544c:	e0ae      	b.n	80055ac <HAL_TIM_PWM_ConfigChannel+0x17c>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2201      	movs	r2, #1
 8005452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2b0c      	cmp	r3, #12
 800545a:	f200 809f 	bhi.w	800559c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800545e:	a201      	add	r2, pc, #4	; (adr r2, 8005464 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005464:	08005499 	.word	0x08005499
 8005468:	0800559d 	.word	0x0800559d
 800546c:	0800559d 	.word	0x0800559d
 8005470:	0800559d 	.word	0x0800559d
 8005474:	080054d9 	.word	0x080054d9
 8005478:	0800559d 	.word	0x0800559d
 800547c:	0800559d 	.word	0x0800559d
 8005480:	0800559d 	.word	0x0800559d
 8005484:	0800551b 	.word	0x0800551b
 8005488:	0800559d 	.word	0x0800559d
 800548c:	0800559d 	.word	0x0800559d
 8005490:	0800559d 	.word	0x0800559d
 8005494:	0800555b 	.word	0x0800555b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68b9      	ldr	r1, [r7, #8]
 800549e:	4618      	mov	r0, r3
 80054a0:	f000 f950 	bl	8005744 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	699a      	ldr	r2, [r3, #24]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f042 0208 	orr.w	r2, r2, #8
 80054b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	699a      	ldr	r2, [r3, #24]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f022 0204 	bic.w	r2, r2, #4
 80054c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	6999      	ldr	r1, [r3, #24]
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	691a      	ldr	r2, [r3, #16]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	430a      	orrs	r2, r1
 80054d4:	619a      	str	r2, [r3, #24]
      break;
 80054d6:	e064      	b.n	80055a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68b9      	ldr	r1, [r7, #8]
 80054de:	4618      	mov	r0, r3
 80054e0:	f000 f9a0 	bl	8005824 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	699a      	ldr	r2, [r3, #24]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	699a      	ldr	r2, [r3, #24]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005502:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	6999      	ldr	r1, [r3, #24]
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	021a      	lsls	r2, r3, #8
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	430a      	orrs	r2, r1
 8005516:	619a      	str	r2, [r3, #24]
      break;
 8005518:	e043      	b.n	80055a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68b9      	ldr	r1, [r7, #8]
 8005520:	4618      	mov	r0, r3
 8005522:	f000 f9f5 	bl	8005910 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	69da      	ldr	r2, [r3, #28]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f042 0208 	orr.w	r2, r2, #8
 8005534:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	69da      	ldr	r2, [r3, #28]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f022 0204 	bic.w	r2, r2, #4
 8005544:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	69d9      	ldr	r1, [r3, #28]
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	691a      	ldr	r2, [r3, #16]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	430a      	orrs	r2, r1
 8005556:	61da      	str	r2, [r3, #28]
      break;
 8005558:	e023      	b.n	80055a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68b9      	ldr	r1, [r7, #8]
 8005560:	4618      	mov	r0, r3
 8005562:	f000 fa49 	bl	80059f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	69da      	ldr	r2, [r3, #28]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005574:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	69da      	ldr	r2, [r3, #28]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005584:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	69d9      	ldr	r1, [r3, #28]
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	021a      	lsls	r2, r3, #8
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	430a      	orrs	r2, r1
 8005598:	61da      	str	r2, [r3, #28]
      break;
 800559a:	e002      	b.n	80055a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	75fb      	strb	r3, [r7, #23]
      break;
 80055a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80055aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3718      	adds	r7, #24
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055bc:	bf00      	nop
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055d0:	bf00      	nop
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055e4:	bf00      	nop
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055f8:	bf00      	nop
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005604:	b480      	push	{r7}
 8005606:	b085      	sub	sp, #20
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4a40      	ldr	r2, [pc, #256]	; (8005718 <TIM_Base_SetConfig+0x114>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d013      	beq.n	8005644 <TIM_Base_SetConfig+0x40>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005622:	d00f      	beq.n	8005644 <TIM_Base_SetConfig+0x40>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a3d      	ldr	r2, [pc, #244]	; (800571c <TIM_Base_SetConfig+0x118>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d00b      	beq.n	8005644 <TIM_Base_SetConfig+0x40>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a3c      	ldr	r2, [pc, #240]	; (8005720 <TIM_Base_SetConfig+0x11c>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d007      	beq.n	8005644 <TIM_Base_SetConfig+0x40>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a3b      	ldr	r2, [pc, #236]	; (8005724 <TIM_Base_SetConfig+0x120>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d003      	beq.n	8005644 <TIM_Base_SetConfig+0x40>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a3a      	ldr	r2, [pc, #232]	; (8005728 <TIM_Base_SetConfig+0x124>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d108      	bne.n	8005656 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800564a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	4313      	orrs	r3, r2
 8005654:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a2f      	ldr	r2, [pc, #188]	; (8005718 <TIM_Base_SetConfig+0x114>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d02b      	beq.n	80056b6 <TIM_Base_SetConfig+0xb2>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005664:	d027      	beq.n	80056b6 <TIM_Base_SetConfig+0xb2>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a2c      	ldr	r2, [pc, #176]	; (800571c <TIM_Base_SetConfig+0x118>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d023      	beq.n	80056b6 <TIM_Base_SetConfig+0xb2>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a2b      	ldr	r2, [pc, #172]	; (8005720 <TIM_Base_SetConfig+0x11c>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d01f      	beq.n	80056b6 <TIM_Base_SetConfig+0xb2>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a2a      	ldr	r2, [pc, #168]	; (8005724 <TIM_Base_SetConfig+0x120>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d01b      	beq.n	80056b6 <TIM_Base_SetConfig+0xb2>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a29      	ldr	r2, [pc, #164]	; (8005728 <TIM_Base_SetConfig+0x124>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d017      	beq.n	80056b6 <TIM_Base_SetConfig+0xb2>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a28      	ldr	r2, [pc, #160]	; (800572c <TIM_Base_SetConfig+0x128>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d013      	beq.n	80056b6 <TIM_Base_SetConfig+0xb2>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a27      	ldr	r2, [pc, #156]	; (8005730 <TIM_Base_SetConfig+0x12c>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d00f      	beq.n	80056b6 <TIM_Base_SetConfig+0xb2>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a26      	ldr	r2, [pc, #152]	; (8005734 <TIM_Base_SetConfig+0x130>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d00b      	beq.n	80056b6 <TIM_Base_SetConfig+0xb2>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a25      	ldr	r2, [pc, #148]	; (8005738 <TIM_Base_SetConfig+0x134>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d007      	beq.n	80056b6 <TIM_Base_SetConfig+0xb2>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a24      	ldr	r2, [pc, #144]	; (800573c <TIM_Base_SetConfig+0x138>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d003      	beq.n	80056b6 <TIM_Base_SetConfig+0xb2>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a23      	ldr	r2, [pc, #140]	; (8005740 <TIM_Base_SetConfig+0x13c>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d108      	bne.n	80056c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	68fa      	ldr	r2, [r7, #12]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	695b      	ldr	r3, [r3, #20]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	689a      	ldr	r2, [r3, #8]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a0a      	ldr	r2, [pc, #40]	; (8005718 <TIM_Base_SetConfig+0x114>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d003      	beq.n	80056fc <TIM_Base_SetConfig+0xf8>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a0c      	ldr	r2, [pc, #48]	; (8005728 <TIM_Base_SetConfig+0x124>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d103      	bne.n	8005704 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	691a      	ldr	r2, [r3, #16]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	615a      	str	r2, [r3, #20]
}
 800570a:	bf00      	nop
 800570c:	3714      	adds	r7, #20
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	40010000 	.word	0x40010000
 800571c:	40000400 	.word	0x40000400
 8005720:	40000800 	.word	0x40000800
 8005724:	40000c00 	.word	0x40000c00
 8005728:	40010400 	.word	0x40010400
 800572c:	40014000 	.word	0x40014000
 8005730:	40014400 	.word	0x40014400
 8005734:	40014800 	.word	0x40014800
 8005738:	40001800 	.word	0x40001800
 800573c:	40001c00 	.word	0x40001c00
 8005740:	40002000 	.word	0x40002000

08005744 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005744:	b480      	push	{r7}
 8005746:	b087      	sub	sp, #28
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a1b      	ldr	r3, [r3, #32]
 8005752:	f023 0201 	bic.w	r2, r3, #1
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a1b      	ldr	r3, [r3, #32]
 800575e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005772:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f023 0303 	bic.w	r3, r3, #3
 800577a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	4313      	orrs	r3, r2
 8005784:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	f023 0302 	bic.w	r3, r3, #2
 800578c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	4313      	orrs	r3, r2
 8005796:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a20      	ldr	r2, [pc, #128]	; (800581c <TIM_OC1_SetConfig+0xd8>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d003      	beq.n	80057a8 <TIM_OC1_SetConfig+0x64>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a1f      	ldr	r2, [pc, #124]	; (8005820 <TIM_OC1_SetConfig+0xdc>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d10c      	bne.n	80057c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	f023 0308 	bic.w	r3, r3, #8
 80057ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	697a      	ldr	r2, [r7, #20]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	f023 0304 	bic.w	r3, r3, #4
 80057c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a15      	ldr	r2, [pc, #84]	; (800581c <TIM_OC1_SetConfig+0xd8>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d003      	beq.n	80057d2 <TIM_OC1_SetConfig+0x8e>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a14      	ldr	r2, [pc, #80]	; (8005820 <TIM_OC1_SetConfig+0xdc>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d111      	bne.n	80057f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	695b      	ldr	r3, [r3, #20]
 80057e6:	693a      	ldr	r2, [r7, #16]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	699b      	ldr	r3, [r3, #24]
 80057f0:	693a      	ldr	r2, [r7, #16]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	693a      	ldr	r2, [r7, #16]
 80057fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	685a      	ldr	r2, [r3, #4]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	621a      	str	r2, [r3, #32]
}
 8005810:	bf00      	nop
 8005812:	371c      	adds	r7, #28
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr
 800581c:	40010000 	.word	0x40010000
 8005820:	40010400 	.word	0x40010400

08005824 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005824:	b480      	push	{r7}
 8005826:	b087      	sub	sp, #28
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a1b      	ldr	r3, [r3, #32]
 8005832:	f023 0210 	bic.w	r2, r3, #16
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a1b      	ldr	r3, [r3, #32]
 800583e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	699b      	ldr	r3, [r3, #24]
 800584a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800585a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	021b      	lsls	r3, r3, #8
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	4313      	orrs	r3, r2
 8005866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	f023 0320 	bic.w	r3, r3, #32
 800586e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	011b      	lsls	r3, r3, #4
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	4313      	orrs	r3, r2
 800587a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a22      	ldr	r2, [pc, #136]	; (8005908 <TIM_OC2_SetConfig+0xe4>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d003      	beq.n	800588c <TIM_OC2_SetConfig+0x68>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4a21      	ldr	r2, [pc, #132]	; (800590c <TIM_OC2_SetConfig+0xe8>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d10d      	bne.n	80058a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005892:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	011b      	lsls	r3, r3, #4
 800589a:	697a      	ldr	r2, [r7, #20]
 800589c:	4313      	orrs	r3, r2
 800589e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4a17      	ldr	r2, [pc, #92]	; (8005908 <TIM_OC2_SetConfig+0xe4>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d003      	beq.n	80058b8 <TIM_OC2_SetConfig+0x94>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a16      	ldr	r2, [pc, #88]	; (800590c <TIM_OC2_SetConfig+0xe8>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d113      	bne.n	80058e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	695b      	ldr	r3, [r3, #20]
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	693a      	ldr	r2, [r7, #16]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	699b      	ldr	r3, [r3, #24]
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	693a      	ldr	r2, [r7, #16]
 80058dc:	4313      	orrs	r3, r2
 80058de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	693a      	ldr	r2, [r7, #16]
 80058e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	685a      	ldr	r2, [r3, #4]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	697a      	ldr	r2, [r7, #20]
 80058f8:	621a      	str	r2, [r3, #32]
}
 80058fa:	bf00      	nop
 80058fc:	371c      	adds	r7, #28
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr
 8005906:	bf00      	nop
 8005908:	40010000 	.word	0x40010000
 800590c:	40010400 	.word	0x40010400

08005910 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005910:	b480      	push	{r7}
 8005912:	b087      	sub	sp, #28
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a1b      	ldr	r3, [r3, #32]
 800591e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a1b      	ldr	r3, [r3, #32]
 800592a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	69db      	ldr	r3, [r3, #28]
 8005936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800593e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f023 0303 	bic.w	r3, r3, #3
 8005946:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	4313      	orrs	r3, r2
 8005950:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005958:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	021b      	lsls	r3, r3, #8
 8005960:	697a      	ldr	r2, [r7, #20]
 8005962:	4313      	orrs	r3, r2
 8005964:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a21      	ldr	r2, [pc, #132]	; (80059f0 <TIM_OC3_SetConfig+0xe0>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d003      	beq.n	8005976 <TIM_OC3_SetConfig+0x66>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a20      	ldr	r2, [pc, #128]	; (80059f4 <TIM_OC3_SetConfig+0xe4>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d10d      	bne.n	8005992 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800597c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	021b      	lsls	r3, r3, #8
 8005984:	697a      	ldr	r2, [r7, #20]
 8005986:	4313      	orrs	r3, r2
 8005988:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005990:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a16      	ldr	r2, [pc, #88]	; (80059f0 <TIM_OC3_SetConfig+0xe0>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d003      	beq.n	80059a2 <TIM_OC3_SetConfig+0x92>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a15      	ldr	r2, [pc, #84]	; (80059f4 <TIM_OC3_SetConfig+0xe4>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d113      	bne.n	80059ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	011b      	lsls	r3, r3, #4
 80059b8:	693a      	ldr	r2, [r7, #16]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	699b      	ldr	r3, [r3, #24]
 80059c2:	011b      	lsls	r3, r3, #4
 80059c4:	693a      	ldr	r2, [r7, #16]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	693a      	ldr	r2, [r7, #16]
 80059ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	685a      	ldr	r2, [r3, #4]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	697a      	ldr	r2, [r7, #20]
 80059e2:	621a      	str	r2, [r3, #32]
}
 80059e4:	bf00      	nop
 80059e6:	371c      	adds	r7, #28
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr
 80059f0:	40010000 	.word	0x40010000
 80059f4:	40010400 	.word	0x40010400

080059f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b087      	sub	sp, #28
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a1b      	ldr	r3, [r3, #32]
 8005a06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a1b      	ldr	r3, [r3, #32]
 8005a12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	69db      	ldr	r3, [r3, #28]
 8005a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	021b      	lsls	r3, r3, #8
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	031b      	lsls	r3, r3, #12
 8005a4a:	693a      	ldr	r2, [r7, #16]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a12      	ldr	r2, [pc, #72]	; (8005a9c <TIM_OC4_SetConfig+0xa4>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d003      	beq.n	8005a60 <TIM_OC4_SetConfig+0x68>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a11      	ldr	r2, [pc, #68]	; (8005aa0 <TIM_OC4_SetConfig+0xa8>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d109      	bne.n	8005a74 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	695b      	ldr	r3, [r3, #20]
 8005a6c:	019b      	lsls	r3, r3, #6
 8005a6e:	697a      	ldr	r2, [r7, #20]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	697a      	ldr	r2, [r7, #20]
 8005a78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	685a      	ldr	r2, [r3, #4]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	693a      	ldr	r2, [r7, #16]
 8005a8c:	621a      	str	r2, [r3, #32]
}
 8005a8e:	bf00      	nop
 8005a90:	371c      	adds	r7, #28
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop
 8005a9c:	40010000 	.word	0x40010000
 8005aa0:	40010400 	.word	0x40010400

08005aa4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b087      	sub	sp, #28
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	f003 031f 	and.w	r3, r3, #31
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8005abc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6a1a      	ldr	r2, [r3, #32]
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	43db      	mvns	r3, r3
 8005ac6:	401a      	ands	r2, r3
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6a1a      	ldr	r2, [r3, #32]
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	f003 031f 	and.w	r3, r3, #31
 8005ad6:	6879      	ldr	r1, [r7, #4]
 8005ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8005adc:	431a      	orrs	r2, r3
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	621a      	str	r2, [r3, #32]
}
 8005ae2:	bf00      	nop
 8005ae4:	371c      	adds	r7, #28
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr
	...

08005af0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d101      	bne.n	8005b08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b04:	2302      	movs	r3, #2
 8005b06:	e05a      	b.n	8005bbe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2202      	movs	r2, #2
 8005b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	68fa      	ldr	r2, [r7, #12]
 8005b40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a21      	ldr	r2, [pc, #132]	; (8005bcc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d022      	beq.n	8005b92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b54:	d01d      	beq.n	8005b92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a1d      	ldr	r2, [pc, #116]	; (8005bd0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d018      	beq.n	8005b92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a1b      	ldr	r2, [pc, #108]	; (8005bd4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d013      	beq.n	8005b92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a1a      	ldr	r2, [pc, #104]	; (8005bd8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d00e      	beq.n	8005b92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a18      	ldr	r2, [pc, #96]	; (8005bdc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d009      	beq.n	8005b92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a17      	ldr	r2, [pc, #92]	; (8005be0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d004      	beq.n	8005b92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a15      	ldr	r2, [pc, #84]	; (8005be4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d10c      	bne.n	8005bac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	68ba      	ldr	r2, [r7, #8]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	68ba      	ldr	r2, [r7, #8]
 8005baa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bbc:	2300      	movs	r3, #0
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3714      	adds	r7, #20
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop
 8005bcc:	40010000 	.word	0x40010000
 8005bd0:	40000400 	.word	0x40000400
 8005bd4:	40000800 	.word	0x40000800
 8005bd8:	40000c00 	.word	0x40000c00
 8005bdc:	40010400 	.word	0x40010400
 8005be0:	40014000 	.word	0x40014000
 8005be4:	40001800 	.word	0x40001800

08005be8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b085      	sub	sp, #20
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d101      	bne.n	8005c04 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005c00:	2302      	movs	r3, #2
 8005c02:	e03d      	b.n	8005c80 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	695b      	ldr	r3, [r3, #20]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	69db      	ldr	r3, [r3, #28]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3714      	adds	r7, #20
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c94:	bf00      	nop
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ca8:	bf00      	nop
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b082      	sub	sp, #8
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d101      	bne.n	8005cc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e03f      	b.n	8005d46 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d106      	bne.n	8005ce0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f7fc fc82 	bl	80025e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2224      	movs	r2, #36	; 0x24
 8005ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68da      	ldr	r2, [r3, #12]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005cf6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 fd7b 	bl	80067f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	691a      	ldr	r2, [r3, #16]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	695a      	ldr	r2, [r3, #20]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68da      	ldr	r2, [r3, #12]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2220      	movs	r2, #32
 8005d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2220      	movs	r2, #32
 8005d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3708      	adds	r7, #8
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}

08005d4e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d4e:	b580      	push	{r7, lr}
 8005d50:	b08a      	sub	sp, #40	; 0x28
 8005d52:	af02      	add	r7, sp, #8
 8005d54:	60f8      	str	r0, [r7, #12]
 8005d56:	60b9      	str	r1, [r7, #8]
 8005d58:	603b      	str	r3, [r7, #0]
 8005d5a:	4613      	mov	r3, r2
 8005d5c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	2b20      	cmp	r3, #32
 8005d6c:	d17c      	bne.n	8005e68 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d002      	beq.n	8005d7a <HAL_UART_Transmit+0x2c>
 8005d74:	88fb      	ldrh	r3, [r7, #6]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d101      	bne.n	8005d7e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e075      	b.n	8005e6a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d101      	bne.n	8005d8c <HAL_UART_Transmit+0x3e>
 8005d88:	2302      	movs	r3, #2
 8005d8a:	e06e      	b.n	8005e6a <HAL_UART_Transmit+0x11c>
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2200      	movs	r2, #0
 8005d98:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2221      	movs	r2, #33	; 0x21
 8005d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005da2:	f7fc fe27 	bl	80029f4 <HAL_GetTick>
 8005da6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	88fa      	ldrh	r2, [r7, #6]
 8005dac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	88fa      	ldrh	r2, [r7, #6]
 8005db2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dbc:	d108      	bne.n	8005dd0 <HAL_UART_Transmit+0x82>
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d104      	bne.n	8005dd0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	61bb      	str	r3, [r7, #24]
 8005dce:	e003      	b.n	8005dd8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005de0:	e02a      	b.n	8005e38 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	9300      	str	r3, [sp, #0]
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	2200      	movs	r2, #0
 8005dea:	2180      	movs	r1, #128	; 0x80
 8005dec:	68f8      	ldr	r0, [r7, #12]
 8005dee:	f000 faf9 	bl	80063e4 <UART_WaitOnFlagUntilTimeout>
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d001      	beq.n	8005dfc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	e036      	b.n	8005e6a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d10b      	bne.n	8005e1a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	881b      	ldrh	r3, [r3, #0]
 8005e06:	461a      	mov	r2, r3
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e10:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005e12:	69bb      	ldr	r3, [r7, #24]
 8005e14:	3302      	adds	r3, #2
 8005e16:	61bb      	str	r3, [r7, #24]
 8005e18:	e007      	b.n	8005e2a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	781a      	ldrb	r2, [r3, #0]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	3301      	adds	r3, #1
 8005e28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	3b01      	subs	r3, #1
 8005e32:	b29a      	uxth	r2, r3
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d1cf      	bne.n	8005de2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	9300      	str	r3, [sp, #0]
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	2140      	movs	r1, #64	; 0x40
 8005e4c:	68f8      	ldr	r0, [r7, #12]
 8005e4e:	f000 fac9 	bl	80063e4 <UART_WaitOnFlagUntilTimeout>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d001      	beq.n	8005e5c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005e58:	2303      	movs	r3, #3
 8005e5a:	e006      	b.n	8005e6a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2220      	movs	r2, #32
 8005e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005e64:	2300      	movs	r3, #0
 8005e66:	e000      	b.n	8005e6a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005e68:	2302      	movs	r3, #2
  }
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3720      	adds	r7, #32
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
	...

08005e74 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b0ba      	sub	sp, #232	; 0xe8
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	695b      	ldr	r3, [r3, #20]
 8005e96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eaa:	f003 030f 	and.w	r3, r3, #15
 8005eae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005eb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d10f      	bne.n	8005eda <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ebe:	f003 0320 	and.w	r3, r3, #32
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d009      	beq.n	8005eda <HAL_UART_IRQHandler+0x66>
 8005ec6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005eca:	f003 0320 	and.w	r3, r3, #32
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d003      	beq.n	8005eda <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 fbd3 	bl	800667e <UART_Receive_IT>
      return;
 8005ed8:	e256      	b.n	8006388 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005eda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	f000 80de 	beq.w	80060a0 <HAL_UART_IRQHandler+0x22c>
 8005ee4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ee8:	f003 0301 	and.w	r3, r3, #1
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d106      	bne.n	8005efe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005ef0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ef4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	f000 80d1 	beq.w	80060a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f02:	f003 0301 	and.w	r3, r3, #1
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00b      	beq.n	8005f22 <HAL_UART_IRQHandler+0xae>
 8005f0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d005      	beq.n	8005f22 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1a:	f043 0201 	orr.w	r2, r3, #1
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f26:	f003 0304 	and.w	r3, r3, #4
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00b      	beq.n	8005f46 <HAL_UART_IRQHandler+0xd2>
 8005f2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f32:	f003 0301 	and.w	r3, r3, #1
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d005      	beq.n	8005f46 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3e:	f043 0202 	orr.w	r2, r3, #2
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f4a:	f003 0302 	and.w	r3, r3, #2
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d00b      	beq.n	8005f6a <HAL_UART_IRQHandler+0xf6>
 8005f52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f56:	f003 0301 	and.w	r3, r3, #1
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d005      	beq.n	8005f6a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f62:	f043 0204 	orr.w	r2, r3, #4
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f6e:	f003 0308 	and.w	r3, r3, #8
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d011      	beq.n	8005f9a <HAL_UART_IRQHandler+0x126>
 8005f76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f7a:	f003 0320 	and.w	r3, r3, #32
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d105      	bne.n	8005f8e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005f82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f86:	f003 0301 	and.w	r3, r3, #1
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d005      	beq.n	8005f9a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f92:	f043 0208 	orr.w	r2, r3, #8
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	f000 81ed 	beq.w	800637e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005fa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fa8:	f003 0320 	and.w	r3, r3, #32
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d008      	beq.n	8005fc2 <HAL_UART_IRQHandler+0x14e>
 8005fb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fb4:	f003 0320 	and.w	r3, r3, #32
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d002      	beq.n	8005fc2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f000 fb5e 	bl	800667e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	695b      	ldr	r3, [r3, #20]
 8005fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fcc:	2b40      	cmp	r3, #64	; 0x40
 8005fce:	bf0c      	ite	eq
 8005fd0:	2301      	moveq	r3, #1
 8005fd2:	2300      	movne	r3, #0
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fde:	f003 0308 	and.w	r3, r3, #8
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d103      	bne.n	8005fee <HAL_UART_IRQHandler+0x17a>
 8005fe6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d04f      	beq.n	800608e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 fa66 	bl	80064c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	695b      	ldr	r3, [r3, #20]
 8005ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ffe:	2b40      	cmp	r3, #64	; 0x40
 8006000:	d141      	bne.n	8006086 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	3314      	adds	r3, #20
 8006008:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800600c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006010:	e853 3f00 	ldrex	r3, [r3]
 8006014:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006018:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800601c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006020:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	3314      	adds	r3, #20
 800602a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800602e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006032:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006036:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800603a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800603e:	e841 2300 	strex	r3, r2, [r1]
 8006042:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006046:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d1d9      	bne.n	8006002 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006052:	2b00      	cmp	r3, #0
 8006054:	d013      	beq.n	800607e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605a:	4a7d      	ldr	r2, [pc, #500]	; (8006250 <HAL_UART_IRQHandler+0x3dc>)
 800605c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006062:	4618      	mov	r0, r3
 8006064:	f7fd fc64 	bl	8003930 <HAL_DMA_Abort_IT>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d016      	beq.n	800609c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006078:	4610      	mov	r0, r2
 800607a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800607c:	e00e      	b.n	800609c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 f99a 	bl	80063b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006084:	e00a      	b.n	800609c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 f996 	bl	80063b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800608c:	e006      	b.n	800609c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 f992 	bl	80063b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800609a:	e170      	b.n	800637e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800609c:	bf00      	nop
    return;
 800609e:	e16e      	b.n	800637e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	f040 814a 	bne.w	800633e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80060aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060ae:	f003 0310 	and.w	r3, r3, #16
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	f000 8143 	beq.w	800633e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80060b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060bc:	f003 0310 	and.w	r3, r3, #16
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	f000 813c 	beq.w	800633e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80060c6:	2300      	movs	r3, #0
 80060c8:	60bb      	str	r3, [r7, #8]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	60bb      	str	r3, [r7, #8]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	60bb      	str	r3, [r7, #8]
 80060da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	695b      	ldr	r3, [r3, #20]
 80060e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060e6:	2b40      	cmp	r3, #64	; 0x40
 80060e8:	f040 80b4 	bne.w	8006254 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80060f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	f000 8140 	beq.w	8006382 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006106:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800610a:	429a      	cmp	r2, r3
 800610c:	f080 8139 	bcs.w	8006382 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006116:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800611c:	69db      	ldr	r3, [r3, #28]
 800611e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006122:	f000 8088 	beq.w	8006236 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	330c      	adds	r3, #12
 800612c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006130:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006134:	e853 3f00 	ldrex	r3, [r3]
 8006138:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800613c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006140:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006144:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	330c      	adds	r3, #12
 800614e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006152:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006156:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800615a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800615e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006162:	e841 2300 	strex	r3, r2, [r1]
 8006166:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800616a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800616e:	2b00      	cmp	r3, #0
 8006170:	d1d9      	bne.n	8006126 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	3314      	adds	r3, #20
 8006178:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800617a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800617c:	e853 3f00 	ldrex	r3, [r3]
 8006180:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006182:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006184:	f023 0301 	bic.w	r3, r3, #1
 8006188:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	3314      	adds	r3, #20
 8006192:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006196:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800619a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800619c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800619e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80061a2:	e841 2300 	strex	r3, r2, [r1]
 80061a6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80061a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d1e1      	bne.n	8006172 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	3314      	adds	r3, #20
 80061b4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061b8:	e853 3f00 	ldrex	r3, [r3]
 80061bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80061be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	3314      	adds	r3, #20
 80061ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80061d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80061d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80061d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80061da:	e841 2300 	strex	r3, r2, [r1]
 80061de:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80061e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d1e3      	bne.n	80061ae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2220      	movs	r2, #32
 80061ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	330c      	adds	r3, #12
 80061fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061fe:	e853 3f00 	ldrex	r3, [r3]
 8006202:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006204:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006206:	f023 0310 	bic.w	r3, r3, #16
 800620a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	330c      	adds	r3, #12
 8006214:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006218:	65ba      	str	r2, [r7, #88]	; 0x58
 800621a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800621c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800621e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006220:	e841 2300 	strex	r3, r2, [r1]
 8006224:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006226:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006228:	2b00      	cmp	r3, #0
 800622a:	d1e3      	bne.n	80061f4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006230:	4618      	mov	r0, r3
 8006232:	f7fd fb0d 	bl	8003850 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800623e:	b29b      	uxth	r3, r3
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	b29b      	uxth	r3, r3
 8006244:	4619      	mov	r1, r3
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 f8c0 	bl	80063cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800624c:	e099      	b.n	8006382 <HAL_UART_IRQHandler+0x50e>
 800624e:	bf00      	nop
 8006250:	08006587 	.word	0x08006587
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800625c:	b29b      	uxth	r3, r3
 800625e:	1ad3      	subs	r3, r2, r3
 8006260:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006268:	b29b      	uxth	r3, r3
 800626a:	2b00      	cmp	r3, #0
 800626c:	f000 808b 	beq.w	8006386 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006270:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006274:	2b00      	cmp	r3, #0
 8006276:	f000 8086 	beq.w	8006386 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	330c      	adds	r3, #12
 8006280:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006284:	e853 3f00 	ldrex	r3, [r3]
 8006288:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800628a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800628c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006290:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	330c      	adds	r3, #12
 800629a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800629e:	647a      	str	r2, [r7, #68]	; 0x44
 80062a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80062a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062a6:	e841 2300 	strex	r3, r2, [r1]
 80062aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80062ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d1e3      	bne.n	800627a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	3314      	adds	r3, #20
 80062b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062bc:	e853 3f00 	ldrex	r3, [r3]
 80062c0:	623b      	str	r3, [r7, #32]
   return(result);
 80062c2:	6a3b      	ldr	r3, [r7, #32]
 80062c4:	f023 0301 	bic.w	r3, r3, #1
 80062c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	3314      	adds	r3, #20
 80062d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80062d6:	633a      	str	r2, [r7, #48]	; 0x30
 80062d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80062dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062de:	e841 2300 	strex	r3, r2, [r1]
 80062e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80062e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d1e3      	bne.n	80062b2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2220      	movs	r2, #32
 80062ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	330c      	adds	r3, #12
 80062fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	e853 3f00 	ldrex	r3, [r3]
 8006306:	60fb      	str	r3, [r7, #12]
   return(result);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f023 0310 	bic.w	r3, r3, #16
 800630e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	330c      	adds	r3, #12
 8006318:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800631c:	61fa      	str	r2, [r7, #28]
 800631e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006320:	69b9      	ldr	r1, [r7, #24]
 8006322:	69fa      	ldr	r2, [r7, #28]
 8006324:	e841 2300 	strex	r3, r2, [r1]
 8006328:	617b      	str	r3, [r7, #20]
   return(result);
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d1e3      	bne.n	80062f8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006330:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006334:	4619      	mov	r1, r3
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 f848 	bl	80063cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800633c:	e023      	b.n	8006386 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800633e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006346:	2b00      	cmp	r3, #0
 8006348:	d009      	beq.n	800635e <HAL_UART_IRQHandler+0x4ea>
 800634a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800634e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006352:	2b00      	cmp	r3, #0
 8006354:	d003      	beq.n	800635e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 f929 	bl	80065ae <UART_Transmit_IT>
    return;
 800635c:	e014      	b.n	8006388 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800635e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00e      	beq.n	8006388 <HAL_UART_IRQHandler+0x514>
 800636a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800636e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006372:	2b00      	cmp	r3, #0
 8006374:	d008      	beq.n	8006388 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 f969 	bl	800664e <UART_EndTransmit_IT>
    return;
 800637c:	e004      	b.n	8006388 <HAL_UART_IRQHandler+0x514>
    return;
 800637e:	bf00      	nop
 8006380:	e002      	b.n	8006388 <HAL_UART_IRQHandler+0x514>
      return;
 8006382:	bf00      	nop
 8006384:	e000      	b.n	8006388 <HAL_UART_IRQHandler+0x514>
      return;
 8006386:	bf00      	nop
  }
}
 8006388:	37e8      	adds	r7, #232	; 0xe8
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop

08006390 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006398:	bf00      	nop
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80063ac:	bf00      	nop
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80063c0:	bf00      	nop
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	460b      	mov	r3, r1
 80063d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80063d8:	bf00      	nop
 80063da:	370c      	adds	r7, #12
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr

080063e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b090      	sub	sp, #64	; 0x40
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	60b9      	str	r1, [r7, #8]
 80063ee:	603b      	str	r3, [r7, #0]
 80063f0:	4613      	mov	r3, r2
 80063f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063f4:	e050      	b.n	8006498 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063fc:	d04c      	beq.n	8006498 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80063fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006400:	2b00      	cmp	r3, #0
 8006402:	d007      	beq.n	8006414 <UART_WaitOnFlagUntilTimeout+0x30>
 8006404:	f7fc faf6 	bl	80029f4 <HAL_GetTick>
 8006408:	4602      	mov	r2, r0
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	1ad3      	subs	r3, r2, r3
 800640e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006410:	429a      	cmp	r2, r3
 8006412:	d241      	bcs.n	8006498 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	330c      	adds	r3, #12
 800641a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800641c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800641e:	e853 3f00 	ldrex	r3, [r3]
 8006422:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006426:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800642a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	330c      	adds	r3, #12
 8006432:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006434:	637a      	str	r2, [r7, #52]	; 0x34
 8006436:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006438:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800643a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800643c:	e841 2300 	strex	r3, r2, [r1]
 8006440:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006444:	2b00      	cmp	r3, #0
 8006446:	d1e5      	bne.n	8006414 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	3314      	adds	r3, #20
 800644e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	e853 3f00 	ldrex	r3, [r3]
 8006456:	613b      	str	r3, [r7, #16]
   return(result);
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	f023 0301 	bic.w	r3, r3, #1
 800645e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	3314      	adds	r3, #20
 8006466:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006468:	623a      	str	r2, [r7, #32]
 800646a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800646c:	69f9      	ldr	r1, [r7, #28]
 800646e:	6a3a      	ldr	r2, [r7, #32]
 8006470:	e841 2300 	strex	r3, r2, [r1]
 8006474:	61bb      	str	r3, [r7, #24]
   return(result);
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d1e5      	bne.n	8006448 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2220      	movs	r2, #32
 8006480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2220      	movs	r2, #32
 8006488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2200      	movs	r2, #0
 8006490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006494:	2303      	movs	r3, #3
 8006496:	e00f      	b.n	80064b8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	4013      	ands	r3, r2
 80064a2:	68ba      	ldr	r2, [r7, #8]
 80064a4:	429a      	cmp	r2, r3
 80064a6:	bf0c      	ite	eq
 80064a8:	2301      	moveq	r3, #1
 80064aa:	2300      	movne	r3, #0
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	461a      	mov	r2, r3
 80064b0:	79fb      	ldrb	r3, [r7, #7]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d09f      	beq.n	80063f6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80064b6:	2300      	movs	r3, #0
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3740      	adds	r7, #64	; 0x40
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b095      	sub	sp, #84	; 0x54
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	330c      	adds	r3, #12
 80064ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064d2:	e853 3f00 	ldrex	r3, [r3]
 80064d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80064d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	330c      	adds	r3, #12
 80064e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80064e8:	643a      	str	r2, [r7, #64]	; 0x40
 80064ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80064ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80064f0:	e841 2300 	strex	r3, r2, [r1]
 80064f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80064f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d1e5      	bne.n	80064c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	3314      	adds	r3, #20
 8006502:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006504:	6a3b      	ldr	r3, [r7, #32]
 8006506:	e853 3f00 	ldrex	r3, [r3]
 800650a:	61fb      	str	r3, [r7, #28]
   return(result);
 800650c:	69fb      	ldr	r3, [r7, #28]
 800650e:	f023 0301 	bic.w	r3, r3, #1
 8006512:	64bb      	str	r3, [r7, #72]	; 0x48
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	3314      	adds	r3, #20
 800651a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800651c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800651e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006520:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006522:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006524:	e841 2300 	strex	r3, r2, [r1]
 8006528:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800652a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652c:	2b00      	cmp	r3, #0
 800652e:	d1e5      	bne.n	80064fc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006534:	2b01      	cmp	r3, #1
 8006536:	d119      	bne.n	800656c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	330c      	adds	r3, #12
 800653e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	e853 3f00 	ldrex	r3, [r3]
 8006546:	60bb      	str	r3, [r7, #8]
   return(result);
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	f023 0310 	bic.w	r3, r3, #16
 800654e:	647b      	str	r3, [r7, #68]	; 0x44
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	330c      	adds	r3, #12
 8006556:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006558:	61ba      	str	r2, [r7, #24]
 800655a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655c:	6979      	ldr	r1, [r7, #20]
 800655e:	69ba      	ldr	r2, [r7, #24]
 8006560:	e841 2300 	strex	r3, r2, [r1]
 8006564:	613b      	str	r3, [r7, #16]
   return(result);
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d1e5      	bne.n	8006538 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2220      	movs	r2, #32
 8006570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	631a      	str	r2, [r3, #48]	; 0x30
}
 800657a:	bf00      	nop
 800657c:	3754      	adds	r7, #84	; 0x54
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr

08006586 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006586:	b580      	push	{r7, lr}
 8006588:	b084      	sub	sp, #16
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006592:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2200      	movs	r2, #0
 8006598:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2200      	movs	r2, #0
 800659e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80065a0:	68f8      	ldr	r0, [r7, #12]
 80065a2:	f7ff ff09 	bl	80063b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065a6:	bf00      	nop
 80065a8:	3710      	adds	r7, #16
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}

080065ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80065ae:	b480      	push	{r7}
 80065b0:	b085      	sub	sp, #20
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	2b21      	cmp	r3, #33	; 0x21
 80065c0:	d13e      	bne.n	8006640 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065ca:	d114      	bne.n	80065f6 <UART_Transmit_IT+0x48>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	691b      	ldr	r3, [r3, #16]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d110      	bne.n	80065f6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6a1b      	ldr	r3, [r3, #32]
 80065d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	881b      	ldrh	r3, [r3, #0]
 80065de:	461a      	mov	r2, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065e8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a1b      	ldr	r3, [r3, #32]
 80065ee:	1c9a      	adds	r2, r3, #2
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	621a      	str	r2, [r3, #32]
 80065f4:	e008      	b.n	8006608 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a1b      	ldr	r3, [r3, #32]
 80065fa:	1c59      	adds	r1, r3, #1
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	6211      	str	r1, [r2, #32]
 8006600:	781a      	ldrb	r2, [r3, #0]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800660c:	b29b      	uxth	r3, r3
 800660e:	3b01      	subs	r3, #1
 8006610:	b29b      	uxth	r3, r3
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	4619      	mov	r1, r3
 8006616:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006618:	2b00      	cmp	r3, #0
 800661a:	d10f      	bne.n	800663c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	68da      	ldr	r2, [r3, #12]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800662a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	68da      	ldr	r2, [r3, #12]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800663a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800663c:	2300      	movs	r3, #0
 800663e:	e000      	b.n	8006642 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006640:	2302      	movs	r3, #2
  }
}
 8006642:	4618      	mov	r0, r3
 8006644:	3714      	adds	r7, #20
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr

0800664e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800664e:	b580      	push	{r7, lr}
 8006650:	b082      	sub	sp, #8
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	68da      	ldr	r2, [r3, #12]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006664:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2220      	movs	r2, #32
 800666a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f7ff fe8e 	bl	8006390 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	3708      	adds	r7, #8
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}

0800667e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800667e:	b580      	push	{r7, lr}
 8006680:	b08c      	sub	sp, #48	; 0x30
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800668c:	b2db      	uxtb	r3, r3
 800668e:	2b22      	cmp	r3, #34	; 0x22
 8006690:	f040 80ab 	bne.w	80067ea <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800669c:	d117      	bne.n	80066ce <UART_Receive_IT+0x50>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d113      	bne.n	80066ce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80066a6:	2300      	movs	r3, #0
 80066a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ae:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066bc:	b29a      	uxth	r2, r3
 80066be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c6:	1c9a      	adds	r2, r3, #2
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	629a      	str	r2, [r3, #40]	; 0x28
 80066cc:	e026      	b.n	800671c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80066d4:	2300      	movs	r3, #0
 80066d6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066e0:	d007      	beq.n	80066f2 <UART_Receive_IT+0x74>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d10a      	bne.n	8006700 <UART_Receive_IT+0x82>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d106      	bne.n	8006700 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	b2da      	uxtb	r2, r3
 80066fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066fc:	701a      	strb	r2, [r3, #0]
 80066fe:	e008      	b.n	8006712 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	b2db      	uxtb	r3, r3
 8006708:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800670c:	b2da      	uxtb	r2, r3
 800670e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006710:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006716:	1c5a      	adds	r2, r3, #1
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006720:	b29b      	uxth	r3, r3
 8006722:	3b01      	subs	r3, #1
 8006724:	b29b      	uxth	r3, r3
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	4619      	mov	r1, r3
 800672a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800672c:	2b00      	cmp	r3, #0
 800672e:	d15a      	bne.n	80067e6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68da      	ldr	r2, [r3, #12]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f022 0220 	bic.w	r2, r2, #32
 800673e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68da      	ldr	r2, [r3, #12]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800674e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	695a      	ldr	r2, [r3, #20]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f022 0201 	bic.w	r2, r2, #1
 800675e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2220      	movs	r2, #32
 8006764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800676c:	2b01      	cmp	r3, #1
 800676e:	d135      	bne.n	80067dc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	330c      	adds	r3, #12
 800677c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	e853 3f00 	ldrex	r3, [r3]
 8006784:	613b      	str	r3, [r7, #16]
   return(result);
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	f023 0310 	bic.w	r3, r3, #16
 800678c:	627b      	str	r3, [r7, #36]	; 0x24
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	330c      	adds	r3, #12
 8006794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006796:	623a      	str	r2, [r7, #32]
 8006798:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800679a:	69f9      	ldr	r1, [r7, #28]
 800679c:	6a3a      	ldr	r2, [r7, #32]
 800679e:	e841 2300 	strex	r3, r2, [r1]
 80067a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80067a4:	69bb      	ldr	r3, [r7, #24]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d1e5      	bne.n	8006776 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 0310 	and.w	r3, r3, #16
 80067b4:	2b10      	cmp	r3, #16
 80067b6:	d10a      	bne.n	80067ce <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80067b8:	2300      	movs	r3, #0
 80067ba:	60fb      	str	r3, [r7, #12]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	60fb      	str	r3, [r7, #12]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	60fb      	str	r3, [r7, #12]
 80067cc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80067d2:	4619      	mov	r1, r3
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f7ff fdf9 	bl	80063cc <HAL_UARTEx_RxEventCallback>
 80067da:	e002      	b.n	80067e2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f7ff fde1 	bl	80063a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80067e2:	2300      	movs	r3, #0
 80067e4:	e002      	b.n	80067ec <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80067e6:	2300      	movs	r3, #0
 80067e8:	e000      	b.n	80067ec <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80067ea:	2302      	movs	r3, #2
  }
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3730      	adds	r7, #48	; 0x30
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067f8:	b0c0      	sub	sp, #256	; 0x100
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	691b      	ldr	r3, [r3, #16]
 8006808:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800680c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006810:	68d9      	ldr	r1, [r3, #12]
 8006812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	ea40 0301 	orr.w	r3, r0, r1
 800681c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800681e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006822:	689a      	ldr	r2, [r3, #8]
 8006824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006828:	691b      	ldr	r3, [r3, #16]
 800682a:	431a      	orrs	r2, r3
 800682c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006830:	695b      	ldr	r3, [r3, #20]
 8006832:	431a      	orrs	r2, r3
 8006834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006838:	69db      	ldr	r3, [r3, #28]
 800683a:	4313      	orrs	r3, r2
 800683c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800684c:	f021 010c 	bic.w	r1, r1, #12
 8006850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800685a:	430b      	orrs	r3, r1
 800685c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800685e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	695b      	ldr	r3, [r3, #20]
 8006866:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800686a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800686e:	6999      	ldr	r1, [r3, #24]
 8006870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	ea40 0301 	orr.w	r3, r0, r1
 800687a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800687c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	4b8f      	ldr	r3, [pc, #572]	; (8006ac0 <UART_SetConfig+0x2cc>)
 8006884:	429a      	cmp	r2, r3
 8006886:	d005      	beq.n	8006894 <UART_SetConfig+0xa0>
 8006888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	4b8d      	ldr	r3, [pc, #564]	; (8006ac4 <UART_SetConfig+0x2d0>)
 8006890:	429a      	cmp	r2, r3
 8006892:	d104      	bne.n	800689e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006894:	f7fd fd5c 	bl	8004350 <HAL_RCC_GetPCLK2Freq>
 8006898:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800689c:	e003      	b.n	80068a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800689e:	f7fd fd43 	bl	8004328 <HAL_RCC_GetPCLK1Freq>
 80068a2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068aa:	69db      	ldr	r3, [r3, #28]
 80068ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068b0:	f040 810c 	bne.w	8006acc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80068b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068b8:	2200      	movs	r2, #0
 80068ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80068be:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80068c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80068c6:	4622      	mov	r2, r4
 80068c8:	462b      	mov	r3, r5
 80068ca:	1891      	adds	r1, r2, r2
 80068cc:	65b9      	str	r1, [r7, #88]	; 0x58
 80068ce:	415b      	adcs	r3, r3
 80068d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80068d6:	4621      	mov	r1, r4
 80068d8:	eb12 0801 	adds.w	r8, r2, r1
 80068dc:	4629      	mov	r1, r5
 80068de:	eb43 0901 	adc.w	r9, r3, r1
 80068e2:	f04f 0200 	mov.w	r2, #0
 80068e6:	f04f 0300 	mov.w	r3, #0
 80068ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80068ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80068f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80068f6:	4690      	mov	r8, r2
 80068f8:	4699      	mov	r9, r3
 80068fa:	4623      	mov	r3, r4
 80068fc:	eb18 0303 	adds.w	r3, r8, r3
 8006900:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006904:	462b      	mov	r3, r5
 8006906:	eb49 0303 	adc.w	r3, r9, r3
 800690a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800690e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800691a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800691e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006922:	460b      	mov	r3, r1
 8006924:	18db      	adds	r3, r3, r3
 8006926:	653b      	str	r3, [r7, #80]	; 0x50
 8006928:	4613      	mov	r3, r2
 800692a:	eb42 0303 	adc.w	r3, r2, r3
 800692e:	657b      	str	r3, [r7, #84]	; 0x54
 8006930:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006934:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006938:	f7f9 ffc8 	bl	80008cc <__aeabi_uldivmod>
 800693c:	4602      	mov	r2, r0
 800693e:	460b      	mov	r3, r1
 8006940:	4b61      	ldr	r3, [pc, #388]	; (8006ac8 <UART_SetConfig+0x2d4>)
 8006942:	fba3 2302 	umull	r2, r3, r3, r2
 8006946:	095b      	lsrs	r3, r3, #5
 8006948:	011c      	lsls	r4, r3, #4
 800694a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800694e:	2200      	movs	r2, #0
 8006950:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006954:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006958:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800695c:	4642      	mov	r2, r8
 800695e:	464b      	mov	r3, r9
 8006960:	1891      	adds	r1, r2, r2
 8006962:	64b9      	str	r1, [r7, #72]	; 0x48
 8006964:	415b      	adcs	r3, r3
 8006966:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006968:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800696c:	4641      	mov	r1, r8
 800696e:	eb12 0a01 	adds.w	sl, r2, r1
 8006972:	4649      	mov	r1, r9
 8006974:	eb43 0b01 	adc.w	fp, r3, r1
 8006978:	f04f 0200 	mov.w	r2, #0
 800697c:	f04f 0300 	mov.w	r3, #0
 8006980:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006984:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006988:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800698c:	4692      	mov	sl, r2
 800698e:	469b      	mov	fp, r3
 8006990:	4643      	mov	r3, r8
 8006992:	eb1a 0303 	adds.w	r3, sl, r3
 8006996:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800699a:	464b      	mov	r3, r9
 800699c:	eb4b 0303 	adc.w	r3, fp, r3
 80069a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80069a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80069b0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80069b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80069b8:	460b      	mov	r3, r1
 80069ba:	18db      	adds	r3, r3, r3
 80069bc:	643b      	str	r3, [r7, #64]	; 0x40
 80069be:	4613      	mov	r3, r2
 80069c0:	eb42 0303 	adc.w	r3, r2, r3
 80069c4:	647b      	str	r3, [r7, #68]	; 0x44
 80069c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80069ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80069ce:	f7f9 ff7d 	bl	80008cc <__aeabi_uldivmod>
 80069d2:	4602      	mov	r2, r0
 80069d4:	460b      	mov	r3, r1
 80069d6:	4611      	mov	r1, r2
 80069d8:	4b3b      	ldr	r3, [pc, #236]	; (8006ac8 <UART_SetConfig+0x2d4>)
 80069da:	fba3 2301 	umull	r2, r3, r3, r1
 80069de:	095b      	lsrs	r3, r3, #5
 80069e0:	2264      	movs	r2, #100	; 0x64
 80069e2:	fb02 f303 	mul.w	r3, r2, r3
 80069e6:	1acb      	subs	r3, r1, r3
 80069e8:	00db      	lsls	r3, r3, #3
 80069ea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80069ee:	4b36      	ldr	r3, [pc, #216]	; (8006ac8 <UART_SetConfig+0x2d4>)
 80069f0:	fba3 2302 	umull	r2, r3, r3, r2
 80069f4:	095b      	lsrs	r3, r3, #5
 80069f6:	005b      	lsls	r3, r3, #1
 80069f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80069fc:	441c      	add	r4, r3
 80069fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a02:	2200      	movs	r2, #0
 8006a04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a08:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006a0c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006a10:	4642      	mov	r2, r8
 8006a12:	464b      	mov	r3, r9
 8006a14:	1891      	adds	r1, r2, r2
 8006a16:	63b9      	str	r1, [r7, #56]	; 0x38
 8006a18:	415b      	adcs	r3, r3
 8006a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006a20:	4641      	mov	r1, r8
 8006a22:	1851      	adds	r1, r2, r1
 8006a24:	6339      	str	r1, [r7, #48]	; 0x30
 8006a26:	4649      	mov	r1, r9
 8006a28:	414b      	adcs	r3, r1
 8006a2a:	637b      	str	r3, [r7, #52]	; 0x34
 8006a2c:	f04f 0200 	mov.w	r2, #0
 8006a30:	f04f 0300 	mov.w	r3, #0
 8006a34:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006a38:	4659      	mov	r1, fp
 8006a3a:	00cb      	lsls	r3, r1, #3
 8006a3c:	4651      	mov	r1, sl
 8006a3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a42:	4651      	mov	r1, sl
 8006a44:	00ca      	lsls	r2, r1, #3
 8006a46:	4610      	mov	r0, r2
 8006a48:	4619      	mov	r1, r3
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	4642      	mov	r2, r8
 8006a4e:	189b      	adds	r3, r3, r2
 8006a50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a54:	464b      	mov	r3, r9
 8006a56:	460a      	mov	r2, r1
 8006a58:	eb42 0303 	adc.w	r3, r2, r3
 8006a5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006a6c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006a70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006a74:	460b      	mov	r3, r1
 8006a76:	18db      	adds	r3, r3, r3
 8006a78:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a7a:	4613      	mov	r3, r2
 8006a7c:	eb42 0303 	adc.w	r3, r2, r3
 8006a80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a86:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006a8a:	f7f9 ff1f 	bl	80008cc <__aeabi_uldivmod>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	460b      	mov	r3, r1
 8006a92:	4b0d      	ldr	r3, [pc, #52]	; (8006ac8 <UART_SetConfig+0x2d4>)
 8006a94:	fba3 1302 	umull	r1, r3, r3, r2
 8006a98:	095b      	lsrs	r3, r3, #5
 8006a9a:	2164      	movs	r1, #100	; 0x64
 8006a9c:	fb01 f303 	mul.w	r3, r1, r3
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	00db      	lsls	r3, r3, #3
 8006aa4:	3332      	adds	r3, #50	; 0x32
 8006aa6:	4a08      	ldr	r2, [pc, #32]	; (8006ac8 <UART_SetConfig+0x2d4>)
 8006aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8006aac:	095b      	lsrs	r3, r3, #5
 8006aae:	f003 0207 	and.w	r2, r3, #7
 8006ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4422      	add	r2, r4
 8006aba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006abc:	e106      	b.n	8006ccc <UART_SetConfig+0x4d8>
 8006abe:	bf00      	nop
 8006ac0:	40011000 	.word	0x40011000
 8006ac4:	40011400 	.word	0x40011400
 8006ac8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006acc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006ad6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006ada:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006ade:	4642      	mov	r2, r8
 8006ae0:	464b      	mov	r3, r9
 8006ae2:	1891      	adds	r1, r2, r2
 8006ae4:	6239      	str	r1, [r7, #32]
 8006ae6:	415b      	adcs	r3, r3
 8006ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8006aea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006aee:	4641      	mov	r1, r8
 8006af0:	1854      	adds	r4, r2, r1
 8006af2:	4649      	mov	r1, r9
 8006af4:	eb43 0501 	adc.w	r5, r3, r1
 8006af8:	f04f 0200 	mov.w	r2, #0
 8006afc:	f04f 0300 	mov.w	r3, #0
 8006b00:	00eb      	lsls	r3, r5, #3
 8006b02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b06:	00e2      	lsls	r2, r4, #3
 8006b08:	4614      	mov	r4, r2
 8006b0a:	461d      	mov	r5, r3
 8006b0c:	4643      	mov	r3, r8
 8006b0e:	18e3      	adds	r3, r4, r3
 8006b10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006b14:	464b      	mov	r3, r9
 8006b16:	eb45 0303 	adc.w	r3, r5, r3
 8006b1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006b2a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006b2e:	f04f 0200 	mov.w	r2, #0
 8006b32:	f04f 0300 	mov.w	r3, #0
 8006b36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006b3a:	4629      	mov	r1, r5
 8006b3c:	008b      	lsls	r3, r1, #2
 8006b3e:	4621      	mov	r1, r4
 8006b40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b44:	4621      	mov	r1, r4
 8006b46:	008a      	lsls	r2, r1, #2
 8006b48:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006b4c:	f7f9 febe 	bl	80008cc <__aeabi_uldivmod>
 8006b50:	4602      	mov	r2, r0
 8006b52:	460b      	mov	r3, r1
 8006b54:	4b60      	ldr	r3, [pc, #384]	; (8006cd8 <UART_SetConfig+0x4e4>)
 8006b56:	fba3 2302 	umull	r2, r3, r3, r2
 8006b5a:	095b      	lsrs	r3, r3, #5
 8006b5c:	011c      	lsls	r4, r3, #4
 8006b5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b62:	2200      	movs	r2, #0
 8006b64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006b68:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006b6c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006b70:	4642      	mov	r2, r8
 8006b72:	464b      	mov	r3, r9
 8006b74:	1891      	adds	r1, r2, r2
 8006b76:	61b9      	str	r1, [r7, #24]
 8006b78:	415b      	adcs	r3, r3
 8006b7a:	61fb      	str	r3, [r7, #28]
 8006b7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b80:	4641      	mov	r1, r8
 8006b82:	1851      	adds	r1, r2, r1
 8006b84:	6139      	str	r1, [r7, #16]
 8006b86:	4649      	mov	r1, r9
 8006b88:	414b      	adcs	r3, r1
 8006b8a:	617b      	str	r3, [r7, #20]
 8006b8c:	f04f 0200 	mov.w	r2, #0
 8006b90:	f04f 0300 	mov.w	r3, #0
 8006b94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b98:	4659      	mov	r1, fp
 8006b9a:	00cb      	lsls	r3, r1, #3
 8006b9c:	4651      	mov	r1, sl
 8006b9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ba2:	4651      	mov	r1, sl
 8006ba4:	00ca      	lsls	r2, r1, #3
 8006ba6:	4610      	mov	r0, r2
 8006ba8:	4619      	mov	r1, r3
 8006baa:	4603      	mov	r3, r0
 8006bac:	4642      	mov	r2, r8
 8006bae:	189b      	adds	r3, r3, r2
 8006bb0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006bb4:	464b      	mov	r3, r9
 8006bb6:	460a      	mov	r2, r1
 8006bb8:	eb42 0303 	adc.w	r3, r2, r3
 8006bbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	67bb      	str	r3, [r7, #120]	; 0x78
 8006bca:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006bcc:	f04f 0200 	mov.w	r2, #0
 8006bd0:	f04f 0300 	mov.w	r3, #0
 8006bd4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006bd8:	4649      	mov	r1, r9
 8006bda:	008b      	lsls	r3, r1, #2
 8006bdc:	4641      	mov	r1, r8
 8006bde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006be2:	4641      	mov	r1, r8
 8006be4:	008a      	lsls	r2, r1, #2
 8006be6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006bea:	f7f9 fe6f 	bl	80008cc <__aeabi_uldivmod>
 8006bee:	4602      	mov	r2, r0
 8006bf0:	460b      	mov	r3, r1
 8006bf2:	4611      	mov	r1, r2
 8006bf4:	4b38      	ldr	r3, [pc, #224]	; (8006cd8 <UART_SetConfig+0x4e4>)
 8006bf6:	fba3 2301 	umull	r2, r3, r3, r1
 8006bfa:	095b      	lsrs	r3, r3, #5
 8006bfc:	2264      	movs	r2, #100	; 0x64
 8006bfe:	fb02 f303 	mul.w	r3, r2, r3
 8006c02:	1acb      	subs	r3, r1, r3
 8006c04:	011b      	lsls	r3, r3, #4
 8006c06:	3332      	adds	r3, #50	; 0x32
 8006c08:	4a33      	ldr	r2, [pc, #204]	; (8006cd8 <UART_SetConfig+0x4e4>)
 8006c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c0e:	095b      	lsrs	r3, r3, #5
 8006c10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c14:	441c      	add	r4, r3
 8006c16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	673b      	str	r3, [r7, #112]	; 0x70
 8006c1e:	677a      	str	r2, [r7, #116]	; 0x74
 8006c20:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006c24:	4642      	mov	r2, r8
 8006c26:	464b      	mov	r3, r9
 8006c28:	1891      	adds	r1, r2, r2
 8006c2a:	60b9      	str	r1, [r7, #8]
 8006c2c:	415b      	adcs	r3, r3
 8006c2e:	60fb      	str	r3, [r7, #12]
 8006c30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006c34:	4641      	mov	r1, r8
 8006c36:	1851      	adds	r1, r2, r1
 8006c38:	6039      	str	r1, [r7, #0]
 8006c3a:	4649      	mov	r1, r9
 8006c3c:	414b      	adcs	r3, r1
 8006c3e:	607b      	str	r3, [r7, #4]
 8006c40:	f04f 0200 	mov.w	r2, #0
 8006c44:	f04f 0300 	mov.w	r3, #0
 8006c48:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006c4c:	4659      	mov	r1, fp
 8006c4e:	00cb      	lsls	r3, r1, #3
 8006c50:	4651      	mov	r1, sl
 8006c52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c56:	4651      	mov	r1, sl
 8006c58:	00ca      	lsls	r2, r1, #3
 8006c5a:	4610      	mov	r0, r2
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	4603      	mov	r3, r0
 8006c60:	4642      	mov	r2, r8
 8006c62:	189b      	adds	r3, r3, r2
 8006c64:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c66:	464b      	mov	r3, r9
 8006c68:	460a      	mov	r2, r1
 8006c6a:	eb42 0303 	adc.w	r3, r2, r3
 8006c6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	663b      	str	r3, [r7, #96]	; 0x60
 8006c7a:	667a      	str	r2, [r7, #100]	; 0x64
 8006c7c:	f04f 0200 	mov.w	r2, #0
 8006c80:	f04f 0300 	mov.w	r3, #0
 8006c84:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006c88:	4649      	mov	r1, r9
 8006c8a:	008b      	lsls	r3, r1, #2
 8006c8c:	4641      	mov	r1, r8
 8006c8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c92:	4641      	mov	r1, r8
 8006c94:	008a      	lsls	r2, r1, #2
 8006c96:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006c9a:	f7f9 fe17 	bl	80008cc <__aeabi_uldivmod>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	4b0d      	ldr	r3, [pc, #52]	; (8006cd8 <UART_SetConfig+0x4e4>)
 8006ca4:	fba3 1302 	umull	r1, r3, r3, r2
 8006ca8:	095b      	lsrs	r3, r3, #5
 8006caa:	2164      	movs	r1, #100	; 0x64
 8006cac:	fb01 f303 	mul.w	r3, r1, r3
 8006cb0:	1ad3      	subs	r3, r2, r3
 8006cb2:	011b      	lsls	r3, r3, #4
 8006cb4:	3332      	adds	r3, #50	; 0x32
 8006cb6:	4a08      	ldr	r2, [pc, #32]	; (8006cd8 <UART_SetConfig+0x4e4>)
 8006cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8006cbc:	095b      	lsrs	r3, r3, #5
 8006cbe:	f003 020f 	and.w	r2, r3, #15
 8006cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4422      	add	r2, r4
 8006cca:	609a      	str	r2, [r3, #8]
}
 8006ccc:	bf00      	nop
 8006cce:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006cd8:	51eb851f 	.word	0x51eb851f

08006cdc <siprintf>:
 8006cdc:	b40e      	push	{r1, r2, r3}
 8006cde:	b500      	push	{lr}
 8006ce0:	b09c      	sub	sp, #112	; 0x70
 8006ce2:	ab1d      	add	r3, sp, #116	; 0x74
 8006ce4:	9002      	str	r0, [sp, #8]
 8006ce6:	9006      	str	r0, [sp, #24]
 8006ce8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006cec:	4809      	ldr	r0, [pc, #36]	; (8006d14 <siprintf+0x38>)
 8006cee:	9107      	str	r1, [sp, #28]
 8006cf0:	9104      	str	r1, [sp, #16]
 8006cf2:	4909      	ldr	r1, [pc, #36]	; (8006d18 <siprintf+0x3c>)
 8006cf4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cf8:	9105      	str	r1, [sp, #20]
 8006cfa:	6800      	ldr	r0, [r0, #0]
 8006cfc:	9301      	str	r3, [sp, #4]
 8006cfe:	a902      	add	r1, sp, #8
 8006d00:	f000 f992 	bl	8007028 <_svfiprintf_r>
 8006d04:	9b02      	ldr	r3, [sp, #8]
 8006d06:	2200      	movs	r2, #0
 8006d08:	701a      	strb	r2, [r3, #0]
 8006d0a:	b01c      	add	sp, #112	; 0x70
 8006d0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d10:	b003      	add	sp, #12
 8006d12:	4770      	bx	lr
 8006d14:	2000005c 	.word	0x2000005c
 8006d18:	ffff0208 	.word	0xffff0208

08006d1c <memset>:
 8006d1c:	4402      	add	r2, r0
 8006d1e:	4603      	mov	r3, r0
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d100      	bne.n	8006d26 <memset+0xa>
 8006d24:	4770      	bx	lr
 8006d26:	f803 1b01 	strb.w	r1, [r3], #1
 8006d2a:	e7f9      	b.n	8006d20 <memset+0x4>

08006d2c <__errno>:
 8006d2c:	4b01      	ldr	r3, [pc, #4]	; (8006d34 <__errno+0x8>)
 8006d2e:	6818      	ldr	r0, [r3, #0]
 8006d30:	4770      	bx	lr
 8006d32:	bf00      	nop
 8006d34:	2000005c 	.word	0x2000005c

08006d38 <__libc_init_array>:
 8006d38:	b570      	push	{r4, r5, r6, lr}
 8006d3a:	4d0d      	ldr	r5, [pc, #52]	; (8006d70 <__libc_init_array+0x38>)
 8006d3c:	4c0d      	ldr	r4, [pc, #52]	; (8006d74 <__libc_init_array+0x3c>)
 8006d3e:	1b64      	subs	r4, r4, r5
 8006d40:	10a4      	asrs	r4, r4, #2
 8006d42:	2600      	movs	r6, #0
 8006d44:	42a6      	cmp	r6, r4
 8006d46:	d109      	bne.n	8006d5c <__libc_init_array+0x24>
 8006d48:	4d0b      	ldr	r5, [pc, #44]	; (8006d78 <__libc_init_array+0x40>)
 8006d4a:	4c0c      	ldr	r4, [pc, #48]	; (8006d7c <__libc_init_array+0x44>)
 8006d4c:	f000 fc6a 	bl	8007624 <_init>
 8006d50:	1b64      	subs	r4, r4, r5
 8006d52:	10a4      	asrs	r4, r4, #2
 8006d54:	2600      	movs	r6, #0
 8006d56:	42a6      	cmp	r6, r4
 8006d58:	d105      	bne.n	8006d66 <__libc_init_array+0x2e>
 8006d5a:	bd70      	pop	{r4, r5, r6, pc}
 8006d5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d60:	4798      	blx	r3
 8006d62:	3601      	adds	r6, #1
 8006d64:	e7ee      	b.n	8006d44 <__libc_init_array+0xc>
 8006d66:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d6a:	4798      	blx	r3
 8006d6c:	3601      	adds	r6, #1
 8006d6e:	e7f2      	b.n	8006d56 <__libc_init_array+0x1e>
 8006d70:	08007790 	.word	0x08007790
 8006d74:	08007790 	.word	0x08007790
 8006d78:	08007790 	.word	0x08007790
 8006d7c:	08007794 	.word	0x08007794

08006d80 <__retarget_lock_acquire_recursive>:
 8006d80:	4770      	bx	lr

08006d82 <__retarget_lock_release_recursive>:
 8006d82:	4770      	bx	lr

08006d84 <_free_r>:
 8006d84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d86:	2900      	cmp	r1, #0
 8006d88:	d044      	beq.n	8006e14 <_free_r+0x90>
 8006d8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d8e:	9001      	str	r0, [sp, #4]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	f1a1 0404 	sub.w	r4, r1, #4
 8006d96:	bfb8      	it	lt
 8006d98:	18e4      	addlt	r4, r4, r3
 8006d9a:	f000 f8df 	bl	8006f5c <__malloc_lock>
 8006d9e:	4a1e      	ldr	r2, [pc, #120]	; (8006e18 <_free_r+0x94>)
 8006da0:	9801      	ldr	r0, [sp, #4]
 8006da2:	6813      	ldr	r3, [r2, #0]
 8006da4:	b933      	cbnz	r3, 8006db4 <_free_r+0x30>
 8006da6:	6063      	str	r3, [r4, #4]
 8006da8:	6014      	str	r4, [r2, #0]
 8006daa:	b003      	add	sp, #12
 8006dac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006db0:	f000 b8da 	b.w	8006f68 <__malloc_unlock>
 8006db4:	42a3      	cmp	r3, r4
 8006db6:	d908      	bls.n	8006dca <_free_r+0x46>
 8006db8:	6825      	ldr	r5, [r4, #0]
 8006dba:	1961      	adds	r1, r4, r5
 8006dbc:	428b      	cmp	r3, r1
 8006dbe:	bf01      	itttt	eq
 8006dc0:	6819      	ldreq	r1, [r3, #0]
 8006dc2:	685b      	ldreq	r3, [r3, #4]
 8006dc4:	1949      	addeq	r1, r1, r5
 8006dc6:	6021      	streq	r1, [r4, #0]
 8006dc8:	e7ed      	b.n	8006da6 <_free_r+0x22>
 8006dca:	461a      	mov	r2, r3
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	b10b      	cbz	r3, 8006dd4 <_free_r+0x50>
 8006dd0:	42a3      	cmp	r3, r4
 8006dd2:	d9fa      	bls.n	8006dca <_free_r+0x46>
 8006dd4:	6811      	ldr	r1, [r2, #0]
 8006dd6:	1855      	adds	r5, r2, r1
 8006dd8:	42a5      	cmp	r5, r4
 8006dda:	d10b      	bne.n	8006df4 <_free_r+0x70>
 8006ddc:	6824      	ldr	r4, [r4, #0]
 8006dde:	4421      	add	r1, r4
 8006de0:	1854      	adds	r4, r2, r1
 8006de2:	42a3      	cmp	r3, r4
 8006de4:	6011      	str	r1, [r2, #0]
 8006de6:	d1e0      	bne.n	8006daa <_free_r+0x26>
 8006de8:	681c      	ldr	r4, [r3, #0]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	6053      	str	r3, [r2, #4]
 8006dee:	440c      	add	r4, r1
 8006df0:	6014      	str	r4, [r2, #0]
 8006df2:	e7da      	b.n	8006daa <_free_r+0x26>
 8006df4:	d902      	bls.n	8006dfc <_free_r+0x78>
 8006df6:	230c      	movs	r3, #12
 8006df8:	6003      	str	r3, [r0, #0]
 8006dfa:	e7d6      	b.n	8006daa <_free_r+0x26>
 8006dfc:	6825      	ldr	r5, [r4, #0]
 8006dfe:	1961      	adds	r1, r4, r5
 8006e00:	428b      	cmp	r3, r1
 8006e02:	bf04      	itt	eq
 8006e04:	6819      	ldreq	r1, [r3, #0]
 8006e06:	685b      	ldreq	r3, [r3, #4]
 8006e08:	6063      	str	r3, [r4, #4]
 8006e0a:	bf04      	itt	eq
 8006e0c:	1949      	addeq	r1, r1, r5
 8006e0e:	6021      	streq	r1, [r4, #0]
 8006e10:	6054      	str	r4, [r2, #4]
 8006e12:	e7ca      	b.n	8006daa <_free_r+0x26>
 8006e14:	b003      	add	sp, #12
 8006e16:	bd30      	pop	{r4, r5, pc}
 8006e18:	200005e8 	.word	0x200005e8

08006e1c <sbrk_aligned>:
 8006e1c:	b570      	push	{r4, r5, r6, lr}
 8006e1e:	4e0e      	ldr	r6, [pc, #56]	; (8006e58 <sbrk_aligned+0x3c>)
 8006e20:	460c      	mov	r4, r1
 8006e22:	6831      	ldr	r1, [r6, #0]
 8006e24:	4605      	mov	r5, r0
 8006e26:	b911      	cbnz	r1, 8006e2e <sbrk_aligned+0x12>
 8006e28:	f000 fba6 	bl	8007578 <_sbrk_r>
 8006e2c:	6030      	str	r0, [r6, #0]
 8006e2e:	4621      	mov	r1, r4
 8006e30:	4628      	mov	r0, r5
 8006e32:	f000 fba1 	bl	8007578 <_sbrk_r>
 8006e36:	1c43      	adds	r3, r0, #1
 8006e38:	d00a      	beq.n	8006e50 <sbrk_aligned+0x34>
 8006e3a:	1cc4      	adds	r4, r0, #3
 8006e3c:	f024 0403 	bic.w	r4, r4, #3
 8006e40:	42a0      	cmp	r0, r4
 8006e42:	d007      	beq.n	8006e54 <sbrk_aligned+0x38>
 8006e44:	1a21      	subs	r1, r4, r0
 8006e46:	4628      	mov	r0, r5
 8006e48:	f000 fb96 	bl	8007578 <_sbrk_r>
 8006e4c:	3001      	adds	r0, #1
 8006e4e:	d101      	bne.n	8006e54 <sbrk_aligned+0x38>
 8006e50:	f04f 34ff 	mov.w	r4, #4294967295
 8006e54:	4620      	mov	r0, r4
 8006e56:	bd70      	pop	{r4, r5, r6, pc}
 8006e58:	200005ec 	.word	0x200005ec

08006e5c <_malloc_r>:
 8006e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e60:	1ccd      	adds	r5, r1, #3
 8006e62:	f025 0503 	bic.w	r5, r5, #3
 8006e66:	3508      	adds	r5, #8
 8006e68:	2d0c      	cmp	r5, #12
 8006e6a:	bf38      	it	cc
 8006e6c:	250c      	movcc	r5, #12
 8006e6e:	2d00      	cmp	r5, #0
 8006e70:	4607      	mov	r7, r0
 8006e72:	db01      	blt.n	8006e78 <_malloc_r+0x1c>
 8006e74:	42a9      	cmp	r1, r5
 8006e76:	d905      	bls.n	8006e84 <_malloc_r+0x28>
 8006e78:	230c      	movs	r3, #12
 8006e7a:	603b      	str	r3, [r7, #0]
 8006e7c:	2600      	movs	r6, #0
 8006e7e:	4630      	mov	r0, r6
 8006e80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e84:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006f58 <_malloc_r+0xfc>
 8006e88:	f000 f868 	bl	8006f5c <__malloc_lock>
 8006e8c:	f8d8 3000 	ldr.w	r3, [r8]
 8006e90:	461c      	mov	r4, r3
 8006e92:	bb5c      	cbnz	r4, 8006eec <_malloc_r+0x90>
 8006e94:	4629      	mov	r1, r5
 8006e96:	4638      	mov	r0, r7
 8006e98:	f7ff ffc0 	bl	8006e1c <sbrk_aligned>
 8006e9c:	1c43      	adds	r3, r0, #1
 8006e9e:	4604      	mov	r4, r0
 8006ea0:	d155      	bne.n	8006f4e <_malloc_r+0xf2>
 8006ea2:	f8d8 4000 	ldr.w	r4, [r8]
 8006ea6:	4626      	mov	r6, r4
 8006ea8:	2e00      	cmp	r6, #0
 8006eaa:	d145      	bne.n	8006f38 <_malloc_r+0xdc>
 8006eac:	2c00      	cmp	r4, #0
 8006eae:	d048      	beq.n	8006f42 <_malloc_r+0xe6>
 8006eb0:	6823      	ldr	r3, [r4, #0]
 8006eb2:	4631      	mov	r1, r6
 8006eb4:	4638      	mov	r0, r7
 8006eb6:	eb04 0903 	add.w	r9, r4, r3
 8006eba:	f000 fb5d 	bl	8007578 <_sbrk_r>
 8006ebe:	4581      	cmp	r9, r0
 8006ec0:	d13f      	bne.n	8006f42 <_malloc_r+0xe6>
 8006ec2:	6821      	ldr	r1, [r4, #0]
 8006ec4:	1a6d      	subs	r5, r5, r1
 8006ec6:	4629      	mov	r1, r5
 8006ec8:	4638      	mov	r0, r7
 8006eca:	f7ff ffa7 	bl	8006e1c <sbrk_aligned>
 8006ece:	3001      	adds	r0, #1
 8006ed0:	d037      	beq.n	8006f42 <_malloc_r+0xe6>
 8006ed2:	6823      	ldr	r3, [r4, #0]
 8006ed4:	442b      	add	r3, r5
 8006ed6:	6023      	str	r3, [r4, #0]
 8006ed8:	f8d8 3000 	ldr.w	r3, [r8]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d038      	beq.n	8006f52 <_malloc_r+0xf6>
 8006ee0:	685a      	ldr	r2, [r3, #4]
 8006ee2:	42a2      	cmp	r2, r4
 8006ee4:	d12b      	bne.n	8006f3e <_malloc_r+0xe2>
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	605a      	str	r2, [r3, #4]
 8006eea:	e00f      	b.n	8006f0c <_malloc_r+0xb0>
 8006eec:	6822      	ldr	r2, [r4, #0]
 8006eee:	1b52      	subs	r2, r2, r5
 8006ef0:	d41f      	bmi.n	8006f32 <_malloc_r+0xd6>
 8006ef2:	2a0b      	cmp	r2, #11
 8006ef4:	d917      	bls.n	8006f26 <_malloc_r+0xca>
 8006ef6:	1961      	adds	r1, r4, r5
 8006ef8:	42a3      	cmp	r3, r4
 8006efa:	6025      	str	r5, [r4, #0]
 8006efc:	bf18      	it	ne
 8006efe:	6059      	strne	r1, [r3, #4]
 8006f00:	6863      	ldr	r3, [r4, #4]
 8006f02:	bf08      	it	eq
 8006f04:	f8c8 1000 	streq.w	r1, [r8]
 8006f08:	5162      	str	r2, [r4, r5]
 8006f0a:	604b      	str	r3, [r1, #4]
 8006f0c:	4638      	mov	r0, r7
 8006f0e:	f104 060b 	add.w	r6, r4, #11
 8006f12:	f000 f829 	bl	8006f68 <__malloc_unlock>
 8006f16:	f026 0607 	bic.w	r6, r6, #7
 8006f1a:	1d23      	adds	r3, r4, #4
 8006f1c:	1af2      	subs	r2, r6, r3
 8006f1e:	d0ae      	beq.n	8006e7e <_malloc_r+0x22>
 8006f20:	1b9b      	subs	r3, r3, r6
 8006f22:	50a3      	str	r3, [r4, r2]
 8006f24:	e7ab      	b.n	8006e7e <_malloc_r+0x22>
 8006f26:	42a3      	cmp	r3, r4
 8006f28:	6862      	ldr	r2, [r4, #4]
 8006f2a:	d1dd      	bne.n	8006ee8 <_malloc_r+0x8c>
 8006f2c:	f8c8 2000 	str.w	r2, [r8]
 8006f30:	e7ec      	b.n	8006f0c <_malloc_r+0xb0>
 8006f32:	4623      	mov	r3, r4
 8006f34:	6864      	ldr	r4, [r4, #4]
 8006f36:	e7ac      	b.n	8006e92 <_malloc_r+0x36>
 8006f38:	4634      	mov	r4, r6
 8006f3a:	6876      	ldr	r6, [r6, #4]
 8006f3c:	e7b4      	b.n	8006ea8 <_malloc_r+0x4c>
 8006f3e:	4613      	mov	r3, r2
 8006f40:	e7cc      	b.n	8006edc <_malloc_r+0x80>
 8006f42:	230c      	movs	r3, #12
 8006f44:	603b      	str	r3, [r7, #0]
 8006f46:	4638      	mov	r0, r7
 8006f48:	f000 f80e 	bl	8006f68 <__malloc_unlock>
 8006f4c:	e797      	b.n	8006e7e <_malloc_r+0x22>
 8006f4e:	6025      	str	r5, [r4, #0]
 8006f50:	e7dc      	b.n	8006f0c <_malloc_r+0xb0>
 8006f52:	605b      	str	r3, [r3, #4]
 8006f54:	deff      	udf	#255	; 0xff
 8006f56:	bf00      	nop
 8006f58:	200005e8 	.word	0x200005e8

08006f5c <__malloc_lock>:
 8006f5c:	4801      	ldr	r0, [pc, #4]	; (8006f64 <__malloc_lock+0x8>)
 8006f5e:	f7ff bf0f 	b.w	8006d80 <__retarget_lock_acquire_recursive>
 8006f62:	bf00      	nop
 8006f64:	200005e4 	.word	0x200005e4

08006f68 <__malloc_unlock>:
 8006f68:	4801      	ldr	r0, [pc, #4]	; (8006f70 <__malloc_unlock+0x8>)
 8006f6a:	f7ff bf0a 	b.w	8006d82 <__retarget_lock_release_recursive>
 8006f6e:	bf00      	nop
 8006f70:	200005e4 	.word	0x200005e4

08006f74 <__ssputs_r>:
 8006f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f78:	688e      	ldr	r6, [r1, #8]
 8006f7a:	461f      	mov	r7, r3
 8006f7c:	42be      	cmp	r6, r7
 8006f7e:	680b      	ldr	r3, [r1, #0]
 8006f80:	4682      	mov	sl, r0
 8006f82:	460c      	mov	r4, r1
 8006f84:	4690      	mov	r8, r2
 8006f86:	d82c      	bhi.n	8006fe2 <__ssputs_r+0x6e>
 8006f88:	898a      	ldrh	r2, [r1, #12]
 8006f8a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006f8e:	d026      	beq.n	8006fde <__ssputs_r+0x6a>
 8006f90:	6965      	ldr	r5, [r4, #20]
 8006f92:	6909      	ldr	r1, [r1, #16]
 8006f94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f98:	eba3 0901 	sub.w	r9, r3, r1
 8006f9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006fa0:	1c7b      	adds	r3, r7, #1
 8006fa2:	444b      	add	r3, r9
 8006fa4:	106d      	asrs	r5, r5, #1
 8006fa6:	429d      	cmp	r5, r3
 8006fa8:	bf38      	it	cc
 8006faa:	461d      	movcc	r5, r3
 8006fac:	0553      	lsls	r3, r2, #21
 8006fae:	d527      	bpl.n	8007000 <__ssputs_r+0x8c>
 8006fb0:	4629      	mov	r1, r5
 8006fb2:	f7ff ff53 	bl	8006e5c <_malloc_r>
 8006fb6:	4606      	mov	r6, r0
 8006fb8:	b360      	cbz	r0, 8007014 <__ssputs_r+0xa0>
 8006fba:	6921      	ldr	r1, [r4, #16]
 8006fbc:	464a      	mov	r2, r9
 8006fbe:	f000 faeb 	bl	8007598 <memcpy>
 8006fc2:	89a3      	ldrh	r3, [r4, #12]
 8006fc4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006fc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fcc:	81a3      	strh	r3, [r4, #12]
 8006fce:	6126      	str	r6, [r4, #16]
 8006fd0:	6165      	str	r5, [r4, #20]
 8006fd2:	444e      	add	r6, r9
 8006fd4:	eba5 0509 	sub.w	r5, r5, r9
 8006fd8:	6026      	str	r6, [r4, #0]
 8006fda:	60a5      	str	r5, [r4, #8]
 8006fdc:	463e      	mov	r6, r7
 8006fde:	42be      	cmp	r6, r7
 8006fe0:	d900      	bls.n	8006fe4 <__ssputs_r+0x70>
 8006fe2:	463e      	mov	r6, r7
 8006fe4:	6820      	ldr	r0, [r4, #0]
 8006fe6:	4632      	mov	r2, r6
 8006fe8:	4641      	mov	r1, r8
 8006fea:	f000 faab 	bl	8007544 <memmove>
 8006fee:	68a3      	ldr	r3, [r4, #8]
 8006ff0:	1b9b      	subs	r3, r3, r6
 8006ff2:	60a3      	str	r3, [r4, #8]
 8006ff4:	6823      	ldr	r3, [r4, #0]
 8006ff6:	4433      	add	r3, r6
 8006ff8:	6023      	str	r3, [r4, #0]
 8006ffa:	2000      	movs	r0, #0
 8006ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007000:	462a      	mov	r2, r5
 8007002:	f000 fad7 	bl	80075b4 <_realloc_r>
 8007006:	4606      	mov	r6, r0
 8007008:	2800      	cmp	r0, #0
 800700a:	d1e0      	bne.n	8006fce <__ssputs_r+0x5a>
 800700c:	6921      	ldr	r1, [r4, #16]
 800700e:	4650      	mov	r0, sl
 8007010:	f7ff feb8 	bl	8006d84 <_free_r>
 8007014:	230c      	movs	r3, #12
 8007016:	f8ca 3000 	str.w	r3, [sl]
 800701a:	89a3      	ldrh	r3, [r4, #12]
 800701c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007020:	81a3      	strh	r3, [r4, #12]
 8007022:	f04f 30ff 	mov.w	r0, #4294967295
 8007026:	e7e9      	b.n	8006ffc <__ssputs_r+0x88>

08007028 <_svfiprintf_r>:
 8007028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800702c:	4698      	mov	r8, r3
 800702e:	898b      	ldrh	r3, [r1, #12]
 8007030:	061b      	lsls	r3, r3, #24
 8007032:	b09d      	sub	sp, #116	; 0x74
 8007034:	4607      	mov	r7, r0
 8007036:	460d      	mov	r5, r1
 8007038:	4614      	mov	r4, r2
 800703a:	d50e      	bpl.n	800705a <_svfiprintf_r+0x32>
 800703c:	690b      	ldr	r3, [r1, #16]
 800703e:	b963      	cbnz	r3, 800705a <_svfiprintf_r+0x32>
 8007040:	2140      	movs	r1, #64	; 0x40
 8007042:	f7ff ff0b 	bl	8006e5c <_malloc_r>
 8007046:	6028      	str	r0, [r5, #0]
 8007048:	6128      	str	r0, [r5, #16]
 800704a:	b920      	cbnz	r0, 8007056 <_svfiprintf_r+0x2e>
 800704c:	230c      	movs	r3, #12
 800704e:	603b      	str	r3, [r7, #0]
 8007050:	f04f 30ff 	mov.w	r0, #4294967295
 8007054:	e0d0      	b.n	80071f8 <_svfiprintf_r+0x1d0>
 8007056:	2340      	movs	r3, #64	; 0x40
 8007058:	616b      	str	r3, [r5, #20]
 800705a:	2300      	movs	r3, #0
 800705c:	9309      	str	r3, [sp, #36]	; 0x24
 800705e:	2320      	movs	r3, #32
 8007060:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007064:	f8cd 800c 	str.w	r8, [sp, #12]
 8007068:	2330      	movs	r3, #48	; 0x30
 800706a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007210 <_svfiprintf_r+0x1e8>
 800706e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007072:	f04f 0901 	mov.w	r9, #1
 8007076:	4623      	mov	r3, r4
 8007078:	469a      	mov	sl, r3
 800707a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800707e:	b10a      	cbz	r2, 8007084 <_svfiprintf_r+0x5c>
 8007080:	2a25      	cmp	r2, #37	; 0x25
 8007082:	d1f9      	bne.n	8007078 <_svfiprintf_r+0x50>
 8007084:	ebba 0b04 	subs.w	fp, sl, r4
 8007088:	d00b      	beq.n	80070a2 <_svfiprintf_r+0x7a>
 800708a:	465b      	mov	r3, fp
 800708c:	4622      	mov	r2, r4
 800708e:	4629      	mov	r1, r5
 8007090:	4638      	mov	r0, r7
 8007092:	f7ff ff6f 	bl	8006f74 <__ssputs_r>
 8007096:	3001      	adds	r0, #1
 8007098:	f000 80a9 	beq.w	80071ee <_svfiprintf_r+0x1c6>
 800709c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800709e:	445a      	add	r2, fp
 80070a0:	9209      	str	r2, [sp, #36]	; 0x24
 80070a2:	f89a 3000 	ldrb.w	r3, [sl]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	f000 80a1 	beq.w	80071ee <_svfiprintf_r+0x1c6>
 80070ac:	2300      	movs	r3, #0
 80070ae:	f04f 32ff 	mov.w	r2, #4294967295
 80070b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070b6:	f10a 0a01 	add.w	sl, sl, #1
 80070ba:	9304      	str	r3, [sp, #16]
 80070bc:	9307      	str	r3, [sp, #28]
 80070be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80070c2:	931a      	str	r3, [sp, #104]	; 0x68
 80070c4:	4654      	mov	r4, sl
 80070c6:	2205      	movs	r2, #5
 80070c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070cc:	4850      	ldr	r0, [pc, #320]	; (8007210 <_svfiprintf_r+0x1e8>)
 80070ce:	f7f9 f89f 	bl	8000210 <memchr>
 80070d2:	9a04      	ldr	r2, [sp, #16]
 80070d4:	b9d8      	cbnz	r0, 800710e <_svfiprintf_r+0xe6>
 80070d6:	06d0      	lsls	r0, r2, #27
 80070d8:	bf44      	itt	mi
 80070da:	2320      	movmi	r3, #32
 80070dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070e0:	0711      	lsls	r1, r2, #28
 80070e2:	bf44      	itt	mi
 80070e4:	232b      	movmi	r3, #43	; 0x2b
 80070e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070ea:	f89a 3000 	ldrb.w	r3, [sl]
 80070ee:	2b2a      	cmp	r3, #42	; 0x2a
 80070f0:	d015      	beq.n	800711e <_svfiprintf_r+0xf6>
 80070f2:	9a07      	ldr	r2, [sp, #28]
 80070f4:	4654      	mov	r4, sl
 80070f6:	2000      	movs	r0, #0
 80070f8:	f04f 0c0a 	mov.w	ip, #10
 80070fc:	4621      	mov	r1, r4
 80070fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007102:	3b30      	subs	r3, #48	; 0x30
 8007104:	2b09      	cmp	r3, #9
 8007106:	d94d      	bls.n	80071a4 <_svfiprintf_r+0x17c>
 8007108:	b1b0      	cbz	r0, 8007138 <_svfiprintf_r+0x110>
 800710a:	9207      	str	r2, [sp, #28]
 800710c:	e014      	b.n	8007138 <_svfiprintf_r+0x110>
 800710e:	eba0 0308 	sub.w	r3, r0, r8
 8007112:	fa09 f303 	lsl.w	r3, r9, r3
 8007116:	4313      	orrs	r3, r2
 8007118:	9304      	str	r3, [sp, #16]
 800711a:	46a2      	mov	sl, r4
 800711c:	e7d2      	b.n	80070c4 <_svfiprintf_r+0x9c>
 800711e:	9b03      	ldr	r3, [sp, #12]
 8007120:	1d19      	adds	r1, r3, #4
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	9103      	str	r1, [sp, #12]
 8007126:	2b00      	cmp	r3, #0
 8007128:	bfbb      	ittet	lt
 800712a:	425b      	neglt	r3, r3
 800712c:	f042 0202 	orrlt.w	r2, r2, #2
 8007130:	9307      	strge	r3, [sp, #28]
 8007132:	9307      	strlt	r3, [sp, #28]
 8007134:	bfb8      	it	lt
 8007136:	9204      	strlt	r2, [sp, #16]
 8007138:	7823      	ldrb	r3, [r4, #0]
 800713a:	2b2e      	cmp	r3, #46	; 0x2e
 800713c:	d10c      	bne.n	8007158 <_svfiprintf_r+0x130>
 800713e:	7863      	ldrb	r3, [r4, #1]
 8007140:	2b2a      	cmp	r3, #42	; 0x2a
 8007142:	d134      	bne.n	80071ae <_svfiprintf_r+0x186>
 8007144:	9b03      	ldr	r3, [sp, #12]
 8007146:	1d1a      	adds	r2, r3, #4
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	9203      	str	r2, [sp, #12]
 800714c:	2b00      	cmp	r3, #0
 800714e:	bfb8      	it	lt
 8007150:	f04f 33ff 	movlt.w	r3, #4294967295
 8007154:	3402      	adds	r4, #2
 8007156:	9305      	str	r3, [sp, #20]
 8007158:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007220 <_svfiprintf_r+0x1f8>
 800715c:	7821      	ldrb	r1, [r4, #0]
 800715e:	2203      	movs	r2, #3
 8007160:	4650      	mov	r0, sl
 8007162:	f7f9 f855 	bl	8000210 <memchr>
 8007166:	b138      	cbz	r0, 8007178 <_svfiprintf_r+0x150>
 8007168:	9b04      	ldr	r3, [sp, #16]
 800716a:	eba0 000a 	sub.w	r0, r0, sl
 800716e:	2240      	movs	r2, #64	; 0x40
 8007170:	4082      	lsls	r2, r0
 8007172:	4313      	orrs	r3, r2
 8007174:	3401      	adds	r4, #1
 8007176:	9304      	str	r3, [sp, #16]
 8007178:	f814 1b01 	ldrb.w	r1, [r4], #1
 800717c:	4825      	ldr	r0, [pc, #148]	; (8007214 <_svfiprintf_r+0x1ec>)
 800717e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007182:	2206      	movs	r2, #6
 8007184:	f7f9 f844 	bl	8000210 <memchr>
 8007188:	2800      	cmp	r0, #0
 800718a:	d038      	beq.n	80071fe <_svfiprintf_r+0x1d6>
 800718c:	4b22      	ldr	r3, [pc, #136]	; (8007218 <_svfiprintf_r+0x1f0>)
 800718e:	bb1b      	cbnz	r3, 80071d8 <_svfiprintf_r+0x1b0>
 8007190:	9b03      	ldr	r3, [sp, #12]
 8007192:	3307      	adds	r3, #7
 8007194:	f023 0307 	bic.w	r3, r3, #7
 8007198:	3308      	adds	r3, #8
 800719a:	9303      	str	r3, [sp, #12]
 800719c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800719e:	4433      	add	r3, r6
 80071a0:	9309      	str	r3, [sp, #36]	; 0x24
 80071a2:	e768      	b.n	8007076 <_svfiprintf_r+0x4e>
 80071a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80071a8:	460c      	mov	r4, r1
 80071aa:	2001      	movs	r0, #1
 80071ac:	e7a6      	b.n	80070fc <_svfiprintf_r+0xd4>
 80071ae:	2300      	movs	r3, #0
 80071b0:	3401      	adds	r4, #1
 80071b2:	9305      	str	r3, [sp, #20]
 80071b4:	4619      	mov	r1, r3
 80071b6:	f04f 0c0a 	mov.w	ip, #10
 80071ba:	4620      	mov	r0, r4
 80071bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071c0:	3a30      	subs	r2, #48	; 0x30
 80071c2:	2a09      	cmp	r2, #9
 80071c4:	d903      	bls.n	80071ce <_svfiprintf_r+0x1a6>
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d0c6      	beq.n	8007158 <_svfiprintf_r+0x130>
 80071ca:	9105      	str	r1, [sp, #20]
 80071cc:	e7c4      	b.n	8007158 <_svfiprintf_r+0x130>
 80071ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80071d2:	4604      	mov	r4, r0
 80071d4:	2301      	movs	r3, #1
 80071d6:	e7f0      	b.n	80071ba <_svfiprintf_r+0x192>
 80071d8:	ab03      	add	r3, sp, #12
 80071da:	9300      	str	r3, [sp, #0]
 80071dc:	462a      	mov	r2, r5
 80071de:	4b0f      	ldr	r3, [pc, #60]	; (800721c <_svfiprintf_r+0x1f4>)
 80071e0:	a904      	add	r1, sp, #16
 80071e2:	4638      	mov	r0, r7
 80071e4:	f3af 8000 	nop.w
 80071e8:	1c42      	adds	r2, r0, #1
 80071ea:	4606      	mov	r6, r0
 80071ec:	d1d6      	bne.n	800719c <_svfiprintf_r+0x174>
 80071ee:	89ab      	ldrh	r3, [r5, #12]
 80071f0:	065b      	lsls	r3, r3, #25
 80071f2:	f53f af2d 	bmi.w	8007050 <_svfiprintf_r+0x28>
 80071f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071f8:	b01d      	add	sp, #116	; 0x74
 80071fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071fe:	ab03      	add	r3, sp, #12
 8007200:	9300      	str	r3, [sp, #0]
 8007202:	462a      	mov	r2, r5
 8007204:	4b05      	ldr	r3, [pc, #20]	; (800721c <_svfiprintf_r+0x1f4>)
 8007206:	a904      	add	r1, sp, #16
 8007208:	4638      	mov	r0, r7
 800720a:	f000 f879 	bl	8007300 <_printf_i>
 800720e:	e7eb      	b.n	80071e8 <_svfiprintf_r+0x1c0>
 8007210:	08007754 	.word	0x08007754
 8007214:	0800775e 	.word	0x0800775e
 8007218:	00000000 	.word	0x00000000
 800721c:	08006f75 	.word	0x08006f75
 8007220:	0800775a 	.word	0x0800775a

08007224 <_printf_common>:
 8007224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007228:	4616      	mov	r6, r2
 800722a:	4699      	mov	r9, r3
 800722c:	688a      	ldr	r2, [r1, #8]
 800722e:	690b      	ldr	r3, [r1, #16]
 8007230:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007234:	4293      	cmp	r3, r2
 8007236:	bfb8      	it	lt
 8007238:	4613      	movlt	r3, r2
 800723a:	6033      	str	r3, [r6, #0]
 800723c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007240:	4607      	mov	r7, r0
 8007242:	460c      	mov	r4, r1
 8007244:	b10a      	cbz	r2, 800724a <_printf_common+0x26>
 8007246:	3301      	adds	r3, #1
 8007248:	6033      	str	r3, [r6, #0]
 800724a:	6823      	ldr	r3, [r4, #0]
 800724c:	0699      	lsls	r1, r3, #26
 800724e:	bf42      	ittt	mi
 8007250:	6833      	ldrmi	r3, [r6, #0]
 8007252:	3302      	addmi	r3, #2
 8007254:	6033      	strmi	r3, [r6, #0]
 8007256:	6825      	ldr	r5, [r4, #0]
 8007258:	f015 0506 	ands.w	r5, r5, #6
 800725c:	d106      	bne.n	800726c <_printf_common+0x48>
 800725e:	f104 0a19 	add.w	sl, r4, #25
 8007262:	68e3      	ldr	r3, [r4, #12]
 8007264:	6832      	ldr	r2, [r6, #0]
 8007266:	1a9b      	subs	r3, r3, r2
 8007268:	42ab      	cmp	r3, r5
 800726a:	dc26      	bgt.n	80072ba <_printf_common+0x96>
 800726c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007270:	1e13      	subs	r3, r2, #0
 8007272:	6822      	ldr	r2, [r4, #0]
 8007274:	bf18      	it	ne
 8007276:	2301      	movne	r3, #1
 8007278:	0692      	lsls	r2, r2, #26
 800727a:	d42b      	bmi.n	80072d4 <_printf_common+0xb0>
 800727c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007280:	4649      	mov	r1, r9
 8007282:	4638      	mov	r0, r7
 8007284:	47c0      	blx	r8
 8007286:	3001      	adds	r0, #1
 8007288:	d01e      	beq.n	80072c8 <_printf_common+0xa4>
 800728a:	6823      	ldr	r3, [r4, #0]
 800728c:	6922      	ldr	r2, [r4, #16]
 800728e:	f003 0306 	and.w	r3, r3, #6
 8007292:	2b04      	cmp	r3, #4
 8007294:	bf02      	ittt	eq
 8007296:	68e5      	ldreq	r5, [r4, #12]
 8007298:	6833      	ldreq	r3, [r6, #0]
 800729a:	1aed      	subeq	r5, r5, r3
 800729c:	68a3      	ldr	r3, [r4, #8]
 800729e:	bf0c      	ite	eq
 80072a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072a4:	2500      	movne	r5, #0
 80072a6:	4293      	cmp	r3, r2
 80072a8:	bfc4      	itt	gt
 80072aa:	1a9b      	subgt	r3, r3, r2
 80072ac:	18ed      	addgt	r5, r5, r3
 80072ae:	2600      	movs	r6, #0
 80072b0:	341a      	adds	r4, #26
 80072b2:	42b5      	cmp	r5, r6
 80072b4:	d11a      	bne.n	80072ec <_printf_common+0xc8>
 80072b6:	2000      	movs	r0, #0
 80072b8:	e008      	b.n	80072cc <_printf_common+0xa8>
 80072ba:	2301      	movs	r3, #1
 80072bc:	4652      	mov	r2, sl
 80072be:	4649      	mov	r1, r9
 80072c0:	4638      	mov	r0, r7
 80072c2:	47c0      	blx	r8
 80072c4:	3001      	adds	r0, #1
 80072c6:	d103      	bne.n	80072d0 <_printf_common+0xac>
 80072c8:	f04f 30ff 	mov.w	r0, #4294967295
 80072cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072d0:	3501      	adds	r5, #1
 80072d2:	e7c6      	b.n	8007262 <_printf_common+0x3e>
 80072d4:	18e1      	adds	r1, r4, r3
 80072d6:	1c5a      	adds	r2, r3, #1
 80072d8:	2030      	movs	r0, #48	; 0x30
 80072da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80072de:	4422      	add	r2, r4
 80072e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80072e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80072e8:	3302      	adds	r3, #2
 80072ea:	e7c7      	b.n	800727c <_printf_common+0x58>
 80072ec:	2301      	movs	r3, #1
 80072ee:	4622      	mov	r2, r4
 80072f0:	4649      	mov	r1, r9
 80072f2:	4638      	mov	r0, r7
 80072f4:	47c0      	blx	r8
 80072f6:	3001      	adds	r0, #1
 80072f8:	d0e6      	beq.n	80072c8 <_printf_common+0xa4>
 80072fa:	3601      	adds	r6, #1
 80072fc:	e7d9      	b.n	80072b2 <_printf_common+0x8e>
	...

08007300 <_printf_i>:
 8007300:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007304:	7e0f      	ldrb	r7, [r1, #24]
 8007306:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007308:	2f78      	cmp	r7, #120	; 0x78
 800730a:	4691      	mov	r9, r2
 800730c:	4680      	mov	r8, r0
 800730e:	460c      	mov	r4, r1
 8007310:	469a      	mov	sl, r3
 8007312:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007316:	d807      	bhi.n	8007328 <_printf_i+0x28>
 8007318:	2f62      	cmp	r7, #98	; 0x62
 800731a:	d80a      	bhi.n	8007332 <_printf_i+0x32>
 800731c:	2f00      	cmp	r7, #0
 800731e:	f000 80d4 	beq.w	80074ca <_printf_i+0x1ca>
 8007322:	2f58      	cmp	r7, #88	; 0x58
 8007324:	f000 80c0 	beq.w	80074a8 <_printf_i+0x1a8>
 8007328:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800732c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007330:	e03a      	b.n	80073a8 <_printf_i+0xa8>
 8007332:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007336:	2b15      	cmp	r3, #21
 8007338:	d8f6      	bhi.n	8007328 <_printf_i+0x28>
 800733a:	a101      	add	r1, pc, #4	; (adr r1, 8007340 <_printf_i+0x40>)
 800733c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007340:	08007399 	.word	0x08007399
 8007344:	080073ad 	.word	0x080073ad
 8007348:	08007329 	.word	0x08007329
 800734c:	08007329 	.word	0x08007329
 8007350:	08007329 	.word	0x08007329
 8007354:	08007329 	.word	0x08007329
 8007358:	080073ad 	.word	0x080073ad
 800735c:	08007329 	.word	0x08007329
 8007360:	08007329 	.word	0x08007329
 8007364:	08007329 	.word	0x08007329
 8007368:	08007329 	.word	0x08007329
 800736c:	080074b1 	.word	0x080074b1
 8007370:	080073d9 	.word	0x080073d9
 8007374:	0800746b 	.word	0x0800746b
 8007378:	08007329 	.word	0x08007329
 800737c:	08007329 	.word	0x08007329
 8007380:	080074d3 	.word	0x080074d3
 8007384:	08007329 	.word	0x08007329
 8007388:	080073d9 	.word	0x080073d9
 800738c:	08007329 	.word	0x08007329
 8007390:	08007329 	.word	0x08007329
 8007394:	08007473 	.word	0x08007473
 8007398:	682b      	ldr	r3, [r5, #0]
 800739a:	1d1a      	adds	r2, r3, #4
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	602a      	str	r2, [r5, #0]
 80073a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073a8:	2301      	movs	r3, #1
 80073aa:	e09f      	b.n	80074ec <_printf_i+0x1ec>
 80073ac:	6820      	ldr	r0, [r4, #0]
 80073ae:	682b      	ldr	r3, [r5, #0]
 80073b0:	0607      	lsls	r7, r0, #24
 80073b2:	f103 0104 	add.w	r1, r3, #4
 80073b6:	6029      	str	r1, [r5, #0]
 80073b8:	d501      	bpl.n	80073be <_printf_i+0xbe>
 80073ba:	681e      	ldr	r6, [r3, #0]
 80073bc:	e003      	b.n	80073c6 <_printf_i+0xc6>
 80073be:	0646      	lsls	r6, r0, #25
 80073c0:	d5fb      	bpl.n	80073ba <_printf_i+0xba>
 80073c2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80073c6:	2e00      	cmp	r6, #0
 80073c8:	da03      	bge.n	80073d2 <_printf_i+0xd2>
 80073ca:	232d      	movs	r3, #45	; 0x2d
 80073cc:	4276      	negs	r6, r6
 80073ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073d2:	485a      	ldr	r0, [pc, #360]	; (800753c <_printf_i+0x23c>)
 80073d4:	230a      	movs	r3, #10
 80073d6:	e012      	b.n	80073fe <_printf_i+0xfe>
 80073d8:	682b      	ldr	r3, [r5, #0]
 80073da:	6820      	ldr	r0, [r4, #0]
 80073dc:	1d19      	adds	r1, r3, #4
 80073de:	6029      	str	r1, [r5, #0]
 80073e0:	0605      	lsls	r5, r0, #24
 80073e2:	d501      	bpl.n	80073e8 <_printf_i+0xe8>
 80073e4:	681e      	ldr	r6, [r3, #0]
 80073e6:	e002      	b.n	80073ee <_printf_i+0xee>
 80073e8:	0641      	lsls	r1, r0, #25
 80073ea:	d5fb      	bpl.n	80073e4 <_printf_i+0xe4>
 80073ec:	881e      	ldrh	r6, [r3, #0]
 80073ee:	4853      	ldr	r0, [pc, #332]	; (800753c <_printf_i+0x23c>)
 80073f0:	2f6f      	cmp	r7, #111	; 0x6f
 80073f2:	bf0c      	ite	eq
 80073f4:	2308      	moveq	r3, #8
 80073f6:	230a      	movne	r3, #10
 80073f8:	2100      	movs	r1, #0
 80073fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80073fe:	6865      	ldr	r5, [r4, #4]
 8007400:	60a5      	str	r5, [r4, #8]
 8007402:	2d00      	cmp	r5, #0
 8007404:	bfa2      	ittt	ge
 8007406:	6821      	ldrge	r1, [r4, #0]
 8007408:	f021 0104 	bicge.w	r1, r1, #4
 800740c:	6021      	strge	r1, [r4, #0]
 800740e:	b90e      	cbnz	r6, 8007414 <_printf_i+0x114>
 8007410:	2d00      	cmp	r5, #0
 8007412:	d04b      	beq.n	80074ac <_printf_i+0x1ac>
 8007414:	4615      	mov	r5, r2
 8007416:	fbb6 f1f3 	udiv	r1, r6, r3
 800741a:	fb03 6711 	mls	r7, r3, r1, r6
 800741e:	5dc7      	ldrb	r7, [r0, r7]
 8007420:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007424:	4637      	mov	r7, r6
 8007426:	42bb      	cmp	r3, r7
 8007428:	460e      	mov	r6, r1
 800742a:	d9f4      	bls.n	8007416 <_printf_i+0x116>
 800742c:	2b08      	cmp	r3, #8
 800742e:	d10b      	bne.n	8007448 <_printf_i+0x148>
 8007430:	6823      	ldr	r3, [r4, #0]
 8007432:	07de      	lsls	r6, r3, #31
 8007434:	d508      	bpl.n	8007448 <_printf_i+0x148>
 8007436:	6923      	ldr	r3, [r4, #16]
 8007438:	6861      	ldr	r1, [r4, #4]
 800743a:	4299      	cmp	r1, r3
 800743c:	bfde      	ittt	le
 800743e:	2330      	movle	r3, #48	; 0x30
 8007440:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007444:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007448:	1b52      	subs	r2, r2, r5
 800744a:	6122      	str	r2, [r4, #16]
 800744c:	f8cd a000 	str.w	sl, [sp]
 8007450:	464b      	mov	r3, r9
 8007452:	aa03      	add	r2, sp, #12
 8007454:	4621      	mov	r1, r4
 8007456:	4640      	mov	r0, r8
 8007458:	f7ff fee4 	bl	8007224 <_printf_common>
 800745c:	3001      	adds	r0, #1
 800745e:	d14a      	bne.n	80074f6 <_printf_i+0x1f6>
 8007460:	f04f 30ff 	mov.w	r0, #4294967295
 8007464:	b004      	add	sp, #16
 8007466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800746a:	6823      	ldr	r3, [r4, #0]
 800746c:	f043 0320 	orr.w	r3, r3, #32
 8007470:	6023      	str	r3, [r4, #0]
 8007472:	4833      	ldr	r0, [pc, #204]	; (8007540 <_printf_i+0x240>)
 8007474:	2778      	movs	r7, #120	; 0x78
 8007476:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800747a:	6823      	ldr	r3, [r4, #0]
 800747c:	6829      	ldr	r1, [r5, #0]
 800747e:	061f      	lsls	r7, r3, #24
 8007480:	f851 6b04 	ldr.w	r6, [r1], #4
 8007484:	d402      	bmi.n	800748c <_printf_i+0x18c>
 8007486:	065f      	lsls	r7, r3, #25
 8007488:	bf48      	it	mi
 800748a:	b2b6      	uxthmi	r6, r6
 800748c:	07df      	lsls	r7, r3, #31
 800748e:	bf48      	it	mi
 8007490:	f043 0320 	orrmi.w	r3, r3, #32
 8007494:	6029      	str	r1, [r5, #0]
 8007496:	bf48      	it	mi
 8007498:	6023      	strmi	r3, [r4, #0]
 800749a:	b91e      	cbnz	r6, 80074a4 <_printf_i+0x1a4>
 800749c:	6823      	ldr	r3, [r4, #0]
 800749e:	f023 0320 	bic.w	r3, r3, #32
 80074a2:	6023      	str	r3, [r4, #0]
 80074a4:	2310      	movs	r3, #16
 80074a6:	e7a7      	b.n	80073f8 <_printf_i+0xf8>
 80074a8:	4824      	ldr	r0, [pc, #144]	; (800753c <_printf_i+0x23c>)
 80074aa:	e7e4      	b.n	8007476 <_printf_i+0x176>
 80074ac:	4615      	mov	r5, r2
 80074ae:	e7bd      	b.n	800742c <_printf_i+0x12c>
 80074b0:	682b      	ldr	r3, [r5, #0]
 80074b2:	6826      	ldr	r6, [r4, #0]
 80074b4:	6961      	ldr	r1, [r4, #20]
 80074b6:	1d18      	adds	r0, r3, #4
 80074b8:	6028      	str	r0, [r5, #0]
 80074ba:	0635      	lsls	r5, r6, #24
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	d501      	bpl.n	80074c4 <_printf_i+0x1c4>
 80074c0:	6019      	str	r1, [r3, #0]
 80074c2:	e002      	b.n	80074ca <_printf_i+0x1ca>
 80074c4:	0670      	lsls	r0, r6, #25
 80074c6:	d5fb      	bpl.n	80074c0 <_printf_i+0x1c0>
 80074c8:	8019      	strh	r1, [r3, #0]
 80074ca:	2300      	movs	r3, #0
 80074cc:	6123      	str	r3, [r4, #16]
 80074ce:	4615      	mov	r5, r2
 80074d0:	e7bc      	b.n	800744c <_printf_i+0x14c>
 80074d2:	682b      	ldr	r3, [r5, #0]
 80074d4:	1d1a      	adds	r2, r3, #4
 80074d6:	602a      	str	r2, [r5, #0]
 80074d8:	681d      	ldr	r5, [r3, #0]
 80074da:	6862      	ldr	r2, [r4, #4]
 80074dc:	2100      	movs	r1, #0
 80074de:	4628      	mov	r0, r5
 80074e0:	f7f8 fe96 	bl	8000210 <memchr>
 80074e4:	b108      	cbz	r0, 80074ea <_printf_i+0x1ea>
 80074e6:	1b40      	subs	r0, r0, r5
 80074e8:	6060      	str	r0, [r4, #4]
 80074ea:	6863      	ldr	r3, [r4, #4]
 80074ec:	6123      	str	r3, [r4, #16]
 80074ee:	2300      	movs	r3, #0
 80074f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074f4:	e7aa      	b.n	800744c <_printf_i+0x14c>
 80074f6:	6923      	ldr	r3, [r4, #16]
 80074f8:	462a      	mov	r2, r5
 80074fa:	4649      	mov	r1, r9
 80074fc:	4640      	mov	r0, r8
 80074fe:	47d0      	blx	sl
 8007500:	3001      	adds	r0, #1
 8007502:	d0ad      	beq.n	8007460 <_printf_i+0x160>
 8007504:	6823      	ldr	r3, [r4, #0]
 8007506:	079b      	lsls	r3, r3, #30
 8007508:	d413      	bmi.n	8007532 <_printf_i+0x232>
 800750a:	68e0      	ldr	r0, [r4, #12]
 800750c:	9b03      	ldr	r3, [sp, #12]
 800750e:	4298      	cmp	r0, r3
 8007510:	bfb8      	it	lt
 8007512:	4618      	movlt	r0, r3
 8007514:	e7a6      	b.n	8007464 <_printf_i+0x164>
 8007516:	2301      	movs	r3, #1
 8007518:	4632      	mov	r2, r6
 800751a:	4649      	mov	r1, r9
 800751c:	4640      	mov	r0, r8
 800751e:	47d0      	blx	sl
 8007520:	3001      	adds	r0, #1
 8007522:	d09d      	beq.n	8007460 <_printf_i+0x160>
 8007524:	3501      	adds	r5, #1
 8007526:	68e3      	ldr	r3, [r4, #12]
 8007528:	9903      	ldr	r1, [sp, #12]
 800752a:	1a5b      	subs	r3, r3, r1
 800752c:	42ab      	cmp	r3, r5
 800752e:	dcf2      	bgt.n	8007516 <_printf_i+0x216>
 8007530:	e7eb      	b.n	800750a <_printf_i+0x20a>
 8007532:	2500      	movs	r5, #0
 8007534:	f104 0619 	add.w	r6, r4, #25
 8007538:	e7f5      	b.n	8007526 <_printf_i+0x226>
 800753a:	bf00      	nop
 800753c:	08007765 	.word	0x08007765
 8007540:	08007776 	.word	0x08007776

08007544 <memmove>:
 8007544:	4288      	cmp	r0, r1
 8007546:	b510      	push	{r4, lr}
 8007548:	eb01 0402 	add.w	r4, r1, r2
 800754c:	d902      	bls.n	8007554 <memmove+0x10>
 800754e:	4284      	cmp	r4, r0
 8007550:	4623      	mov	r3, r4
 8007552:	d807      	bhi.n	8007564 <memmove+0x20>
 8007554:	1e43      	subs	r3, r0, #1
 8007556:	42a1      	cmp	r1, r4
 8007558:	d008      	beq.n	800756c <memmove+0x28>
 800755a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800755e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007562:	e7f8      	b.n	8007556 <memmove+0x12>
 8007564:	4402      	add	r2, r0
 8007566:	4601      	mov	r1, r0
 8007568:	428a      	cmp	r2, r1
 800756a:	d100      	bne.n	800756e <memmove+0x2a>
 800756c:	bd10      	pop	{r4, pc}
 800756e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007572:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007576:	e7f7      	b.n	8007568 <memmove+0x24>

08007578 <_sbrk_r>:
 8007578:	b538      	push	{r3, r4, r5, lr}
 800757a:	4d06      	ldr	r5, [pc, #24]	; (8007594 <_sbrk_r+0x1c>)
 800757c:	2300      	movs	r3, #0
 800757e:	4604      	mov	r4, r0
 8007580:	4608      	mov	r0, r1
 8007582:	602b      	str	r3, [r5, #0]
 8007584:	f7fb f95e 	bl	8002844 <_sbrk>
 8007588:	1c43      	adds	r3, r0, #1
 800758a:	d102      	bne.n	8007592 <_sbrk_r+0x1a>
 800758c:	682b      	ldr	r3, [r5, #0]
 800758e:	b103      	cbz	r3, 8007592 <_sbrk_r+0x1a>
 8007590:	6023      	str	r3, [r4, #0]
 8007592:	bd38      	pop	{r3, r4, r5, pc}
 8007594:	200005e0 	.word	0x200005e0

08007598 <memcpy>:
 8007598:	440a      	add	r2, r1
 800759a:	4291      	cmp	r1, r2
 800759c:	f100 33ff 	add.w	r3, r0, #4294967295
 80075a0:	d100      	bne.n	80075a4 <memcpy+0xc>
 80075a2:	4770      	bx	lr
 80075a4:	b510      	push	{r4, lr}
 80075a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075ae:	4291      	cmp	r1, r2
 80075b0:	d1f9      	bne.n	80075a6 <memcpy+0xe>
 80075b2:	bd10      	pop	{r4, pc}

080075b4 <_realloc_r>:
 80075b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075b8:	4680      	mov	r8, r0
 80075ba:	4614      	mov	r4, r2
 80075bc:	460e      	mov	r6, r1
 80075be:	b921      	cbnz	r1, 80075ca <_realloc_r+0x16>
 80075c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075c4:	4611      	mov	r1, r2
 80075c6:	f7ff bc49 	b.w	8006e5c <_malloc_r>
 80075ca:	b92a      	cbnz	r2, 80075d8 <_realloc_r+0x24>
 80075cc:	f7ff fbda 	bl	8006d84 <_free_r>
 80075d0:	4625      	mov	r5, r4
 80075d2:	4628      	mov	r0, r5
 80075d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075d8:	f000 f81b 	bl	8007612 <_malloc_usable_size_r>
 80075dc:	4284      	cmp	r4, r0
 80075de:	4607      	mov	r7, r0
 80075e0:	d802      	bhi.n	80075e8 <_realloc_r+0x34>
 80075e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80075e6:	d812      	bhi.n	800760e <_realloc_r+0x5a>
 80075e8:	4621      	mov	r1, r4
 80075ea:	4640      	mov	r0, r8
 80075ec:	f7ff fc36 	bl	8006e5c <_malloc_r>
 80075f0:	4605      	mov	r5, r0
 80075f2:	2800      	cmp	r0, #0
 80075f4:	d0ed      	beq.n	80075d2 <_realloc_r+0x1e>
 80075f6:	42bc      	cmp	r4, r7
 80075f8:	4622      	mov	r2, r4
 80075fa:	4631      	mov	r1, r6
 80075fc:	bf28      	it	cs
 80075fe:	463a      	movcs	r2, r7
 8007600:	f7ff ffca 	bl	8007598 <memcpy>
 8007604:	4631      	mov	r1, r6
 8007606:	4640      	mov	r0, r8
 8007608:	f7ff fbbc 	bl	8006d84 <_free_r>
 800760c:	e7e1      	b.n	80075d2 <_realloc_r+0x1e>
 800760e:	4635      	mov	r5, r6
 8007610:	e7df      	b.n	80075d2 <_realloc_r+0x1e>

08007612 <_malloc_usable_size_r>:
 8007612:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007616:	1f18      	subs	r0, r3, #4
 8007618:	2b00      	cmp	r3, #0
 800761a:	bfbc      	itt	lt
 800761c:	580b      	ldrlt	r3, [r1, r0]
 800761e:	18c0      	addlt	r0, r0, r3
 8007620:	4770      	bx	lr
	...

08007624 <_init>:
 8007624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007626:	bf00      	nop
 8007628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800762a:	bc08      	pop	{r3}
 800762c:	469e      	mov	lr, r3
 800762e:	4770      	bx	lr

08007630 <_fini>:
 8007630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007632:	bf00      	nop
 8007634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007636:	bc08      	pop	{r3}
 8007638:	469e      	mov	lr, r3
 800763a:	4770      	bx	lr
