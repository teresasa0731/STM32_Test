
PWM_with_UART_LED12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000422c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080043fc  080043fc  000143fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800447c  0800447c  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  0800447c  0800447c  0001447c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004484  08004484  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004484  08004484  00014484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004488  08004488  00014488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800448c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  20000068  080044f4  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  080044f4  000202b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cf76  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d3f  00000000  00000000  0002d051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cd0  00000000  00000000  0002ed90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a05  00000000  00000000  0002fa60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000227fd  00000000  00000000  00030465  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f154  00000000  00000000  00052c62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2388  00000000  00000000  00061db6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003d94  00000000  00000000  00134140  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00137ed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080043e4 	.word	0x080043e4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	080043e4 	.word	0x080043e4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b0:	f000 fd16 	bl	8000fe0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b4:	f000 f8b4 	bl	8000720 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b8:	f000 fa1c 	bl	80009f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005bc:	f000 f9f0 	bl	80009a0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80005c0:	f000 f91c 	bl	80007fc <MX_TIM1_Init>
  MX_TIM14_Init();
 80005c4:	f000 f99e 	bl	8000904 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80005c8:	2100      	movs	r1, #0
 80005ca:	484d      	ldr	r0, [pc, #308]	; (8000700 <main+0x154>)
 80005cc:	f001 fefc 	bl	80023c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 80005d0:	2100      	movs	r1, #0
 80005d2:	484c      	ldr	r0, [pc, #304]	; (8000704 <main+0x158>)
 80005d4:	f001 fef8 	bl	80023c8 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("Hello\n\r");
 80005d8:	484b      	ldr	r0, [pc, #300]	; (8000708 <main+0x15c>)
 80005da:	f003 f835 	bl	8003648 <iprintf>
	  switch(swMode){
 80005de:	4b4b      	ldr	r3, [pc, #300]	; (800070c <main+0x160>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2b05      	cmp	r3, #5
 80005e4:	d858      	bhi.n	8000698 <main+0xec>
 80005e6:	a201      	add	r2, pc, #4	; (adr r2, 80005ec <main+0x40>)
 80005e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ec:	08000605 	.word	0x08000605
 80005f0:	0800061d 	.word	0x0800061d
 80005f4:	08000637 	.word	0x08000637
 80005f8:	0800064f 	.word	0x0800064f
 80005fc:	08000667 	.word	0x08000667
 8000600:	08000681 	.word	0x08000681
		  case CW_slow1:
//  	  		printf("CW_slow1\r\n");
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8000604:	4b3e      	ldr	r3, [pc, #248]	; (8000700 <main+0x154>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	2200      	movs	r2, #0
 800060a:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_Delay(10);
 800060c:	200a      	movs	r0, #10
 800060e:	f000 fd59 	bl	80010c4 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim14,TIM_CHANNEL_1,200);
 8000612:	4b3c      	ldr	r3, [pc, #240]	; (8000704 <main+0x158>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	22c8      	movs	r2, #200	; 0xc8
 8000618:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 800061a:	e041      	b.n	80006a0 <main+0xf4>
		  case CW_fast:
//  	  		printf("CW_fast\r\n");
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 800061c:	4b38      	ldr	r3, [pc, #224]	; (8000700 <main+0x154>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2200      	movs	r2, #0
 8000622:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_Delay(10);
 8000624:	200a      	movs	r0, #10
 8000626:	f000 fd4d 	bl	80010c4 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim14,TIM_CHANNEL_1,300);
 800062a:	4b36      	ldr	r3, [pc, #216]	; (8000704 <main+0x158>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000632:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8000634:	e034      	b.n	80006a0 <main+0xf4>
		  case CW_slow2:
//  	  		printf("CW_slow2\r\n");
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8000636:	4b32      	ldr	r3, [pc, #200]	; (8000700 <main+0x154>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	2200      	movs	r2, #0
 800063c:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_Delay(10);
 800063e:	200a      	movs	r0, #10
 8000640:	f000 fd40 	bl	80010c4 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim14,TIM_CHANNEL_1,200);
 8000644:	4b2f      	ldr	r3, [pc, #188]	; (8000704 <main+0x158>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	22c8      	movs	r2, #200	; 0xc8
 800064a:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 800064c:	e028      	b.n	80006a0 <main+0xf4>
		  case CCW_slow2:
//  	  		printf("CCW_slow2\r\n");
			__HAL_TIM_SET_COMPARE(&htim14,TIM_CHANNEL_1,0);
 800064e:	4b2d      	ldr	r3, [pc, #180]	; (8000704 <main+0x158>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	2200      	movs	r2, #0
 8000654:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_Delay(10);
 8000656:	200a      	movs	r0, #10
 8000658:	f000 fd34 	bl	80010c4 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,200);
 800065c:	4b28      	ldr	r3, [pc, #160]	; (8000700 <main+0x154>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	22c8      	movs	r2, #200	; 0xc8
 8000662:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8000664:	e01c      	b.n	80006a0 <main+0xf4>
		  case CCW_fast:
//  	  		printf("CCW_fast\r\n");
			__HAL_TIM_SET_COMPARE(&htim14,TIM_CHANNEL_1,0);
 8000666:	4b27      	ldr	r3, [pc, #156]	; (8000704 <main+0x158>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	2200      	movs	r2, #0
 800066c:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_Delay(10);
 800066e:	200a      	movs	r0, #10
 8000670:	f000 fd28 	bl	80010c4 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,300);
 8000674:	4b22      	ldr	r3, [pc, #136]	; (8000700 <main+0x154>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800067c:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 800067e:	e00f      	b.n	80006a0 <main+0xf4>
		  case CCW_slow1:
//  	  		printf("CCW_slow1\r\n");
			__HAL_TIM_SET_COMPARE(&htim14,TIM_CHANNEL_1,0);
 8000680:	4b20      	ldr	r3, [pc, #128]	; (8000704 <main+0x158>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	2200      	movs	r2, #0
 8000686:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_Delay(10);
 8000688:	200a      	movs	r0, #10
 800068a:	f000 fd1b 	bl	80010c4 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,200);
 800068e:	4b1c      	ldr	r3, [pc, #112]	; (8000700 <main+0x154>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	22c8      	movs	r2, #200	; 0xc8
 8000694:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8000696:	e003      	b.n	80006a0 <main+0xf4>
		  default:
			printf("mode select ERROR\r\n");
 8000698:	481d      	ldr	r0, [pc, #116]	; (8000710 <main+0x164>)
 800069a:	f003 f83b 	bl	8003714 <puts>
			break;
 800069e:	bf00      	nop
	  }
	  if(swMode < 3){	// CR mode
 80006a0:	4b1a      	ldr	r3, [pc, #104]	; (800070c <main+0x160>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2b02      	cmp	r3, #2
 80006a6:	dc14      	bgt.n	80006d2 <main+0x126>
		  HAL_GPIO_WritePin(GPIOC,LED2_D6_Pin,LED_OFF);
 80006a8:	2201      	movs	r2, #1
 80006aa:	2101      	movs	r1, #1
 80006ac:	4819      	ldr	r0, [pc, #100]	; (8000714 <main+0x168>)
 80006ae:	f000 ffd3 	bl	8001658 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC,LED1_D5_Pin,LED_ON);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2102      	movs	r1, #2
 80006b6:	4817      	ldr	r0, [pc, #92]	; (8000714 <main+0x168>)
 80006b8:	f000 ffce 	bl	8001658 <HAL_GPIO_WritePin>
		  if(flag){
 80006bc:	4b16      	ldr	r3, [pc, #88]	; (8000718 <main+0x16c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d089      	beq.n	80005d8 <main+0x2c>
			  printf("CR\r\n");
 80006c4:	4815      	ldr	r0, [pc, #84]	; (800071c <main+0x170>)
 80006c6:	f003 f825 	bl	8003714 <puts>
			  flag = 0;
 80006ca:	4b13      	ldr	r3, [pc, #76]	; (8000718 <main+0x16c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	e782      	b.n	80005d8 <main+0x2c>
		  }
	  }else{
		  HAL_GPIO_WritePin(GPIOC,LED1_D5_Pin,LED_OFF);
 80006d2:	2201      	movs	r2, #1
 80006d4:	2102      	movs	r1, #2
 80006d6:	480f      	ldr	r0, [pc, #60]	; (8000714 <main+0x168>)
 80006d8:	f000 ffbe 	bl	8001658 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC,LED2_D6_Pin,LED_ON);
 80006dc:	2200      	movs	r2, #0
 80006de:	2101      	movs	r1, #1
 80006e0:	480c      	ldr	r0, [pc, #48]	; (8000714 <main+0x168>)
 80006e2:	f000 ffb9 	bl	8001658 <HAL_GPIO_WritePin>
		  if(flag){
 80006e6:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <main+0x16c>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	f43f af74 	beq.w	80005d8 <main+0x2c>
			  printf("CR\r\n");
 80006f0:	480a      	ldr	r0, [pc, #40]	; (800071c <main+0x170>)
 80006f2:	f003 f80f 	bl	8003714 <puts>
			  flag = 0;
 80006f6:	4b08      	ldr	r3, [pc, #32]	; (8000718 <main+0x16c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
  {
 80006fc:	e76c      	b.n	80005d8 <main+0x2c>
 80006fe:	bf00      	nop
 8000700:	20000084 	.word	0x20000084
 8000704:	200000cc 	.word	0x200000cc
 8000708:	080043fc 	.word	0x080043fc
 800070c:	20000158 	.word	0x20000158
 8000710:	08004404 	.word	0x08004404
 8000714:	40020800 	.word	0x40020800
 8000718:	2000015c 	.word	0x2000015c
 800071c:	08004418 	.word	0x08004418

08000720 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b094      	sub	sp, #80	; 0x50
 8000724:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000726:	f107 031c 	add.w	r3, r7, #28
 800072a:	2234      	movs	r2, #52	; 0x34
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f003 f8d0 	bl	80038d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000734:	f107 0308 	add.w	r3, r7, #8
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000744:	2300      	movs	r3, #0
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	4b2a      	ldr	r3, [pc, #168]	; (80007f4 <SystemClock_Config+0xd4>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074c:	4a29      	ldr	r2, [pc, #164]	; (80007f4 <SystemClock_Config+0xd4>)
 800074e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000752:	6413      	str	r3, [r2, #64]	; 0x40
 8000754:	4b27      	ldr	r3, [pc, #156]	; (80007f4 <SystemClock_Config+0xd4>)
 8000756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000760:	2300      	movs	r3, #0
 8000762:	603b      	str	r3, [r7, #0]
 8000764:	4b24      	ldr	r3, [pc, #144]	; (80007f8 <SystemClock_Config+0xd8>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800076c:	4a22      	ldr	r2, [pc, #136]	; (80007f8 <SystemClock_Config+0xd8>)
 800076e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000772:	6013      	str	r3, [r2, #0]
 8000774:	4b20      	ldr	r3, [pc, #128]	; (80007f8 <SystemClock_Config+0xd8>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800077c:	603b      	str	r3, [r7, #0]
 800077e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000780:	2302      	movs	r3, #2
 8000782:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000784:	2301      	movs	r3, #1
 8000786:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000788:	2310      	movs	r3, #16
 800078a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800078c:	2302      	movs	r3, #2
 800078e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000790:	2300      	movs	r3, #0
 8000792:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000794:	2310      	movs	r3, #16
 8000796:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000798:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800079c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800079e:	2304      	movs	r3, #4
 80007a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007a2:	2302      	movs	r3, #2
 80007a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007a6:	2302      	movs	r3, #2
 80007a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007aa:	f107 031c 	add.w	r3, r7, #28
 80007ae:	4618      	mov	r0, r3
 80007b0:	f001 face 	bl	8001d50 <HAL_RCC_OscConfig>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007ba:	f000 f9e5 	bl	8000b88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007be:	230f      	movs	r3, #15
 80007c0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c2:	2302      	movs	r3, #2
 80007c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c6:	2300      	movs	r3, #0
 80007c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007d4:	f107 0308 	add.w	r3, r7, #8
 80007d8:	2102      	movs	r1, #2
 80007da:	4618      	mov	r0, r3
 80007dc:	f000 ff6e 	bl	80016bc <HAL_RCC_ClockConfig>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <SystemClock_Config+0xca>
  {
    Error_Handler();
 80007e6:	f000 f9cf 	bl	8000b88 <Error_Handler>
  }
}
 80007ea:	bf00      	nop
 80007ec:	3750      	adds	r7, #80	; 0x50
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40007000 	.word	0x40007000

080007fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b092      	sub	sp, #72	; 0x48
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000802:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800080c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]
 800081c:	615a      	str	r2, [r3, #20]
 800081e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000820:	1d3b      	adds	r3, r7, #4
 8000822:	2220      	movs	r2, #32
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f003 f854 	bl	80038d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800082c:	4b33      	ldr	r3, [pc, #204]	; (80008fc <MX_TIM1_Init+0x100>)
 800082e:	4a34      	ldr	r2, [pc, #208]	; (8000900 <MX_TIM1_Init+0x104>)
 8000830:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8000832:	4b32      	ldr	r3, [pc, #200]	; (80008fc <MX_TIM1_Init+0x100>)
 8000834:	2253      	movs	r2, #83	; 0x53
 8000836:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000838:	4b30      	ldr	r3, [pc, #192]	; (80008fc <MX_TIM1_Init+0x100>)
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800083e:	4b2f      	ldr	r3, [pc, #188]	; (80008fc <MX_TIM1_Init+0x100>)
 8000840:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000844:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000846:	4b2d      	ldr	r3, [pc, #180]	; (80008fc <MX_TIM1_Init+0x100>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800084c:	4b2b      	ldr	r3, [pc, #172]	; (80008fc <MX_TIM1_Init+0x100>)
 800084e:	2200      	movs	r2, #0
 8000850:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000852:	4b2a      	ldr	r3, [pc, #168]	; (80008fc <MX_TIM1_Init+0x100>)
 8000854:	2200      	movs	r2, #0
 8000856:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000858:	4828      	ldr	r0, [pc, #160]	; (80008fc <MX_TIM1_Init+0x100>)
 800085a:	f001 fd66 	bl	800232a <HAL_TIM_PWM_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000864:	f000 f990 	bl	8000b88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000868:	2300      	movs	r3, #0
 800086a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800086c:	2300      	movs	r3, #0
 800086e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000870:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000874:	4619      	mov	r1, r3
 8000876:	4821      	ldr	r0, [pc, #132]	; (80008fc <MX_TIM1_Init+0x100>)
 8000878:	f002 f9a6 	bl	8002bc8 <HAL_TIMEx_MasterConfigSynchronization>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000882:	f000 f981 	bl	8000b88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000886:	2360      	movs	r3, #96	; 0x60
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 200;
 800088a:	23c8      	movs	r3, #200	; 0xc8
 800088c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800088e:	2300      	movs	r3, #0
 8000890:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000892:	2300      	movs	r3, #0
 8000894:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000896:	2300      	movs	r3, #0
 8000898:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800089a:	2300      	movs	r3, #0
 800089c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800089e:	2300      	movs	r3, #0
 80008a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a6:	2200      	movs	r2, #0
 80008a8:	4619      	mov	r1, r3
 80008aa:	4814      	ldr	r0, [pc, #80]	; (80008fc <MX_TIM1_Init+0x100>)
 80008ac:	f001 fe54 	bl	8002558 <HAL_TIM_PWM_ConfigChannel>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80008b6:	f000 f967 	bl	8000b88 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008ba:	2300      	movs	r3, #0
 80008bc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008be:	2300      	movs	r3, #0
 80008c0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008c2:	2300      	movs	r3, #0
 80008c4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008ca:	2300      	movs	r3, #0
 80008cc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008d2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008d4:	2300      	movs	r3, #0
 80008d6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	4619      	mov	r1, r3
 80008dc:	4807      	ldr	r0, [pc, #28]	; (80008fc <MX_TIM1_Init+0x100>)
 80008de:	f002 f9ef 	bl	8002cc0 <HAL_TIMEx_ConfigBreakDeadTime>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 80008e8:	f000 f94e 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008ec:	4803      	ldr	r0, [pc, #12]	; (80008fc <MX_TIM1_Init+0x100>)
 80008ee:	f000 f9bd 	bl	8000c6c <HAL_TIM_MspPostInit>

}
 80008f2:	bf00      	nop
 80008f4:	3748      	adds	r7, #72	; 0x48
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000084 	.word	0x20000084
 8000900:	40010000 	.word	0x40010000

08000904 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b088      	sub	sp, #32
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]
 8000918:	615a      	str	r2, [r3, #20]
 800091a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800091c:	4b1e      	ldr	r3, [pc, #120]	; (8000998 <MX_TIM14_Init+0x94>)
 800091e:	4a1f      	ldr	r2, [pc, #124]	; (800099c <MX_TIM14_Init+0x98>)
 8000920:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 84-1;
 8000922:	4b1d      	ldr	r3, [pc, #116]	; (8000998 <MX_TIM14_Init+0x94>)
 8000924:	2253      	movs	r2, #83	; 0x53
 8000926:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000928:	4b1b      	ldr	r3, [pc, #108]	; (8000998 <MX_TIM14_Init+0x94>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000-1;
 800092e:	4b1a      	ldr	r3, [pc, #104]	; (8000998 <MX_TIM14_Init+0x94>)
 8000930:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000934:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000936:	4b18      	ldr	r3, [pc, #96]	; (8000998 <MX_TIM14_Init+0x94>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800093c:	4b16      	ldr	r3, [pc, #88]	; (8000998 <MX_TIM14_Init+0x94>)
 800093e:	2200      	movs	r2, #0
 8000940:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000942:	4815      	ldr	r0, [pc, #84]	; (8000998 <MX_TIM14_Init+0x94>)
 8000944:	f001 fca2 	bl	800228c <HAL_TIM_Base_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 800094e:	f000 f91b 	bl	8000b88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8000952:	4811      	ldr	r0, [pc, #68]	; (8000998 <MX_TIM14_Init+0x94>)
 8000954:	f001 fce9 	bl	800232a <HAL_TIM_PWM_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 800095e:	f000 f913 	bl	8000b88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000962:	2360      	movs	r3, #96	; 0x60
 8000964:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 200;
 8000966:	23c8      	movs	r3, #200	; 0xc8
 8000968:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800096a:	2300      	movs	r3, #0
 800096c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800096e:	2300      	movs	r3, #0
 8000970:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000972:	1d3b      	adds	r3, r7, #4
 8000974:	2200      	movs	r2, #0
 8000976:	4619      	mov	r1, r3
 8000978:	4807      	ldr	r0, [pc, #28]	; (8000998 <MX_TIM14_Init+0x94>)
 800097a:	f001 fded 	bl	8002558 <HAL_TIM_PWM_ConfigChannel>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8000984:	f000 f900 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8000988:	4803      	ldr	r0, [pc, #12]	; (8000998 <MX_TIM14_Init+0x94>)
 800098a:	f000 f96f 	bl	8000c6c <HAL_TIM_MspPostInit>

}
 800098e:	bf00      	nop
 8000990:	3720      	adds	r7, #32
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	200000cc 	.word	0x200000cc
 800099c:	40002000 	.word	0x40002000

080009a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009a4:	4b11      	ldr	r3, [pc, #68]	; (80009ec <MX_USART2_UART_Init+0x4c>)
 80009a6:	4a12      	ldr	r2, [pc, #72]	; (80009f0 <MX_USART2_UART_Init+0x50>)
 80009a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009aa:	4b10      	ldr	r3, [pc, #64]	; (80009ec <MX_USART2_UART_Init+0x4c>)
 80009ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <MX_USART2_UART_Init+0x4c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009b8:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <MX_USART2_UART_Init+0x4c>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009be:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <MX_USART2_UART_Init+0x4c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009c4:	4b09      	ldr	r3, [pc, #36]	; (80009ec <MX_USART2_UART_Init+0x4c>)
 80009c6:	220c      	movs	r2, #12
 80009c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ca:	4b08      	ldr	r3, [pc, #32]	; (80009ec <MX_USART2_UART_Init+0x4c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d0:	4b06      	ldr	r3, [pc, #24]	; (80009ec <MX_USART2_UART_Init+0x4c>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009d6:	4805      	ldr	r0, [pc, #20]	; (80009ec <MX_USART2_UART_Init+0x4c>)
 80009d8:	f002 f9c4 	bl	8002d64 <HAL_UART_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009e2:	f000 f8d1 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000114 	.word	0x20000114
 80009f0:	40004400 	.word	0x40004400

080009f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08a      	sub	sp, #40	; 0x28
 80009f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fa:	f107 0314 	add.w	r3, r7, #20
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
 8000a06:	60da      	str	r2, [r3, #12]
 8000a08:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	613b      	str	r3, [r7, #16]
 8000a0e:	4b3b      	ldr	r3, [pc, #236]	; (8000afc <MX_GPIO_Init+0x108>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a3a      	ldr	r2, [pc, #232]	; (8000afc <MX_GPIO_Init+0x108>)
 8000a14:	f043 0304 	orr.w	r3, r3, #4
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b38      	ldr	r3, [pc, #224]	; (8000afc <MX_GPIO_Init+0x108>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0304 	and.w	r3, r3, #4
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	4b34      	ldr	r3, [pc, #208]	; (8000afc <MX_GPIO_Init+0x108>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a33      	ldr	r2, [pc, #204]	; (8000afc <MX_GPIO_Init+0x108>)
 8000a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b31      	ldr	r3, [pc, #196]	; (8000afc <MX_GPIO_Init+0x108>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	4b2d      	ldr	r3, [pc, #180]	; (8000afc <MX_GPIO_Init+0x108>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a2c      	ldr	r2, [pc, #176]	; (8000afc <MX_GPIO_Init+0x108>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b2a      	ldr	r3, [pc, #168]	; (8000afc <MX_GPIO_Init+0x108>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	4b26      	ldr	r3, [pc, #152]	; (8000afc <MX_GPIO_Init+0x108>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a25      	ldr	r2, [pc, #148]	; (8000afc <MX_GPIO_Init+0x108>)
 8000a68:	f043 0302 	orr.w	r3, r3, #2
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4b23      	ldr	r3, [pc, #140]	; (8000afc <MX_GPIO_Init+0x108>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0302 	and.w	r3, r3, #2
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED2_D6_Pin|LED1_D5_Pin, GPIO_PIN_RESET);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2103      	movs	r1, #3
 8000a7e:	4820      	ldr	r0, [pc, #128]	; (8000b00 <MX_GPIO_Init+0x10c>)
 8000a80:	f000 fdea 	bl	8001658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a84:	2200      	movs	r2, #0
 8000a86:	2120      	movs	r1, #32
 8000a88:	481e      	ldr	r0, [pc, #120]	; (8000b04 <MX_GPIO_Init+0x110>)
 8000a8a:	f000 fde5 	bl	8001658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a94:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a9e:	f107 0314 	add.w	r3, r7, #20
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4816      	ldr	r0, [pc, #88]	; (8000b00 <MX_GPIO_Init+0x10c>)
 8000aa6:	f000 fc43 	bl	8001330 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_D6_Pin LED1_D5_Pin */
  GPIO_InitStruct.Pin = LED2_D6_Pin|LED1_D5_Pin;
 8000aaa:	2303      	movs	r3, #3
 8000aac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	4619      	mov	r1, r3
 8000ac0:	480f      	ldr	r0, [pc, #60]	; (8000b00 <MX_GPIO_Init+0x10c>)
 8000ac2:	f000 fc35 	bl	8001330 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ac6:	2320      	movs	r3, #32
 8000ac8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aca:	2301      	movs	r3, #1
 8000acc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ad6:	f107 0314 	add.w	r3, r7, #20
 8000ada:	4619      	mov	r1, r3
 8000adc:	4809      	ldr	r0, [pc, #36]	; (8000b04 <MX_GPIO_Init+0x110>)
 8000ade:	f000 fc27 	bl	8001330 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	2028      	movs	r0, #40	; 0x28
 8000ae8:	f000 fbeb 	bl	80012c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000aec:	2028      	movs	r0, #40	; 0x28
 8000aee:	f000 fc04 	bl	80012fa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000af2:	bf00      	nop
 8000af4:	3728      	adds	r7, #40	; 0x28
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40023800 	.word	0x40023800
 8000b00:	40020800 	.word	0x40020800
 8000b04:	40020000 	.word	0x40020000

08000b08 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000b10:	1d39      	adds	r1, r7, #4
 8000b12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b16:	2201      	movs	r2, #1
 8000b18:	4803      	ldr	r0, [pc, #12]	; (8000b28 <__io_putchar+0x20>)
 8000b1a:	f002 f970 	bl	8002dfe <HAL_UART_Transmit>

  return ch;
 8000b1e:	687b      	ldr	r3, [r7, #4]
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20000114 	.word	0x20000114

08000b2c <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	80fb      	strh	r3, [r7, #6]
	  if(GPIO_Pin == GPIO_PIN_13) {
 8000b36:	88fb      	ldrh	r3, [r7, #6]
 8000b38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b3c:	d118      	bne.n	8000b70 <HAL_GPIO_EXTI_Callback+0x44>
//		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
		//printf("Blue button triggered\r\n");
		swMode++;
 8000b3e:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <HAL_GPIO_EXTI_Callback+0x50>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	3301      	adds	r3, #1
 8000b44:	4a0d      	ldr	r2, [pc, #52]	; (8000b7c <HAL_GPIO_EXTI_Callback+0x50>)
 8000b46:	6013      	str	r3, [r2, #0]
		swMode = (swMode > 5)?0:swMode;
 8000b48:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <HAL_GPIO_EXTI_Callback+0x50>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2b05      	cmp	r3, #5
 8000b4e:	dc02      	bgt.n	8000b56 <HAL_GPIO_EXTI_Callback+0x2a>
 8000b50:	4b0a      	ldr	r3, [pc, #40]	; (8000b7c <HAL_GPIO_EXTI_Callback+0x50>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	e000      	b.n	8000b58 <HAL_GPIO_EXTI_Callback+0x2c>
 8000b56:	2300      	movs	r3, #0
 8000b58:	4a08      	ldr	r2, [pc, #32]	; (8000b7c <HAL_GPIO_EXTI_Callback+0x50>)
 8000b5a:	6013      	str	r3, [r2, #0]
		printf("mode select:%d\r\n",swMode);
 8000b5c:	4b07      	ldr	r3, [pc, #28]	; (8000b7c <HAL_GPIO_EXTI_Callback+0x50>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4619      	mov	r1, r3
 8000b62:	4807      	ldr	r0, [pc, #28]	; (8000b80 <HAL_GPIO_EXTI_Callback+0x54>)
 8000b64:	f002 fd70 	bl	8003648 <iprintf>
		flag = 1;
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <HAL_GPIO_EXTI_Callback+0x58>)
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	601a      	str	r2, [r3, #0]
  } else {
      __NOP();
  }
}
 8000b6e:	e000      	b.n	8000b72 <HAL_GPIO_EXTI_Callback+0x46>
      __NOP();
 8000b70:	bf00      	nop
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000158 	.word	0x20000158
 8000b80:	0800441c 	.word	0x0800441c
 8000b84:	2000015c 	.word	0x2000015c

08000b88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b8c:	b672      	cpsid	i
}
 8000b8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <Error_Handler+0x8>
	...

08000b94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	607b      	str	r3, [r7, #4]
 8000b9e:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <HAL_MspInit+0x4c>)
 8000ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba2:	4a0f      	ldr	r2, [pc, #60]	; (8000be0 <HAL_MspInit+0x4c>)
 8000ba4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ba8:	6453      	str	r3, [r2, #68]	; 0x44
 8000baa:	4b0d      	ldr	r3, [pc, #52]	; (8000be0 <HAL_MspInit+0x4c>)
 8000bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	603b      	str	r3, [r7, #0]
 8000bba:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <HAL_MspInit+0x4c>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	4a08      	ldr	r2, [pc, #32]	; (8000be0 <HAL_MspInit+0x4c>)
 8000bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc6:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <HAL_MspInit+0x4c>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bce:	603b      	str	r3, [r7, #0]
 8000bd0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bd2:	2007      	movs	r0, #7
 8000bd4:	f000 fb6a 	bl	80012ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd8:	bf00      	nop
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40023800 	.word	0x40023800

08000be4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a0b      	ldr	r2, [pc, #44]	; (8000c20 <HAL_TIM_PWM_MspInit+0x3c>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d10d      	bne.n	8000c12 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60fb      	str	r3, [r7, #12]
 8000bfa:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <HAL_TIM_PWM_MspInit+0x40>)
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfe:	4a09      	ldr	r2, [pc, #36]	; (8000c24 <HAL_TIM_PWM_MspInit+0x40>)
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	6453      	str	r3, [r2, #68]	; 0x44
 8000c06:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <HAL_TIM_PWM_MspInit+0x40>)
 8000c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000c12:	bf00      	nop
 8000c14:	3714      	adds	r7, #20
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	40010000 	.word	0x40010000
 8000c24:	40023800 	.word	0x40023800

08000c28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a0b      	ldr	r2, [pc, #44]	; (8000c64 <HAL_TIM_Base_MspInit+0x3c>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d10d      	bne.n	8000c56 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	4b0a      	ldr	r3, [pc, #40]	; (8000c68 <HAL_TIM_Base_MspInit+0x40>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c42:	4a09      	ldr	r2, [pc, #36]	; (8000c68 <HAL_TIM_Base_MspInit+0x40>)
 8000c44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c48:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4a:	4b07      	ldr	r3, [pc, #28]	; (8000c68 <HAL_TIM_Base_MspInit+0x40>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000c56:	bf00      	nop
 8000c58:	3714      	adds	r7, #20
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	40002000 	.word	0x40002000
 8000c68:	40023800 	.word	0x40023800

08000c6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08a      	sub	sp, #40	; 0x28
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a24      	ldr	r2, [pc, #144]	; (8000d1c <HAL_TIM_MspPostInit+0xb0>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d11f      	bne.n	8000cce <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	613b      	str	r3, [r7, #16]
 8000c92:	4b23      	ldr	r3, [pc, #140]	; (8000d20 <HAL_TIM_MspPostInit+0xb4>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	4a22      	ldr	r2, [pc, #136]	; (8000d20 <HAL_TIM_MspPostInit+0xb4>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9e:	4b20      	ldr	r3, [pc, #128]	; (8000d20 <HAL_TIM_MspPostInit+0xb4>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	613b      	str	r3, [r7, #16]
 8000ca8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000caa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4817      	ldr	r0, [pc, #92]	; (8000d24 <HAL_TIM_MspPostInit+0xb8>)
 8000cc8:	f000 fb32 	bl	8001330 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8000ccc:	e022      	b.n	8000d14 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM14)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a15      	ldr	r2, [pc, #84]	; (8000d28 <HAL_TIM_MspPostInit+0xbc>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d11d      	bne.n	8000d14 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd8:	2300      	movs	r3, #0
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	4b10      	ldr	r3, [pc, #64]	; (8000d20 <HAL_TIM_MspPostInit+0xb4>)
 8000cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce0:	4a0f      	ldr	r2, [pc, #60]	; (8000d20 <HAL_TIM_MspPostInit+0xb4>)
 8000ce2:	f043 0301 	orr.w	r3, r3, #1
 8000ce6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce8:	4b0d      	ldr	r3, [pc, #52]	; (8000d20 <HAL_TIM_MspPostInit+0xb4>)
 8000cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cec:	f003 0301 	and.w	r3, r3, #1
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000cf4:	2380      	movs	r3, #128	; 0x80
 8000cf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d00:	2300      	movs	r3, #0
 8000d02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8000d04:	2309      	movs	r3, #9
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4805      	ldr	r0, [pc, #20]	; (8000d24 <HAL_TIM_MspPostInit+0xb8>)
 8000d10:	f000 fb0e 	bl	8001330 <HAL_GPIO_Init>
}
 8000d14:	bf00      	nop
 8000d16:	3728      	adds	r7, #40	; 0x28
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40010000 	.word	0x40010000
 8000d20:	40023800 	.word	0x40023800
 8000d24:	40020000 	.word	0x40020000
 8000d28:	40002000 	.word	0x40002000

08000d2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08a      	sub	sp, #40	; 0x28
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a19      	ldr	r2, [pc, #100]	; (8000db0 <HAL_UART_MspInit+0x84>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d12b      	bne.n	8000da6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	613b      	str	r3, [r7, #16]
 8000d52:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <HAL_UART_MspInit+0x88>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d56:	4a17      	ldr	r2, [pc, #92]	; (8000db4 <HAL_UART_MspInit+0x88>)
 8000d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d5e:	4b15      	ldr	r3, [pc, #84]	; (8000db4 <HAL_UART_MspInit+0x88>)
 8000d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d66:	613b      	str	r3, [r7, #16]
 8000d68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <HAL_UART_MspInit+0x88>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a10      	ldr	r2, [pc, #64]	; (8000db4 <HAL_UART_MspInit+0x88>)
 8000d74:	f043 0301 	orr.w	r3, r3, #1
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <HAL_UART_MspInit+0x88>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d86:	230c      	movs	r3, #12
 8000d88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d92:	2303      	movs	r3, #3
 8000d94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d96:	2307      	movs	r3, #7
 8000d98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9a:	f107 0314 	add.w	r3, r7, #20
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4805      	ldr	r0, [pc, #20]	; (8000db8 <HAL_UART_MspInit+0x8c>)
 8000da2:	f000 fac5 	bl	8001330 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000da6:	bf00      	nop
 8000da8:	3728      	adds	r7, #40	; 0x28
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40004400 	.word	0x40004400
 8000db4:	40023800 	.word	0x40023800
 8000db8:	40020000 	.word	0x40020000

08000dbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <NMI_Handler+0x4>

08000dc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dc6:	e7fe      	b.n	8000dc6 <HardFault_Handler+0x4>

08000dc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <MemManage_Handler+0x4>

08000dce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dd2:	e7fe      	b.n	8000dd2 <BusFault_Handler+0x4>

08000dd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <UsageFault_Handler+0x4>

08000dda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e08:	f000 f93c 	bl	8001084 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e0c:	bf00      	nop
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000e14:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e18:	f000 fc38 	bl	800168c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]
 8000e30:	e00a      	b.n	8000e48 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e32:	f3af 8000 	nop.w
 8000e36:	4601      	mov	r1, r0
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	1c5a      	adds	r2, r3, #1
 8000e3c:	60ba      	str	r2, [r7, #8]
 8000e3e:	b2ca      	uxtb	r2, r1
 8000e40:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	3301      	adds	r3, #1
 8000e46:	617b      	str	r3, [r7, #20]
 8000e48:	697a      	ldr	r2, [r7, #20]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	dbf0      	blt.n	8000e32 <_read+0x12>
  }

  return len;
 8000e50:	687b      	ldr	r3, [r7, #4]
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3718      	adds	r7, #24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b086      	sub	sp, #24
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	60f8      	str	r0, [r7, #12]
 8000e62:	60b9      	str	r1, [r7, #8]
 8000e64:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e66:	2300      	movs	r3, #0
 8000e68:	617b      	str	r3, [r7, #20]
 8000e6a:	e009      	b.n	8000e80 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	1c5a      	adds	r2, r3, #1
 8000e70:	60ba      	str	r2, [r7, #8]
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff fe47 	bl	8000b08 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	617b      	str	r3, [r7, #20]
 8000e80:	697a      	ldr	r2, [r7, #20]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	dbf1      	blt.n	8000e6c <_write+0x12>
  }
  return len;
 8000e88:	687b      	ldr	r3, [r7, #4]
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3718      	adds	r7, #24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <_close>:

int _close(int file)
{
 8000e92:	b480      	push	{r7}
 8000e94:	b083      	sub	sp, #12
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr

08000eaa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	b083      	sub	sp, #12
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
 8000eb2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000eba:	605a      	str	r2, [r3, #4]
  return 0;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <_isatty>:

int _isatty(int file)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	b083      	sub	sp, #12
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ed2:	2301      	movs	r3, #1
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3714      	adds	r7, #20
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
	...

08000efc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f04:	4a14      	ldr	r2, [pc, #80]	; (8000f58 <_sbrk+0x5c>)
 8000f06:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <_sbrk+0x60>)
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f10:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <_sbrk+0x64>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d102      	bne.n	8000f1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f18:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <_sbrk+0x64>)
 8000f1a:	4a12      	ldr	r2, [pc, #72]	; (8000f64 <_sbrk+0x68>)
 8000f1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f1e:	4b10      	ldr	r3, [pc, #64]	; (8000f60 <_sbrk+0x64>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4413      	add	r3, r2
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d207      	bcs.n	8000f3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f2c:	f002 fd20 	bl	8003970 <__errno>
 8000f30:	4603      	mov	r3, r0
 8000f32:	220c      	movs	r2, #12
 8000f34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f36:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3a:	e009      	b.n	8000f50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f3c:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <_sbrk+0x64>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f42:	4b07      	ldr	r3, [pc, #28]	; (8000f60 <_sbrk+0x64>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4413      	add	r3, r2
 8000f4a:	4a05      	ldr	r2, [pc, #20]	; (8000f60 <_sbrk+0x64>)
 8000f4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3718      	adds	r7, #24
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20020000 	.word	0x20020000
 8000f5c:	00000400 	.word	0x00000400
 8000f60:	20000160 	.word	0x20000160
 8000f64:	200002b8 	.word	0x200002b8

08000f68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <SystemInit+0x20>)
 8000f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f72:	4a05      	ldr	r2, [pc, #20]	; (8000f88 <SystemInit+0x20>)
 8000f74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	e000ed00 	.word	0xe000ed00

08000f8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fc4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f90:	480d      	ldr	r0, [pc, #52]	; (8000fc8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f92:	490e      	ldr	r1, [pc, #56]	; (8000fcc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f94:	4a0e      	ldr	r2, [pc, #56]	; (8000fd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f98:	e002      	b.n	8000fa0 <LoopCopyDataInit>

08000f9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f9e:	3304      	adds	r3, #4

08000fa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa4:	d3f9      	bcc.n	8000f9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fa6:	4a0b      	ldr	r2, [pc, #44]	; (8000fd4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fa8:	4c0b      	ldr	r4, [pc, #44]	; (8000fd8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000faa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fac:	e001      	b.n	8000fb2 <LoopFillZerobss>

08000fae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb0:	3204      	adds	r2, #4

08000fb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb4:	d3fb      	bcc.n	8000fae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fb6:	f7ff ffd7 	bl	8000f68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fba:	f002 fcdf 	bl	800397c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fbe:	f7ff faf5 	bl	80005ac <main>
  bx  lr    
 8000fc2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fcc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000fd0:	0800448c 	.word	0x0800448c
  ldr r2, =_sbss
 8000fd4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000fd8:	200002b4 	.word	0x200002b4

08000fdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fdc:	e7fe      	b.n	8000fdc <ADC_IRQHandler>
	...

08000fe0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fe4:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <HAL_Init+0x40>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a0d      	ldr	r2, [pc, #52]	; (8001020 <HAL_Init+0x40>)
 8000fea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ff0:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <HAL_Init+0x40>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a0a      	ldr	r2, [pc, #40]	; (8001020 <HAL_Init+0x40>)
 8000ff6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ffa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ffc:	4b08      	ldr	r3, [pc, #32]	; (8001020 <HAL_Init+0x40>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a07      	ldr	r2, [pc, #28]	; (8001020 <HAL_Init+0x40>)
 8001002:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001006:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001008:	2003      	movs	r0, #3
 800100a:	f000 f94f 	bl	80012ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800100e:	2000      	movs	r0, #0
 8001010:	f000 f808 	bl	8001024 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001014:	f7ff fdbe 	bl	8000b94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40023c00 	.word	0x40023c00

08001024 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800102c:	4b12      	ldr	r3, [pc, #72]	; (8001078 <HAL_InitTick+0x54>)
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	4b12      	ldr	r3, [pc, #72]	; (800107c <HAL_InitTick+0x58>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	4619      	mov	r1, r3
 8001036:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800103a:	fbb3 f3f1 	udiv	r3, r3, r1
 800103e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001042:	4618      	mov	r0, r3
 8001044:	f000 f967 	bl	8001316 <HAL_SYSTICK_Config>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e00e      	b.n	8001070 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2b0f      	cmp	r3, #15
 8001056:	d80a      	bhi.n	800106e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001058:	2200      	movs	r2, #0
 800105a:	6879      	ldr	r1, [r7, #4]
 800105c:	f04f 30ff 	mov.w	r0, #4294967295
 8001060:	f000 f92f 	bl	80012c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001064:	4a06      	ldr	r2, [pc, #24]	; (8001080 <HAL_InitTick+0x5c>)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800106a:	2300      	movs	r3, #0
 800106c:	e000      	b.n	8001070 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
}
 8001070:	4618      	mov	r0, r3
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000000 	.word	0x20000000
 800107c:	20000008 	.word	0x20000008
 8001080:	20000004 	.word	0x20000004

08001084 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001088:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <HAL_IncTick+0x20>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	461a      	mov	r2, r3
 800108e:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <HAL_IncTick+0x24>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4413      	add	r3, r2
 8001094:	4a04      	ldr	r2, [pc, #16]	; (80010a8 <HAL_IncTick+0x24>)
 8001096:	6013      	str	r3, [r2, #0]
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	20000008 	.word	0x20000008
 80010a8:	20000164 	.word	0x20000164

080010ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  return uwTick;
 80010b0:	4b03      	ldr	r3, [pc, #12]	; (80010c0 <HAL_GetTick+0x14>)
 80010b2:	681b      	ldr	r3, [r3, #0]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	20000164 	.word	0x20000164

080010c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010cc:	f7ff ffee 	bl	80010ac <HAL_GetTick>
 80010d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010dc:	d005      	beq.n	80010ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010de:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <HAL_Delay+0x44>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	461a      	mov	r2, r3
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4413      	add	r3, r2
 80010e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010ea:	bf00      	nop
 80010ec:	f7ff ffde 	bl	80010ac <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	68fa      	ldr	r2, [r7, #12]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d8f7      	bhi.n	80010ec <HAL_Delay+0x28>
  {
  }
}
 80010fc:	bf00      	nop
 80010fe:	bf00      	nop
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000008 	.word	0x20000008

0800110c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800111c:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <__NVIC_SetPriorityGrouping+0x44>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001122:	68ba      	ldr	r2, [r7, #8]
 8001124:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001128:	4013      	ands	r3, r2
 800112a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001134:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800113c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800113e:	4a04      	ldr	r2, [pc, #16]	; (8001150 <__NVIC_SetPriorityGrouping+0x44>)
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	60d3      	str	r3, [r2, #12]
}
 8001144:	bf00      	nop
 8001146:	3714      	adds	r7, #20
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001158:	4b04      	ldr	r3, [pc, #16]	; (800116c <__NVIC_GetPriorityGrouping+0x18>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	0a1b      	lsrs	r3, r3, #8
 800115e:	f003 0307 	and.w	r3, r3, #7
}
 8001162:	4618      	mov	r0, r3
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	2b00      	cmp	r3, #0
 8001180:	db0b      	blt.n	800119a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	f003 021f 	and.w	r2, r3, #31
 8001188:	4907      	ldr	r1, [pc, #28]	; (80011a8 <__NVIC_EnableIRQ+0x38>)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	095b      	lsrs	r3, r3, #5
 8001190:	2001      	movs	r0, #1
 8001192:	fa00 f202 	lsl.w	r2, r0, r2
 8001196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	e000e100 	.word	0xe000e100

080011ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	6039      	str	r1, [r7, #0]
 80011b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	db0a      	blt.n	80011d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	490c      	ldr	r1, [pc, #48]	; (80011f8 <__NVIC_SetPriority+0x4c>)
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	0112      	lsls	r2, r2, #4
 80011cc:	b2d2      	uxtb	r2, r2
 80011ce:	440b      	add	r3, r1
 80011d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011d4:	e00a      	b.n	80011ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	4908      	ldr	r1, [pc, #32]	; (80011fc <__NVIC_SetPriority+0x50>)
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	f003 030f 	and.w	r3, r3, #15
 80011e2:	3b04      	subs	r3, #4
 80011e4:	0112      	lsls	r2, r2, #4
 80011e6:	b2d2      	uxtb	r2, r2
 80011e8:	440b      	add	r3, r1
 80011ea:	761a      	strb	r2, [r3, #24]
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	e000e100 	.word	0xe000e100
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001200:	b480      	push	{r7}
 8001202:	b089      	sub	sp, #36	; 0x24
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	f1c3 0307 	rsb	r3, r3, #7
 800121a:	2b04      	cmp	r3, #4
 800121c:	bf28      	it	cs
 800121e:	2304      	movcs	r3, #4
 8001220:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	3304      	adds	r3, #4
 8001226:	2b06      	cmp	r3, #6
 8001228:	d902      	bls.n	8001230 <NVIC_EncodePriority+0x30>
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	3b03      	subs	r3, #3
 800122e:	e000      	b.n	8001232 <NVIC_EncodePriority+0x32>
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001234:	f04f 32ff 	mov.w	r2, #4294967295
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43da      	mvns	r2, r3
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	401a      	ands	r2, r3
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001248:	f04f 31ff 	mov.w	r1, #4294967295
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	fa01 f303 	lsl.w	r3, r1, r3
 8001252:	43d9      	mvns	r1, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001258:	4313      	orrs	r3, r2
         );
}
 800125a:	4618      	mov	r0, r3
 800125c:	3724      	adds	r7, #36	; 0x24
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
	...

08001268 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	3b01      	subs	r3, #1
 8001274:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001278:	d301      	bcc.n	800127e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800127a:	2301      	movs	r3, #1
 800127c:	e00f      	b.n	800129e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800127e:	4a0a      	ldr	r2, [pc, #40]	; (80012a8 <SysTick_Config+0x40>)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3b01      	subs	r3, #1
 8001284:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001286:	210f      	movs	r1, #15
 8001288:	f04f 30ff 	mov.w	r0, #4294967295
 800128c:	f7ff ff8e 	bl	80011ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001290:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <SysTick_Config+0x40>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001296:	4b04      	ldr	r3, [pc, #16]	; (80012a8 <SysTick_Config+0x40>)
 8001298:	2207      	movs	r2, #7
 800129a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	e000e010 	.word	0xe000e010

080012ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7ff ff29 	bl	800110c <__NVIC_SetPriorityGrouping>
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b086      	sub	sp, #24
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	4603      	mov	r3, r0
 80012ca:	60b9      	str	r1, [r7, #8]
 80012cc:	607a      	str	r2, [r7, #4]
 80012ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012d4:	f7ff ff3e 	bl	8001154 <__NVIC_GetPriorityGrouping>
 80012d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	68b9      	ldr	r1, [r7, #8]
 80012de:	6978      	ldr	r0, [r7, #20]
 80012e0:	f7ff ff8e 	bl	8001200 <NVIC_EncodePriority>
 80012e4:	4602      	mov	r2, r0
 80012e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ea:	4611      	mov	r1, r2
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff ff5d 	bl	80011ac <__NVIC_SetPriority>
}
 80012f2:	bf00      	nop
 80012f4:	3718      	adds	r7, #24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b082      	sub	sp, #8
 80012fe:	af00      	add	r7, sp, #0
 8001300:	4603      	mov	r3, r0
 8001302:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff ff31 	bl	8001170 <__NVIC_EnableIRQ>
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b082      	sub	sp, #8
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f7ff ffa2 	bl	8001268 <SysTick_Config>
 8001324:	4603      	mov	r3, r0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
	...

08001330 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001330:	b480      	push	{r7}
 8001332:	b089      	sub	sp, #36	; 0x24
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800133a:	2300      	movs	r3, #0
 800133c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800133e:	2300      	movs	r3, #0
 8001340:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001342:	2300      	movs	r3, #0
 8001344:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001346:	2300      	movs	r3, #0
 8001348:	61fb      	str	r3, [r7, #28]
 800134a:	e165      	b.n	8001618 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800134c:	2201      	movs	r2, #1
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	697a      	ldr	r2, [r7, #20]
 800135c:	4013      	ands	r3, r2
 800135e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	429a      	cmp	r2, r3
 8001366:	f040 8154 	bne.w	8001612 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f003 0303 	and.w	r3, r3, #3
 8001372:	2b01      	cmp	r3, #1
 8001374:	d005      	beq.n	8001382 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800137e:	2b02      	cmp	r3, #2
 8001380:	d130      	bne.n	80013e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	2203      	movs	r2, #3
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43db      	mvns	r3, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4013      	ands	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	68da      	ldr	r2, [r3, #12]
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013b8:	2201      	movs	r2, #1
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	43db      	mvns	r3, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4013      	ands	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	091b      	lsrs	r3, r3, #4
 80013ce:	f003 0201 	and.w	r2, r3, #1
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	4313      	orrs	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f003 0303 	and.w	r3, r3, #3
 80013ec:	2b03      	cmp	r3, #3
 80013ee:	d017      	beq.n	8001420 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	2203      	movs	r2, #3
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4013      	ands	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	689a      	ldr	r2, [r3, #8]
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4313      	orrs	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f003 0303 	and.w	r3, r3, #3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d123      	bne.n	8001474 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	08da      	lsrs	r2, r3, #3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3208      	adds	r2, #8
 8001434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001438:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	f003 0307 	and.w	r3, r3, #7
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	220f      	movs	r2, #15
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	43db      	mvns	r3, r3
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4013      	ands	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	691a      	ldr	r2, [r3, #16]
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	4313      	orrs	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	08da      	lsrs	r2, r3, #3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	3208      	adds	r2, #8
 800146e:	69b9      	ldr	r1, [r7, #24]
 8001470:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	2203      	movs	r2, #3
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	43db      	mvns	r3, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4013      	ands	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f003 0203 	and.w	r2, r3, #3
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4313      	orrs	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	f000 80ae 	beq.w	8001612 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	4b5d      	ldr	r3, [pc, #372]	; (8001630 <HAL_GPIO_Init+0x300>)
 80014bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014be:	4a5c      	ldr	r2, [pc, #368]	; (8001630 <HAL_GPIO_Init+0x300>)
 80014c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014c4:	6453      	str	r3, [r2, #68]	; 0x44
 80014c6:	4b5a      	ldr	r3, [pc, #360]	; (8001630 <HAL_GPIO_Init+0x300>)
 80014c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014d2:	4a58      	ldr	r2, [pc, #352]	; (8001634 <HAL_GPIO_Init+0x304>)
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	089b      	lsrs	r3, r3, #2
 80014d8:	3302      	adds	r3, #2
 80014da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	f003 0303 	and.w	r3, r3, #3
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	220f      	movs	r2, #15
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43db      	mvns	r3, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4013      	ands	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a4f      	ldr	r2, [pc, #316]	; (8001638 <HAL_GPIO_Init+0x308>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d025      	beq.n	800154a <HAL_GPIO_Init+0x21a>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a4e      	ldr	r2, [pc, #312]	; (800163c <HAL_GPIO_Init+0x30c>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d01f      	beq.n	8001546 <HAL_GPIO_Init+0x216>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a4d      	ldr	r2, [pc, #308]	; (8001640 <HAL_GPIO_Init+0x310>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d019      	beq.n	8001542 <HAL_GPIO_Init+0x212>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a4c      	ldr	r2, [pc, #304]	; (8001644 <HAL_GPIO_Init+0x314>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d013      	beq.n	800153e <HAL_GPIO_Init+0x20e>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a4b      	ldr	r2, [pc, #300]	; (8001648 <HAL_GPIO_Init+0x318>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d00d      	beq.n	800153a <HAL_GPIO_Init+0x20a>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a4a      	ldr	r2, [pc, #296]	; (800164c <HAL_GPIO_Init+0x31c>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d007      	beq.n	8001536 <HAL_GPIO_Init+0x206>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a49      	ldr	r2, [pc, #292]	; (8001650 <HAL_GPIO_Init+0x320>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d101      	bne.n	8001532 <HAL_GPIO_Init+0x202>
 800152e:	2306      	movs	r3, #6
 8001530:	e00c      	b.n	800154c <HAL_GPIO_Init+0x21c>
 8001532:	2307      	movs	r3, #7
 8001534:	e00a      	b.n	800154c <HAL_GPIO_Init+0x21c>
 8001536:	2305      	movs	r3, #5
 8001538:	e008      	b.n	800154c <HAL_GPIO_Init+0x21c>
 800153a:	2304      	movs	r3, #4
 800153c:	e006      	b.n	800154c <HAL_GPIO_Init+0x21c>
 800153e:	2303      	movs	r3, #3
 8001540:	e004      	b.n	800154c <HAL_GPIO_Init+0x21c>
 8001542:	2302      	movs	r3, #2
 8001544:	e002      	b.n	800154c <HAL_GPIO_Init+0x21c>
 8001546:	2301      	movs	r3, #1
 8001548:	e000      	b.n	800154c <HAL_GPIO_Init+0x21c>
 800154a:	2300      	movs	r3, #0
 800154c:	69fa      	ldr	r2, [r7, #28]
 800154e:	f002 0203 	and.w	r2, r2, #3
 8001552:	0092      	lsls	r2, r2, #2
 8001554:	4093      	lsls	r3, r2
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	4313      	orrs	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800155c:	4935      	ldr	r1, [pc, #212]	; (8001634 <HAL_GPIO_Init+0x304>)
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	089b      	lsrs	r3, r3, #2
 8001562:	3302      	adds	r3, #2
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800156a:	4b3a      	ldr	r3, [pc, #232]	; (8001654 <HAL_GPIO_Init+0x324>)
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	43db      	mvns	r3, r3
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	4013      	ands	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d003      	beq.n	800158e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	4313      	orrs	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800158e:	4a31      	ldr	r2, [pc, #196]	; (8001654 <HAL_GPIO_Init+0x324>)
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001594:	4b2f      	ldr	r3, [pc, #188]	; (8001654 <HAL_GPIO_Init+0x324>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	43db      	mvns	r3, r3
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	4013      	ands	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d003      	beq.n	80015b8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015b8:	4a26      	ldr	r2, [pc, #152]	; (8001654 <HAL_GPIO_Init+0x324>)
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015be:	4b25      	ldr	r3, [pc, #148]	; (8001654 <HAL_GPIO_Init+0x324>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	43db      	mvns	r3, r3
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	4013      	ands	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d003      	beq.n	80015e2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	4313      	orrs	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015e2:	4a1c      	ldr	r2, [pc, #112]	; (8001654 <HAL_GPIO_Init+0x324>)
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015e8:	4b1a      	ldr	r3, [pc, #104]	; (8001654 <HAL_GPIO_Init+0x324>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	43db      	mvns	r3, r3
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	4013      	ands	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d003      	beq.n	800160c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	4313      	orrs	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800160c:	4a11      	ldr	r2, [pc, #68]	; (8001654 <HAL_GPIO_Init+0x324>)
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	3301      	adds	r3, #1
 8001616:	61fb      	str	r3, [r7, #28]
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	2b0f      	cmp	r3, #15
 800161c:	f67f ae96 	bls.w	800134c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001620:	bf00      	nop
 8001622:	bf00      	nop
 8001624:	3724      	adds	r7, #36	; 0x24
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	40023800 	.word	0x40023800
 8001634:	40013800 	.word	0x40013800
 8001638:	40020000 	.word	0x40020000
 800163c:	40020400 	.word	0x40020400
 8001640:	40020800 	.word	0x40020800
 8001644:	40020c00 	.word	0x40020c00
 8001648:	40021000 	.word	0x40021000
 800164c:	40021400 	.word	0x40021400
 8001650:	40021800 	.word	0x40021800
 8001654:	40013c00 	.word	0x40013c00

08001658 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	460b      	mov	r3, r1
 8001662:	807b      	strh	r3, [r7, #2]
 8001664:	4613      	mov	r3, r2
 8001666:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001668:	787b      	ldrb	r3, [r7, #1]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800166e:	887a      	ldrh	r2, [r7, #2]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001674:	e003      	b.n	800167e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001676:	887b      	ldrh	r3, [r7, #2]
 8001678:	041a      	lsls	r2, r3, #16
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	619a      	str	r2, [r3, #24]
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
	...

0800168c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001696:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001698:	695a      	ldr	r2, [r3, #20]
 800169a:	88fb      	ldrh	r3, [r7, #6]
 800169c:	4013      	ands	r3, r2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d006      	beq.n	80016b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016a2:	4a05      	ldr	r2, [pc, #20]	; (80016b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016a4:	88fb      	ldrh	r3, [r7, #6]
 80016a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016a8:	88fb      	ldrh	r3, [r7, #6]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff fa3e 	bl	8000b2c <HAL_GPIO_EXTI_Callback>
  }
}
 80016b0:	bf00      	nop
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40013c00 	.word	0x40013c00

080016bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d101      	bne.n	80016d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e0cc      	b.n	800186a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016d0:	4b68      	ldr	r3, [pc, #416]	; (8001874 <HAL_RCC_ClockConfig+0x1b8>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 030f 	and.w	r3, r3, #15
 80016d8:	683a      	ldr	r2, [r7, #0]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d90c      	bls.n	80016f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016de:	4b65      	ldr	r3, [pc, #404]	; (8001874 <HAL_RCC_ClockConfig+0x1b8>)
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	b2d2      	uxtb	r2, r2
 80016e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016e6:	4b63      	ldr	r3, [pc, #396]	; (8001874 <HAL_RCC_ClockConfig+0x1b8>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 030f 	and.w	r3, r3, #15
 80016ee:	683a      	ldr	r2, [r7, #0]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d001      	beq.n	80016f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e0b8      	b.n	800186a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d020      	beq.n	8001746 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0304 	and.w	r3, r3, #4
 800170c:	2b00      	cmp	r3, #0
 800170e:	d005      	beq.n	800171c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001710:	4b59      	ldr	r3, [pc, #356]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	4a58      	ldr	r2, [pc, #352]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 8001716:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800171a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0308 	and.w	r3, r3, #8
 8001724:	2b00      	cmp	r3, #0
 8001726:	d005      	beq.n	8001734 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001728:	4b53      	ldr	r3, [pc, #332]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	4a52      	ldr	r2, [pc, #328]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 800172e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001732:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001734:	4b50      	ldr	r3, [pc, #320]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	494d      	ldr	r1, [pc, #308]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 8001742:	4313      	orrs	r3, r2
 8001744:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	2b00      	cmp	r3, #0
 8001750:	d044      	beq.n	80017dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d107      	bne.n	800176a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800175a:	4b47      	ldr	r3, [pc, #284]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d119      	bne.n	800179a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e07f      	b.n	800186a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	2b02      	cmp	r3, #2
 8001770:	d003      	beq.n	800177a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001776:	2b03      	cmp	r3, #3
 8001778:	d107      	bne.n	800178a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800177a:	4b3f      	ldr	r3, [pc, #252]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d109      	bne.n	800179a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e06f      	b.n	800186a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800178a:	4b3b      	ldr	r3, [pc, #236]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d101      	bne.n	800179a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e067      	b.n	800186a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800179a:	4b37      	ldr	r3, [pc, #220]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f023 0203 	bic.w	r2, r3, #3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	4934      	ldr	r1, [pc, #208]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 80017a8:	4313      	orrs	r3, r2
 80017aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017ac:	f7ff fc7e 	bl	80010ac <HAL_GetTick>
 80017b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017b2:	e00a      	b.n	80017ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017b4:	f7ff fc7a 	bl	80010ac <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	f241 3288 	movw	r2, #5000	; 0x1388
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e04f      	b.n	800186a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ca:	4b2b      	ldr	r3, [pc, #172]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f003 020c 	and.w	r2, r3, #12
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	429a      	cmp	r2, r3
 80017da:	d1eb      	bne.n	80017b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017dc:	4b25      	ldr	r3, [pc, #148]	; (8001874 <HAL_RCC_ClockConfig+0x1b8>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 030f 	and.w	r3, r3, #15
 80017e4:	683a      	ldr	r2, [r7, #0]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d20c      	bcs.n	8001804 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ea:	4b22      	ldr	r3, [pc, #136]	; (8001874 <HAL_RCC_ClockConfig+0x1b8>)
 80017ec:	683a      	ldr	r2, [r7, #0]
 80017ee:	b2d2      	uxtb	r2, r2
 80017f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017f2:	4b20      	ldr	r3, [pc, #128]	; (8001874 <HAL_RCC_ClockConfig+0x1b8>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 030f 	and.w	r3, r3, #15
 80017fa:	683a      	ldr	r2, [r7, #0]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d001      	beq.n	8001804 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e032      	b.n	800186a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0304 	and.w	r3, r3, #4
 800180c:	2b00      	cmp	r3, #0
 800180e:	d008      	beq.n	8001822 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001810:	4b19      	ldr	r3, [pc, #100]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	4916      	ldr	r1, [pc, #88]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 800181e:	4313      	orrs	r3, r2
 8001820:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0308 	and.w	r3, r3, #8
 800182a:	2b00      	cmp	r3, #0
 800182c:	d009      	beq.n	8001842 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800182e:	4b12      	ldr	r3, [pc, #72]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	490e      	ldr	r1, [pc, #56]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 800183e:	4313      	orrs	r3, r2
 8001840:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001842:	f000 f855 	bl	80018f0 <HAL_RCC_GetSysClockFreq>
 8001846:	4602      	mov	r2, r0
 8001848:	4b0b      	ldr	r3, [pc, #44]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	091b      	lsrs	r3, r3, #4
 800184e:	f003 030f 	and.w	r3, r3, #15
 8001852:	490a      	ldr	r1, [pc, #40]	; (800187c <HAL_RCC_ClockConfig+0x1c0>)
 8001854:	5ccb      	ldrb	r3, [r1, r3]
 8001856:	fa22 f303 	lsr.w	r3, r2, r3
 800185a:	4a09      	ldr	r2, [pc, #36]	; (8001880 <HAL_RCC_ClockConfig+0x1c4>)
 800185c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800185e:	4b09      	ldr	r3, [pc, #36]	; (8001884 <HAL_RCC_ClockConfig+0x1c8>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff fbde 	bl	8001024 <HAL_InitTick>

  return HAL_OK;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40023c00 	.word	0x40023c00
 8001878:	40023800 	.word	0x40023800
 800187c:	08004430 	.word	0x08004430
 8001880:	20000000 	.word	0x20000000
 8001884:	20000004 	.word	0x20000004

08001888 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800188c:	4b03      	ldr	r3, [pc, #12]	; (800189c <HAL_RCC_GetHCLKFreq+0x14>)
 800188e:	681b      	ldr	r3, [r3, #0]
}
 8001890:	4618      	mov	r0, r3
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	20000000 	.word	0x20000000

080018a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80018a4:	f7ff fff0 	bl	8001888 <HAL_RCC_GetHCLKFreq>
 80018a8:	4602      	mov	r2, r0
 80018aa:	4b05      	ldr	r3, [pc, #20]	; (80018c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	0a9b      	lsrs	r3, r3, #10
 80018b0:	f003 0307 	and.w	r3, r3, #7
 80018b4:	4903      	ldr	r1, [pc, #12]	; (80018c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018b6:	5ccb      	ldrb	r3, [r1, r3]
 80018b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018bc:	4618      	mov	r0, r3
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40023800 	.word	0x40023800
 80018c4:	08004440 	.word	0x08004440

080018c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80018cc:	f7ff ffdc 	bl	8001888 <HAL_RCC_GetHCLKFreq>
 80018d0:	4602      	mov	r2, r0
 80018d2:	4b05      	ldr	r3, [pc, #20]	; (80018e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	0b5b      	lsrs	r3, r3, #13
 80018d8:	f003 0307 	and.w	r3, r3, #7
 80018dc:	4903      	ldr	r1, [pc, #12]	; (80018ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80018de:	5ccb      	ldrb	r3, [r1, r3]
 80018e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40023800 	.word	0x40023800
 80018ec:	08004440 	.word	0x08004440

080018f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018f4:	b0ae      	sub	sp, #184	; 0xb8
 80018f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80018f8:	2300      	movs	r3, #0
 80018fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80018fe:	2300      	movs	r3, #0
 8001900:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001904:	2300      	movs	r3, #0
 8001906:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800190a:	2300      	movs	r3, #0
 800190c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001910:	2300      	movs	r3, #0
 8001912:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001916:	4bcb      	ldr	r3, [pc, #812]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x354>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f003 030c 	and.w	r3, r3, #12
 800191e:	2b0c      	cmp	r3, #12
 8001920:	f200 8206 	bhi.w	8001d30 <HAL_RCC_GetSysClockFreq+0x440>
 8001924:	a201      	add	r2, pc, #4	; (adr r2, 800192c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800192a:	bf00      	nop
 800192c:	08001961 	.word	0x08001961
 8001930:	08001d31 	.word	0x08001d31
 8001934:	08001d31 	.word	0x08001d31
 8001938:	08001d31 	.word	0x08001d31
 800193c:	08001969 	.word	0x08001969
 8001940:	08001d31 	.word	0x08001d31
 8001944:	08001d31 	.word	0x08001d31
 8001948:	08001d31 	.word	0x08001d31
 800194c:	08001971 	.word	0x08001971
 8001950:	08001d31 	.word	0x08001d31
 8001954:	08001d31 	.word	0x08001d31
 8001958:	08001d31 	.word	0x08001d31
 800195c:	08001b61 	.word	0x08001b61
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001960:	4bb9      	ldr	r3, [pc, #740]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x358>)
 8001962:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001966:	e1e7      	b.n	8001d38 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001968:	4bb8      	ldr	r3, [pc, #736]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x35c>)
 800196a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800196e:	e1e3      	b.n	8001d38 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001970:	4bb4      	ldr	r3, [pc, #720]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x354>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001978:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800197c:	4bb1      	ldr	r3, [pc, #708]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x354>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d071      	beq.n	8001a6c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001988:	4bae      	ldr	r3, [pc, #696]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x354>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	099b      	lsrs	r3, r3, #6
 800198e:	2200      	movs	r2, #0
 8001990:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001994:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001998:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800199c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80019a4:	2300      	movs	r3, #0
 80019a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80019aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80019ae:	4622      	mov	r2, r4
 80019b0:	462b      	mov	r3, r5
 80019b2:	f04f 0000 	mov.w	r0, #0
 80019b6:	f04f 0100 	mov.w	r1, #0
 80019ba:	0159      	lsls	r1, r3, #5
 80019bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019c0:	0150      	lsls	r0, r2, #5
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	4621      	mov	r1, r4
 80019c8:	1a51      	subs	r1, r2, r1
 80019ca:	6439      	str	r1, [r7, #64]	; 0x40
 80019cc:	4629      	mov	r1, r5
 80019ce:	eb63 0301 	sbc.w	r3, r3, r1
 80019d2:	647b      	str	r3, [r7, #68]	; 0x44
 80019d4:	f04f 0200 	mov.w	r2, #0
 80019d8:	f04f 0300 	mov.w	r3, #0
 80019dc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80019e0:	4649      	mov	r1, r9
 80019e2:	018b      	lsls	r3, r1, #6
 80019e4:	4641      	mov	r1, r8
 80019e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019ea:	4641      	mov	r1, r8
 80019ec:	018a      	lsls	r2, r1, #6
 80019ee:	4641      	mov	r1, r8
 80019f0:	1a51      	subs	r1, r2, r1
 80019f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80019f4:	4649      	mov	r1, r9
 80019f6:	eb63 0301 	sbc.w	r3, r3, r1
 80019fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019fc:	f04f 0200 	mov.w	r2, #0
 8001a00:	f04f 0300 	mov.w	r3, #0
 8001a04:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001a08:	4649      	mov	r1, r9
 8001a0a:	00cb      	lsls	r3, r1, #3
 8001a0c:	4641      	mov	r1, r8
 8001a0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001a12:	4641      	mov	r1, r8
 8001a14:	00ca      	lsls	r2, r1, #3
 8001a16:	4610      	mov	r0, r2
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	4622      	mov	r2, r4
 8001a1e:	189b      	adds	r3, r3, r2
 8001a20:	633b      	str	r3, [r7, #48]	; 0x30
 8001a22:	462b      	mov	r3, r5
 8001a24:	460a      	mov	r2, r1
 8001a26:	eb42 0303 	adc.w	r3, r2, r3
 8001a2a:	637b      	str	r3, [r7, #52]	; 0x34
 8001a2c:	f04f 0200 	mov.w	r2, #0
 8001a30:	f04f 0300 	mov.w	r3, #0
 8001a34:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001a38:	4629      	mov	r1, r5
 8001a3a:	024b      	lsls	r3, r1, #9
 8001a3c:	4621      	mov	r1, r4
 8001a3e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a42:	4621      	mov	r1, r4
 8001a44:	024a      	lsls	r2, r1, #9
 8001a46:	4610      	mov	r0, r2
 8001a48:	4619      	mov	r1, r3
 8001a4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001a54:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001a58:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001a5c:	f7fe fc28 	bl	80002b0 <__aeabi_uldivmod>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	4613      	mov	r3, r2
 8001a66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001a6a:	e067      	b.n	8001b3c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a6c:	4b75      	ldr	r3, [pc, #468]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	099b      	lsrs	r3, r3, #6
 8001a72:	2200      	movs	r2, #0
 8001a74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001a78:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001a7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a84:	67bb      	str	r3, [r7, #120]	; 0x78
 8001a86:	2300      	movs	r3, #0
 8001a88:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001a8a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001a8e:	4622      	mov	r2, r4
 8001a90:	462b      	mov	r3, r5
 8001a92:	f04f 0000 	mov.w	r0, #0
 8001a96:	f04f 0100 	mov.w	r1, #0
 8001a9a:	0159      	lsls	r1, r3, #5
 8001a9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001aa0:	0150      	lsls	r0, r2, #5
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	4621      	mov	r1, r4
 8001aa8:	1a51      	subs	r1, r2, r1
 8001aaa:	62b9      	str	r1, [r7, #40]	; 0x28
 8001aac:	4629      	mov	r1, r5
 8001aae:	eb63 0301 	sbc.w	r3, r3, r1
 8001ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ab4:	f04f 0200 	mov.w	r2, #0
 8001ab8:	f04f 0300 	mov.w	r3, #0
 8001abc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001ac0:	4649      	mov	r1, r9
 8001ac2:	018b      	lsls	r3, r1, #6
 8001ac4:	4641      	mov	r1, r8
 8001ac6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001aca:	4641      	mov	r1, r8
 8001acc:	018a      	lsls	r2, r1, #6
 8001ace:	4641      	mov	r1, r8
 8001ad0:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ad4:	4649      	mov	r1, r9
 8001ad6:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ada:	f04f 0200 	mov.w	r2, #0
 8001ade:	f04f 0300 	mov.w	r3, #0
 8001ae2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001ae6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001aea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001aee:	4692      	mov	sl, r2
 8001af0:	469b      	mov	fp, r3
 8001af2:	4623      	mov	r3, r4
 8001af4:	eb1a 0303 	adds.w	r3, sl, r3
 8001af8:	623b      	str	r3, [r7, #32]
 8001afa:	462b      	mov	r3, r5
 8001afc:	eb4b 0303 	adc.w	r3, fp, r3
 8001b00:	627b      	str	r3, [r7, #36]	; 0x24
 8001b02:	f04f 0200 	mov.w	r2, #0
 8001b06:	f04f 0300 	mov.w	r3, #0
 8001b0a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001b0e:	4629      	mov	r1, r5
 8001b10:	028b      	lsls	r3, r1, #10
 8001b12:	4621      	mov	r1, r4
 8001b14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b18:	4621      	mov	r1, r4
 8001b1a:	028a      	lsls	r2, r1, #10
 8001b1c:	4610      	mov	r0, r2
 8001b1e:	4619      	mov	r1, r3
 8001b20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b24:	2200      	movs	r2, #0
 8001b26:	673b      	str	r3, [r7, #112]	; 0x70
 8001b28:	677a      	str	r2, [r7, #116]	; 0x74
 8001b2a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001b2e:	f7fe fbbf 	bl	80002b0 <__aeabi_uldivmod>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	4613      	mov	r3, r2
 8001b38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b3c:	4b41      	ldr	r3, [pc, #260]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	0c1b      	lsrs	r3, r3, #16
 8001b42:	f003 0303 	and.w	r3, r3, #3
 8001b46:	3301      	adds	r3, #1
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001b4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001b52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001b5e:	e0eb      	b.n	8001d38 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b60:	4b38      	ldr	r3, [pc, #224]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b6c:	4b35      	ldr	r3, [pc, #212]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d06b      	beq.n	8001c50 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b78:	4b32      	ldr	r3, [pc, #200]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	099b      	lsrs	r3, r3, #6
 8001b7e:	2200      	movs	r2, #0
 8001b80:	66bb      	str	r3, [r7, #104]	; 0x68
 8001b82:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001b84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b8a:	663b      	str	r3, [r7, #96]	; 0x60
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	667b      	str	r3, [r7, #100]	; 0x64
 8001b90:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001b94:	4622      	mov	r2, r4
 8001b96:	462b      	mov	r3, r5
 8001b98:	f04f 0000 	mov.w	r0, #0
 8001b9c:	f04f 0100 	mov.w	r1, #0
 8001ba0:	0159      	lsls	r1, r3, #5
 8001ba2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ba6:	0150      	lsls	r0, r2, #5
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	4621      	mov	r1, r4
 8001bae:	1a51      	subs	r1, r2, r1
 8001bb0:	61b9      	str	r1, [r7, #24]
 8001bb2:	4629      	mov	r1, r5
 8001bb4:	eb63 0301 	sbc.w	r3, r3, r1
 8001bb8:	61fb      	str	r3, [r7, #28]
 8001bba:	f04f 0200 	mov.w	r2, #0
 8001bbe:	f04f 0300 	mov.w	r3, #0
 8001bc2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001bc6:	4659      	mov	r1, fp
 8001bc8:	018b      	lsls	r3, r1, #6
 8001bca:	4651      	mov	r1, sl
 8001bcc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001bd0:	4651      	mov	r1, sl
 8001bd2:	018a      	lsls	r2, r1, #6
 8001bd4:	4651      	mov	r1, sl
 8001bd6:	ebb2 0801 	subs.w	r8, r2, r1
 8001bda:	4659      	mov	r1, fp
 8001bdc:	eb63 0901 	sbc.w	r9, r3, r1
 8001be0:	f04f 0200 	mov.w	r2, #0
 8001be4:	f04f 0300 	mov.w	r3, #0
 8001be8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bf0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bf4:	4690      	mov	r8, r2
 8001bf6:	4699      	mov	r9, r3
 8001bf8:	4623      	mov	r3, r4
 8001bfa:	eb18 0303 	adds.w	r3, r8, r3
 8001bfe:	613b      	str	r3, [r7, #16]
 8001c00:	462b      	mov	r3, r5
 8001c02:	eb49 0303 	adc.w	r3, r9, r3
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	f04f 0200 	mov.w	r2, #0
 8001c0c:	f04f 0300 	mov.w	r3, #0
 8001c10:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001c14:	4629      	mov	r1, r5
 8001c16:	024b      	lsls	r3, r1, #9
 8001c18:	4621      	mov	r1, r4
 8001c1a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c1e:	4621      	mov	r1, r4
 8001c20:	024a      	lsls	r2, r1, #9
 8001c22:	4610      	mov	r0, r2
 8001c24:	4619      	mov	r1, r3
 8001c26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	65bb      	str	r3, [r7, #88]	; 0x58
 8001c2e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001c30:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001c34:	f7fe fb3c 	bl	80002b0 <__aeabi_uldivmod>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001c42:	e065      	b.n	8001d10 <HAL_RCC_GetSysClockFreq+0x420>
 8001c44:	40023800 	.word	0x40023800
 8001c48:	00f42400 	.word	0x00f42400
 8001c4c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c50:	4b3d      	ldr	r3, [pc, #244]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x458>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	099b      	lsrs	r3, r3, #6
 8001c56:	2200      	movs	r2, #0
 8001c58:	4618      	mov	r0, r3
 8001c5a:	4611      	mov	r1, r2
 8001c5c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c60:	653b      	str	r3, [r7, #80]	; 0x50
 8001c62:	2300      	movs	r3, #0
 8001c64:	657b      	str	r3, [r7, #84]	; 0x54
 8001c66:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001c6a:	4642      	mov	r2, r8
 8001c6c:	464b      	mov	r3, r9
 8001c6e:	f04f 0000 	mov.w	r0, #0
 8001c72:	f04f 0100 	mov.w	r1, #0
 8001c76:	0159      	lsls	r1, r3, #5
 8001c78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c7c:	0150      	lsls	r0, r2, #5
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	4641      	mov	r1, r8
 8001c84:	1a51      	subs	r1, r2, r1
 8001c86:	60b9      	str	r1, [r7, #8]
 8001c88:	4649      	mov	r1, r9
 8001c8a:	eb63 0301 	sbc.w	r3, r3, r1
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	f04f 0200 	mov.w	r2, #0
 8001c94:	f04f 0300 	mov.w	r3, #0
 8001c98:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001c9c:	4659      	mov	r1, fp
 8001c9e:	018b      	lsls	r3, r1, #6
 8001ca0:	4651      	mov	r1, sl
 8001ca2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ca6:	4651      	mov	r1, sl
 8001ca8:	018a      	lsls	r2, r1, #6
 8001caa:	4651      	mov	r1, sl
 8001cac:	1a54      	subs	r4, r2, r1
 8001cae:	4659      	mov	r1, fp
 8001cb0:	eb63 0501 	sbc.w	r5, r3, r1
 8001cb4:	f04f 0200 	mov.w	r2, #0
 8001cb8:	f04f 0300 	mov.w	r3, #0
 8001cbc:	00eb      	lsls	r3, r5, #3
 8001cbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cc2:	00e2      	lsls	r2, r4, #3
 8001cc4:	4614      	mov	r4, r2
 8001cc6:	461d      	mov	r5, r3
 8001cc8:	4643      	mov	r3, r8
 8001cca:	18e3      	adds	r3, r4, r3
 8001ccc:	603b      	str	r3, [r7, #0]
 8001cce:	464b      	mov	r3, r9
 8001cd0:	eb45 0303 	adc.w	r3, r5, r3
 8001cd4:	607b      	str	r3, [r7, #4]
 8001cd6:	f04f 0200 	mov.w	r2, #0
 8001cda:	f04f 0300 	mov.w	r3, #0
 8001cde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ce2:	4629      	mov	r1, r5
 8001ce4:	028b      	lsls	r3, r1, #10
 8001ce6:	4621      	mov	r1, r4
 8001ce8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cec:	4621      	mov	r1, r4
 8001cee:	028a      	lsls	r2, r1, #10
 8001cf0:	4610      	mov	r0, r2
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	64bb      	str	r3, [r7, #72]	; 0x48
 8001cfc:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001cfe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001d02:	f7fe fad5 	bl	80002b0 <__aeabi_uldivmod>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001d10:	4b0d      	ldr	r3, [pc, #52]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x458>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	0f1b      	lsrs	r3, r3, #28
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001d1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001d22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001d2e:	e003      	b.n	8001d38 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d30:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x45c>)
 8001d32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001d36:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d38:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	37b8      	adds	r7, #184	; 0xb8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d46:	bf00      	nop
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	00f42400 	.word	0x00f42400

08001d50 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e28d      	b.n	800227e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f000 8083 	beq.w	8001e76 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001d70:	4b94      	ldr	r3, [pc, #592]	; (8001fc4 <HAL_RCC_OscConfig+0x274>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f003 030c 	and.w	r3, r3, #12
 8001d78:	2b04      	cmp	r3, #4
 8001d7a:	d019      	beq.n	8001db0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d7c:	4b91      	ldr	r3, [pc, #580]	; (8001fc4 <HAL_RCC_OscConfig+0x274>)
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001d84:	2b08      	cmp	r3, #8
 8001d86:	d106      	bne.n	8001d96 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d88:	4b8e      	ldr	r3, [pc, #568]	; (8001fc4 <HAL_RCC_OscConfig+0x274>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d94:	d00c      	beq.n	8001db0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d96:	4b8b      	ldr	r3, [pc, #556]	; (8001fc4 <HAL_RCC_OscConfig+0x274>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d9e:	2b0c      	cmp	r3, #12
 8001da0:	d112      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001da2:	4b88      	ldr	r3, [pc, #544]	; (8001fc4 <HAL_RCC_OscConfig+0x274>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001daa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dae:	d10b      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001db0:	4b84      	ldr	r3, [pc, #528]	; (8001fc4 <HAL_RCC_OscConfig+0x274>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d05b      	beq.n	8001e74 <HAL_RCC_OscConfig+0x124>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d157      	bne.n	8001e74 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e25a      	b.n	800227e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dd0:	d106      	bne.n	8001de0 <HAL_RCC_OscConfig+0x90>
 8001dd2:	4b7c      	ldr	r3, [pc, #496]	; (8001fc4 <HAL_RCC_OscConfig+0x274>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a7b      	ldr	r2, [pc, #492]	; (8001fc4 <HAL_RCC_OscConfig+0x274>)
 8001dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ddc:	6013      	str	r3, [r2, #0]
 8001dde:	e01d      	b.n	8001e1c <HAL_RCC_OscConfig+0xcc>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001de8:	d10c      	bne.n	8001e04 <HAL_RCC_OscConfig+0xb4>
 8001dea:	4b76      	ldr	r3, [pc, #472]	; (8001fc4 <HAL_RCC_OscConfig+0x274>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a75      	ldr	r2, [pc, #468]	; (8001fc4 <HAL_RCC_OscConfig+0x274>)
 8001df0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001df4:	6013      	str	r3, [r2, #0]
 8001df6:	4b73      	ldr	r3, [pc, #460]	; (8001fc4 <HAL_RCC_OscConfig+0x274>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a72      	ldr	r2, [pc, #456]	; (8001fc4 <HAL_RCC_OscConfig+0x274>)
 8001dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e00:	6013      	str	r3, [r2, #0]
 8001e02:	e00b      	b.n	8001e1c <HAL_RCC_OscConfig+0xcc>
 8001e04:	4b6f      	ldr	r3, [pc, #444]	; (8001fc4 <HAL_RCC_OscConfig+0x274>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a6e      	ldr	r2, [pc, #440]	; (8001fc4 <HAL_RCC_OscConfig+0x274>)
 8001e0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e0e:	6013      	str	r3, [r2, #0]
 8001e10:	4b6c      	ldr	r3, [pc, #432]	; (8001fc4 <HAL_RCC_OscConfig+0x274>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a6b      	ldr	r2, [pc, #428]	; (8001fc4 <HAL_RCC_OscConfig+0x274>)
 8001e16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d013      	beq.n	8001e4c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e24:	f7ff f942 	bl	80010ac <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e2c:	f7ff f93e 	bl	80010ac <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b64      	cmp	r3, #100	; 0x64
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e21f      	b.n	800227e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e3e:	4b61      	ldr	r3, [pc, #388]	; (8001fc4 <HAL_RCC_OscConfig+0x274>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d0f0      	beq.n	8001e2c <HAL_RCC_OscConfig+0xdc>
 8001e4a:	e014      	b.n	8001e76 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4c:	f7ff f92e 	bl	80010ac <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e54:	f7ff f92a 	bl	80010ac <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b64      	cmp	r3, #100	; 0x64
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e20b      	b.n	800227e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e66:	4b57      	ldr	r3, [pc, #348]	; (8001fc4 <HAL_RCC_OscConfig+0x274>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1f0      	bne.n	8001e54 <HAL_RCC_OscConfig+0x104>
 8001e72:	e000      	b.n	8001e76 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d06f      	beq.n	8001f62 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001e82:	4b50      	ldr	r3, [pc, #320]	; (8001fc4 <HAL_RCC_OscConfig+0x274>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f003 030c 	and.w	r3, r3, #12
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d017      	beq.n	8001ebe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e8e:	4b4d      	ldr	r3, [pc, #308]	; (8001fc4 <HAL_RCC_OscConfig+0x274>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001e96:	2b08      	cmp	r3, #8
 8001e98:	d105      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e9a:	4b4a      	ldr	r3, [pc, #296]	; (8001fc4 <HAL_RCC_OscConfig+0x274>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00b      	beq.n	8001ebe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ea6:	4b47      	ldr	r3, [pc, #284]	; (8001fc4 <HAL_RCC_OscConfig+0x274>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001eae:	2b0c      	cmp	r3, #12
 8001eb0:	d11c      	bne.n	8001eec <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eb2:	4b44      	ldr	r3, [pc, #272]	; (8001fc4 <HAL_RCC_OscConfig+0x274>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d116      	bne.n	8001eec <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ebe:	4b41      	ldr	r3, [pc, #260]	; (8001fc4 <HAL_RCC_OscConfig+0x274>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d005      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x186>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d001      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e1d3      	b.n	800227e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed6:	4b3b      	ldr	r3, [pc, #236]	; (8001fc4 <HAL_RCC_OscConfig+0x274>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	4937      	ldr	r1, [pc, #220]	; (8001fc4 <HAL_RCC_OscConfig+0x274>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eea:	e03a      	b.n	8001f62 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d020      	beq.n	8001f36 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ef4:	4b34      	ldr	r3, [pc, #208]	; (8001fc8 <HAL_RCC_OscConfig+0x278>)
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efa:	f7ff f8d7 	bl	80010ac <HAL_GetTick>
 8001efe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f00:	e008      	b.n	8001f14 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f02:	f7ff f8d3 	bl	80010ac <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e1b4      	b.n	800227e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f14:	4b2b      	ldr	r3, [pc, #172]	; (8001fc4 <HAL_RCC_OscConfig+0x274>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d0f0      	beq.n	8001f02 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f20:	4b28      	ldr	r3, [pc, #160]	; (8001fc4 <HAL_RCC_OscConfig+0x274>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	4925      	ldr	r1, [pc, #148]	; (8001fc4 <HAL_RCC_OscConfig+0x274>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	600b      	str	r3, [r1, #0]
 8001f34:	e015      	b.n	8001f62 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f36:	4b24      	ldr	r3, [pc, #144]	; (8001fc8 <HAL_RCC_OscConfig+0x278>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3c:	f7ff f8b6 	bl	80010ac <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f44:	f7ff f8b2 	bl	80010ac <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e193      	b.n	800227e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f56:	4b1b      	ldr	r3, [pc, #108]	; (8001fc4 <HAL_RCC_OscConfig+0x274>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1f0      	bne.n	8001f44 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0308 	and.w	r3, r3, #8
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d036      	beq.n	8001fdc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d016      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f76:	4b15      	ldr	r3, [pc, #84]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001f78:	2201      	movs	r2, #1
 8001f7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f7c:	f7ff f896 	bl	80010ac <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f84:	f7ff f892 	bl	80010ac <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e173      	b.n	800227e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f96:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <HAL_RCC_OscConfig+0x274>)
 8001f98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d0f0      	beq.n	8001f84 <HAL_RCC_OscConfig+0x234>
 8001fa2:	e01b      	b.n	8001fdc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fa4:	4b09      	ldr	r3, [pc, #36]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001faa:	f7ff f87f 	bl	80010ac <HAL_GetTick>
 8001fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fb0:	e00e      	b.n	8001fd0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fb2:	f7ff f87b 	bl	80010ac <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d907      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e15c      	b.n	800227e <HAL_RCC_OscConfig+0x52e>
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	42470000 	.word	0x42470000
 8001fcc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fd0:	4b8a      	ldr	r3, [pc, #552]	; (80021fc <HAL_RCC_OscConfig+0x4ac>)
 8001fd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d1ea      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0304 	and.w	r3, r3, #4
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f000 8097 	beq.w	8002118 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fea:	2300      	movs	r3, #0
 8001fec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fee:	4b83      	ldr	r3, [pc, #524]	; (80021fc <HAL_RCC_OscConfig+0x4ac>)
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d10f      	bne.n	800201a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60bb      	str	r3, [r7, #8]
 8001ffe:	4b7f      	ldr	r3, [pc, #508]	; (80021fc <HAL_RCC_OscConfig+0x4ac>)
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	4a7e      	ldr	r2, [pc, #504]	; (80021fc <HAL_RCC_OscConfig+0x4ac>)
 8002004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002008:	6413      	str	r3, [r2, #64]	; 0x40
 800200a:	4b7c      	ldr	r3, [pc, #496]	; (80021fc <HAL_RCC_OscConfig+0x4ac>)
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002012:	60bb      	str	r3, [r7, #8]
 8002014:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002016:	2301      	movs	r3, #1
 8002018:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800201a:	4b79      	ldr	r3, [pc, #484]	; (8002200 <HAL_RCC_OscConfig+0x4b0>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002022:	2b00      	cmp	r3, #0
 8002024:	d118      	bne.n	8002058 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002026:	4b76      	ldr	r3, [pc, #472]	; (8002200 <HAL_RCC_OscConfig+0x4b0>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a75      	ldr	r2, [pc, #468]	; (8002200 <HAL_RCC_OscConfig+0x4b0>)
 800202c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002030:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002032:	f7ff f83b 	bl	80010ac <HAL_GetTick>
 8002036:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002038:	e008      	b.n	800204c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800203a:	f7ff f837 	bl	80010ac <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e118      	b.n	800227e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800204c:	4b6c      	ldr	r3, [pc, #432]	; (8002200 <HAL_RCC_OscConfig+0x4b0>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002054:	2b00      	cmp	r3, #0
 8002056:	d0f0      	beq.n	800203a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d106      	bne.n	800206e <HAL_RCC_OscConfig+0x31e>
 8002060:	4b66      	ldr	r3, [pc, #408]	; (80021fc <HAL_RCC_OscConfig+0x4ac>)
 8002062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002064:	4a65      	ldr	r2, [pc, #404]	; (80021fc <HAL_RCC_OscConfig+0x4ac>)
 8002066:	f043 0301 	orr.w	r3, r3, #1
 800206a:	6713      	str	r3, [r2, #112]	; 0x70
 800206c:	e01c      	b.n	80020a8 <HAL_RCC_OscConfig+0x358>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	2b05      	cmp	r3, #5
 8002074:	d10c      	bne.n	8002090 <HAL_RCC_OscConfig+0x340>
 8002076:	4b61      	ldr	r3, [pc, #388]	; (80021fc <HAL_RCC_OscConfig+0x4ac>)
 8002078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800207a:	4a60      	ldr	r2, [pc, #384]	; (80021fc <HAL_RCC_OscConfig+0x4ac>)
 800207c:	f043 0304 	orr.w	r3, r3, #4
 8002080:	6713      	str	r3, [r2, #112]	; 0x70
 8002082:	4b5e      	ldr	r3, [pc, #376]	; (80021fc <HAL_RCC_OscConfig+0x4ac>)
 8002084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002086:	4a5d      	ldr	r2, [pc, #372]	; (80021fc <HAL_RCC_OscConfig+0x4ac>)
 8002088:	f043 0301 	orr.w	r3, r3, #1
 800208c:	6713      	str	r3, [r2, #112]	; 0x70
 800208e:	e00b      	b.n	80020a8 <HAL_RCC_OscConfig+0x358>
 8002090:	4b5a      	ldr	r3, [pc, #360]	; (80021fc <HAL_RCC_OscConfig+0x4ac>)
 8002092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002094:	4a59      	ldr	r2, [pc, #356]	; (80021fc <HAL_RCC_OscConfig+0x4ac>)
 8002096:	f023 0301 	bic.w	r3, r3, #1
 800209a:	6713      	str	r3, [r2, #112]	; 0x70
 800209c:	4b57      	ldr	r3, [pc, #348]	; (80021fc <HAL_RCC_OscConfig+0x4ac>)
 800209e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a0:	4a56      	ldr	r2, [pc, #344]	; (80021fc <HAL_RCC_OscConfig+0x4ac>)
 80020a2:	f023 0304 	bic.w	r3, r3, #4
 80020a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d015      	beq.n	80020dc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b0:	f7fe fffc 	bl	80010ac <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020b6:	e00a      	b.n	80020ce <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020b8:	f7fe fff8 	bl	80010ac <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e0d7      	b.n	800227e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ce:	4b4b      	ldr	r3, [pc, #300]	; (80021fc <HAL_RCC_OscConfig+0x4ac>)
 80020d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d0ee      	beq.n	80020b8 <HAL_RCC_OscConfig+0x368>
 80020da:	e014      	b.n	8002106 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020dc:	f7fe ffe6 	bl	80010ac <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020e2:	e00a      	b.n	80020fa <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020e4:	f7fe ffe2 	bl	80010ac <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e0c1      	b.n	800227e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020fa:	4b40      	ldr	r3, [pc, #256]	; (80021fc <HAL_RCC_OscConfig+0x4ac>)
 80020fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1ee      	bne.n	80020e4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002106:	7dfb      	ldrb	r3, [r7, #23]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d105      	bne.n	8002118 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800210c:	4b3b      	ldr	r3, [pc, #236]	; (80021fc <HAL_RCC_OscConfig+0x4ac>)
 800210e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002110:	4a3a      	ldr	r2, [pc, #232]	; (80021fc <HAL_RCC_OscConfig+0x4ac>)
 8002112:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002116:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	2b00      	cmp	r3, #0
 800211e:	f000 80ad 	beq.w	800227c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002122:	4b36      	ldr	r3, [pc, #216]	; (80021fc <HAL_RCC_OscConfig+0x4ac>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f003 030c 	and.w	r3, r3, #12
 800212a:	2b08      	cmp	r3, #8
 800212c:	d060      	beq.n	80021f0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	2b02      	cmp	r3, #2
 8002134:	d145      	bne.n	80021c2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002136:	4b33      	ldr	r3, [pc, #204]	; (8002204 <HAL_RCC_OscConfig+0x4b4>)
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213c:	f7fe ffb6 	bl	80010ac <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002144:	f7fe ffb2 	bl	80010ac <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e093      	b.n	800227e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002156:	4b29      	ldr	r3, [pc, #164]	; (80021fc <HAL_RCC_OscConfig+0x4ac>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1f0      	bne.n	8002144 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	69da      	ldr	r2, [r3, #28]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a1b      	ldr	r3, [r3, #32]
 800216a:	431a      	orrs	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002170:	019b      	lsls	r3, r3, #6
 8002172:	431a      	orrs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002178:	085b      	lsrs	r3, r3, #1
 800217a:	3b01      	subs	r3, #1
 800217c:	041b      	lsls	r3, r3, #16
 800217e:	431a      	orrs	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002184:	061b      	lsls	r3, r3, #24
 8002186:	431a      	orrs	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218c:	071b      	lsls	r3, r3, #28
 800218e:	491b      	ldr	r1, [pc, #108]	; (80021fc <HAL_RCC_OscConfig+0x4ac>)
 8002190:	4313      	orrs	r3, r2
 8002192:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002194:	4b1b      	ldr	r3, [pc, #108]	; (8002204 <HAL_RCC_OscConfig+0x4b4>)
 8002196:	2201      	movs	r2, #1
 8002198:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219a:	f7fe ff87 	bl	80010ac <HAL_GetTick>
 800219e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021a0:	e008      	b.n	80021b4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021a2:	f7fe ff83 	bl	80010ac <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d901      	bls.n	80021b4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e064      	b.n	800227e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021b4:	4b11      	ldr	r3, [pc, #68]	; (80021fc <HAL_RCC_OscConfig+0x4ac>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d0f0      	beq.n	80021a2 <HAL_RCC_OscConfig+0x452>
 80021c0:	e05c      	b.n	800227c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c2:	4b10      	ldr	r3, [pc, #64]	; (8002204 <HAL_RCC_OscConfig+0x4b4>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c8:	f7fe ff70 	bl	80010ac <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021d0:	f7fe ff6c 	bl	80010ac <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e04d      	b.n	800227e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021e2:	4b06      	ldr	r3, [pc, #24]	; (80021fc <HAL_RCC_OscConfig+0x4ac>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1f0      	bne.n	80021d0 <HAL_RCC_OscConfig+0x480>
 80021ee:	e045      	b.n	800227c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d107      	bne.n	8002208 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e040      	b.n	800227e <HAL_RCC_OscConfig+0x52e>
 80021fc:	40023800 	.word	0x40023800
 8002200:	40007000 	.word	0x40007000
 8002204:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002208:	4b1f      	ldr	r3, [pc, #124]	; (8002288 <HAL_RCC_OscConfig+0x538>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d030      	beq.n	8002278 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002220:	429a      	cmp	r2, r3
 8002222:	d129      	bne.n	8002278 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800222e:	429a      	cmp	r2, r3
 8002230:	d122      	bne.n	8002278 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002238:	4013      	ands	r3, r2
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800223e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002240:	4293      	cmp	r3, r2
 8002242:	d119      	bne.n	8002278 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224e:	085b      	lsrs	r3, r3, #1
 8002250:	3b01      	subs	r3, #1
 8002252:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002254:	429a      	cmp	r2, r3
 8002256:	d10f      	bne.n	8002278 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002262:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002264:	429a      	cmp	r2, r3
 8002266:	d107      	bne.n	8002278 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002274:	429a      	cmp	r2, r3
 8002276:	d001      	beq.n	800227c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e000      	b.n	800227e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3718      	adds	r7, #24
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40023800 	.word	0x40023800

0800228c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e041      	b.n	8002322 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d106      	bne.n	80022b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7fe fcb8 	bl	8000c28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2202      	movs	r2, #2
 80022bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	3304      	adds	r3, #4
 80022c8:	4619      	mov	r1, r3
 80022ca:	4610      	mov	r0, r2
 80022cc:	f000 fa06 	bl	80026dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b082      	sub	sp, #8
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d101      	bne.n	800233c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e041      	b.n	80023c0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002342:	b2db      	uxtb	r3, r3
 8002344:	2b00      	cmp	r3, #0
 8002346:	d106      	bne.n	8002356 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f7fe fc47 	bl	8000be4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2202      	movs	r2, #2
 800235a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	3304      	adds	r3, #4
 8002366:	4619      	mov	r1, r3
 8002368:	4610      	mov	r0, r2
 800236a:	f000 f9b7 	bl	80026dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2201      	movs	r2, #1
 8002372:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2201      	movs	r2, #1
 800237a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2201      	movs	r2, #1
 8002382:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2201      	movs	r2, #1
 800238a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2201      	movs	r2, #1
 8002392:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2201      	movs	r2, #1
 800239a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2201      	movs	r2, #1
 80023a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2201      	movs	r2, #1
 80023aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d109      	bne.n	80023ec <HAL_TIM_PWM_Start+0x24>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	bf14      	ite	ne
 80023e4:	2301      	movne	r3, #1
 80023e6:	2300      	moveq	r3, #0
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	e022      	b.n	8002432 <HAL_TIM_PWM_Start+0x6a>
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	2b04      	cmp	r3, #4
 80023f0:	d109      	bne.n	8002406 <HAL_TIM_PWM_Start+0x3e>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	bf14      	ite	ne
 80023fe:	2301      	movne	r3, #1
 8002400:	2300      	moveq	r3, #0
 8002402:	b2db      	uxtb	r3, r3
 8002404:	e015      	b.n	8002432 <HAL_TIM_PWM_Start+0x6a>
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	2b08      	cmp	r3, #8
 800240a:	d109      	bne.n	8002420 <HAL_TIM_PWM_Start+0x58>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002412:	b2db      	uxtb	r3, r3
 8002414:	2b01      	cmp	r3, #1
 8002416:	bf14      	ite	ne
 8002418:	2301      	movne	r3, #1
 800241a:	2300      	moveq	r3, #0
 800241c:	b2db      	uxtb	r3, r3
 800241e:	e008      	b.n	8002432 <HAL_TIM_PWM_Start+0x6a>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002426:	b2db      	uxtb	r3, r3
 8002428:	2b01      	cmp	r3, #1
 800242a:	bf14      	ite	ne
 800242c:	2301      	movne	r3, #1
 800242e:	2300      	moveq	r3, #0
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e07c      	b.n	8002534 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d104      	bne.n	800244a <HAL_TIM_PWM_Start+0x82>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2202      	movs	r2, #2
 8002444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002448:	e013      	b.n	8002472 <HAL_TIM_PWM_Start+0xaa>
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	2b04      	cmp	r3, #4
 800244e:	d104      	bne.n	800245a <HAL_TIM_PWM_Start+0x92>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2202      	movs	r2, #2
 8002454:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002458:	e00b      	b.n	8002472 <HAL_TIM_PWM_Start+0xaa>
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	2b08      	cmp	r3, #8
 800245e:	d104      	bne.n	800246a <HAL_TIM_PWM_Start+0xa2>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2202      	movs	r2, #2
 8002464:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002468:	e003      	b.n	8002472 <HAL_TIM_PWM_Start+0xaa>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2202      	movs	r2, #2
 800246e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2201      	movs	r2, #1
 8002478:	6839      	ldr	r1, [r7, #0]
 800247a:	4618      	mov	r0, r3
 800247c:	f000 fb7e 	bl	8002b7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a2d      	ldr	r2, [pc, #180]	; (800253c <HAL_TIM_PWM_Start+0x174>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d004      	beq.n	8002494 <HAL_TIM_PWM_Start+0xcc>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a2c      	ldr	r2, [pc, #176]	; (8002540 <HAL_TIM_PWM_Start+0x178>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d101      	bne.n	8002498 <HAL_TIM_PWM_Start+0xd0>
 8002494:	2301      	movs	r3, #1
 8002496:	e000      	b.n	800249a <HAL_TIM_PWM_Start+0xd2>
 8002498:	2300      	movs	r3, #0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d007      	beq.n	80024ae <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a22      	ldr	r2, [pc, #136]	; (800253c <HAL_TIM_PWM_Start+0x174>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d022      	beq.n	80024fe <HAL_TIM_PWM_Start+0x136>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024c0:	d01d      	beq.n	80024fe <HAL_TIM_PWM_Start+0x136>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a1f      	ldr	r2, [pc, #124]	; (8002544 <HAL_TIM_PWM_Start+0x17c>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d018      	beq.n	80024fe <HAL_TIM_PWM_Start+0x136>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a1d      	ldr	r2, [pc, #116]	; (8002548 <HAL_TIM_PWM_Start+0x180>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d013      	beq.n	80024fe <HAL_TIM_PWM_Start+0x136>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a1c      	ldr	r2, [pc, #112]	; (800254c <HAL_TIM_PWM_Start+0x184>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d00e      	beq.n	80024fe <HAL_TIM_PWM_Start+0x136>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a16      	ldr	r2, [pc, #88]	; (8002540 <HAL_TIM_PWM_Start+0x178>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d009      	beq.n	80024fe <HAL_TIM_PWM_Start+0x136>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a18      	ldr	r2, [pc, #96]	; (8002550 <HAL_TIM_PWM_Start+0x188>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d004      	beq.n	80024fe <HAL_TIM_PWM_Start+0x136>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a16      	ldr	r2, [pc, #88]	; (8002554 <HAL_TIM_PWM_Start+0x18c>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d111      	bne.n	8002522 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f003 0307 	and.w	r3, r3, #7
 8002508:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2b06      	cmp	r3, #6
 800250e:	d010      	beq.n	8002532 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f042 0201 	orr.w	r2, r2, #1
 800251e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002520:	e007      	b.n	8002532 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f042 0201 	orr.w	r2, r2, #1
 8002530:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40010000 	.word	0x40010000
 8002540:	40010400 	.word	0x40010400
 8002544:	40000400 	.word	0x40000400
 8002548:	40000800 	.word	0x40000800
 800254c:	40000c00 	.word	0x40000c00
 8002550:	40014000 	.word	0x40014000
 8002554:	40001800 	.word	0x40001800

08002558 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002564:	2300      	movs	r3, #0
 8002566:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800256e:	2b01      	cmp	r3, #1
 8002570:	d101      	bne.n	8002576 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002572:	2302      	movs	r3, #2
 8002574:	e0ae      	b.n	80026d4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2201      	movs	r2, #1
 800257a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2b0c      	cmp	r3, #12
 8002582:	f200 809f 	bhi.w	80026c4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002586:	a201      	add	r2, pc, #4	; (adr r2, 800258c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800258c:	080025c1 	.word	0x080025c1
 8002590:	080026c5 	.word	0x080026c5
 8002594:	080026c5 	.word	0x080026c5
 8002598:	080026c5 	.word	0x080026c5
 800259c:	08002601 	.word	0x08002601
 80025a0:	080026c5 	.word	0x080026c5
 80025a4:	080026c5 	.word	0x080026c5
 80025a8:	080026c5 	.word	0x080026c5
 80025ac:	08002643 	.word	0x08002643
 80025b0:	080026c5 	.word	0x080026c5
 80025b4:	080026c5 	.word	0x080026c5
 80025b8:	080026c5 	.word	0x080026c5
 80025bc:	08002683 	.word	0x08002683
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68b9      	ldr	r1, [r7, #8]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f000 f928 	bl	800281c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	699a      	ldr	r2, [r3, #24]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f042 0208 	orr.w	r2, r2, #8
 80025da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	699a      	ldr	r2, [r3, #24]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f022 0204 	bic.w	r2, r2, #4
 80025ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6999      	ldr	r1, [r3, #24]
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	691a      	ldr	r2, [r3, #16]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	430a      	orrs	r2, r1
 80025fc:	619a      	str	r2, [r3, #24]
      break;
 80025fe:	e064      	b.n	80026ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	68b9      	ldr	r1, [r7, #8]
 8002606:	4618      	mov	r0, r3
 8002608:	f000 f978 	bl	80028fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	699a      	ldr	r2, [r3, #24]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800261a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	699a      	ldr	r2, [r3, #24]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800262a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6999      	ldr	r1, [r3, #24]
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	021a      	lsls	r2, r3, #8
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	430a      	orrs	r2, r1
 800263e:	619a      	str	r2, [r3, #24]
      break;
 8002640:	e043      	b.n	80026ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68b9      	ldr	r1, [r7, #8]
 8002648:	4618      	mov	r0, r3
 800264a:	f000 f9cd 	bl	80029e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	69da      	ldr	r2, [r3, #28]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f042 0208 	orr.w	r2, r2, #8
 800265c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	69da      	ldr	r2, [r3, #28]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 0204 	bic.w	r2, r2, #4
 800266c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	69d9      	ldr	r1, [r3, #28]
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	691a      	ldr	r2, [r3, #16]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	430a      	orrs	r2, r1
 800267e:	61da      	str	r2, [r3, #28]
      break;
 8002680:	e023      	b.n	80026ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68b9      	ldr	r1, [r7, #8]
 8002688:	4618      	mov	r0, r3
 800268a:	f000 fa21 	bl	8002ad0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	69da      	ldr	r2, [r3, #28]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800269c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	69da      	ldr	r2, [r3, #28]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	69d9      	ldr	r1, [r3, #28]
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	021a      	lsls	r2, r3, #8
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	430a      	orrs	r2, r1
 80026c0:	61da      	str	r2, [r3, #28]
      break;
 80026c2:	e002      	b.n	80026ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	75fb      	strb	r3, [r7, #23]
      break;
 80026c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80026d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3718      	adds	r7, #24
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4a40      	ldr	r2, [pc, #256]	; (80027f0 <TIM_Base_SetConfig+0x114>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d013      	beq.n	800271c <TIM_Base_SetConfig+0x40>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026fa:	d00f      	beq.n	800271c <TIM_Base_SetConfig+0x40>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a3d      	ldr	r2, [pc, #244]	; (80027f4 <TIM_Base_SetConfig+0x118>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d00b      	beq.n	800271c <TIM_Base_SetConfig+0x40>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a3c      	ldr	r2, [pc, #240]	; (80027f8 <TIM_Base_SetConfig+0x11c>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d007      	beq.n	800271c <TIM_Base_SetConfig+0x40>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a3b      	ldr	r2, [pc, #236]	; (80027fc <TIM_Base_SetConfig+0x120>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d003      	beq.n	800271c <TIM_Base_SetConfig+0x40>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a3a      	ldr	r2, [pc, #232]	; (8002800 <TIM_Base_SetConfig+0x124>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d108      	bne.n	800272e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002722:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	4313      	orrs	r3, r2
 800272c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a2f      	ldr	r2, [pc, #188]	; (80027f0 <TIM_Base_SetConfig+0x114>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d02b      	beq.n	800278e <TIM_Base_SetConfig+0xb2>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800273c:	d027      	beq.n	800278e <TIM_Base_SetConfig+0xb2>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a2c      	ldr	r2, [pc, #176]	; (80027f4 <TIM_Base_SetConfig+0x118>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d023      	beq.n	800278e <TIM_Base_SetConfig+0xb2>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a2b      	ldr	r2, [pc, #172]	; (80027f8 <TIM_Base_SetConfig+0x11c>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d01f      	beq.n	800278e <TIM_Base_SetConfig+0xb2>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a2a      	ldr	r2, [pc, #168]	; (80027fc <TIM_Base_SetConfig+0x120>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d01b      	beq.n	800278e <TIM_Base_SetConfig+0xb2>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a29      	ldr	r2, [pc, #164]	; (8002800 <TIM_Base_SetConfig+0x124>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d017      	beq.n	800278e <TIM_Base_SetConfig+0xb2>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a28      	ldr	r2, [pc, #160]	; (8002804 <TIM_Base_SetConfig+0x128>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d013      	beq.n	800278e <TIM_Base_SetConfig+0xb2>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a27      	ldr	r2, [pc, #156]	; (8002808 <TIM_Base_SetConfig+0x12c>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d00f      	beq.n	800278e <TIM_Base_SetConfig+0xb2>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a26      	ldr	r2, [pc, #152]	; (800280c <TIM_Base_SetConfig+0x130>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d00b      	beq.n	800278e <TIM_Base_SetConfig+0xb2>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a25      	ldr	r2, [pc, #148]	; (8002810 <TIM_Base_SetConfig+0x134>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d007      	beq.n	800278e <TIM_Base_SetConfig+0xb2>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a24      	ldr	r2, [pc, #144]	; (8002814 <TIM_Base_SetConfig+0x138>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d003      	beq.n	800278e <TIM_Base_SetConfig+0xb2>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a23      	ldr	r2, [pc, #140]	; (8002818 <TIM_Base_SetConfig+0x13c>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d108      	bne.n	80027a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002794:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	4313      	orrs	r3, r2
 800279e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	695b      	ldr	r3, [r3, #20]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	689a      	ldr	r2, [r3, #8]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a0a      	ldr	r2, [pc, #40]	; (80027f0 <TIM_Base_SetConfig+0x114>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d003      	beq.n	80027d4 <TIM_Base_SetConfig+0xf8>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a0c      	ldr	r2, [pc, #48]	; (8002800 <TIM_Base_SetConfig+0x124>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d103      	bne.n	80027dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	691a      	ldr	r2, [r3, #16]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	615a      	str	r2, [r3, #20]
}
 80027e2:	bf00      	nop
 80027e4:	3714      	adds	r7, #20
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	40010000 	.word	0x40010000
 80027f4:	40000400 	.word	0x40000400
 80027f8:	40000800 	.word	0x40000800
 80027fc:	40000c00 	.word	0x40000c00
 8002800:	40010400 	.word	0x40010400
 8002804:	40014000 	.word	0x40014000
 8002808:	40014400 	.word	0x40014400
 800280c:	40014800 	.word	0x40014800
 8002810:	40001800 	.word	0x40001800
 8002814:	40001c00 	.word	0x40001c00
 8002818:	40002000 	.word	0x40002000

0800281c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800281c:	b480      	push	{r7}
 800281e:	b087      	sub	sp, #28
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a1b      	ldr	r3, [r3, #32]
 800282a:	f023 0201 	bic.w	r2, r3, #1
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800284a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f023 0303 	bic.w	r3, r3, #3
 8002852:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	4313      	orrs	r3, r2
 800285c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	f023 0302 	bic.w	r3, r3, #2
 8002864:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	697a      	ldr	r2, [r7, #20]
 800286c:	4313      	orrs	r3, r2
 800286e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a20      	ldr	r2, [pc, #128]	; (80028f4 <TIM_OC1_SetConfig+0xd8>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d003      	beq.n	8002880 <TIM_OC1_SetConfig+0x64>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a1f      	ldr	r2, [pc, #124]	; (80028f8 <TIM_OC1_SetConfig+0xdc>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d10c      	bne.n	800289a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	f023 0308 	bic.w	r3, r3, #8
 8002886:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	697a      	ldr	r2, [r7, #20]
 800288e:	4313      	orrs	r3, r2
 8002890:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	f023 0304 	bic.w	r3, r3, #4
 8002898:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a15      	ldr	r2, [pc, #84]	; (80028f4 <TIM_OC1_SetConfig+0xd8>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d003      	beq.n	80028aa <TIM_OC1_SetConfig+0x8e>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a14      	ldr	r2, [pc, #80]	; (80028f8 <TIM_OC1_SetConfig+0xdc>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d111      	bne.n	80028ce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80028b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	693a      	ldr	r2, [r7, #16]
 80028d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685a      	ldr	r2, [r3, #4]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	697a      	ldr	r2, [r7, #20]
 80028e6:	621a      	str	r2, [r3, #32]
}
 80028e8:	bf00      	nop
 80028ea:	371c      	adds	r7, #28
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr
 80028f4:	40010000 	.word	0x40010000
 80028f8:	40010400 	.word	0x40010400

080028fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b087      	sub	sp, #28
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	f023 0210 	bic.w	r2, r3, #16
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a1b      	ldr	r3, [r3, #32]
 8002916:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800292a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002932:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	021b      	lsls	r3, r3, #8
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	4313      	orrs	r3, r2
 800293e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	f023 0320 	bic.w	r3, r3, #32
 8002946:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	011b      	lsls	r3, r3, #4
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	4313      	orrs	r3, r2
 8002952:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a22      	ldr	r2, [pc, #136]	; (80029e0 <TIM_OC2_SetConfig+0xe4>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d003      	beq.n	8002964 <TIM_OC2_SetConfig+0x68>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a21      	ldr	r2, [pc, #132]	; (80029e4 <TIM_OC2_SetConfig+0xe8>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d10d      	bne.n	8002980 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800296a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	011b      	lsls	r3, r3, #4
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	4313      	orrs	r3, r2
 8002976:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800297e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a17      	ldr	r2, [pc, #92]	; (80029e0 <TIM_OC2_SetConfig+0xe4>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d003      	beq.n	8002990 <TIM_OC2_SetConfig+0x94>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a16      	ldr	r2, [pc, #88]	; (80029e4 <TIM_OC2_SetConfig+0xe8>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d113      	bne.n	80029b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002996:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800299e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	695b      	ldr	r3, [r3, #20]
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685a      	ldr	r2, [r3, #4]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	697a      	ldr	r2, [r7, #20]
 80029d0:	621a      	str	r2, [r3, #32]
}
 80029d2:	bf00      	nop
 80029d4:	371c      	adds	r7, #28
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	40010000 	.word	0x40010000
 80029e4:	40010400 	.word	0x40010400

080029e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b087      	sub	sp, #28
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a1b      	ldr	r3, [r3, #32]
 8002a02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	69db      	ldr	r3, [r3, #28]
 8002a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f023 0303 	bic.w	r3, r3, #3
 8002a1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	021b      	lsls	r3, r3, #8
 8002a38:	697a      	ldr	r2, [r7, #20]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a21      	ldr	r2, [pc, #132]	; (8002ac8 <TIM_OC3_SetConfig+0xe0>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d003      	beq.n	8002a4e <TIM_OC3_SetConfig+0x66>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a20      	ldr	r2, [pc, #128]	; (8002acc <TIM_OC3_SetConfig+0xe4>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d10d      	bne.n	8002a6a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	021b      	lsls	r3, r3, #8
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a16      	ldr	r2, [pc, #88]	; (8002ac8 <TIM_OC3_SetConfig+0xe0>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d003      	beq.n	8002a7a <TIM_OC3_SetConfig+0x92>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a15      	ldr	r2, [pc, #84]	; (8002acc <TIM_OC3_SetConfig+0xe4>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d113      	bne.n	8002aa2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	011b      	lsls	r3, r3, #4
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	011b      	lsls	r3, r3, #4
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685a      	ldr	r2, [r3, #4]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	697a      	ldr	r2, [r7, #20]
 8002aba:	621a      	str	r2, [r3, #32]
}
 8002abc:	bf00      	nop
 8002abe:	371c      	adds	r7, #28
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr
 8002ac8:	40010000 	.word	0x40010000
 8002acc:	40010400 	.word	0x40010400

08002ad0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b087      	sub	sp, #28
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	69db      	ldr	r3, [r3, #28]
 8002af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002afe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	021b      	lsls	r3, r3, #8
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	031b      	lsls	r3, r3, #12
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4a12      	ldr	r2, [pc, #72]	; (8002b74 <TIM_OC4_SetConfig+0xa4>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d003      	beq.n	8002b38 <TIM_OC4_SetConfig+0x68>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4a11      	ldr	r2, [pc, #68]	; (8002b78 <TIM_OC4_SetConfig+0xa8>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d109      	bne.n	8002b4c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	695b      	ldr	r3, [r3, #20]
 8002b44:	019b      	lsls	r3, r3, #6
 8002b46:	697a      	ldr	r2, [r7, #20]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685a      	ldr	r2, [r3, #4]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	621a      	str	r2, [r3, #32]
}
 8002b66:	bf00      	nop
 8002b68:	371c      	adds	r7, #28
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	40010000 	.word	0x40010000
 8002b78:	40010400 	.word	0x40010400

08002b7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b087      	sub	sp, #28
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	f003 031f 	and.w	r3, r3, #31
 8002b8e:	2201      	movs	r2, #1
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6a1a      	ldr	r2, [r3, #32]
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	401a      	ands	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6a1a      	ldr	r2, [r3, #32]
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	f003 031f 	and.w	r3, r3, #31
 8002bae:	6879      	ldr	r1, [r7, #4]
 8002bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb4:	431a      	orrs	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	621a      	str	r2, [r3, #32]
}
 8002bba:	bf00      	nop
 8002bbc:	371c      	adds	r7, #28
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
	...

08002bc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d101      	bne.n	8002be0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bdc:	2302      	movs	r3, #2
 8002bde:	e05a      	b.n	8002c96 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2202      	movs	r2, #2
 8002bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a21      	ldr	r2, [pc, #132]	; (8002ca4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d022      	beq.n	8002c6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c2c:	d01d      	beq.n	8002c6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a1d      	ldr	r2, [pc, #116]	; (8002ca8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d018      	beq.n	8002c6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a1b      	ldr	r2, [pc, #108]	; (8002cac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d013      	beq.n	8002c6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a1a      	ldr	r2, [pc, #104]	; (8002cb0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d00e      	beq.n	8002c6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a18      	ldr	r2, [pc, #96]	; (8002cb4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d009      	beq.n	8002c6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a17      	ldr	r2, [pc, #92]	; (8002cb8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d004      	beq.n	8002c6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a15      	ldr	r2, [pc, #84]	; (8002cbc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d10c      	bne.n	8002c84 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	68ba      	ldr	r2, [r7, #8]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68ba      	ldr	r2, [r7, #8]
 8002c82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3714      	adds	r7, #20
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	40010000 	.word	0x40010000
 8002ca8:	40000400 	.word	0x40000400
 8002cac:	40000800 	.word	0x40000800
 8002cb0:	40000c00 	.word	0x40000c00
 8002cb4:	40010400 	.word	0x40010400
 8002cb8:	40014000 	.word	0x40014000
 8002cbc:	40001800 	.word	0x40001800

08002cc0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d101      	bne.n	8002cdc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002cd8:	2302      	movs	r3, #2
 8002cda:	e03d      	b.n	8002d58 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	695b      	ldr	r3, [r3, #20]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	69db      	ldr	r3, [r3, #28]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3714      	adds	r7, #20
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e03f      	b.n	8002df6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d106      	bne.n	8002d90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f7fd ffce 	bl	8000d2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2224      	movs	r2, #36	; 0x24
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68da      	ldr	r2, [r3, #12]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002da6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f000 f929 	bl	8003000 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	691a      	ldr	r2, [r3, #16]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002dbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	695a      	ldr	r2, [r3, #20]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002dcc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68da      	ldr	r2, [r3, #12]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ddc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2220      	movs	r2, #32
 8002de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2220      	movs	r2, #32
 8002df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b08a      	sub	sp, #40	; 0x28
 8002e02:	af02      	add	r7, sp, #8
 8002e04:	60f8      	str	r0, [r7, #12]
 8002e06:	60b9      	str	r1, [r7, #8]
 8002e08:	603b      	str	r3, [r7, #0]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b20      	cmp	r3, #32
 8002e1c:	d17c      	bne.n	8002f18 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d002      	beq.n	8002e2a <HAL_UART_Transmit+0x2c>
 8002e24:	88fb      	ldrh	r3, [r7, #6]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e075      	b.n	8002f1a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d101      	bne.n	8002e3c <HAL_UART_Transmit+0x3e>
 8002e38:	2302      	movs	r3, #2
 8002e3a:	e06e      	b.n	8002f1a <HAL_UART_Transmit+0x11c>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2221      	movs	r2, #33	; 0x21
 8002e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e52:	f7fe f92b 	bl	80010ac <HAL_GetTick>
 8002e56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	88fa      	ldrh	r2, [r7, #6]
 8002e5c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	88fa      	ldrh	r2, [r7, #6]
 8002e62:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e6c:	d108      	bne.n	8002e80 <HAL_UART_Transmit+0x82>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d104      	bne.n	8002e80 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002e76:	2300      	movs	r3, #0
 8002e78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	61bb      	str	r3, [r7, #24]
 8002e7e:	e003      	b.n	8002e88 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e84:	2300      	movs	r3, #0
 8002e86:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002e90:	e02a      	b.n	8002ee8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	9300      	str	r3, [sp, #0]
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	2180      	movs	r1, #128	; 0x80
 8002e9c:	68f8      	ldr	r0, [r7, #12]
 8002e9e:	f000 f840 	bl	8002f22 <UART_WaitOnFlagUntilTimeout>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e036      	b.n	8002f1a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d10b      	bne.n	8002eca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	881b      	ldrh	r3, [r3, #0]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ec0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	3302      	adds	r3, #2
 8002ec6:	61bb      	str	r3, [r7, #24]
 8002ec8:	e007      	b.n	8002eda <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	781a      	ldrb	r2, [r3, #0]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1cf      	bne.n	8002e92 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	9300      	str	r3, [sp, #0]
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	2140      	movs	r1, #64	; 0x40
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f000 f810 	bl	8002f22 <UART_WaitOnFlagUntilTimeout>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e006      	b.n	8002f1a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2220      	movs	r2, #32
 8002f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002f14:	2300      	movs	r3, #0
 8002f16:	e000      	b.n	8002f1a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002f18:	2302      	movs	r3, #2
  }
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3720      	adds	r7, #32
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b090      	sub	sp, #64	; 0x40
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	60f8      	str	r0, [r7, #12]
 8002f2a:	60b9      	str	r1, [r7, #8]
 8002f2c:	603b      	str	r3, [r7, #0]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f32:	e050      	b.n	8002fd6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f3a:	d04c      	beq.n	8002fd6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d007      	beq.n	8002f52 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f42:	f7fe f8b3 	bl	80010ac <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d241      	bcs.n	8002fd6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	330c      	adds	r3, #12
 8002f58:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5c:	e853 3f00 	ldrex	r3, [r3]
 8002f60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002f68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	330c      	adds	r3, #12
 8002f70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f72:	637a      	str	r2, [r7, #52]	; 0x34
 8002f74:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f7a:	e841 2300 	strex	r3, r2, [r1]
 8002f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1e5      	bne.n	8002f52 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	3314      	adds	r3, #20
 8002f8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	e853 3f00 	ldrex	r3, [r3]
 8002f94:	613b      	str	r3, [r7, #16]
   return(result);
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	f023 0301 	bic.w	r3, r3, #1
 8002f9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	3314      	adds	r3, #20
 8002fa4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fa6:	623a      	str	r2, [r7, #32]
 8002fa8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002faa:	69f9      	ldr	r1, [r7, #28]
 8002fac:	6a3a      	ldr	r2, [r7, #32]
 8002fae:	e841 2300 	strex	r3, r2, [r1]
 8002fb2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1e5      	bne.n	8002f86 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2220      	movs	r2, #32
 8002fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2220      	movs	r2, #32
 8002fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e00f      	b.n	8002ff6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	4013      	ands	r3, r2
 8002fe0:	68ba      	ldr	r2, [r7, #8]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	bf0c      	ite	eq
 8002fe6:	2301      	moveq	r3, #1
 8002fe8:	2300      	movne	r3, #0
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	461a      	mov	r2, r3
 8002fee:	79fb      	ldrb	r3, [r7, #7]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d09f      	beq.n	8002f34 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3740      	adds	r7, #64	; 0x40
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
	...

08003000 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003000:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003004:	b0c0      	sub	sp, #256	; 0x100
 8003006:	af00      	add	r7, sp, #0
 8003008:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800300c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800301c:	68d9      	ldr	r1, [r3, #12]
 800301e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	ea40 0301 	orr.w	r3, r0, r1
 8003028:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800302a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	431a      	orrs	r2, r3
 8003038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	431a      	orrs	r2, r3
 8003040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003044:	69db      	ldr	r3, [r3, #28]
 8003046:	4313      	orrs	r3, r2
 8003048:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800304c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003058:	f021 010c 	bic.w	r1, r1, #12
 800305c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003066:	430b      	orrs	r3, r1
 8003068:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800306a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800307a:	6999      	ldr	r1, [r3, #24]
 800307c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	ea40 0301 	orr.w	r3, r0, r1
 8003086:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	4b8f      	ldr	r3, [pc, #572]	; (80032cc <UART_SetConfig+0x2cc>)
 8003090:	429a      	cmp	r2, r3
 8003092:	d005      	beq.n	80030a0 <UART_SetConfig+0xa0>
 8003094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	4b8d      	ldr	r3, [pc, #564]	; (80032d0 <UART_SetConfig+0x2d0>)
 800309c:	429a      	cmp	r2, r3
 800309e:	d104      	bne.n	80030aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80030a0:	f7fe fc12 	bl	80018c8 <HAL_RCC_GetPCLK2Freq>
 80030a4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80030a8:	e003      	b.n	80030b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80030aa:	f7fe fbf9 	bl	80018a0 <HAL_RCC_GetPCLK1Freq>
 80030ae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030b6:	69db      	ldr	r3, [r3, #28]
 80030b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030bc:	f040 810c 	bne.w	80032d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030c4:	2200      	movs	r2, #0
 80030c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80030ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80030ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80030d2:	4622      	mov	r2, r4
 80030d4:	462b      	mov	r3, r5
 80030d6:	1891      	adds	r1, r2, r2
 80030d8:	65b9      	str	r1, [r7, #88]	; 0x58
 80030da:	415b      	adcs	r3, r3
 80030dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80030e2:	4621      	mov	r1, r4
 80030e4:	eb12 0801 	adds.w	r8, r2, r1
 80030e8:	4629      	mov	r1, r5
 80030ea:	eb43 0901 	adc.w	r9, r3, r1
 80030ee:	f04f 0200 	mov.w	r2, #0
 80030f2:	f04f 0300 	mov.w	r3, #0
 80030f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003102:	4690      	mov	r8, r2
 8003104:	4699      	mov	r9, r3
 8003106:	4623      	mov	r3, r4
 8003108:	eb18 0303 	adds.w	r3, r8, r3
 800310c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003110:	462b      	mov	r3, r5
 8003112:	eb49 0303 	adc.w	r3, r9, r3
 8003116:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800311a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003126:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800312a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800312e:	460b      	mov	r3, r1
 8003130:	18db      	adds	r3, r3, r3
 8003132:	653b      	str	r3, [r7, #80]	; 0x50
 8003134:	4613      	mov	r3, r2
 8003136:	eb42 0303 	adc.w	r3, r2, r3
 800313a:	657b      	str	r3, [r7, #84]	; 0x54
 800313c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003140:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003144:	f7fd f8b4 	bl	80002b0 <__aeabi_uldivmod>
 8003148:	4602      	mov	r2, r0
 800314a:	460b      	mov	r3, r1
 800314c:	4b61      	ldr	r3, [pc, #388]	; (80032d4 <UART_SetConfig+0x2d4>)
 800314e:	fba3 2302 	umull	r2, r3, r3, r2
 8003152:	095b      	lsrs	r3, r3, #5
 8003154:	011c      	lsls	r4, r3, #4
 8003156:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800315a:	2200      	movs	r2, #0
 800315c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003160:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003164:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003168:	4642      	mov	r2, r8
 800316a:	464b      	mov	r3, r9
 800316c:	1891      	adds	r1, r2, r2
 800316e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003170:	415b      	adcs	r3, r3
 8003172:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003174:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003178:	4641      	mov	r1, r8
 800317a:	eb12 0a01 	adds.w	sl, r2, r1
 800317e:	4649      	mov	r1, r9
 8003180:	eb43 0b01 	adc.w	fp, r3, r1
 8003184:	f04f 0200 	mov.w	r2, #0
 8003188:	f04f 0300 	mov.w	r3, #0
 800318c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003190:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003194:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003198:	4692      	mov	sl, r2
 800319a:	469b      	mov	fp, r3
 800319c:	4643      	mov	r3, r8
 800319e:	eb1a 0303 	adds.w	r3, sl, r3
 80031a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80031a6:	464b      	mov	r3, r9
 80031a8:	eb4b 0303 	adc.w	r3, fp, r3
 80031ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80031b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80031bc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80031c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80031c4:	460b      	mov	r3, r1
 80031c6:	18db      	adds	r3, r3, r3
 80031c8:	643b      	str	r3, [r7, #64]	; 0x40
 80031ca:	4613      	mov	r3, r2
 80031cc:	eb42 0303 	adc.w	r3, r2, r3
 80031d0:	647b      	str	r3, [r7, #68]	; 0x44
 80031d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80031d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80031da:	f7fd f869 	bl	80002b0 <__aeabi_uldivmod>
 80031de:	4602      	mov	r2, r0
 80031e0:	460b      	mov	r3, r1
 80031e2:	4611      	mov	r1, r2
 80031e4:	4b3b      	ldr	r3, [pc, #236]	; (80032d4 <UART_SetConfig+0x2d4>)
 80031e6:	fba3 2301 	umull	r2, r3, r3, r1
 80031ea:	095b      	lsrs	r3, r3, #5
 80031ec:	2264      	movs	r2, #100	; 0x64
 80031ee:	fb02 f303 	mul.w	r3, r2, r3
 80031f2:	1acb      	subs	r3, r1, r3
 80031f4:	00db      	lsls	r3, r3, #3
 80031f6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80031fa:	4b36      	ldr	r3, [pc, #216]	; (80032d4 <UART_SetConfig+0x2d4>)
 80031fc:	fba3 2302 	umull	r2, r3, r3, r2
 8003200:	095b      	lsrs	r3, r3, #5
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003208:	441c      	add	r4, r3
 800320a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800320e:	2200      	movs	r2, #0
 8003210:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003214:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003218:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800321c:	4642      	mov	r2, r8
 800321e:	464b      	mov	r3, r9
 8003220:	1891      	adds	r1, r2, r2
 8003222:	63b9      	str	r1, [r7, #56]	; 0x38
 8003224:	415b      	adcs	r3, r3
 8003226:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003228:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800322c:	4641      	mov	r1, r8
 800322e:	1851      	adds	r1, r2, r1
 8003230:	6339      	str	r1, [r7, #48]	; 0x30
 8003232:	4649      	mov	r1, r9
 8003234:	414b      	adcs	r3, r1
 8003236:	637b      	str	r3, [r7, #52]	; 0x34
 8003238:	f04f 0200 	mov.w	r2, #0
 800323c:	f04f 0300 	mov.w	r3, #0
 8003240:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003244:	4659      	mov	r1, fp
 8003246:	00cb      	lsls	r3, r1, #3
 8003248:	4651      	mov	r1, sl
 800324a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800324e:	4651      	mov	r1, sl
 8003250:	00ca      	lsls	r2, r1, #3
 8003252:	4610      	mov	r0, r2
 8003254:	4619      	mov	r1, r3
 8003256:	4603      	mov	r3, r0
 8003258:	4642      	mov	r2, r8
 800325a:	189b      	adds	r3, r3, r2
 800325c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003260:	464b      	mov	r3, r9
 8003262:	460a      	mov	r2, r1
 8003264:	eb42 0303 	adc.w	r3, r2, r3
 8003268:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800326c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003278:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800327c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003280:	460b      	mov	r3, r1
 8003282:	18db      	adds	r3, r3, r3
 8003284:	62bb      	str	r3, [r7, #40]	; 0x28
 8003286:	4613      	mov	r3, r2
 8003288:	eb42 0303 	adc.w	r3, r2, r3
 800328c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800328e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003292:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003296:	f7fd f80b 	bl	80002b0 <__aeabi_uldivmod>
 800329a:	4602      	mov	r2, r0
 800329c:	460b      	mov	r3, r1
 800329e:	4b0d      	ldr	r3, [pc, #52]	; (80032d4 <UART_SetConfig+0x2d4>)
 80032a0:	fba3 1302 	umull	r1, r3, r3, r2
 80032a4:	095b      	lsrs	r3, r3, #5
 80032a6:	2164      	movs	r1, #100	; 0x64
 80032a8:	fb01 f303 	mul.w	r3, r1, r3
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	00db      	lsls	r3, r3, #3
 80032b0:	3332      	adds	r3, #50	; 0x32
 80032b2:	4a08      	ldr	r2, [pc, #32]	; (80032d4 <UART_SetConfig+0x2d4>)
 80032b4:	fba2 2303 	umull	r2, r3, r2, r3
 80032b8:	095b      	lsrs	r3, r3, #5
 80032ba:	f003 0207 	and.w	r2, r3, #7
 80032be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4422      	add	r2, r4
 80032c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80032c8:	e106      	b.n	80034d8 <UART_SetConfig+0x4d8>
 80032ca:	bf00      	nop
 80032cc:	40011000 	.word	0x40011000
 80032d0:	40011400 	.word	0x40011400
 80032d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032dc:	2200      	movs	r2, #0
 80032de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80032e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80032e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80032ea:	4642      	mov	r2, r8
 80032ec:	464b      	mov	r3, r9
 80032ee:	1891      	adds	r1, r2, r2
 80032f0:	6239      	str	r1, [r7, #32]
 80032f2:	415b      	adcs	r3, r3
 80032f4:	627b      	str	r3, [r7, #36]	; 0x24
 80032f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80032fa:	4641      	mov	r1, r8
 80032fc:	1854      	adds	r4, r2, r1
 80032fe:	4649      	mov	r1, r9
 8003300:	eb43 0501 	adc.w	r5, r3, r1
 8003304:	f04f 0200 	mov.w	r2, #0
 8003308:	f04f 0300 	mov.w	r3, #0
 800330c:	00eb      	lsls	r3, r5, #3
 800330e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003312:	00e2      	lsls	r2, r4, #3
 8003314:	4614      	mov	r4, r2
 8003316:	461d      	mov	r5, r3
 8003318:	4643      	mov	r3, r8
 800331a:	18e3      	adds	r3, r4, r3
 800331c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003320:	464b      	mov	r3, r9
 8003322:	eb45 0303 	adc.w	r3, r5, r3
 8003326:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800332a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003336:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800333a:	f04f 0200 	mov.w	r2, #0
 800333e:	f04f 0300 	mov.w	r3, #0
 8003342:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003346:	4629      	mov	r1, r5
 8003348:	008b      	lsls	r3, r1, #2
 800334a:	4621      	mov	r1, r4
 800334c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003350:	4621      	mov	r1, r4
 8003352:	008a      	lsls	r2, r1, #2
 8003354:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003358:	f7fc ffaa 	bl	80002b0 <__aeabi_uldivmod>
 800335c:	4602      	mov	r2, r0
 800335e:	460b      	mov	r3, r1
 8003360:	4b60      	ldr	r3, [pc, #384]	; (80034e4 <UART_SetConfig+0x4e4>)
 8003362:	fba3 2302 	umull	r2, r3, r3, r2
 8003366:	095b      	lsrs	r3, r3, #5
 8003368:	011c      	lsls	r4, r3, #4
 800336a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800336e:	2200      	movs	r2, #0
 8003370:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003374:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003378:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800337c:	4642      	mov	r2, r8
 800337e:	464b      	mov	r3, r9
 8003380:	1891      	adds	r1, r2, r2
 8003382:	61b9      	str	r1, [r7, #24]
 8003384:	415b      	adcs	r3, r3
 8003386:	61fb      	str	r3, [r7, #28]
 8003388:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800338c:	4641      	mov	r1, r8
 800338e:	1851      	adds	r1, r2, r1
 8003390:	6139      	str	r1, [r7, #16]
 8003392:	4649      	mov	r1, r9
 8003394:	414b      	adcs	r3, r1
 8003396:	617b      	str	r3, [r7, #20]
 8003398:	f04f 0200 	mov.w	r2, #0
 800339c:	f04f 0300 	mov.w	r3, #0
 80033a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033a4:	4659      	mov	r1, fp
 80033a6:	00cb      	lsls	r3, r1, #3
 80033a8:	4651      	mov	r1, sl
 80033aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033ae:	4651      	mov	r1, sl
 80033b0:	00ca      	lsls	r2, r1, #3
 80033b2:	4610      	mov	r0, r2
 80033b4:	4619      	mov	r1, r3
 80033b6:	4603      	mov	r3, r0
 80033b8:	4642      	mov	r2, r8
 80033ba:	189b      	adds	r3, r3, r2
 80033bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80033c0:	464b      	mov	r3, r9
 80033c2:	460a      	mov	r2, r1
 80033c4:	eb42 0303 	adc.w	r3, r2, r3
 80033c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80033cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80033d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80033d8:	f04f 0200 	mov.w	r2, #0
 80033dc:	f04f 0300 	mov.w	r3, #0
 80033e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80033e4:	4649      	mov	r1, r9
 80033e6:	008b      	lsls	r3, r1, #2
 80033e8:	4641      	mov	r1, r8
 80033ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033ee:	4641      	mov	r1, r8
 80033f0:	008a      	lsls	r2, r1, #2
 80033f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80033f6:	f7fc ff5b 	bl	80002b0 <__aeabi_uldivmod>
 80033fa:	4602      	mov	r2, r0
 80033fc:	460b      	mov	r3, r1
 80033fe:	4611      	mov	r1, r2
 8003400:	4b38      	ldr	r3, [pc, #224]	; (80034e4 <UART_SetConfig+0x4e4>)
 8003402:	fba3 2301 	umull	r2, r3, r3, r1
 8003406:	095b      	lsrs	r3, r3, #5
 8003408:	2264      	movs	r2, #100	; 0x64
 800340a:	fb02 f303 	mul.w	r3, r2, r3
 800340e:	1acb      	subs	r3, r1, r3
 8003410:	011b      	lsls	r3, r3, #4
 8003412:	3332      	adds	r3, #50	; 0x32
 8003414:	4a33      	ldr	r2, [pc, #204]	; (80034e4 <UART_SetConfig+0x4e4>)
 8003416:	fba2 2303 	umull	r2, r3, r2, r3
 800341a:	095b      	lsrs	r3, r3, #5
 800341c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003420:	441c      	add	r4, r3
 8003422:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003426:	2200      	movs	r2, #0
 8003428:	673b      	str	r3, [r7, #112]	; 0x70
 800342a:	677a      	str	r2, [r7, #116]	; 0x74
 800342c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003430:	4642      	mov	r2, r8
 8003432:	464b      	mov	r3, r9
 8003434:	1891      	adds	r1, r2, r2
 8003436:	60b9      	str	r1, [r7, #8]
 8003438:	415b      	adcs	r3, r3
 800343a:	60fb      	str	r3, [r7, #12]
 800343c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003440:	4641      	mov	r1, r8
 8003442:	1851      	adds	r1, r2, r1
 8003444:	6039      	str	r1, [r7, #0]
 8003446:	4649      	mov	r1, r9
 8003448:	414b      	adcs	r3, r1
 800344a:	607b      	str	r3, [r7, #4]
 800344c:	f04f 0200 	mov.w	r2, #0
 8003450:	f04f 0300 	mov.w	r3, #0
 8003454:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003458:	4659      	mov	r1, fp
 800345a:	00cb      	lsls	r3, r1, #3
 800345c:	4651      	mov	r1, sl
 800345e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003462:	4651      	mov	r1, sl
 8003464:	00ca      	lsls	r2, r1, #3
 8003466:	4610      	mov	r0, r2
 8003468:	4619      	mov	r1, r3
 800346a:	4603      	mov	r3, r0
 800346c:	4642      	mov	r2, r8
 800346e:	189b      	adds	r3, r3, r2
 8003470:	66bb      	str	r3, [r7, #104]	; 0x68
 8003472:	464b      	mov	r3, r9
 8003474:	460a      	mov	r2, r1
 8003476:	eb42 0303 	adc.w	r3, r2, r3
 800347a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800347c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	663b      	str	r3, [r7, #96]	; 0x60
 8003486:	667a      	str	r2, [r7, #100]	; 0x64
 8003488:	f04f 0200 	mov.w	r2, #0
 800348c:	f04f 0300 	mov.w	r3, #0
 8003490:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003494:	4649      	mov	r1, r9
 8003496:	008b      	lsls	r3, r1, #2
 8003498:	4641      	mov	r1, r8
 800349a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800349e:	4641      	mov	r1, r8
 80034a0:	008a      	lsls	r2, r1, #2
 80034a2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80034a6:	f7fc ff03 	bl	80002b0 <__aeabi_uldivmod>
 80034aa:	4602      	mov	r2, r0
 80034ac:	460b      	mov	r3, r1
 80034ae:	4b0d      	ldr	r3, [pc, #52]	; (80034e4 <UART_SetConfig+0x4e4>)
 80034b0:	fba3 1302 	umull	r1, r3, r3, r2
 80034b4:	095b      	lsrs	r3, r3, #5
 80034b6:	2164      	movs	r1, #100	; 0x64
 80034b8:	fb01 f303 	mul.w	r3, r1, r3
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	011b      	lsls	r3, r3, #4
 80034c0:	3332      	adds	r3, #50	; 0x32
 80034c2:	4a08      	ldr	r2, [pc, #32]	; (80034e4 <UART_SetConfig+0x4e4>)
 80034c4:	fba2 2303 	umull	r2, r3, r2, r3
 80034c8:	095b      	lsrs	r3, r3, #5
 80034ca:	f003 020f 	and.w	r2, r3, #15
 80034ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4422      	add	r2, r4
 80034d6:	609a      	str	r2, [r3, #8]
}
 80034d8:	bf00      	nop
 80034da:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80034de:	46bd      	mov	sp, r7
 80034e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034e4:	51eb851f 	.word	0x51eb851f

080034e8 <std>:
 80034e8:	2300      	movs	r3, #0
 80034ea:	b510      	push	{r4, lr}
 80034ec:	4604      	mov	r4, r0
 80034ee:	e9c0 3300 	strd	r3, r3, [r0]
 80034f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80034f6:	6083      	str	r3, [r0, #8]
 80034f8:	8181      	strh	r1, [r0, #12]
 80034fa:	6643      	str	r3, [r0, #100]	; 0x64
 80034fc:	81c2      	strh	r2, [r0, #14]
 80034fe:	6183      	str	r3, [r0, #24]
 8003500:	4619      	mov	r1, r3
 8003502:	2208      	movs	r2, #8
 8003504:	305c      	adds	r0, #92	; 0x5c
 8003506:	f000 f9e5 	bl	80038d4 <memset>
 800350a:	4b05      	ldr	r3, [pc, #20]	; (8003520 <std+0x38>)
 800350c:	6263      	str	r3, [r4, #36]	; 0x24
 800350e:	4b05      	ldr	r3, [pc, #20]	; (8003524 <std+0x3c>)
 8003510:	62a3      	str	r3, [r4, #40]	; 0x28
 8003512:	4b05      	ldr	r3, [pc, #20]	; (8003528 <std+0x40>)
 8003514:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003516:	4b05      	ldr	r3, [pc, #20]	; (800352c <std+0x44>)
 8003518:	6224      	str	r4, [r4, #32]
 800351a:	6323      	str	r3, [r4, #48]	; 0x30
 800351c:	bd10      	pop	{r4, pc}
 800351e:	bf00      	nop
 8003520:	08003725 	.word	0x08003725
 8003524:	08003747 	.word	0x08003747
 8003528:	0800377f 	.word	0x0800377f
 800352c:	080037a3 	.word	0x080037a3

08003530 <stdio_exit_handler>:
 8003530:	4a02      	ldr	r2, [pc, #8]	; (800353c <stdio_exit_handler+0xc>)
 8003532:	4903      	ldr	r1, [pc, #12]	; (8003540 <stdio_exit_handler+0x10>)
 8003534:	4803      	ldr	r0, [pc, #12]	; (8003544 <stdio_exit_handler+0x14>)
 8003536:	f000 b869 	b.w	800360c <_fwalk_sglue>
 800353a:	bf00      	nop
 800353c:	2000000c 	.word	0x2000000c
 8003540:	0800426d 	.word	0x0800426d
 8003544:	20000018 	.word	0x20000018

08003548 <cleanup_stdio>:
 8003548:	6841      	ldr	r1, [r0, #4]
 800354a:	4b0c      	ldr	r3, [pc, #48]	; (800357c <cleanup_stdio+0x34>)
 800354c:	4299      	cmp	r1, r3
 800354e:	b510      	push	{r4, lr}
 8003550:	4604      	mov	r4, r0
 8003552:	d001      	beq.n	8003558 <cleanup_stdio+0x10>
 8003554:	f000 fe8a 	bl	800426c <_fflush_r>
 8003558:	68a1      	ldr	r1, [r4, #8]
 800355a:	4b09      	ldr	r3, [pc, #36]	; (8003580 <cleanup_stdio+0x38>)
 800355c:	4299      	cmp	r1, r3
 800355e:	d002      	beq.n	8003566 <cleanup_stdio+0x1e>
 8003560:	4620      	mov	r0, r4
 8003562:	f000 fe83 	bl	800426c <_fflush_r>
 8003566:	68e1      	ldr	r1, [r4, #12]
 8003568:	4b06      	ldr	r3, [pc, #24]	; (8003584 <cleanup_stdio+0x3c>)
 800356a:	4299      	cmp	r1, r3
 800356c:	d004      	beq.n	8003578 <cleanup_stdio+0x30>
 800356e:	4620      	mov	r0, r4
 8003570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003574:	f000 be7a 	b.w	800426c <_fflush_r>
 8003578:	bd10      	pop	{r4, pc}
 800357a:	bf00      	nop
 800357c:	20000168 	.word	0x20000168
 8003580:	200001d0 	.word	0x200001d0
 8003584:	20000238 	.word	0x20000238

08003588 <global_stdio_init.part.0>:
 8003588:	b510      	push	{r4, lr}
 800358a:	4b0b      	ldr	r3, [pc, #44]	; (80035b8 <global_stdio_init.part.0+0x30>)
 800358c:	4c0b      	ldr	r4, [pc, #44]	; (80035bc <global_stdio_init.part.0+0x34>)
 800358e:	4a0c      	ldr	r2, [pc, #48]	; (80035c0 <global_stdio_init.part.0+0x38>)
 8003590:	601a      	str	r2, [r3, #0]
 8003592:	4620      	mov	r0, r4
 8003594:	2200      	movs	r2, #0
 8003596:	2104      	movs	r1, #4
 8003598:	f7ff ffa6 	bl	80034e8 <std>
 800359c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80035a0:	2201      	movs	r2, #1
 80035a2:	2109      	movs	r1, #9
 80035a4:	f7ff ffa0 	bl	80034e8 <std>
 80035a8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80035ac:	2202      	movs	r2, #2
 80035ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035b2:	2112      	movs	r1, #18
 80035b4:	f7ff bf98 	b.w	80034e8 <std>
 80035b8:	200002a0 	.word	0x200002a0
 80035bc:	20000168 	.word	0x20000168
 80035c0:	08003531 	.word	0x08003531

080035c4 <__sfp_lock_acquire>:
 80035c4:	4801      	ldr	r0, [pc, #4]	; (80035cc <__sfp_lock_acquire+0x8>)
 80035c6:	f000 b9fd 	b.w	80039c4 <__retarget_lock_acquire_recursive>
 80035ca:	bf00      	nop
 80035cc:	200002a9 	.word	0x200002a9

080035d0 <__sfp_lock_release>:
 80035d0:	4801      	ldr	r0, [pc, #4]	; (80035d8 <__sfp_lock_release+0x8>)
 80035d2:	f000 b9f8 	b.w	80039c6 <__retarget_lock_release_recursive>
 80035d6:	bf00      	nop
 80035d8:	200002a9 	.word	0x200002a9

080035dc <__sinit>:
 80035dc:	b510      	push	{r4, lr}
 80035de:	4604      	mov	r4, r0
 80035e0:	f7ff fff0 	bl	80035c4 <__sfp_lock_acquire>
 80035e4:	6a23      	ldr	r3, [r4, #32]
 80035e6:	b11b      	cbz	r3, 80035f0 <__sinit+0x14>
 80035e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035ec:	f7ff bff0 	b.w	80035d0 <__sfp_lock_release>
 80035f0:	4b04      	ldr	r3, [pc, #16]	; (8003604 <__sinit+0x28>)
 80035f2:	6223      	str	r3, [r4, #32]
 80035f4:	4b04      	ldr	r3, [pc, #16]	; (8003608 <__sinit+0x2c>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d1f5      	bne.n	80035e8 <__sinit+0xc>
 80035fc:	f7ff ffc4 	bl	8003588 <global_stdio_init.part.0>
 8003600:	e7f2      	b.n	80035e8 <__sinit+0xc>
 8003602:	bf00      	nop
 8003604:	08003549 	.word	0x08003549
 8003608:	200002a0 	.word	0x200002a0

0800360c <_fwalk_sglue>:
 800360c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003610:	4607      	mov	r7, r0
 8003612:	4688      	mov	r8, r1
 8003614:	4614      	mov	r4, r2
 8003616:	2600      	movs	r6, #0
 8003618:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800361c:	f1b9 0901 	subs.w	r9, r9, #1
 8003620:	d505      	bpl.n	800362e <_fwalk_sglue+0x22>
 8003622:	6824      	ldr	r4, [r4, #0]
 8003624:	2c00      	cmp	r4, #0
 8003626:	d1f7      	bne.n	8003618 <_fwalk_sglue+0xc>
 8003628:	4630      	mov	r0, r6
 800362a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800362e:	89ab      	ldrh	r3, [r5, #12]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d907      	bls.n	8003644 <_fwalk_sglue+0x38>
 8003634:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003638:	3301      	adds	r3, #1
 800363a:	d003      	beq.n	8003644 <_fwalk_sglue+0x38>
 800363c:	4629      	mov	r1, r5
 800363e:	4638      	mov	r0, r7
 8003640:	47c0      	blx	r8
 8003642:	4306      	orrs	r6, r0
 8003644:	3568      	adds	r5, #104	; 0x68
 8003646:	e7e9      	b.n	800361c <_fwalk_sglue+0x10>

08003648 <iprintf>:
 8003648:	b40f      	push	{r0, r1, r2, r3}
 800364a:	b507      	push	{r0, r1, r2, lr}
 800364c:	4906      	ldr	r1, [pc, #24]	; (8003668 <iprintf+0x20>)
 800364e:	ab04      	add	r3, sp, #16
 8003650:	6808      	ldr	r0, [r1, #0]
 8003652:	f853 2b04 	ldr.w	r2, [r3], #4
 8003656:	6881      	ldr	r1, [r0, #8]
 8003658:	9301      	str	r3, [sp, #4]
 800365a:	f000 fad7 	bl	8003c0c <_vfiprintf_r>
 800365e:	b003      	add	sp, #12
 8003660:	f85d eb04 	ldr.w	lr, [sp], #4
 8003664:	b004      	add	sp, #16
 8003666:	4770      	bx	lr
 8003668:	20000064 	.word	0x20000064

0800366c <_puts_r>:
 800366c:	6a03      	ldr	r3, [r0, #32]
 800366e:	b570      	push	{r4, r5, r6, lr}
 8003670:	6884      	ldr	r4, [r0, #8]
 8003672:	4605      	mov	r5, r0
 8003674:	460e      	mov	r6, r1
 8003676:	b90b      	cbnz	r3, 800367c <_puts_r+0x10>
 8003678:	f7ff ffb0 	bl	80035dc <__sinit>
 800367c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800367e:	07db      	lsls	r3, r3, #31
 8003680:	d405      	bmi.n	800368e <_puts_r+0x22>
 8003682:	89a3      	ldrh	r3, [r4, #12]
 8003684:	0598      	lsls	r0, r3, #22
 8003686:	d402      	bmi.n	800368e <_puts_r+0x22>
 8003688:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800368a:	f000 f99b 	bl	80039c4 <__retarget_lock_acquire_recursive>
 800368e:	89a3      	ldrh	r3, [r4, #12]
 8003690:	0719      	lsls	r1, r3, #28
 8003692:	d513      	bpl.n	80036bc <_puts_r+0x50>
 8003694:	6923      	ldr	r3, [r4, #16]
 8003696:	b18b      	cbz	r3, 80036bc <_puts_r+0x50>
 8003698:	3e01      	subs	r6, #1
 800369a:	68a3      	ldr	r3, [r4, #8]
 800369c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80036a0:	3b01      	subs	r3, #1
 80036a2:	60a3      	str	r3, [r4, #8]
 80036a4:	b9e9      	cbnz	r1, 80036e2 <_puts_r+0x76>
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	da2e      	bge.n	8003708 <_puts_r+0x9c>
 80036aa:	4622      	mov	r2, r4
 80036ac:	210a      	movs	r1, #10
 80036ae:	4628      	mov	r0, r5
 80036b0:	f000 f87b 	bl	80037aa <__swbuf_r>
 80036b4:	3001      	adds	r0, #1
 80036b6:	d007      	beq.n	80036c8 <_puts_r+0x5c>
 80036b8:	250a      	movs	r5, #10
 80036ba:	e007      	b.n	80036cc <_puts_r+0x60>
 80036bc:	4621      	mov	r1, r4
 80036be:	4628      	mov	r0, r5
 80036c0:	f000 f8b0 	bl	8003824 <__swsetup_r>
 80036c4:	2800      	cmp	r0, #0
 80036c6:	d0e7      	beq.n	8003698 <_puts_r+0x2c>
 80036c8:	f04f 35ff 	mov.w	r5, #4294967295
 80036cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80036ce:	07da      	lsls	r2, r3, #31
 80036d0:	d405      	bmi.n	80036de <_puts_r+0x72>
 80036d2:	89a3      	ldrh	r3, [r4, #12]
 80036d4:	059b      	lsls	r3, r3, #22
 80036d6:	d402      	bmi.n	80036de <_puts_r+0x72>
 80036d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036da:	f000 f974 	bl	80039c6 <__retarget_lock_release_recursive>
 80036de:	4628      	mov	r0, r5
 80036e0:	bd70      	pop	{r4, r5, r6, pc}
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	da04      	bge.n	80036f0 <_puts_r+0x84>
 80036e6:	69a2      	ldr	r2, [r4, #24]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	dc06      	bgt.n	80036fa <_puts_r+0x8e>
 80036ec:	290a      	cmp	r1, #10
 80036ee:	d004      	beq.n	80036fa <_puts_r+0x8e>
 80036f0:	6823      	ldr	r3, [r4, #0]
 80036f2:	1c5a      	adds	r2, r3, #1
 80036f4:	6022      	str	r2, [r4, #0]
 80036f6:	7019      	strb	r1, [r3, #0]
 80036f8:	e7cf      	b.n	800369a <_puts_r+0x2e>
 80036fa:	4622      	mov	r2, r4
 80036fc:	4628      	mov	r0, r5
 80036fe:	f000 f854 	bl	80037aa <__swbuf_r>
 8003702:	3001      	adds	r0, #1
 8003704:	d1c9      	bne.n	800369a <_puts_r+0x2e>
 8003706:	e7df      	b.n	80036c8 <_puts_r+0x5c>
 8003708:	6823      	ldr	r3, [r4, #0]
 800370a:	250a      	movs	r5, #10
 800370c:	1c5a      	adds	r2, r3, #1
 800370e:	6022      	str	r2, [r4, #0]
 8003710:	701d      	strb	r5, [r3, #0]
 8003712:	e7db      	b.n	80036cc <_puts_r+0x60>

08003714 <puts>:
 8003714:	4b02      	ldr	r3, [pc, #8]	; (8003720 <puts+0xc>)
 8003716:	4601      	mov	r1, r0
 8003718:	6818      	ldr	r0, [r3, #0]
 800371a:	f7ff bfa7 	b.w	800366c <_puts_r>
 800371e:	bf00      	nop
 8003720:	20000064 	.word	0x20000064

08003724 <__sread>:
 8003724:	b510      	push	{r4, lr}
 8003726:	460c      	mov	r4, r1
 8003728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800372c:	f000 f8fc 	bl	8003928 <_read_r>
 8003730:	2800      	cmp	r0, #0
 8003732:	bfab      	itete	ge
 8003734:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003736:	89a3      	ldrhlt	r3, [r4, #12]
 8003738:	181b      	addge	r3, r3, r0
 800373a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800373e:	bfac      	ite	ge
 8003740:	6563      	strge	r3, [r4, #84]	; 0x54
 8003742:	81a3      	strhlt	r3, [r4, #12]
 8003744:	bd10      	pop	{r4, pc}

08003746 <__swrite>:
 8003746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800374a:	461f      	mov	r7, r3
 800374c:	898b      	ldrh	r3, [r1, #12]
 800374e:	05db      	lsls	r3, r3, #23
 8003750:	4605      	mov	r5, r0
 8003752:	460c      	mov	r4, r1
 8003754:	4616      	mov	r6, r2
 8003756:	d505      	bpl.n	8003764 <__swrite+0x1e>
 8003758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800375c:	2302      	movs	r3, #2
 800375e:	2200      	movs	r2, #0
 8003760:	f000 f8d0 	bl	8003904 <_lseek_r>
 8003764:	89a3      	ldrh	r3, [r4, #12]
 8003766:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800376a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800376e:	81a3      	strh	r3, [r4, #12]
 8003770:	4632      	mov	r2, r6
 8003772:	463b      	mov	r3, r7
 8003774:	4628      	mov	r0, r5
 8003776:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800377a:	f000 b8e7 	b.w	800394c <_write_r>

0800377e <__sseek>:
 800377e:	b510      	push	{r4, lr}
 8003780:	460c      	mov	r4, r1
 8003782:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003786:	f000 f8bd 	bl	8003904 <_lseek_r>
 800378a:	1c43      	adds	r3, r0, #1
 800378c:	89a3      	ldrh	r3, [r4, #12]
 800378e:	bf15      	itete	ne
 8003790:	6560      	strne	r0, [r4, #84]	; 0x54
 8003792:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003796:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800379a:	81a3      	strheq	r3, [r4, #12]
 800379c:	bf18      	it	ne
 800379e:	81a3      	strhne	r3, [r4, #12]
 80037a0:	bd10      	pop	{r4, pc}

080037a2 <__sclose>:
 80037a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037a6:	f000 b89d 	b.w	80038e4 <_close_r>

080037aa <__swbuf_r>:
 80037aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ac:	460e      	mov	r6, r1
 80037ae:	4614      	mov	r4, r2
 80037b0:	4605      	mov	r5, r0
 80037b2:	b118      	cbz	r0, 80037bc <__swbuf_r+0x12>
 80037b4:	6a03      	ldr	r3, [r0, #32]
 80037b6:	b90b      	cbnz	r3, 80037bc <__swbuf_r+0x12>
 80037b8:	f7ff ff10 	bl	80035dc <__sinit>
 80037bc:	69a3      	ldr	r3, [r4, #24]
 80037be:	60a3      	str	r3, [r4, #8]
 80037c0:	89a3      	ldrh	r3, [r4, #12]
 80037c2:	071a      	lsls	r2, r3, #28
 80037c4:	d525      	bpl.n	8003812 <__swbuf_r+0x68>
 80037c6:	6923      	ldr	r3, [r4, #16]
 80037c8:	b31b      	cbz	r3, 8003812 <__swbuf_r+0x68>
 80037ca:	6823      	ldr	r3, [r4, #0]
 80037cc:	6922      	ldr	r2, [r4, #16]
 80037ce:	1a98      	subs	r0, r3, r2
 80037d0:	6963      	ldr	r3, [r4, #20]
 80037d2:	b2f6      	uxtb	r6, r6
 80037d4:	4283      	cmp	r3, r0
 80037d6:	4637      	mov	r7, r6
 80037d8:	dc04      	bgt.n	80037e4 <__swbuf_r+0x3a>
 80037da:	4621      	mov	r1, r4
 80037dc:	4628      	mov	r0, r5
 80037de:	f000 fd45 	bl	800426c <_fflush_r>
 80037e2:	b9e0      	cbnz	r0, 800381e <__swbuf_r+0x74>
 80037e4:	68a3      	ldr	r3, [r4, #8]
 80037e6:	3b01      	subs	r3, #1
 80037e8:	60a3      	str	r3, [r4, #8]
 80037ea:	6823      	ldr	r3, [r4, #0]
 80037ec:	1c5a      	adds	r2, r3, #1
 80037ee:	6022      	str	r2, [r4, #0]
 80037f0:	701e      	strb	r6, [r3, #0]
 80037f2:	6962      	ldr	r2, [r4, #20]
 80037f4:	1c43      	adds	r3, r0, #1
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d004      	beq.n	8003804 <__swbuf_r+0x5a>
 80037fa:	89a3      	ldrh	r3, [r4, #12]
 80037fc:	07db      	lsls	r3, r3, #31
 80037fe:	d506      	bpl.n	800380e <__swbuf_r+0x64>
 8003800:	2e0a      	cmp	r6, #10
 8003802:	d104      	bne.n	800380e <__swbuf_r+0x64>
 8003804:	4621      	mov	r1, r4
 8003806:	4628      	mov	r0, r5
 8003808:	f000 fd30 	bl	800426c <_fflush_r>
 800380c:	b938      	cbnz	r0, 800381e <__swbuf_r+0x74>
 800380e:	4638      	mov	r0, r7
 8003810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003812:	4621      	mov	r1, r4
 8003814:	4628      	mov	r0, r5
 8003816:	f000 f805 	bl	8003824 <__swsetup_r>
 800381a:	2800      	cmp	r0, #0
 800381c:	d0d5      	beq.n	80037ca <__swbuf_r+0x20>
 800381e:	f04f 37ff 	mov.w	r7, #4294967295
 8003822:	e7f4      	b.n	800380e <__swbuf_r+0x64>

08003824 <__swsetup_r>:
 8003824:	b538      	push	{r3, r4, r5, lr}
 8003826:	4b2a      	ldr	r3, [pc, #168]	; (80038d0 <__swsetup_r+0xac>)
 8003828:	4605      	mov	r5, r0
 800382a:	6818      	ldr	r0, [r3, #0]
 800382c:	460c      	mov	r4, r1
 800382e:	b118      	cbz	r0, 8003838 <__swsetup_r+0x14>
 8003830:	6a03      	ldr	r3, [r0, #32]
 8003832:	b90b      	cbnz	r3, 8003838 <__swsetup_r+0x14>
 8003834:	f7ff fed2 	bl	80035dc <__sinit>
 8003838:	89a3      	ldrh	r3, [r4, #12]
 800383a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800383e:	0718      	lsls	r0, r3, #28
 8003840:	d422      	bmi.n	8003888 <__swsetup_r+0x64>
 8003842:	06d9      	lsls	r1, r3, #27
 8003844:	d407      	bmi.n	8003856 <__swsetup_r+0x32>
 8003846:	2309      	movs	r3, #9
 8003848:	602b      	str	r3, [r5, #0]
 800384a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800384e:	81a3      	strh	r3, [r4, #12]
 8003850:	f04f 30ff 	mov.w	r0, #4294967295
 8003854:	e034      	b.n	80038c0 <__swsetup_r+0x9c>
 8003856:	0758      	lsls	r0, r3, #29
 8003858:	d512      	bpl.n	8003880 <__swsetup_r+0x5c>
 800385a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800385c:	b141      	cbz	r1, 8003870 <__swsetup_r+0x4c>
 800385e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003862:	4299      	cmp	r1, r3
 8003864:	d002      	beq.n	800386c <__swsetup_r+0x48>
 8003866:	4628      	mov	r0, r5
 8003868:	f000 f8ae 	bl	80039c8 <_free_r>
 800386c:	2300      	movs	r3, #0
 800386e:	6363      	str	r3, [r4, #52]	; 0x34
 8003870:	89a3      	ldrh	r3, [r4, #12]
 8003872:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003876:	81a3      	strh	r3, [r4, #12]
 8003878:	2300      	movs	r3, #0
 800387a:	6063      	str	r3, [r4, #4]
 800387c:	6923      	ldr	r3, [r4, #16]
 800387e:	6023      	str	r3, [r4, #0]
 8003880:	89a3      	ldrh	r3, [r4, #12]
 8003882:	f043 0308 	orr.w	r3, r3, #8
 8003886:	81a3      	strh	r3, [r4, #12]
 8003888:	6923      	ldr	r3, [r4, #16]
 800388a:	b94b      	cbnz	r3, 80038a0 <__swsetup_r+0x7c>
 800388c:	89a3      	ldrh	r3, [r4, #12]
 800388e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003892:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003896:	d003      	beq.n	80038a0 <__swsetup_r+0x7c>
 8003898:	4621      	mov	r1, r4
 800389a:	4628      	mov	r0, r5
 800389c:	f000 fd34 	bl	8004308 <__smakebuf_r>
 80038a0:	89a0      	ldrh	r0, [r4, #12]
 80038a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80038a6:	f010 0301 	ands.w	r3, r0, #1
 80038aa:	d00a      	beq.n	80038c2 <__swsetup_r+0x9e>
 80038ac:	2300      	movs	r3, #0
 80038ae:	60a3      	str	r3, [r4, #8]
 80038b0:	6963      	ldr	r3, [r4, #20]
 80038b2:	425b      	negs	r3, r3
 80038b4:	61a3      	str	r3, [r4, #24]
 80038b6:	6923      	ldr	r3, [r4, #16]
 80038b8:	b943      	cbnz	r3, 80038cc <__swsetup_r+0xa8>
 80038ba:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80038be:	d1c4      	bne.n	800384a <__swsetup_r+0x26>
 80038c0:	bd38      	pop	{r3, r4, r5, pc}
 80038c2:	0781      	lsls	r1, r0, #30
 80038c4:	bf58      	it	pl
 80038c6:	6963      	ldrpl	r3, [r4, #20]
 80038c8:	60a3      	str	r3, [r4, #8]
 80038ca:	e7f4      	b.n	80038b6 <__swsetup_r+0x92>
 80038cc:	2000      	movs	r0, #0
 80038ce:	e7f7      	b.n	80038c0 <__swsetup_r+0x9c>
 80038d0:	20000064 	.word	0x20000064

080038d4 <memset>:
 80038d4:	4402      	add	r2, r0
 80038d6:	4603      	mov	r3, r0
 80038d8:	4293      	cmp	r3, r2
 80038da:	d100      	bne.n	80038de <memset+0xa>
 80038dc:	4770      	bx	lr
 80038de:	f803 1b01 	strb.w	r1, [r3], #1
 80038e2:	e7f9      	b.n	80038d8 <memset+0x4>

080038e4 <_close_r>:
 80038e4:	b538      	push	{r3, r4, r5, lr}
 80038e6:	4d06      	ldr	r5, [pc, #24]	; (8003900 <_close_r+0x1c>)
 80038e8:	2300      	movs	r3, #0
 80038ea:	4604      	mov	r4, r0
 80038ec:	4608      	mov	r0, r1
 80038ee:	602b      	str	r3, [r5, #0]
 80038f0:	f7fd facf 	bl	8000e92 <_close>
 80038f4:	1c43      	adds	r3, r0, #1
 80038f6:	d102      	bne.n	80038fe <_close_r+0x1a>
 80038f8:	682b      	ldr	r3, [r5, #0]
 80038fa:	b103      	cbz	r3, 80038fe <_close_r+0x1a>
 80038fc:	6023      	str	r3, [r4, #0]
 80038fe:	bd38      	pop	{r3, r4, r5, pc}
 8003900:	200002a4 	.word	0x200002a4

08003904 <_lseek_r>:
 8003904:	b538      	push	{r3, r4, r5, lr}
 8003906:	4d07      	ldr	r5, [pc, #28]	; (8003924 <_lseek_r+0x20>)
 8003908:	4604      	mov	r4, r0
 800390a:	4608      	mov	r0, r1
 800390c:	4611      	mov	r1, r2
 800390e:	2200      	movs	r2, #0
 8003910:	602a      	str	r2, [r5, #0]
 8003912:	461a      	mov	r2, r3
 8003914:	f7fd fae4 	bl	8000ee0 <_lseek>
 8003918:	1c43      	adds	r3, r0, #1
 800391a:	d102      	bne.n	8003922 <_lseek_r+0x1e>
 800391c:	682b      	ldr	r3, [r5, #0]
 800391e:	b103      	cbz	r3, 8003922 <_lseek_r+0x1e>
 8003920:	6023      	str	r3, [r4, #0]
 8003922:	bd38      	pop	{r3, r4, r5, pc}
 8003924:	200002a4 	.word	0x200002a4

08003928 <_read_r>:
 8003928:	b538      	push	{r3, r4, r5, lr}
 800392a:	4d07      	ldr	r5, [pc, #28]	; (8003948 <_read_r+0x20>)
 800392c:	4604      	mov	r4, r0
 800392e:	4608      	mov	r0, r1
 8003930:	4611      	mov	r1, r2
 8003932:	2200      	movs	r2, #0
 8003934:	602a      	str	r2, [r5, #0]
 8003936:	461a      	mov	r2, r3
 8003938:	f7fd fa72 	bl	8000e20 <_read>
 800393c:	1c43      	adds	r3, r0, #1
 800393e:	d102      	bne.n	8003946 <_read_r+0x1e>
 8003940:	682b      	ldr	r3, [r5, #0]
 8003942:	b103      	cbz	r3, 8003946 <_read_r+0x1e>
 8003944:	6023      	str	r3, [r4, #0]
 8003946:	bd38      	pop	{r3, r4, r5, pc}
 8003948:	200002a4 	.word	0x200002a4

0800394c <_write_r>:
 800394c:	b538      	push	{r3, r4, r5, lr}
 800394e:	4d07      	ldr	r5, [pc, #28]	; (800396c <_write_r+0x20>)
 8003950:	4604      	mov	r4, r0
 8003952:	4608      	mov	r0, r1
 8003954:	4611      	mov	r1, r2
 8003956:	2200      	movs	r2, #0
 8003958:	602a      	str	r2, [r5, #0]
 800395a:	461a      	mov	r2, r3
 800395c:	f7fd fa7d 	bl	8000e5a <_write>
 8003960:	1c43      	adds	r3, r0, #1
 8003962:	d102      	bne.n	800396a <_write_r+0x1e>
 8003964:	682b      	ldr	r3, [r5, #0]
 8003966:	b103      	cbz	r3, 800396a <_write_r+0x1e>
 8003968:	6023      	str	r3, [r4, #0]
 800396a:	bd38      	pop	{r3, r4, r5, pc}
 800396c:	200002a4 	.word	0x200002a4

08003970 <__errno>:
 8003970:	4b01      	ldr	r3, [pc, #4]	; (8003978 <__errno+0x8>)
 8003972:	6818      	ldr	r0, [r3, #0]
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	20000064 	.word	0x20000064

0800397c <__libc_init_array>:
 800397c:	b570      	push	{r4, r5, r6, lr}
 800397e:	4d0d      	ldr	r5, [pc, #52]	; (80039b4 <__libc_init_array+0x38>)
 8003980:	4c0d      	ldr	r4, [pc, #52]	; (80039b8 <__libc_init_array+0x3c>)
 8003982:	1b64      	subs	r4, r4, r5
 8003984:	10a4      	asrs	r4, r4, #2
 8003986:	2600      	movs	r6, #0
 8003988:	42a6      	cmp	r6, r4
 800398a:	d109      	bne.n	80039a0 <__libc_init_array+0x24>
 800398c:	4d0b      	ldr	r5, [pc, #44]	; (80039bc <__libc_init_array+0x40>)
 800398e:	4c0c      	ldr	r4, [pc, #48]	; (80039c0 <__libc_init_array+0x44>)
 8003990:	f000 fd28 	bl	80043e4 <_init>
 8003994:	1b64      	subs	r4, r4, r5
 8003996:	10a4      	asrs	r4, r4, #2
 8003998:	2600      	movs	r6, #0
 800399a:	42a6      	cmp	r6, r4
 800399c:	d105      	bne.n	80039aa <__libc_init_array+0x2e>
 800399e:	bd70      	pop	{r4, r5, r6, pc}
 80039a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80039a4:	4798      	blx	r3
 80039a6:	3601      	adds	r6, #1
 80039a8:	e7ee      	b.n	8003988 <__libc_init_array+0xc>
 80039aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80039ae:	4798      	blx	r3
 80039b0:	3601      	adds	r6, #1
 80039b2:	e7f2      	b.n	800399a <__libc_init_array+0x1e>
 80039b4:	08004484 	.word	0x08004484
 80039b8:	08004484 	.word	0x08004484
 80039bc:	08004484 	.word	0x08004484
 80039c0:	08004488 	.word	0x08004488

080039c4 <__retarget_lock_acquire_recursive>:
 80039c4:	4770      	bx	lr

080039c6 <__retarget_lock_release_recursive>:
 80039c6:	4770      	bx	lr

080039c8 <_free_r>:
 80039c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80039ca:	2900      	cmp	r1, #0
 80039cc:	d044      	beq.n	8003a58 <_free_r+0x90>
 80039ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039d2:	9001      	str	r0, [sp, #4]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f1a1 0404 	sub.w	r4, r1, #4
 80039da:	bfb8      	it	lt
 80039dc:	18e4      	addlt	r4, r4, r3
 80039de:	f000 f8df 	bl	8003ba0 <__malloc_lock>
 80039e2:	4a1e      	ldr	r2, [pc, #120]	; (8003a5c <_free_r+0x94>)
 80039e4:	9801      	ldr	r0, [sp, #4]
 80039e6:	6813      	ldr	r3, [r2, #0]
 80039e8:	b933      	cbnz	r3, 80039f8 <_free_r+0x30>
 80039ea:	6063      	str	r3, [r4, #4]
 80039ec:	6014      	str	r4, [r2, #0]
 80039ee:	b003      	add	sp, #12
 80039f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80039f4:	f000 b8da 	b.w	8003bac <__malloc_unlock>
 80039f8:	42a3      	cmp	r3, r4
 80039fa:	d908      	bls.n	8003a0e <_free_r+0x46>
 80039fc:	6825      	ldr	r5, [r4, #0]
 80039fe:	1961      	adds	r1, r4, r5
 8003a00:	428b      	cmp	r3, r1
 8003a02:	bf01      	itttt	eq
 8003a04:	6819      	ldreq	r1, [r3, #0]
 8003a06:	685b      	ldreq	r3, [r3, #4]
 8003a08:	1949      	addeq	r1, r1, r5
 8003a0a:	6021      	streq	r1, [r4, #0]
 8003a0c:	e7ed      	b.n	80039ea <_free_r+0x22>
 8003a0e:	461a      	mov	r2, r3
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	b10b      	cbz	r3, 8003a18 <_free_r+0x50>
 8003a14:	42a3      	cmp	r3, r4
 8003a16:	d9fa      	bls.n	8003a0e <_free_r+0x46>
 8003a18:	6811      	ldr	r1, [r2, #0]
 8003a1a:	1855      	adds	r5, r2, r1
 8003a1c:	42a5      	cmp	r5, r4
 8003a1e:	d10b      	bne.n	8003a38 <_free_r+0x70>
 8003a20:	6824      	ldr	r4, [r4, #0]
 8003a22:	4421      	add	r1, r4
 8003a24:	1854      	adds	r4, r2, r1
 8003a26:	42a3      	cmp	r3, r4
 8003a28:	6011      	str	r1, [r2, #0]
 8003a2a:	d1e0      	bne.n	80039ee <_free_r+0x26>
 8003a2c:	681c      	ldr	r4, [r3, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	6053      	str	r3, [r2, #4]
 8003a32:	440c      	add	r4, r1
 8003a34:	6014      	str	r4, [r2, #0]
 8003a36:	e7da      	b.n	80039ee <_free_r+0x26>
 8003a38:	d902      	bls.n	8003a40 <_free_r+0x78>
 8003a3a:	230c      	movs	r3, #12
 8003a3c:	6003      	str	r3, [r0, #0]
 8003a3e:	e7d6      	b.n	80039ee <_free_r+0x26>
 8003a40:	6825      	ldr	r5, [r4, #0]
 8003a42:	1961      	adds	r1, r4, r5
 8003a44:	428b      	cmp	r3, r1
 8003a46:	bf04      	itt	eq
 8003a48:	6819      	ldreq	r1, [r3, #0]
 8003a4a:	685b      	ldreq	r3, [r3, #4]
 8003a4c:	6063      	str	r3, [r4, #4]
 8003a4e:	bf04      	itt	eq
 8003a50:	1949      	addeq	r1, r1, r5
 8003a52:	6021      	streq	r1, [r4, #0]
 8003a54:	6054      	str	r4, [r2, #4]
 8003a56:	e7ca      	b.n	80039ee <_free_r+0x26>
 8003a58:	b003      	add	sp, #12
 8003a5a:	bd30      	pop	{r4, r5, pc}
 8003a5c:	200002ac 	.word	0x200002ac

08003a60 <sbrk_aligned>:
 8003a60:	b570      	push	{r4, r5, r6, lr}
 8003a62:	4e0e      	ldr	r6, [pc, #56]	; (8003a9c <sbrk_aligned+0x3c>)
 8003a64:	460c      	mov	r4, r1
 8003a66:	6831      	ldr	r1, [r6, #0]
 8003a68:	4605      	mov	r5, r0
 8003a6a:	b911      	cbnz	r1, 8003a72 <sbrk_aligned+0x12>
 8003a6c:	f000 fcaa 	bl	80043c4 <_sbrk_r>
 8003a70:	6030      	str	r0, [r6, #0]
 8003a72:	4621      	mov	r1, r4
 8003a74:	4628      	mov	r0, r5
 8003a76:	f000 fca5 	bl	80043c4 <_sbrk_r>
 8003a7a:	1c43      	adds	r3, r0, #1
 8003a7c:	d00a      	beq.n	8003a94 <sbrk_aligned+0x34>
 8003a7e:	1cc4      	adds	r4, r0, #3
 8003a80:	f024 0403 	bic.w	r4, r4, #3
 8003a84:	42a0      	cmp	r0, r4
 8003a86:	d007      	beq.n	8003a98 <sbrk_aligned+0x38>
 8003a88:	1a21      	subs	r1, r4, r0
 8003a8a:	4628      	mov	r0, r5
 8003a8c:	f000 fc9a 	bl	80043c4 <_sbrk_r>
 8003a90:	3001      	adds	r0, #1
 8003a92:	d101      	bne.n	8003a98 <sbrk_aligned+0x38>
 8003a94:	f04f 34ff 	mov.w	r4, #4294967295
 8003a98:	4620      	mov	r0, r4
 8003a9a:	bd70      	pop	{r4, r5, r6, pc}
 8003a9c:	200002b0 	.word	0x200002b0

08003aa0 <_malloc_r>:
 8003aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003aa4:	1ccd      	adds	r5, r1, #3
 8003aa6:	f025 0503 	bic.w	r5, r5, #3
 8003aaa:	3508      	adds	r5, #8
 8003aac:	2d0c      	cmp	r5, #12
 8003aae:	bf38      	it	cc
 8003ab0:	250c      	movcc	r5, #12
 8003ab2:	2d00      	cmp	r5, #0
 8003ab4:	4607      	mov	r7, r0
 8003ab6:	db01      	blt.n	8003abc <_malloc_r+0x1c>
 8003ab8:	42a9      	cmp	r1, r5
 8003aba:	d905      	bls.n	8003ac8 <_malloc_r+0x28>
 8003abc:	230c      	movs	r3, #12
 8003abe:	603b      	str	r3, [r7, #0]
 8003ac0:	2600      	movs	r6, #0
 8003ac2:	4630      	mov	r0, r6
 8003ac4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ac8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003b9c <_malloc_r+0xfc>
 8003acc:	f000 f868 	bl	8003ba0 <__malloc_lock>
 8003ad0:	f8d8 3000 	ldr.w	r3, [r8]
 8003ad4:	461c      	mov	r4, r3
 8003ad6:	bb5c      	cbnz	r4, 8003b30 <_malloc_r+0x90>
 8003ad8:	4629      	mov	r1, r5
 8003ada:	4638      	mov	r0, r7
 8003adc:	f7ff ffc0 	bl	8003a60 <sbrk_aligned>
 8003ae0:	1c43      	adds	r3, r0, #1
 8003ae2:	4604      	mov	r4, r0
 8003ae4:	d155      	bne.n	8003b92 <_malloc_r+0xf2>
 8003ae6:	f8d8 4000 	ldr.w	r4, [r8]
 8003aea:	4626      	mov	r6, r4
 8003aec:	2e00      	cmp	r6, #0
 8003aee:	d145      	bne.n	8003b7c <_malloc_r+0xdc>
 8003af0:	2c00      	cmp	r4, #0
 8003af2:	d048      	beq.n	8003b86 <_malloc_r+0xe6>
 8003af4:	6823      	ldr	r3, [r4, #0]
 8003af6:	4631      	mov	r1, r6
 8003af8:	4638      	mov	r0, r7
 8003afa:	eb04 0903 	add.w	r9, r4, r3
 8003afe:	f000 fc61 	bl	80043c4 <_sbrk_r>
 8003b02:	4581      	cmp	r9, r0
 8003b04:	d13f      	bne.n	8003b86 <_malloc_r+0xe6>
 8003b06:	6821      	ldr	r1, [r4, #0]
 8003b08:	1a6d      	subs	r5, r5, r1
 8003b0a:	4629      	mov	r1, r5
 8003b0c:	4638      	mov	r0, r7
 8003b0e:	f7ff ffa7 	bl	8003a60 <sbrk_aligned>
 8003b12:	3001      	adds	r0, #1
 8003b14:	d037      	beq.n	8003b86 <_malloc_r+0xe6>
 8003b16:	6823      	ldr	r3, [r4, #0]
 8003b18:	442b      	add	r3, r5
 8003b1a:	6023      	str	r3, [r4, #0]
 8003b1c:	f8d8 3000 	ldr.w	r3, [r8]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d038      	beq.n	8003b96 <_malloc_r+0xf6>
 8003b24:	685a      	ldr	r2, [r3, #4]
 8003b26:	42a2      	cmp	r2, r4
 8003b28:	d12b      	bne.n	8003b82 <_malloc_r+0xe2>
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	605a      	str	r2, [r3, #4]
 8003b2e:	e00f      	b.n	8003b50 <_malloc_r+0xb0>
 8003b30:	6822      	ldr	r2, [r4, #0]
 8003b32:	1b52      	subs	r2, r2, r5
 8003b34:	d41f      	bmi.n	8003b76 <_malloc_r+0xd6>
 8003b36:	2a0b      	cmp	r2, #11
 8003b38:	d917      	bls.n	8003b6a <_malloc_r+0xca>
 8003b3a:	1961      	adds	r1, r4, r5
 8003b3c:	42a3      	cmp	r3, r4
 8003b3e:	6025      	str	r5, [r4, #0]
 8003b40:	bf18      	it	ne
 8003b42:	6059      	strne	r1, [r3, #4]
 8003b44:	6863      	ldr	r3, [r4, #4]
 8003b46:	bf08      	it	eq
 8003b48:	f8c8 1000 	streq.w	r1, [r8]
 8003b4c:	5162      	str	r2, [r4, r5]
 8003b4e:	604b      	str	r3, [r1, #4]
 8003b50:	4638      	mov	r0, r7
 8003b52:	f104 060b 	add.w	r6, r4, #11
 8003b56:	f000 f829 	bl	8003bac <__malloc_unlock>
 8003b5a:	f026 0607 	bic.w	r6, r6, #7
 8003b5e:	1d23      	adds	r3, r4, #4
 8003b60:	1af2      	subs	r2, r6, r3
 8003b62:	d0ae      	beq.n	8003ac2 <_malloc_r+0x22>
 8003b64:	1b9b      	subs	r3, r3, r6
 8003b66:	50a3      	str	r3, [r4, r2]
 8003b68:	e7ab      	b.n	8003ac2 <_malloc_r+0x22>
 8003b6a:	42a3      	cmp	r3, r4
 8003b6c:	6862      	ldr	r2, [r4, #4]
 8003b6e:	d1dd      	bne.n	8003b2c <_malloc_r+0x8c>
 8003b70:	f8c8 2000 	str.w	r2, [r8]
 8003b74:	e7ec      	b.n	8003b50 <_malloc_r+0xb0>
 8003b76:	4623      	mov	r3, r4
 8003b78:	6864      	ldr	r4, [r4, #4]
 8003b7a:	e7ac      	b.n	8003ad6 <_malloc_r+0x36>
 8003b7c:	4634      	mov	r4, r6
 8003b7e:	6876      	ldr	r6, [r6, #4]
 8003b80:	e7b4      	b.n	8003aec <_malloc_r+0x4c>
 8003b82:	4613      	mov	r3, r2
 8003b84:	e7cc      	b.n	8003b20 <_malloc_r+0x80>
 8003b86:	230c      	movs	r3, #12
 8003b88:	603b      	str	r3, [r7, #0]
 8003b8a:	4638      	mov	r0, r7
 8003b8c:	f000 f80e 	bl	8003bac <__malloc_unlock>
 8003b90:	e797      	b.n	8003ac2 <_malloc_r+0x22>
 8003b92:	6025      	str	r5, [r4, #0]
 8003b94:	e7dc      	b.n	8003b50 <_malloc_r+0xb0>
 8003b96:	605b      	str	r3, [r3, #4]
 8003b98:	deff      	udf	#255	; 0xff
 8003b9a:	bf00      	nop
 8003b9c:	200002ac 	.word	0x200002ac

08003ba0 <__malloc_lock>:
 8003ba0:	4801      	ldr	r0, [pc, #4]	; (8003ba8 <__malloc_lock+0x8>)
 8003ba2:	f7ff bf0f 	b.w	80039c4 <__retarget_lock_acquire_recursive>
 8003ba6:	bf00      	nop
 8003ba8:	200002a8 	.word	0x200002a8

08003bac <__malloc_unlock>:
 8003bac:	4801      	ldr	r0, [pc, #4]	; (8003bb4 <__malloc_unlock+0x8>)
 8003bae:	f7ff bf0a 	b.w	80039c6 <__retarget_lock_release_recursive>
 8003bb2:	bf00      	nop
 8003bb4:	200002a8 	.word	0x200002a8

08003bb8 <__sfputc_r>:
 8003bb8:	6893      	ldr	r3, [r2, #8]
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	b410      	push	{r4}
 8003bc0:	6093      	str	r3, [r2, #8]
 8003bc2:	da08      	bge.n	8003bd6 <__sfputc_r+0x1e>
 8003bc4:	6994      	ldr	r4, [r2, #24]
 8003bc6:	42a3      	cmp	r3, r4
 8003bc8:	db01      	blt.n	8003bce <__sfputc_r+0x16>
 8003bca:	290a      	cmp	r1, #10
 8003bcc:	d103      	bne.n	8003bd6 <__sfputc_r+0x1e>
 8003bce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003bd2:	f7ff bdea 	b.w	80037aa <__swbuf_r>
 8003bd6:	6813      	ldr	r3, [r2, #0]
 8003bd8:	1c58      	adds	r0, r3, #1
 8003bda:	6010      	str	r0, [r2, #0]
 8003bdc:	7019      	strb	r1, [r3, #0]
 8003bde:	4608      	mov	r0, r1
 8003be0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003be4:	4770      	bx	lr

08003be6 <__sfputs_r>:
 8003be6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003be8:	4606      	mov	r6, r0
 8003bea:	460f      	mov	r7, r1
 8003bec:	4614      	mov	r4, r2
 8003bee:	18d5      	adds	r5, r2, r3
 8003bf0:	42ac      	cmp	r4, r5
 8003bf2:	d101      	bne.n	8003bf8 <__sfputs_r+0x12>
 8003bf4:	2000      	movs	r0, #0
 8003bf6:	e007      	b.n	8003c08 <__sfputs_r+0x22>
 8003bf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bfc:	463a      	mov	r2, r7
 8003bfe:	4630      	mov	r0, r6
 8003c00:	f7ff ffda 	bl	8003bb8 <__sfputc_r>
 8003c04:	1c43      	adds	r3, r0, #1
 8003c06:	d1f3      	bne.n	8003bf0 <__sfputs_r+0xa>
 8003c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003c0c <_vfiprintf_r>:
 8003c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c10:	460d      	mov	r5, r1
 8003c12:	b09d      	sub	sp, #116	; 0x74
 8003c14:	4614      	mov	r4, r2
 8003c16:	4698      	mov	r8, r3
 8003c18:	4606      	mov	r6, r0
 8003c1a:	b118      	cbz	r0, 8003c24 <_vfiprintf_r+0x18>
 8003c1c:	6a03      	ldr	r3, [r0, #32]
 8003c1e:	b90b      	cbnz	r3, 8003c24 <_vfiprintf_r+0x18>
 8003c20:	f7ff fcdc 	bl	80035dc <__sinit>
 8003c24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c26:	07d9      	lsls	r1, r3, #31
 8003c28:	d405      	bmi.n	8003c36 <_vfiprintf_r+0x2a>
 8003c2a:	89ab      	ldrh	r3, [r5, #12]
 8003c2c:	059a      	lsls	r2, r3, #22
 8003c2e:	d402      	bmi.n	8003c36 <_vfiprintf_r+0x2a>
 8003c30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003c32:	f7ff fec7 	bl	80039c4 <__retarget_lock_acquire_recursive>
 8003c36:	89ab      	ldrh	r3, [r5, #12]
 8003c38:	071b      	lsls	r3, r3, #28
 8003c3a:	d501      	bpl.n	8003c40 <_vfiprintf_r+0x34>
 8003c3c:	692b      	ldr	r3, [r5, #16]
 8003c3e:	b99b      	cbnz	r3, 8003c68 <_vfiprintf_r+0x5c>
 8003c40:	4629      	mov	r1, r5
 8003c42:	4630      	mov	r0, r6
 8003c44:	f7ff fdee 	bl	8003824 <__swsetup_r>
 8003c48:	b170      	cbz	r0, 8003c68 <_vfiprintf_r+0x5c>
 8003c4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c4c:	07dc      	lsls	r4, r3, #31
 8003c4e:	d504      	bpl.n	8003c5a <_vfiprintf_r+0x4e>
 8003c50:	f04f 30ff 	mov.w	r0, #4294967295
 8003c54:	b01d      	add	sp, #116	; 0x74
 8003c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c5a:	89ab      	ldrh	r3, [r5, #12]
 8003c5c:	0598      	lsls	r0, r3, #22
 8003c5e:	d4f7      	bmi.n	8003c50 <_vfiprintf_r+0x44>
 8003c60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003c62:	f7ff feb0 	bl	80039c6 <__retarget_lock_release_recursive>
 8003c66:	e7f3      	b.n	8003c50 <_vfiprintf_r+0x44>
 8003c68:	2300      	movs	r3, #0
 8003c6a:	9309      	str	r3, [sp, #36]	; 0x24
 8003c6c:	2320      	movs	r3, #32
 8003c6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c72:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c76:	2330      	movs	r3, #48	; 0x30
 8003c78:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003e2c <_vfiprintf_r+0x220>
 8003c7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c80:	f04f 0901 	mov.w	r9, #1
 8003c84:	4623      	mov	r3, r4
 8003c86:	469a      	mov	sl, r3
 8003c88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c8c:	b10a      	cbz	r2, 8003c92 <_vfiprintf_r+0x86>
 8003c8e:	2a25      	cmp	r2, #37	; 0x25
 8003c90:	d1f9      	bne.n	8003c86 <_vfiprintf_r+0x7a>
 8003c92:	ebba 0b04 	subs.w	fp, sl, r4
 8003c96:	d00b      	beq.n	8003cb0 <_vfiprintf_r+0xa4>
 8003c98:	465b      	mov	r3, fp
 8003c9a:	4622      	mov	r2, r4
 8003c9c:	4629      	mov	r1, r5
 8003c9e:	4630      	mov	r0, r6
 8003ca0:	f7ff ffa1 	bl	8003be6 <__sfputs_r>
 8003ca4:	3001      	adds	r0, #1
 8003ca6:	f000 80a9 	beq.w	8003dfc <_vfiprintf_r+0x1f0>
 8003caa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003cac:	445a      	add	r2, fp
 8003cae:	9209      	str	r2, [sp, #36]	; 0x24
 8003cb0:	f89a 3000 	ldrb.w	r3, [sl]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f000 80a1 	beq.w	8003dfc <_vfiprintf_r+0x1f0>
 8003cba:	2300      	movs	r3, #0
 8003cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8003cc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003cc4:	f10a 0a01 	add.w	sl, sl, #1
 8003cc8:	9304      	str	r3, [sp, #16]
 8003cca:	9307      	str	r3, [sp, #28]
 8003ccc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003cd0:	931a      	str	r3, [sp, #104]	; 0x68
 8003cd2:	4654      	mov	r4, sl
 8003cd4:	2205      	movs	r2, #5
 8003cd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cda:	4854      	ldr	r0, [pc, #336]	; (8003e2c <_vfiprintf_r+0x220>)
 8003cdc:	f7fc fa98 	bl	8000210 <memchr>
 8003ce0:	9a04      	ldr	r2, [sp, #16]
 8003ce2:	b9d8      	cbnz	r0, 8003d1c <_vfiprintf_r+0x110>
 8003ce4:	06d1      	lsls	r1, r2, #27
 8003ce6:	bf44      	itt	mi
 8003ce8:	2320      	movmi	r3, #32
 8003cea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003cee:	0713      	lsls	r3, r2, #28
 8003cf0:	bf44      	itt	mi
 8003cf2:	232b      	movmi	r3, #43	; 0x2b
 8003cf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003cf8:	f89a 3000 	ldrb.w	r3, [sl]
 8003cfc:	2b2a      	cmp	r3, #42	; 0x2a
 8003cfe:	d015      	beq.n	8003d2c <_vfiprintf_r+0x120>
 8003d00:	9a07      	ldr	r2, [sp, #28]
 8003d02:	4654      	mov	r4, sl
 8003d04:	2000      	movs	r0, #0
 8003d06:	f04f 0c0a 	mov.w	ip, #10
 8003d0a:	4621      	mov	r1, r4
 8003d0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d10:	3b30      	subs	r3, #48	; 0x30
 8003d12:	2b09      	cmp	r3, #9
 8003d14:	d94d      	bls.n	8003db2 <_vfiprintf_r+0x1a6>
 8003d16:	b1b0      	cbz	r0, 8003d46 <_vfiprintf_r+0x13a>
 8003d18:	9207      	str	r2, [sp, #28]
 8003d1a:	e014      	b.n	8003d46 <_vfiprintf_r+0x13a>
 8003d1c:	eba0 0308 	sub.w	r3, r0, r8
 8003d20:	fa09 f303 	lsl.w	r3, r9, r3
 8003d24:	4313      	orrs	r3, r2
 8003d26:	9304      	str	r3, [sp, #16]
 8003d28:	46a2      	mov	sl, r4
 8003d2a:	e7d2      	b.n	8003cd2 <_vfiprintf_r+0xc6>
 8003d2c:	9b03      	ldr	r3, [sp, #12]
 8003d2e:	1d19      	adds	r1, r3, #4
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	9103      	str	r1, [sp, #12]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	bfbb      	ittet	lt
 8003d38:	425b      	neglt	r3, r3
 8003d3a:	f042 0202 	orrlt.w	r2, r2, #2
 8003d3e:	9307      	strge	r3, [sp, #28]
 8003d40:	9307      	strlt	r3, [sp, #28]
 8003d42:	bfb8      	it	lt
 8003d44:	9204      	strlt	r2, [sp, #16]
 8003d46:	7823      	ldrb	r3, [r4, #0]
 8003d48:	2b2e      	cmp	r3, #46	; 0x2e
 8003d4a:	d10c      	bne.n	8003d66 <_vfiprintf_r+0x15a>
 8003d4c:	7863      	ldrb	r3, [r4, #1]
 8003d4e:	2b2a      	cmp	r3, #42	; 0x2a
 8003d50:	d134      	bne.n	8003dbc <_vfiprintf_r+0x1b0>
 8003d52:	9b03      	ldr	r3, [sp, #12]
 8003d54:	1d1a      	adds	r2, r3, #4
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	9203      	str	r2, [sp, #12]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	bfb8      	it	lt
 8003d5e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003d62:	3402      	adds	r4, #2
 8003d64:	9305      	str	r3, [sp, #20]
 8003d66:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003e3c <_vfiprintf_r+0x230>
 8003d6a:	7821      	ldrb	r1, [r4, #0]
 8003d6c:	2203      	movs	r2, #3
 8003d6e:	4650      	mov	r0, sl
 8003d70:	f7fc fa4e 	bl	8000210 <memchr>
 8003d74:	b138      	cbz	r0, 8003d86 <_vfiprintf_r+0x17a>
 8003d76:	9b04      	ldr	r3, [sp, #16]
 8003d78:	eba0 000a 	sub.w	r0, r0, sl
 8003d7c:	2240      	movs	r2, #64	; 0x40
 8003d7e:	4082      	lsls	r2, r0
 8003d80:	4313      	orrs	r3, r2
 8003d82:	3401      	adds	r4, #1
 8003d84:	9304      	str	r3, [sp, #16]
 8003d86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d8a:	4829      	ldr	r0, [pc, #164]	; (8003e30 <_vfiprintf_r+0x224>)
 8003d8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d90:	2206      	movs	r2, #6
 8003d92:	f7fc fa3d 	bl	8000210 <memchr>
 8003d96:	2800      	cmp	r0, #0
 8003d98:	d03f      	beq.n	8003e1a <_vfiprintf_r+0x20e>
 8003d9a:	4b26      	ldr	r3, [pc, #152]	; (8003e34 <_vfiprintf_r+0x228>)
 8003d9c:	bb1b      	cbnz	r3, 8003de6 <_vfiprintf_r+0x1da>
 8003d9e:	9b03      	ldr	r3, [sp, #12]
 8003da0:	3307      	adds	r3, #7
 8003da2:	f023 0307 	bic.w	r3, r3, #7
 8003da6:	3308      	adds	r3, #8
 8003da8:	9303      	str	r3, [sp, #12]
 8003daa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dac:	443b      	add	r3, r7
 8003dae:	9309      	str	r3, [sp, #36]	; 0x24
 8003db0:	e768      	b.n	8003c84 <_vfiprintf_r+0x78>
 8003db2:	fb0c 3202 	mla	r2, ip, r2, r3
 8003db6:	460c      	mov	r4, r1
 8003db8:	2001      	movs	r0, #1
 8003dba:	e7a6      	b.n	8003d0a <_vfiprintf_r+0xfe>
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	3401      	adds	r4, #1
 8003dc0:	9305      	str	r3, [sp, #20]
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	f04f 0c0a 	mov.w	ip, #10
 8003dc8:	4620      	mov	r0, r4
 8003dca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003dce:	3a30      	subs	r2, #48	; 0x30
 8003dd0:	2a09      	cmp	r2, #9
 8003dd2:	d903      	bls.n	8003ddc <_vfiprintf_r+0x1d0>
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d0c6      	beq.n	8003d66 <_vfiprintf_r+0x15a>
 8003dd8:	9105      	str	r1, [sp, #20]
 8003dda:	e7c4      	b.n	8003d66 <_vfiprintf_r+0x15a>
 8003ddc:	fb0c 2101 	mla	r1, ip, r1, r2
 8003de0:	4604      	mov	r4, r0
 8003de2:	2301      	movs	r3, #1
 8003de4:	e7f0      	b.n	8003dc8 <_vfiprintf_r+0x1bc>
 8003de6:	ab03      	add	r3, sp, #12
 8003de8:	9300      	str	r3, [sp, #0]
 8003dea:	462a      	mov	r2, r5
 8003dec:	4b12      	ldr	r3, [pc, #72]	; (8003e38 <_vfiprintf_r+0x22c>)
 8003dee:	a904      	add	r1, sp, #16
 8003df0:	4630      	mov	r0, r6
 8003df2:	f3af 8000 	nop.w
 8003df6:	4607      	mov	r7, r0
 8003df8:	1c78      	adds	r0, r7, #1
 8003dfa:	d1d6      	bne.n	8003daa <_vfiprintf_r+0x19e>
 8003dfc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003dfe:	07d9      	lsls	r1, r3, #31
 8003e00:	d405      	bmi.n	8003e0e <_vfiprintf_r+0x202>
 8003e02:	89ab      	ldrh	r3, [r5, #12]
 8003e04:	059a      	lsls	r2, r3, #22
 8003e06:	d402      	bmi.n	8003e0e <_vfiprintf_r+0x202>
 8003e08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e0a:	f7ff fddc 	bl	80039c6 <__retarget_lock_release_recursive>
 8003e0e:	89ab      	ldrh	r3, [r5, #12]
 8003e10:	065b      	lsls	r3, r3, #25
 8003e12:	f53f af1d 	bmi.w	8003c50 <_vfiprintf_r+0x44>
 8003e16:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e18:	e71c      	b.n	8003c54 <_vfiprintf_r+0x48>
 8003e1a:	ab03      	add	r3, sp, #12
 8003e1c:	9300      	str	r3, [sp, #0]
 8003e1e:	462a      	mov	r2, r5
 8003e20:	4b05      	ldr	r3, [pc, #20]	; (8003e38 <_vfiprintf_r+0x22c>)
 8003e22:	a904      	add	r1, sp, #16
 8003e24:	4630      	mov	r0, r6
 8003e26:	f000 f879 	bl	8003f1c <_printf_i>
 8003e2a:	e7e4      	b.n	8003df6 <_vfiprintf_r+0x1ea>
 8003e2c:	08004448 	.word	0x08004448
 8003e30:	08004452 	.word	0x08004452
 8003e34:	00000000 	.word	0x00000000
 8003e38:	08003be7 	.word	0x08003be7
 8003e3c:	0800444e 	.word	0x0800444e

08003e40 <_printf_common>:
 8003e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e44:	4616      	mov	r6, r2
 8003e46:	4699      	mov	r9, r3
 8003e48:	688a      	ldr	r2, [r1, #8]
 8003e4a:	690b      	ldr	r3, [r1, #16]
 8003e4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e50:	4293      	cmp	r3, r2
 8003e52:	bfb8      	it	lt
 8003e54:	4613      	movlt	r3, r2
 8003e56:	6033      	str	r3, [r6, #0]
 8003e58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e5c:	4607      	mov	r7, r0
 8003e5e:	460c      	mov	r4, r1
 8003e60:	b10a      	cbz	r2, 8003e66 <_printf_common+0x26>
 8003e62:	3301      	adds	r3, #1
 8003e64:	6033      	str	r3, [r6, #0]
 8003e66:	6823      	ldr	r3, [r4, #0]
 8003e68:	0699      	lsls	r1, r3, #26
 8003e6a:	bf42      	ittt	mi
 8003e6c:	6833      	ldrmi	r3, [r6, #0]
 8003e6e:	3302      	addmi	r3, #2
 8003e70:	6033      	strmi	r3, [r6, #0]
 8003e72:	6825      	ldr	r5, [r4, #0]
 8003e74:	f015 0506 	ands.w	r5, r5, #6
 8003e78:	d106      	bne.n	8003e88 <_printf_common+0x48>
 8003e7a:	f104 0a19 	add.w	sl, r4, #25
 8003e7e:	68e3      	ldr	r3, [r4, #12]
 8003e80:	6832      	ldr	r2, [r6, #0]
 8003e82:	1a9b      	subs	r3, r3, r2
 8003e84:	42ab      	cmp	r3, r5
 8003e86:	dc26      	bgt.n	8003ed6 <_printf_common+0x96>
 8003e88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003e8c:	1e13      	subs	r3, r2, #0
 8003e8e:	6822      	ldr	r2, [r4, #0]
 8003e90:	bf18      	it	ne
 8003e92:	2301      	movne	r3, #1
 8003e94:	0692      	lsls	r2, r2, #26
 8003e96:	d42b      	bmi.n	8003ef0 <_printf_common+0xb0>
 8003e98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e9c:	4649      	mov	r1, r9
 8003e9e:	4638      	mov	r0, r7
 8003ea0:	47c0      	blx	r8
 8003ea2:	3001      	adds	r0, #1
 8003ea4:	d01e      	beq.n	8003ee4 <_printf_common+0xa4>
 8003ea6:	6823      	ldr	r3, [r4, #0]
 8003ea8:	6922      	ldr	r2, [r4, #16]
 8003eaa:	f003 0306 	and.w	r3, r3, #6
 8003eae:	2b04      	cmp	r3, #4
 8003eb0:	bf02      	ittt	eq
 8003eb2:	68e5      	ldreq	r5, [r4, #12]
 8003eb4:	6833      	ldreq	r3, [r6, #0]
 8003eb6:	1aed      	subeq	r5, r5, r3
 8003eb8:	68a3      	ldr	r3, [r4, #8]
 8003eba:	bf0c      	ite	eq
 8003ebc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ec0:	2500      	movne	r5, #0
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	bfc4      	itt	gt
 8003ec6:	1a9b      	subgt	r3, r3, r2
 8003ec8:	18ed      	addgt	r5, r5, r3
 8003eca:	2600      	movs	r6, #0
 8003ecc:	341a      	adds	r4, #26
 8003ece:	42b5      	cmp	r5, r6
 8003ed0:	d11a      	bne.n	8003f08 <_printf_common+0xc8>
 8003ed2:	2000      	movs	r0, #0
 8003ed4:	e008      	b.n	8003ee8 <_printf_common+0xa8>
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	4652      	mov	r2, sl
 8003eda:	4649      	mov	r1, r9
 8003edc:	4638      	mov	r0, r7
 8003ede:	47c0      	blx	r8
 8003ee0:	3001      	adds	r0, #1
 8003ee2:	d103      	bne.n	8003eec <_printf_common+0xac>
 8003ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003eec:	3501      	adds	r5, #1
 8003eee:	e7c6      	b.n	8003e7e <_printf_common+0x3e>
 8003ef0:	18e1      	adds	r1, r4, r3
 8003ef2:	1c5a      	adds	r2, r3, #1
 8003ef4:	2030      	movs	r0, #48	; 0x30
 8003ef6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003efa:	4422      	add	r2, r4
 8003efc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f04:	3302      	adds	r3, #2
 8003f06:	e7c7      	b.n	8003e98 <_printf_common+0x58>
 8003f08:	2301      	movs	r3, #1
 8003f0a:	4622      	mov	r2, r4
 8003f0c:	4649      	mov	r1, r9
 8003f0e:	4638      	mov	r0, r7
 8003f10:	47c0      	blx	r8
 8003f12:	3001      	adds	r0, #1
 8003f14:	d0e6      	beq.n	8003ee4 <_printf_common+0xa4>
 8003f16:	3601      	adds	r6, #1
 8003f18:	e7d9      	b.n	8003ece <_printf_common+0x8e>
	...

08003f1c <_printf_i>:
 8003f1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f20:	7e0f      	ldrb	r7, [r1, #24]
 8003f22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003f24:	2f78      	cmp	r7, #120	; 0x78
 8003f26:	4691      	mov	r9, r2
 8003f28:	4680      	mov	r8, r0
 8003f2a:	460c      	mov	r4, r1
 8003f2c:	469a      	mov	sl, r3
 8003f2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003f32:	d807      	bhi.n	8003f44 <_printf_i+0x28>
 8003f34:	2f62      	cmp	r7, #98	; 0x62
 8003f36:	d80a      	bhi.n	8003f4e <_printf_i+0x32>
 8003f38:	2f00      	cmp	r7, #0
 8003f3a:	f000 80d4 	beq.w	80040e6 <_printf_i+0x1ca>
 8003f3e:	2f58      	cmp	r7, #88	; 0x58
 8003f40:	f000 80c0 	beq.w	80040c4 <_printf_i+0x1a8>
 8003f44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003f4c:	e03a      	b.n	8003fc4 <_printf_i+0xa8>
 8003f4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003f52:	2b15      	cmp	r3, #21
 8003f54:	d8f6      	bhi.n	8003f44 <_printf_i+0x28>
 8003f56:	a101      	add	r1, pc, #4	; (adr r1, 8003f5c <_printf_i+0x40>)
 8003f58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f5c:	08003fb5 	.word	0x08003fb5
 8003f60:	08003fc9 	.word	0x08003fc9
 8003f64:	08003f45 	.word	0x08003f45
 8003f68:	08003f45 	.word	0x08003f45
 8003f6c:	08003f45 	.word	0x08003f45
 8003f70:	08003f45 	.word	0x08003f45
 8003f74:	08003fc9 	.word	0x08003fc9
 8003f78:	08003f45 	.word	0x08003f45
 8003f7c:	08003f45 	.word	0x08003f45
 8003f80:	08003f45 	.word	0x08003f45
 8003f84:	08003f45 	.word	0x08003f45
 8003f88:	080040cd 	.word	0x080040cd
 8003f8c:	08003ff5 	.word	0x08003ff5
 8003f90:	08004087 	.word	0x08004087
 8003f94:	08003f45 	.word	0x08003f45
 8003f98:	08003f45 	.word	0x08003f45
 8003f9c:	080040ef 	.word	0x080040ef
 8003fa0:	08003f45 	.word	0x08003f45
 8003fa4:	08003ff5 	.word	0x08003ff5
 8003fa8:	08003f45 	.word	0x08003f45
 8003fac:	08003f45 	.word	0x08003f45
 8003fb0:	0800408f 	.word	0x0800408f
 8003fb4:	682b      	ldr	r3, [r5, #0]
 8003fb6:	1d1a      	adds	r2, r3, #4
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	602a      	str	r2, [r5, #0]
 8003fbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e09f      	b.n	8004108 <_printf_i+0x1ec>
 8003fc8:	6820      	ldr	r0, [r4, #0]
 8003fca:	682b      	ldr	r3, [r5, #0]
 8003fcc:	0607      	lsls	r7, r0, #24
 8003fce:	f103 0104 	add.w	r1, r3, #4
 8003fd2:	6029      	str	r1, [r5, #0]
 8003fd4:	d501      	bpl.n	8003fda <_printf_i+0xbe>
 8003fd6:	681e      	ldr	r6, [r3, #0]
 8003fd8:	e003      	b.n	8003fe2 <_printf_i+0xc6>
 8003fda:	0646      	lsls	r6, r0, #25
 8003fdc:	d5fb      	bpl.n	8003fd6 <_printf_i+0xba>
 8003fde:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003fe2:	2e00      	cmp	r6, #0
 8003fe4:	da03      	bge.n	8003fee <_printf_i+0xd2>
 8003fe6:	232d      	movs	r3, #45	; 0x2d
 8003fe8:	4276      	negs	r6, r6
 8003fea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fee:	485a      	ldr	r0, [pc, #360]	; (8004158 <_printf_i+0x23c>)
 8003ff0:	230a      	movs	r3, #10
 8003ff2:	e012      	b.n	800401a <_printf_i+0xfe>
 8003ff4:	682b      	ldr	r3, [r5, #0]
 8003ff6:	6820      	ldr	r0, [r4, #0]
 8003ff8:	1d19      	adds	r1, r3, #4
 8003ffa:	6029      	str	r1, [r5, #0]
 8003ffc:	0605      	lsls	r5, r0, #24
 8003ffe:	d501      	bpl.n	8004004 <_printf_i+0xe8>
 8004000:	681e      	ldr	r6, [r3, #0]
 8004002:	e002      	b.n	800400a <_printf_i+0xee>
 8004004:	0641      	lsls	r1, r0, #25
 8004006:	d5fb      	bpl.n	8004000 <_printf_i+0xe4>
 8004008:	881e      	ldrh	r6, [r3, #0]
 800400a:	4853      	ldr	r0, [pc, #332]	; (8004158 <_printf_i+0x23c>)
 800400c:	2f6f      	cmp	r7, #111	; 0x6f
 800400e:	bf0c      	ite	eq
 8004010:	2308      	moveq	r3, #8
 8004012:	230a      	movne	r3, #10
 8004014:	2100      	movs	r1, #0
 8004016:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800401a:	6865      	ldr	r5, [r4, #4]
 800401c:	60a5      	str	r5, [r4, #8]
 800401e:	2d00      	cmp	r5, #0
 8004020:	bfa2      	ittt	ge
 8004022:	6821      	ldrge	r1, [r4, #0]
 8004024:	f021 0104 	bicge.w	r1, r1, #4
 8004028:	6021      	strge	r1, [r4, #0]
 800402a:	b90e      	cbnz	r6, 8004030 <_printf_i+0x114>
 800402c:	2d00      	cmp	r5, #0
 800402e:	d04b      	beq.n	80040c8 <_printf_i+0x1ac>
 8004030:	4615      	mov	r5, r2
 8004032:	fbb6 f1f3 	udiv	r1, r6, r3
 8004036:	fb03 6711 	mls	r7, r3, r1, r6
 800403a:	5dc7      	ldrb	r7, [r0, r7]
 800403c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004040:	4637      	mov	r7, r6
 8004042:	42bb      	cmp	r3, r7
 8004044:	460e      	mov	r6, r1
 8004046:	d9f4      	bls.n	8004032 <_printf_i+0x116>
 8004048:	2b08      	cmp	r3, #8
 800404a:	d10b      	bne.n	8004064 <_printf_i+0x148>
 800404c:	6823      	ldr	r3, [r4, #0]
 800404e:	07de      	lsls	r6, r3, #31
 8004050:	d508      	bpl.n	8004064 <_printf_i+0x148>
 8004052:	6923      	ldr	r3, [r4, #16]
 8004054:	6861      	ldr	r1, [r4, #4]
 8004056:	4299      	cmp	r1, r3
 8004058:	bfde      	ittt	le
 800405a:	2330      	movle	r3, #48	; 0x30
 800405c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004060:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004064:	1b52      	subs	r2, r2, r5
 8004066:	6122      	str	r2, [r4, #16]
 8004068:	f8cd a000 	str.w	sl, [sp]
 800406c:	464b      	mov	r3, r9
 800406e:	aa03      	add	r2, sp, #12
 8004070:	4621      	mov	r1, r4
 8004072:	4640      	mov	r0, r8
 8004074:	f7ff fee4 	bl	8003e40 <_printf_common>
 8004078:	3001      	adds	r0, #1
 800407a:	d14a      	bne.n	8004112 <_printf_i+0x1f6>
 800407c:	f04f 30ff 	mov.w	r0, #4294967295
 8004080:	b004      	add	sp, #16
 8004082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004086:	6823      	ldr	r3, [r4, #0]
 8004088:	f043 0320 	orr.w	r3, r3, #32
 800408c:	6023      	str	r3, [r4, #0]
 800408e:	4833      	ldr	r0, [pc, #204]	; (800415c <_printf_i+0x240>)
 8004090:	2778      	movs	r7, #120	; 0x78
 8004092:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004096:	6823      	ldr	r3, [r4, #0]
 8004098:	6829      	ldr	r1, [r5, #0]
 800409a:	061f      	lsls	r7, r3, #24
 800409c:	f851 6b04 	ldr.w	r6, [r1], #4
 80040a0:	d402      	bmi.n	80040a8 <_printf_i+0x18c>
 80040a2:	065f      	lsls	r7, r3, #25
 80040a4:	bf48      	it	mi
 80040a6:	b2b6      	uxthmi	r6, r6
 80040a8:	07df      	lsls	r7, r3, #31
 80040aa:	bf48      	it	mi
 80040ac:	f043 0320 	orrmi.w	r3, r3, #32
 80040b0:	6029      	str	r1, [r5, #0]
 80040b2:	bf48      	it	mi
 80040b4:	6023      	strmi	r3, [r4, #0]
 80040b6:	b91e      	cbnz	r6, 80040c0 <_printf_i+0x1a4>
 80040b8:	6823      	ldr	r3, [r4, #0]
 80040ba:	f023 0320 	bic.w	r3, r3, #32
 80040be:	6023      	str	r3, [r4, #0]
 80040c0:	2310      	movs	r3, #16
 80040c2:	e7a7      	b.n	8004014 <_printf_i+0xf8>
 80040c4:	4824      	ldr	r0, [pc, #144]	; (8004158 <_printf_i+0x23c>)
 80040c6:	e7e4      	b.n	8004092 <_printf_i+0x176>
 80040c8:	4615      	mov	r5, r2
 80040ca:	e7bd      	b.n	8004048 <_printf_i+0x12c>
 80040cc:	682b      	ldr	r3, [r5, #0]
 80040ce:	6826      	ldr	r6, [r4, #0]
 80040d0:	6961      	ldr	r1, [r4, #20]
 80040d2:	1d18      	adds	r0, r3, #4
 80040d4:	6028      	str	r0, [r5, #0]
 80040d6:	0635      	lsls	r5, r6, #24
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	d501      	bpl.n	80040e0 <_printf_i+0x1c4>
 80040dc:	6019      	str	r1, [r3, #0]
 80040de:	e002      	b.n	80040e6 <_printf_i+0x1ca>
 80040e0:	0670      	lsls	r0, r6, #25
 80040e2:	d5fb      	bpl.n	80040dc <_printf_i+0x1c0>
 80040e4:	8019      	strh	r1, [r3, #0]
 80040e6:	2300      	movs	r3, #0
 80040e8:	6123      	str	r3, [r4, #16]
 80040ea:	4615      	mov	r5, r2
 80040ec:	e7bc      	b.n	8004068 <_printf_i+0x14c>
 80040ee:	682b      	ldr	r3, [r5, #0]
 80040f0:	1d1a      	adds	r2, r3, #4
 80040f2:	602a      	str	r2, [r5, #0]
 80040f4:	681d      	ldr	r5, [r3, #0]
 80040f6:	6862      	ldr	r2, [r4, #4]
 80040f8:	2100      	movs	r1, #0
 80040fa:	4628      	mov	r0, r5
 80040fc:	f7fc f888 	bl	8000210 <memchr>
 8004100:	b108      	cbz	r0, 8004106 <_printf_i+0x1ea>
 8004102:	1b40      	subs	r0, r0, r5
 8004104:	6060      	str	r0, [r4, #4]
 8004106:	6863      	ldr	r3, [r4, #4]
 8004108:	6123      	str	r3, [r4, #16]
 800410a:	2300      	movs	r3, #0
 800410c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004110:	e7aa      	b.n	8004068 <_printf_i+0x14c>
 8004112:	6923      	ldr	r3, [r4, #16]
 8004114:	462a      	mov	r2, r5
 8004116:	4649      	mov	r1, r9
 8004118:	4640      	mov	r0, r8
 800411a:	47d0      	blx	sl
 800411c:	3001      	adds	r0, #1
 800411e:	d0ad      	beq.n	800407c <_printf_i+0x160>
 8004120:	6823      	ldr	r3, [r4, #0]
 8004122:	079b      	lsls	r3, r3, #30
 8004124:	d413      	bmi.n	800414e <_printf_i+0x232>
 8004126:	68e0      	ldr	r0, [r4, #12]
 8004128:	9b03      	ldr	r3, [sp, #12]
 800412a:	4298      	cmp	r0, r3
 800412c:	bfb8      	it	lt
 800412e:	4618      	movlt	r0, r3
 8004130:	e7a6      	b.n	8004080 <_printf_i+0x164>
 8004132:	2301      	movs	r3, #1
 8004134:	4632      	mov	r2, r6
 8004136:	4649      	mov	r1, r9
 8004138:	4640      	mov	r0, r8
 800413a:	47d0      	blx	sl
 800413c:	3001      	adds	r0, #1
 800413e:	d09d      	beq.n	800407c <_printf_i+0x160>
 8004140:	3501      	adds	r5, #1
 8004142:	68e3      	ldr	r3, [r4, #12]
 8004144:	9903      	ldr	r1, [sp, #12]
 8004146:	1a5b      	subs	r3, r3, r1
 8004148:	42ab      	cmp	r3, r5
 800414a:	dcf2      	bgt.n	8004132 <_printf_i+0x216>
 800414c:	e7eb      	b.n	8004126 <_printf_i+0x20a>
 800414e:	2500      	movs	r5, #0
 8004150:	f104 0619 	add.w	r6, r4, #25
 8004154:	e7f5      	b.n	8004142 <_printf_i+0x226>
 8004156:	bf00      	nop
 8004158:	08004459 	.word	0x08004459
 800415c:	0800446a 	.word	0x0800446a

08004160 <__sflush_r>:
 8004160:	898a      	ldrh	r2, [r1, #12]
 8004162:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004166:	4605      	mov	r5, r0
 8004168:	0710      	lsls	r0, r2, #28
 800416a:	460c      	mov	r4, r1
 800416c:	d458      	bmi.n	8004220 <__sflush_r+0xc0>
 800416e:	684b      	ldr	r3, [r1, #4]
 8004170:	2b00      	cmp	r3, #0
 8004172:	dc05      	bgt.n	8004180 <__sflush_r+0x20>
 8004174:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004176:	2b00      	cmp	r3, #0
 8004178:	dc02      	bgt.n	8004180 <__sflush_r+0x20>
 800417a:	2000      	movs	r0, #0
 800417c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004180:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004182:	2e00      	cmp	r6, #0
 8004184:	d0f9      	beq.n	800417a <__sflush_r+0x1a>
 8004186:	2300      	movs	r3, #0
 8004188:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800418c:	682f      	ldr	r7, [r5, #0]
 800418e:	6a21      	ldr	r1, [r4, #32]
 8004190:	602b      	str	r3, [r5, #0]
 8004192:	d032      	beq.n	80041fa <__sflush_r+0x9a>
 8004194:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004196:	89a3      	ldrh	r3, [r4, #12]
 8004198:	075a      	lsls	r2, r3, #29
 800419a:	d505      	bpl.n	80041a8 <__sflush_r+0x48>
 800419c:	6863      	ldr	r3, [r4, #4]
 800419e:	1ac0      	subs	r0, r0, r3
 80041a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80041a2:	b10b      	cbz	r3, 80041a8 <__sflush_r+0x48>
 80041a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80041a6:	1ac0      	subs	r0, r0, r3
 80041a8:	2300      	movs	r3, #0
 80041aa:	4602      	mov	r2, r0
 80041ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80041ae:	6a21      	ldr	r1, [r4, #32]
 80041b0:	4628      	mov	r0, r5
 80041b2:	47b0      	blx	r6
 80041b4:	1c43      	adds	r3, r0, #1
 80041b6:	89a3      	ldrh	r3, [r4, #12]
 80041b8:	d106      	bne.n	80041c8 <__sflush_r+0x68>
 80041ba:	6829      	ldr	r1, [r5, #0]
 80041bc:	291d      	cmp	r1, #29
 80041be:	d82b      	bhi.n	8004218 <__sflush_r+0xb8>
 80041c0:	4a29      	ldr	r2, [pc, #164]	; (8004268 <__sflush_r+0x108>)
 80041c2:	410a      	asrs	r2, r1
 80041c4:	07d6      	lsls	r6, r2, #31
 80041c6:	d427      	bmi.n	8004218 <__sflush_r+0xb8>
 80041c8:	2200      	movs	r2, #0
 80041ca:	6062      	str	r2, [r4, #4]
 80041cc:	04d9      	lsls	r1, r3, #19
 80041ce:	6922      	ldr	r2, [r4, #16]
 80041d0:	6022      	str	r2, [r4, #0]
 80041d2:	d504      	bpl.n	80041de <__sflush_r+0x7e>
 80041d4:	1c42      	adds	r2, r0, #1
 80041d6:	d101      	bne.n	80041dc <__sflush_r+0x7c>
 80041d8:	682b      	ldr	r3, [r5, #0]
 80041da:	b903      	cbnz	r3, 80041de <__sflush_r+0x7e>
 80041dc:	6560      	str	r0, [r4, #84]	; 0x54
 80041de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80041e0:	602f      	str	r7, [r5, #0]
 80041e2:	2900      	cmp	r1, #0
 80041e4:	d0c9      	beq.n	800417a <__sflush_r+0x1a>
 80041e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80041ea:	4299      	cmp	r1, r3
 80041ec:	d002      	beq.n	80041f4 <__sflush_r+0x94>
 80041ee:	4628      	mov	r0, r5
 80041f0:	f7ff fbea 	bl	80039c8 <_free_r>
 80041f4:	2000      	movs	r0, #0
 80041f6:	6360      	str	r0, [r4, #52]	; 0x34
 80041f8:	e7c0      	b.n	800417c <__sflush_r+0x1c>
 80041fa:	2301      	movs	r3, #1
 80041fc:	4628      	mov	r0, r5
 80041fe:	47b0      	blx	r6
 8004200:	1c41      	adds	r1, r0, #1
 8004202:	d1c8      	bne.n	8004196 <__sflush_r+0x36>
 8004204:	682b      	ldr	r3, [r5, #0]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d0c5      	beq.n	8004196 <__sflush_r+0x36>
 800420a:	2b1d      	cmp	r3, #29
 800420c:	d001      	beq.n	8004212 <__sflush_r+0xb2>
 800420e:	2b16      	cmp	r3, #22
 8004210:	d101      	bne.n	8004216 <__sflush_r+0xb6>
 8004212:	602f      	str	r7, [r5, #0]
 8004214:	e7b1      	b.n	800417a <__sflush_r+0x1a>
 8004216:	89a3      	ldrh	r3, [r4, #12]
 8004218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800421c:	81a3      	strh	r3, [r4, #12]
 800421e:	e7ad      	b.n	800417c <__sflush_r+0x1c>
 8004220:	690f      	ldr	r7, [r1, #16]
 8004222:	2f00      	cmp	r7, #0
 8004224:	d0a9      	beq.n	800417a <__sflush_r+0x1a>
 8004226:	0793      	lsls	r3, r2, #30
 8004228:	680e      	ldr	r6, [r1, #0]
 800422a:	bf08      	it	eq
 800422c:	694b      	ldreq	r3, [r1, #20]
 800422e:	600f      	str	r7, [r1, #0]
 8004230:	bf18      	it	ne
 8004232:	2300      	movne	r3, #0
 8004234:	eba6 0807 	sub.w	r8, r6, r7
 8004238:	608b      	str	r3, [r1, #8]
 800423a:	f1b8 0f00 	cmp.w	r8, #0
 800423e:	dd9c      	ble.n	800417a <__sflush_r+0x1a>
 8004240:	6a21      	ldr	r1, [r4, #32]
 8004242:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004244:	4643      	mov	r3, r8
 8004246:	463a      	mov	r2, r7
 8004248:	4628      	mov	r0, r5
 800424a:	47b0      	blx	r6
 800424c:	2800      	cmp	r0, #0
 800424e:	dc06      	bgt.n	800425e <__sflush_r+0xfe>
 8004250:	89a3      	ldrh	r3, [r4, #12]
 8004252:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004256:	81a3      	strh	r3, [r4, #12]
 8004258:	f04f 30ff 	mov.w	r0, #4294967295
 800425c:	e78e      	b.n	800417c <__sflush_r+0x1c>
 800425e:	4407      	add	r7, r0
 8004260:	eba8 0800 	sub.w	r8, r8, r0
 8004264:	e7e9      	b.n	800423a <__sflush_r+0xda>
 8004266:	bf00      	nop
 8004268:	dfbffffe 	.word	0xdfbffffe

0800426c <_fflush_r>:
 800426c:	b538      	push	{r3, r4, r5, lr}
 800426e:	690b      	ldr	r3, [r1, #16]
 8004270:	4605      	mov	r5, r0
 8004272:	460c      	mov	r4, r1
 8004274:	b913      	cbnz	r3, 800427c <_fflush_r+0x10>
 8004276:	2500      	movs	r5, #0
 8004278:	4628      	mov	r0, r5
 800427a:	bd38      	pop	{r3, r4, r5, pc}
 800427c:	b118      	cbz	r0, 8004286 <_fflush_r+0x1a>
 800427e:	6a03      	ldr	r3, [r0, #32]
 8004280:	b90b      	cbnz	r3, 8004286 <_fflush_r+0x1a>
 8004282:	f7ff f9ab 	bl	80035dc <__sinit>
 8004286:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d0f3      	beq.n	8004276 <_fflush_r+0xa>
 800428e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004290:	07d0      	lsls	r0, r2, #31
 8004292:	d404      	bmi.n	800429e <_fflush_r+0x32>
 8004294:	0599      	lsls	r1, r3, #22
 8004296:	d402      	bmi.n	800429e <_fflush_r+0x32>
 8004298:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800429a:	f7ff fb93 	bl	80039c4 <__retarget_lock_acquire_recursive>
 800429e:	4628      	mov	r0, r5
 80042a0:	4621      	mov	r1, r4
 80042a2:	f7ff ff5d 	bl	8004160 <__sflush_r>
 80042a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80042a8:	07da      	lsls	r2, r3, #31
 80042aa:	4605      	mov	r5, r0
 80042ac:	d4e4      	bmi.n	8004278 <_fflush_r+0xc>
 80042ae:	89a3      	ldrh	r3, [r4, #12]
 80042b0:	059b      	lsls	r3, r3, #22
 80042b2:	d4e1      	bmi.n	8004278 <_fflush_r+0xc>
 80042b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042b6:	f7ff fb86 	bl	80039c6 <__retarget_lock_release_recursive>
 80042ba:	e7dd      	b.n	8004278 <_fflush_r+0xc>

080042bc <__swhatbuf_r>:
 80042bc:	b570      	push	{r4, r5, r6, lr}
 80042be:	460c      	mov	r4, r1
 80042c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042c4:	2900      	cmp	r1, #0
 80042c6:	b096      	sub	sp, #88	; 0x58
 80042c8:	4615      	mov	r5, r2
 80042ca:	461e      	mov	r6, r3
 80042cc:	da0d      	bge.n	80042ea <__swhatbuf_r+0x2e>
 80042ce:	89a3      	ldrh	r3, [r4, #12]
 80042d0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80042d4:	f04f 0100 	mov.w	r1, #0
 80042d8:	bf0c      	ite	eq
 80042da:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80042de:	2340      	movne	r3, #64	; 0x40
 80042e0:	2000      	movs	r0, #0
 80042e2:	6031      	str	r1, [r6, #0]
 80042e4:	602b      	str	r3, [r5, #0]
 80042e6:	b016      	add	sp, #88	; 0x58
 80042e8:	bd70      	pop	{r4, r5, r6, pc}
 80042ea:	466a      	mov	r2, sp
 80042ec:	f000 f848 	bl	8004380 <_fstat_r>
 80042f0:	2800      	cmp	r0, #0
 80042f2:	dbec      	blt.n	80042ce <__swhatbuf_r+0x12>
 80042f4:	9901      	ldr	r1, [sp, #4]
 80042f6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80042fa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80042fe:	4259      	negs	r1, r3
 8004300:	4159      	adcs	r1, r3
 8004302:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004306:	e7eb      	b.n	80042e0 <__swhatbuf_r+0x24>

08004308 <__smakebuf_r>:
 8004308:	898b      	ldrh	r3, [r1, #12]
 800430a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800430c:	079d      	lsls	r5, r3, #30
 800430e:	4606      	mov	r6, r0
 8004310:	460c      	mov	r4, r1
 8004312:	d507      	bpl.n	8004324 <__smakebuf_r+0x1c>
 8004314:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004318:	6023      	str	r3, [r4, #0]
 800431a:	6123      	str	r3, [r4, #16]
 800431c:	2301      	movs	r3, #1
 800431e:	6163      	str	r3, [r4, #20]
 8004320:	b002      	add	sp, #8
 8004322:	bd70      	pop	{r4, r5, r6, pc}
 8004324:	ab01      	add	r3, sp, #4
 8004326:	466a      	mov	r2, sp
 8004328:	f7ff ffc8 	bl	80042bc <__swhatbuf_r>
 800432c:	9900      	ldr	r1, [sp, #0]
 800432e:	4605      	mov	r5, r0
 8004330:	4630      	mov	r0, r6
 8004332:	f7ff fbb5 	bl	8003aa0 <_malloc_r>
 8004336:	b948      	cbnz	r0, 800434c <__smakebuf_r+0x44>
 8004338:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800433c:	059a      	lsls	r2, r3, #22
 800433e:	d4ef      	bmi.n	8004320 <__smakebuf_r+0x18>
 8004340:	f023 0303 	bic.w	r3, r3, #3
 8004344:	f043 0302 	orr.w	r3, r3, #2
 8004348:	81a3      	strh	r3, [r4, #12]
 800434a:	e7e3      	b.n	8004314 <__smakebuf_r+0xc>
 800434c:	89a3      	ldrh	r3, [r4, #12]
 800434e:	6020      	str	r0, [r4, #0]
 8004350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004354:	81a3      	strh	r3, [r4, #12]
 8004356:	9b00      	ldr	r3, [sp, #0]
 8004358:	6163      	str	r3, [r4, #20]
 800435a:	9b01      	ldr	r3, [sp, #4]
 800435c:	6120      	str	r0, [r4, #16]
 800435e:	b15b      	cbz	r3, 8004378 <__smakebuf_r+0x70>
 8004360:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004364:	4630      	mov	r0, r6
 8004366:	f000 f81d 	bl	80043a4 <_isatty_r>
 800436a:	b128      	cbz	r0, 8004378 <__smakebuf_r+0x70>
 800436c:	89a3      	ldrh	r3, [r4, #12]
 800436e:	f023 0303 	bic.w	r3, r3, #3
 8004372:	f043 0301 	orr.w	r3, r3, #1
 8004376:	81a3      	strh	r3, [r4, #12]
 8004378:	89a3      	ldrh	r3, [r4, #12]
 800437a:	431d      	orrs	r5, r3
 800437c:	81a5      	strh	r5, [r4, #12]
 800437e:	e7cf      	b.n	8004320 <__smakebuf_r+0x18>

08004380 <_fstat_r>:
 8004380:	b538      	push	{r3, r4, r5, lr}
 8004382:	4d07      	ldr	r5, [pc, #28]	; (80043a0 <_fstat_r+0x20>)
 8004384:	2300      	movs	r3, #0
 8004386:	4604      	mov	r4, r0
 8004388:	4608      	mov	r0, r1
 800438a:	4611      	mov	r1, r2
 800438c:	602b      	str	r3, [r5, #0]
 800438e:	f7fc fd8c 	bl	8000eaa <_fstat>
 8004392:	1c43      	adds	r3, r0, #1
 8004394:	d102      	bne.n	800439c <_fstat_r+0x1c>
 8004396:	682b      	ldr	r3, [r5, #0]
 8004398:	b103      	cbz	r3, 800439c <_fstat_r+0x1c>
 800439a:	6023      	str	r3, [r4, #0]
 800439c:	bd38      	pop	{r3, r4, r5, pc}
 800439e:	bf00      	nop
 80043a0:	200002a4 	.word	0x200002a4

080043a4 <_isatty_r>:
 80043a4:	b538      	push	{r3, r4, r5, lr}
 80043a6:	4d06      	ldr	r5, [pc, #24]	; (80043c0 <_isatty_r+0x1c>)
 80043a8:	2300      	movs	r3, #0
 80043aa:	4604      	mov	r4, r0
 80043ac:	4608      	mov	r0, r1
 80043ae:	602b      	str	r3, [r5, #0]
 80043b0:	f7fc fd8b 	bl	8000eca <_isatty>
 80043b4:	1c43      	adds	r3, r0, #1
 80043b6:	d102      	bne.n	80043be <_isatty_r+0x1a>
 80043b8:	682b      	ldr	r3, [r5, #0]
 80043ba:	b103      	cbz	r3, 80043be <_isatty_r+0x1a>
 80043bc:	6023      	str	r3, [r4, #0]
 80043be:	bd38      	pop	{r3, r4, r5, pc}
 80043c0:	200002a4 	.word	0x200002a4

080043c4 <_sbrk_r>:
 80043c4:	b538      	push	{r3, r4, r5, lr}
 80043c6:	4d06      	ldr	r5, [pc, #24]	; (80043e0 <_sbrk_r+0x1c>)
 80043c8:	2300      	movs	r3, #0
 80043ca:	4604      	mov	r4, r0
 80043cc:	4608      	mov	r0, r1
 80043ce:	602b      	str	r3, [r5, #0]
 80043d0:	f7fc fd94 	bl	8000efc <_sbrk>
 80043d4:	1c43      	adds	r3, r0, #1
 80043d6:	d102      	bne.n	80043de <_sbrk_r+0x1a>
 80043d8:	682b      	ldr	r3, [r5, #0]
 80043da:	b103      	cbz	r3, 80043de <_sbrk_r+0x1a>
 80043dc:	6023      	str	r3, [r4, #0]
 80043de:	bd38      	pop	{r3, r4, r5, pc}
 80043e0:	200002a4 	.word	0x200002a4

080043e4 <_init>:
 80043e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043e6:	bf00      	nop
 80043e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ea:	bc08      	pop	{r3}
 80043ec:	469e      	mov	lr, r3
 80043ee:	4770      	bx	lr

080043f0 <_fini>:
 80043f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043f2:	bf00      	nop
 80043f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043f6:	bc08      	pop	{r3}
 80043f8:	469e      	mov	lr, r3
 80043fa:	4770      	bx	lr
